
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aecc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b508  0800b508  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b510  0800b510  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b510  0800b510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b514  0800b514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800b518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004530  200000f0  0800b608  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20004620  0800b608  00024620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199b5  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003761  00000000  00000000  00039ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001844f  00000000  00000000  0003f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191fb  00000000  00000000  00057c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d13  00000000  00000000  00070e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fab5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  000fabb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000f0 	.word	0x200000f0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800aff0 	.word	0x0800aff0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000f4 	.word	0x200000f4
 8000178:	0800aff0 	.word	0x0800aff0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <SELECT+0x18>)
 800047e:	f002 fc92 	bl	8002da6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000482:	2001      	movs	r0, #1
 8000484:	f001 fce2 	bl	8001e4c <HAL_Delay>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020400 	.word	0x40020400

08000490 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <DESELECT+0x18>)
 800049a:	f002 fc84 	bl	8002da6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 fcd4 	bl	8001e4c <HAL_Delay>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40020400 	.word	0x40020400

080004ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b6:	bf00      	nop
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SPI_TxByte+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d1f8      	bne.n	80004b8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SPI_TxByte+0x30>)
 80004ce:	f005 fd74 	bl	8005fba <HAL_SPI_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000034c 	.word	0x2000034c

080004e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004ec:	bf00      	nop
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SPI_TxBuffer+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d1f8      	bne.n	80004ee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <SPI_TxBuffer+0x30>)
 8000504:	f005 fd59 	bl	8005fba <HAL_SPI_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000034c 	.word	0x2000034c

08000514 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SPI_RxByte+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052e:	1dba      	adds	r2, r7, #6
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_RxByte+0x34>)
 800053a:	f005 fe7a 	bl	8006232 <HAL_SPI_TransmitReceive>

	return data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000034c 	.word	0x2000034c

0800054c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000554:	f7ff ffde 	bl	8000514 <SPI_RxByte>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SD_ReadyWait+0x30>)
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000576:	f7ff ffcd 	bl	8000514 <SPI_RxByte>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d003      	beq.n	800058c <SD_ReadyWait+0x24>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SD_ReadyWait+0x30>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <SD_ReadyWait+0xe>

	return res;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000344 	.word	0x20000344

0800059c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a8:	f7ff ff72 	bl	8000490 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	f7ff ff7a 	bl	80004ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf6      	ble.n	80005b2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c4:	f7ff ff56 	bl	8000474 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005dc:	2395      	movs	r3, #149	; 0x95
 80005de:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005e0:	463b      	mov	r3, r7
 80005e2:	2106      	movs	r1, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff7b 	bl	80004e0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ea:	e002      	b.n	80005f2 <SD_PowerOn+0x56>
	{
		cnt--;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005f2:	f7ff ff8f 	bl	8000514 <SPI_RxByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d002      	beq.n	8000602 <SD_PowerOn+0x66>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f4      	bne.n	80005ec <SD_PowerOn+0x50>
	}

	DESELECT();
 8000602:	f7ff ff45 	bl	8000490 <DESELECT>
	SPI_TxByte(0XFF);
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	f7ff ff50 	bl	80004ac <SPI_TxByte>

	PowerFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <SD_PowerOn+0x80>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000010d 	.word	0x2000010d

08000620 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SD_PowerOff+0x14>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000010d 	.word	0x2000010d

08000638 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SD_CheckPower+0x10>)
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	2000010d 	.word	0x2000010d

0800064c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SD_RxDataBlock+0x58>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800065c:	f7ff ff5a 	bl	8000514 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d103      	bne.n	8000672 <SD_RxDataBlock+0x26>
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SD_RxDataBlock+0x58>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f4      	bne.n	800065c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	d001      	beq.n	800067c <SD_RxDataBlock+0x30>
 8000678:	2300      	movs	r3, #0
 800067a:	e00f      	b.n	800069c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff62 	bl	800054c <SPI_RxBytePtr>
	} while(len--);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000692:	f7ff ff3f 	bl	8000514 <SPI_RxByte>
	SPI_RxByte();
 8000696:	f7ff ff3d 	bl	8000514 <SPI_RxByte>

	return TRUE;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000346 	.word	0x20000346

080006a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b8:	f7ff ff56 	bl	8000568 <SD_ReadyWait>
 80006bc:	4603      	mov	r3, r0
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d001      	beq.n	80006c6 <SD_TxDataBlock+0x1e>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02f      	b.n	8000726 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff feef 	bl	80004ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2bfd      	cmp	r3, #253	; 0xfd
 80006d2:	d020      	beq.n	8000716 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff01 	bl	80004e0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006de:	f7ff ff19 	bl	8000514 <SPI_RxByte>
		SPI_RxByte();
 80006e2:	f7ff ff17 	bl	8000514 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e6:	e00b      	b.n	8000700 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e8:	f7ff ff14 	bl	8000514 <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d006      	beq.n	8000708 <SD_TxDataBlock+0x60>
			i++;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d9f0      	bls.n	80006e8 <SD_TxDataBlock+0x40>
 8000706:	e000      	b.n	800070a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000708:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800070a:	bf00      	nop
 800070c:	f7ff ff02 	bl	8000514 <SPI_RxByte>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0fa      	beq.n	800070c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	2b05      	cmp	r3, #5
 800071e:	d101      	bne.n	8000724 <SD_TxDataBlock+0x7c>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	6039      	str	r1, [r7, #0]
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800073a:	f7ff ff15 	bl	8000568 <SD_ReadyWait>
 800073e:	4603      	mov	r3, r0
 8000740:	2bff      	cmp	r3, #255	; 0xff
 8000742:	d001      	beq.n	8000748 <SD_SendCmd+0x1a>
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	e042      	b.n	80007ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feae 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0e1b      	lsrs	r3, r3, #24
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea8 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fea2 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe9c 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe97 	bl	80004ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x5c>
 8000784:	2395      	movs	r3, #149	; 0x95
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e007      	b.n	800079a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b48      	cmp	r3, #72	; 0x48
 800078e:	d102      	bne.n	8000796 <SD_SendCmd+0x68>
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <SD_SendCmd+0x6c>
	else crc = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe85 	bl	80004ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b4c      	cmp	r3, #76	; 0x4c
 80007a6:	d101      	bne.n	80007ac <SD_SendCmd+0x7e>
 80007a8:	f7ff feb4 	bl	8000514 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007b0:	f7ff feb0 	bl	8000514 <SPI_RxByte>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da05      	bge.n	80007cc <SD_SendCmd+0x9e>
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <SD_SendCmd+0x82>

	return res;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SD_disk_initialize+0x14>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e0d1      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <SD_disk_initialize+0x2a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e0c6      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000802:	f7ff fecb 	bl	800059c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000806:	f7ff fe35 	bl	8000474 <SELECT>

	/* check disk type */
	type = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080e:	2100      	movs	r1, #0
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f7ff ff8c 	bl	800072e <SD_SendCmd>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 80a1 	bne.w	8000960 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <SD_disk_initialize+0x1c4>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800082a:	2048      	movs	r0, #72	; 0x48
 800082c:	f7ff ff7f 	bl	800072e <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d155      	bne.n	80008e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e00c      	b.n	8000856 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800083c:	7bfc      	ldrb	r4, [r7, #15]
 800083e:	f7ff fe69 	bl	8000514 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4423      	add	r3, r4
 800084c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9ef      	bls.n	800083c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d17e      	bne.n	8000960 <SD_disk_initialize+0x188>
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2baa      	cmp	r3, #170	; 0xaa
 8000866:	d17b      	bne.n	8000960 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000868:	2100      	movs	r1, #0
 800086a:	2077      	movs	r0, #119	; 0x77
 800086c:	f7ff ff5f 	bl	800072e <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d807      	bhi.n	8000886 <SD_disk_initialize+0xae>
 8000876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800087a:	2069      	movs	r0, #105	; 0x69
 800087c:	f7ff ff57 	bl	800072e <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ec      	bne.n	8000868 <SD_disk_initialize+0x90>
 800088e:	e000      	b.n	8000892 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <SD_disk_initialize+0x1c4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d062      	beq.n	8000960 <SD_disk_initialize+0x188>
 800089a:	2100      	movs	r1, #0
 800089c:	207a      	movs	r0, #122	; 0x7a
 800089e:	f7ff ff46 	bl	800072e <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d15b      	bne.n	8000960 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe30 	bl	8000514 <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4423      	add	r3, r4
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x104>
 80008d8:	230c      	movs	r3, #12
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0x106>
 80008dc:	2304      	movs	r3, #4
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e03e      	b.n	8000960 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008e2:	2100      	movs	r1, #0
 80008e4:	2077      	movs	r0, #119	; 0x77
 80008e6:	f7ff ff22 	bl	800072e <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d808      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008f0:	2100      	movs	r1, #0
 80008f2:	2069      	movs	r0, #105	; 0x69
 80008f4:	f7ff ff1b 	bl	800072e <SD_SendCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d801      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <SD_disk_initialize+0x12c>
 8000902:	2301      	movs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10e      	bne.n	800092a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800090c:	2100      	movs	r1, #0
 800090e:	2077      	movs	r0, #119	; 0x77
 8000910:	f7ff ff0d 	bl	800072e <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d80e      	bhi.n	8000938 <SD_disk_initialize+0x160>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff ff06 	bl	800072e <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <SD_disk_initialize+0x160>
 8000928:	e00c      	b.n	8000944 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800092a:	2100      	movs	r1, #0
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fefe 	bl	800072e <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e2      	bne.n	8000906 <SD_disk_initialize+0x12e>
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <SD_disk_initialize+0x1c4>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <SD_disk_initialize+0x184>
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	2050      	movs	r0, #80	; 0x50
 8000952:	f7ff feec 	bl	800072e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x188>
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SD_disk_initialize+0x1c8>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000966:	f7ff fd93 	bl	8000490 <DESELECT>
	SPI_RxByte();
 800096a:	f7ff fdd3 	bl	8000514 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e001      	b.n	800098a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000986:	f7ff fe4b 	bl	8000620 <SD_PowerOff>
	}

	return Stat;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SD_disk_initialize+0x1c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000346 	.word	0x20000346
 80009a0:	2000010c 	.word	0x2000010c

080009a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_status+0x14>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e002      	b.n	80009be <SD_disk_status+0x1a>
	return Stat;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SD_disk_status+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <SD_disk_read+0x1c>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SD_disk_read+0x20>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e051      	b.n	8000a90 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SD_disk_read+0xcc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SD_disk_read+0x32>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e048      	b.n	8000a90 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SD_disk_read+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <SD_disk_read+0x44>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a10:	f7ff fd30 	bl	8000474 <SELECT>

	if (count == 1)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d111      	bne.n	8000a3e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2051      	movs	r0, #81	; 0x51
 8000a1e:	f7ff fe86 	bl	800072e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <SD_disk_read+0xb0>
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fe0d 	bl	800064c <SD_RxDataBlock>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d021      	beq.n	8000a7c <SD_disk_read+0xb0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e01e      	b.n	8000a7c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2052      	movs	r0, #82	; 0x52
 8000a42:	f7ff fe74 	bl	800072e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d117      	bne.n	8000a7c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f7ff fdfb 	bl	800064c <SD_RxDataBlock>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <SD_disk_read+0xa6>
				buff += 512;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <SD_disk_read+0x80>
 8000a70:	e000      	b.n	8000a74 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a72:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	204c      	movs	r0, #76	; 0x4c
 8000a78:	f7ff fe59 	bl	800072e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd08 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fd48 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000010c 	.word	0x2000010c

08000aa0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_write+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_write+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e06b      	b.n	8000b98 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SD_disk_write+0x100>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_write+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e062      	b.n	8000b98 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SD_disk_write+0x100>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_write+0x44>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e059      	b.n	8000b98 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SD_disk_write+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <SD_disk_write+0x56>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af6:	f7ff fcbd 	bl	8000474 <SELECT>

	if (count == 1)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d110      	bne.n	8000b22 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2058      	movs	r0, #88	; 0x58
 8000b04:	f7ff fe13 	bl	800072e <SD_SendCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d13a      	bne.n	8000b84 <SD_disk_write+0xe4>
 8000b0e:	21fe      	movs	r1, #254	; 0xfe
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fdc9 	bl	80006a8 <SD_TxDataBlock>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <SD_disk_write+0xe4>
			count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e030      	b.n	8000b84 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <SD_disk_write+0x104>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2077      	movs	r0, #119	; 0x77
 8000b32:	f7ff fdfc 	bl	800072e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	2057      	movs	r0, #87	; 0x57
 8000b3a:	f7ff fdf8 	bl	800072e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2059      	movs	r0, #89	; 0x59
 8000b42:	f7ff fdf4 	bl	800072e <SD_SendCmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b4c:	21fc      	movs	r1, #252	; 0xfc
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f7ff fdaa 	bl	80006a8 <SD_TxDataBlock>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <SD_disk_write+0xd0>
				buff += 512;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ee      	bne.n	8000b4c <SD_disk_write+0xac>
 8000b6e:	e000      	b.n	8000b72 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b70:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b72:	21fd      	movs	r1, #253	; 0xfd
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd97 	bl	80006a8 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b84:	f7ff fc84 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fcc4 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	2000010c 	.word	0x2000010c

08000ba8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_ioctl+0x1e>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e115      	b.n	8000df2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d124      	bne.n	8000c1c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d012      	beq.n	8000c00 <SD_disk_ioctl+0x58>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc1a      	bgt.n	8000c14 <SD_disk_ioctl+0x6c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SD_disk_ioctl+0x40>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d006      	beq.n	8000bf4 <SD_disk_ioctl+0x4c>
 8000be6:	e015      	b.n	8000c14 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be8:	f7ff fd1a 	bl	8000620 <SD_PowerOff>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0fc      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf4:	f7ff fcd2 	bl	800059c <SD_PowerOn>
			res = RES_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfe:	e0f6      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	1c5c      	adds	r4, r3, #1
 8000c04:	f7ff fd18 	bl	8000638 <SD_CheckPower>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c12:	e0ec      	b.n	8000dee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	e0e8      	b.n	8000dee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <SD_disk_ioctl+0x254>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x86>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e0e1      	b.n	8000df2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2e:	f7ff fc21 	bl	8000474 <SELECT>

		switch (ctrl)
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	f200 80cb 	bhi.w	8000dd0 <SD_disk_ioctl+0x228>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <SD_disk_ioctl+0x98>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000d3b 	.word	0x08000d3b
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	08000d2b 	.word	0x08000d2b
 8000c4c:	08000dd1 	.word	0x08000dd1
 8000c50:	08000dd1 	.word	0x08000dd1
 8000c54:	08000dd1 	.word	0x08000dd1
 8000c58:	08000dd1 	.word	0x08000dd1
 8000c5c:	08000dd1 	.word	0x08000dd1
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000dd1 	.word	0x08000dd1
 8000c68:	08000dd1 	.word	0x08000dd1
 8000c6c:	08000d4d 	.word	0x08000d4d
 8000c70:	08000d71 	.word	0x08000d71
 8000c74:	08000d95 	.word	0x08000d95
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2049      	movs	r0, #73	; 0x49
 8000c7c:	f7ff fd57 	bl	800072e <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 80a8 	bne.w	8000dd8 <SD_disk_ioctl+0x230>
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcdc 	bl	800064c <SD_RxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809e 	beq.w	8000dd8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	099b      	lsrs	r3, r3, #6
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cba:	8bfb      	ldrh	r3, [r7, #30]
 8000cbc:	029a      	lsls	r2, r3, #10
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02e      	b.n	8000d22 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0306 	and.w	r3, r3, #6
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	7cbb      	ldrb	r3, [r7, #18]
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1a:	3b09      	subs	r3, #9
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d28:	e056      	b.n	8000dd8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d38:	e055      	b.n	8000de6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d3a:	f7ff fc15 	bl	8000568 <SD_ReadyWait>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d14b      	bne.n	8000ddc <SD_disk_ioctl+0x234>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e047      	b.n	8000ddc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	; 0x49
 8000d50:	f7ff fced 	bl	800072e <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <SD_disk_ioctl+0x238>
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fc75 	bl	800064c <SD_RxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d03b      	beq.n	8000de0 <SD_disk_ioctl+0x238>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6e:	e037      	b.n	8000de0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d70:	2100      	movs	r1, #0
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fcdb 	bl	800072e <SD_SendCmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d132      	bne.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d7e:	2110      	movs	r1, #16
 8000d80:	6a38      	ldr	r0, [r7, #32]
 8000d82:	f7ff fc63 	bl	800064c <SD_RxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d92:	e027      	b.n	8000de4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	207a      	movs	r0, #122	; 0x7a
 8000d98:	f7ff fcc9 	bl	800072e <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da8:	e00b      	b.n	8000dc2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000daa:	6a3c      	ldr	r4, [r7, #32]
 8000dac:	1c63      	adds	r3, r4, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	f7ff fbb0 	bl	8000514 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd6:	e006      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de4:	bf00      	nop
		}

		DESELECT();
 8000de6:	f7ff fb53 	bl	8000490 <DESELECT>
		SPI_RxByte();
 8000dea:	f7ff fb93 	bl	8000514 <SPI_RxByte>
	}

	return res;
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0a6      	sub	sp, #152	; 0x98
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 ffb2 	bl	8001d6e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f871 	bl	8000ef0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fa43 	bl	8001298 <MX_GPIO_Init>
  MX_ADC_Init();
 8000e12:	f000 f8d3 	bl	8000fbc <MX_ADC_Init>
  MX_I2C1_Init();
 8000e16:	f000 f929 	bl	800106c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e1a:	f000 f9dd 	bl	80011d8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000e1e:	f000 fa11 	bl	8001244 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000e22:	f006 faa5 	bl	8007370 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e26:	f000 f94f 	bl	80010c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  muxInit();
 8000e2a:	f000 fb8d 	bl	8001548 <muxInit>


    int pressure_data[NUM_NODES] = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2290      	movs	r2, #144	; 0x90
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00a f8d3 	bl	800afe0 <memset>

//
//    /* Mount the SD card */
    fr = f_mount(&fs, "", 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4928      	ldr	r1, [pc, #160]	; (8000ee0 <main+0xe0>)
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <main+0xe4>)
 8000e40:	f008 fcd0 	bl	80097e4 <f_mount>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <main+0xe8>)
 8000e4a:	701a      	strb	r2, [r3, #0]
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//


    int cycle_cnt = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int start_time = HAL_GetTick();
 8000e52:	f000 fff1 	bl	8001e38 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90


    // Wait for Button press
    while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 8000e5c:	bf00      	nop
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <main+0xec>)
 8000e62:	f001 ff89 	bl	8002d78 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0f8      	beq.n	8000e5e <main+0x5e>

    // LED to start writing
    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <main+0xec>)
 8000e74:	f001 ff97 	bl	8002da6 <HAL_GPIO_WritePin>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	samplePrototypeMat(0, 0, pressure_data);
 8000e78:	463b      	mov	r3, r7
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fcdc 	bl	800183c <samplePrototypeMat>
      /* Reset the pressure data array */


//      /* Write to SD card */
        logData2SDCard(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8000e84:	463b      	mov	r3, r7
 8000e86:	2124      	movs	r1, #36	; 0x24
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fac5 	bl	8001418 <logData2SDCard>

      //
//
      if (cycle_cnt >= SAMPLE_CYCLES) {
 8000e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	dd1d      	ble.n	8000ed2 <main+0xd2>
//  	  if (checkTime(start_time)) {
  		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <main+0xec>)
 8000e9e:	f001 ff82 	bl	8002da6 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <main+0xec>)
 8000ea8:	f001 ff7d 	bl	8002da6 <HAL_GPIO_WritePin>

		// Read SD card and send data to ESP8266 via UART
		readSDCardSendUART();
 8000eac:	f000 fb0c 	bl	80014c8 <readSDCardSendUART>
  		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <main+0xec>)
 8000eb6:	f001 ff76 	bl	8002da6 <HAL_GPIO_WritePin>

	    /* Unmount the default drive */
		fr = f_mount(0, "", 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <main+0xe0>)
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f008 fc90 	bl	80097e4 <f_mount>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <main+0xe8>)
 8000eca:	701a      	strb	r2, [r3, #0]


	    exit(0);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f00a f84f 	bl	800af70 <exit>
      }

      cycle_cnt++;
 8000ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    	samplePrototypeMat(0, 0, pressure_data);
 8000edc:	e7cc      	b.n	8000e78 <main+0x78>
 8000ede:	bf00      	nop
 8000ee0:	0800b008 	.word	0x0800b008
 8000ee4:	200003e8 	.word	0x200003e8
 8000ee8:	20001500 	.word	0x20001500
 8000eec:	40020800 	.word	0x40020800

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a f86e 	bl	800afe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <SystemClock_Config+0xc8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <SystemClock_Config+0xc8>)
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f2e:	230b      	movs	r3, #11
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fd42 	bl	80049e4 <HAL_RCC_OscConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f66:	f000 fcc1 	bl	80018ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f85d 	bl	8005044 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f90:	f000 fcac 	bl	80018ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fabb 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fac:	f000 fc9e 	bl	80018ec <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3758      	adds	r7, #88	; 0x58
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_ADC_Init+0xac>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_ADC_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_ADC_Init+0xa8>)
 800100c:	2201      	movs	r2, #1
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC_Init+0xa8>)
 800101a:	2210      	movs	r2, #16
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC_Init+0xa8>)
 8001020:	2200      	movs	r2, #0
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC_Init+0xa8>)
 800102e:	f000 ff2f 	bl	8001e90 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001038:	f000 fc58 	bl	80018ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800103c:	2309      	movs	r3, #9
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001044:	2304      	movs	r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC_Init+0xa8>)
 800104e:	f001 f98d 	bl	800236c <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001058:	f000 fc48 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20001528 	.word	0x20001528
 8001068:	40012400 	.word	0x40012400

0800106c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_I2C1_Init+0x50>)
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_I2C1_Init+0x54>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_I2C1_Init+0x50>)
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x58>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_I2C1_Init+0x50>)
 800108a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_I2C1_Init+0x50>)
 80010aa:	f001 fe95 	bl	8002dd8 <HAL_I2C_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b4:	f000 fc1a 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001420 	.word	0x20001420
 80010c0:	40005400 	.word	0x40005400
 80010c4:	000186a0 	.word	0x000186a0

080010c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <MX_RTC_Init+0x108>)
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <MX_RTC_Init+0x10c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <MX_RTC_Init+0x108>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <MX_RTC_Init+0x108>)
 80010fe:	227f      	movs	r2, #127	; 0x7f
 8001100:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <MX_RTC_Init+0x108>)
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_RTC_Init+0x108>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_RTC_Init+0x108>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_RTC_Init+0x108>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111a:	482d      	ldr	r0, [pc, #180]	; (80011d0 <MX_RTC_Init+0x108>)
 800111c:	f004 fb08 	bl	8005730 <HAL_RTC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001126:	f000 fbe1 	bl	80018ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 800112a:	2316      	movs	r3, #22
 800112c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4820      	ldr	r0, [pc, #128]	; (80011d0 <MX_RTC_Init+0x108>)
 800114e:	f004 fb79 	bl	8005844 <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001158:	f000 fbc8 	bl	80018ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800115c:	2305      	movs	r3, #5
 800115e:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8001162:	2303      	movs	r3, #3
 8001164:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 8001168:	230b      	movs	r3, #11
 800116a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 800116e:	2316      	movs	r3, #22
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_RTC_Init+0x108>)
 800117e:	f004 fc15 	bl	80059ac <HAL_RTC_SetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001188:	f000 fbb0 	bl	80018ec <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 800118c:	2306      	movs	r3, #6
 800118e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_RTC_Init+0x108>)
 80011ba:	f004 fc95 	bl	8005ae8 <HAL_RTC_SetAlarm_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80011c4:	f000 fb92 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200014e0 	.word	0x200014e0
 80011d4:	40002800 	.word	0x40002800

080011d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI2_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI2_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI2_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI2_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI2_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI2_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI2_Init+0x64>)
 800120c:	2210      	movs	r2, #16
 800120e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI2_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI2_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI2_Init+0x64>)
 800122a:	f004 fe4a 	bl	8005ec2 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fb5a 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000034c 	.word	0x2000034c
 8001240:	40003800 	.word	0x40003800

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART3_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800127c:	f005 fb4a 	bl	8006914 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 fb31 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003a4 	.word	0x200003a4
 8001294:	40004800 	.word	0x40004800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a42      	ldr	r2, [pc, #264]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <MX_GPIO_Init+0x16c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001326:	2200      	movs	r2, #0
 8001328:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 800132c:	4836      	ldr	r0, [pc, #216]	; (8001408 <MX_GPIO_Init+0x170>)
 800132e:	f001 fd3a 	bl	8002da6 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001332:	2200      	movs	r2, #0
 8001334:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001338:	4834      	ldr	r0, [pc, #208]	; (800140c <MX_GPIO_Init+0x174>)
 800133a:	f001 fd34 	bl	8002da6 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800133e:	2200      	movs	r2, #0
 8001340:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001344:	4832      	ldr	r0, [pc, #200]	; (8001410 <MX_GPIO_Init+0x178>)
 8001346:	f001 fd2e 	bl	8002da6 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4831      	ldr	r0, [pc, #196]	; (8001414 <MX_GPIO_Init+0x17c>)
 8001350:	f001 fd29 	bl	8002da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001354:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001358:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4826      	ldr	r0, [pc, #152]	; (8001408 <MX_GPIO_Init+0x170>)
 800136e:	f001 fb83 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001372:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001376:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <MX_GPIO_Init+0x174>)
 800138c:	f001 fb74 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001390:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001394:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <MX_GPIO_Init+0x178>)
 80013aa:	f001 fb65 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_GPIO_Init+0x170>)
 80013c2:	f001 fb59 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_GPIO_Init+0x174>)
 80013dc:	f001 fb4c 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80013e0:	2304      	movs	r3, #4
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_GPIO_Init+0x17c>)
 80013f8:	f001 fb3e 	bl	8002a78 <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020c00 	.word	0x40020c00

08001418 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int *data, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    /*Open the file*/
    fr = f_open(&fil, file_name, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001422:	2213      	movs	r2, #19
 8001424:	4923      	ldr	r1, [pc, #140]	; (80014b4 <logData2SDCard+0x9c>)
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <logData2SDCard+0xa0>)
 8001428:	f008 fa22 	bl	8009870 <f_open>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <logData2SDCard+0xa4>)
 8001432:	701a      	strb	r2, [r3, #0]

    /* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 8001434:	21b4      	movs	r1, #180	; 0xb4
 8001436:	4820      	ldr	r0, [pc, #128]	; (80014b8 <logData2SDCard+0xa0>)
 8001438:	f008 ff81 	bl	800a33e <f_lseek>
    f_lseek(&fil, f_size(&fil));
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <logData2SDCard+0xa0>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4619      	mov	r1, r3
 8001442:	481d      	ldr	r0, [pc, #116]	; (80014b8 <logData2SDCard+0xa0>)
 8001444:	f008 ff7b 	bl	800a33e <f_lseek>

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; node++)
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e010      	b.n	8001470 <logData2SDCard+0x58>
    {
        fr = f_printf(&fil, "%d,", data[node]);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4919      	ldr	r1, [pc, #100]	; (80014c0 <logData2SDCard+0xa8>)
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <logData2SDCard+0xa0>)
 800145e:	f009 fa45 	bl	800a8ec <f_printf>
 8001462:	4603      	mov	r3, r0
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <logData2SDCard+0xa4>)
 8001468:	701a      	strb	r2, [r3, #0]
    for(int node = 0; node < len - 1; node++)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbe9      	blt.n	800144e <logData2SDCard+0x36>
    }

    fr = f_printf(&fil, "%d\n", data[len - 1]);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001480:	3b01      	subs	r3, #1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	490d      	ldr	r1, [pc, #52]	; (80014c4 <logData2SDCard+0xac>)
 800148e:	480a      	ldr	r0, [pc, #40]	; (80014b8 <logData2SDCard+0xa0>)
 8001490:	f009 fa2c 	bl	800a8ec <f_printf>
 8001494:	4603      	mov	r3, r0
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <logData2SDCard+0xa4>)
 800149a:	701a      	strb	r2, [r3, #0]

	/* Close the file */
	fr = f_close(&fil);
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <logData2SDCard+0xa0>)
 800149e:	f008 ff24 	bl	800a2ea <f_close>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <logData2SDCard+0xa4>)
 80014a8:	701a      	strb	r2, [r3, #0]

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000004 	.word	0x20000004
 80014b8:	2000157c 	.word	0x2000157c
 80014bc:	20001500 	.word	0x20001500
 80014c0:	0800b020 	.word	0x0800b020
 80014c4:	0800b024 	.word	0x0800b024

080014c8 <readSDCardSendUART>:

void readSDCardSendUART() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b0      	sub	sp, #192	; 0xc0
 80014cc:	af00      	add	r7, sp, #0

    f_open(&fil, file_name, FA_READ); // Data can be read from file
 80014ce:	2201      	movs	r2, #1
 80014d0:	4919      	ldr	r1, [pc, #100]	; (8001538 <readSDCardSendUART+0x70>)
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <readSDCardSendUART+0x74>)
 80014d4:	f008 f9cc 	bl	8009870 <f_open>
    char line[FILE_LINE_SIZE]; /* Line buffer */

    int cnt = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    char start_char = 'S';
 80014de:	2353      	movs	r3, #83	; 0x53
 80014e0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Read every line*/
    while (f_gets(line, sizeof line, &fil)) {
 80014e4:	e013      	b.n	800150e <readSDCardSendUART+0x46>
    	if (cnt > 2) { // skip first 2 lines of SD card bc of garbage values
 80014e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	dd0a      	ble.n	8001504 <readSDCardSendUART+0x3c>
        	// Send to UART
//    		HAL_UART_Transmit(&huart3, (uint8_t*)start_char, sizeof(start_char), HAL_MAX_DELAY);
        	HAL_UART_Transmit(&huart3, (uint8_t *)line, sizeof(line), HAL_MAX_DELAY);
 80014ee:	1d39      	adds	r1, r7, #4
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	22b4      	movs	r2, #180	; 0xb4
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <readSDCardSendUART+0x78>)
 80014f8:	f005 fa59 	bl	80069ae <HAL_UART_Transmit>
        	HAL_Delay(2000);
 80014fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001500:	f000 fca4 	bl	8001e4c <HAL_Delay>
    	}
    	cnt++;
 8001504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001508:	3301      	adds	r3, #1
 800150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    while (f_gets(line, sizeof line, &fil)) {
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <readSDCardSendUART+0x74>)
 8001512:	21b4      	movs	r1, #180	; 0xb4
 8001514:	4618      	mov	r0, r3
 8001516:	f009 f936 	bl	800a786 <f_gets>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e2      	bne.n	80014e6 <readSDCardSendUART+0x1e>
    }

	/* Close the file */
	fr = f_close(&fil);
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <readSDCardSendUART+0x74>)
 8001522:	f008 fee2 	bl	800a2ea <f_close>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <readSDCardSendUART+0x7c>)
 800152c:	701a      	strb	r2, [r3, #0]

}
 800152e:	bf00      	nop
 8001530:	37c0      	adds	r7, #192	; 0xc0
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000004 	.word	0x20000004
 800153c:	2000157c 	.word	0x2000157c
 8001540:	200003a4 	.word	0x200003a4
 8001544:	20001500 	.word	0x20001500

08001548 <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4819      	ldr	r0, [pc, #100]	; (80015b8 <muxInit+0x70>)
 8001554:	f001 fc27 	bl	8002da6 <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e00e      	b.n	800157c <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <muxInit+0x74>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001566:	4916      	ldr	r1, [pc, #88]	; (80015c0 <muxInit+0x78>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800156e:	4619      	mov	r1, r3
 8001570:	4610      	mov	r0, r2
 8001572:	f000 f935 	bl	80017e0 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	dded      	ble.n	800155e <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	e00e      	b.n	80015a6 <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <muxInit+0x7c>)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001590:	490d      	ldr	r1, [pc, #52]	; (80015c8 <muxInit+0x80>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 f920 	bl	80017e0 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b07      	cmp	r3, #7
 80015aa:	dded      	ble.n	8001588 <muxInit+0x40>
	}
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020800 	.word	0x40020800
 80015bc:	20000024 	.word	0x20000024
 80015c0:	0800b070 	.word	0x0800b070
 80015c4:	20000034 	.word	0x20000034
 80015c8:	0800b080 	.word	0x0800b080

080015cc <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b07      	cmp	r3, #7
 80015da:	f200 80eb 	bhi.w	80017b4 <selectChannel+0x1e8>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <selectChannel+0x18>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	08001605 	.word	0x08001605
 80015e8:	0800163b 	.word	0x0800163b
 80015ec:	08001671 	.word	0x08001671
 80015f0:	080016a7 	.word	0x080016a7
 80015f4:	080016dd 	.word	0x080016dd
 80015f8:	08001713 	.word	0x08001713
 80015fc:	08001749 	.word	0x08001749
 8001600:	0800177f 	.word	0x0800177f
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	486b      	ldr	r0, [pc, #428]	; (80017bc <selectChannel+0x1f0>)
 8001610:	f001 fbc9 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3304      	adds	r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4866      	ldr	r0, [pc, #408]	; (80017bc <selectChannel+0x1f0>)
 8001622:	f001 fbc0 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3308      	adds	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	4862      	ldr	r0, [pc, #392]	; (80017bc <selectChannel+0x1f0>)
 8001634:	f001 fbb7 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 8001638:	e0bc      	b.n	80017b4 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	485d      	ldr	r0, [pc, #372]	; (80017bc <selectChannel+0x1f0>)
 8001646:	f001 fbae 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4859      	ldr	r0, [pc, #356]	; (80017bc <selectChannel+0x1f0>)
 8001658:	f001 fba5 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3308      	adds	r3, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4854      	ldr	r0, [pc, #336]	; (80017bc <selectChannel+0x1f0>)
 800166a:	f001 fb9c 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 800166e:	e0a1      	b.n	80017b4 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4850      	ldr	r0, [pc, #320]	; (80017bc <selectChannel+0x1f0>)
 800167c:	f001 fb93 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	2201      	movs	r2, #1
 800168a:	4619      	mov	r1, r3
 800168c:	484b      	ldr	r0, [pc, #300]	; (80017bc <selectChannel+0x1f0>)
 800168e:	f001 fb8a 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4847      	ldr	r0, [pc, #284]	; (80017bc <selectChannel+0x1f0>)
 80016a0:	f001 fb81 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 80016a4:	e086      	b.n	80017b4 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	4842      	ldr	r0, [pc, #264]	; (80017bc <selectChannel+0x1f0>)
 80016b2:	f001 fb78 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	483e      	ldr	r0, [pc, #248]	; (80017bc <selectChannel+0x1f0>)
 80016c4:	f001 fb6f 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	4839      	ldr	r0, [pc, #228]	; (80017bc <selectChannel+0x1f0>)
 80016d6:	f001 fb66 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 80016da:	e06b      	b.n	80017b4 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <selectChannel+0x1f0>)
 80016e8:	f001 fb5d 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4830      	ldr	r0, [pc, #192]	; (80017bc <selectChannel+0x1f0>)
 80016fa:	f001 fb54 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	482c      	ldr	r0, [pc, #176]	; (80017bc <selectChannel+0x1f0>)
 800170c:	f001 fb4b 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 8001710:	e050      	b.n	80017b4 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	4827      	ldr	r0, [pc, #156]	; (80017bc <selectChannel+0x1f0>)
 800171e:	f001 fb42 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4823      	ldr	r0, [pc, #140]	; (80017bc <selectChannel+0x1f0>)
 8001730:	f001 fb39 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3308      	adds	r3, #8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	481e      	ldr	r0, [pc, #120]	; (80017bc <selectChannel+0x1f0>)
 8001742:	f001 fb30 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 8001746:	e035      	b.n	80017b4 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	481a      	ldr	r0, [pc, #104]	; (80017bc <selectChannel+0x1f0>)
 8001754:	f001 fb27 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	2201      	movs	r2, #1
 8001762:	4619      	mov	r1, r3
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <selectChannel+0x1f0>)
 8001766:	f001 fb1e 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3308      	adds	r3, #8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	2201      	movs	r2, #1
 8001774:	4619      	mov	r1, r3
 8001776:	4811      	ldr	r0, [pc, #68]	; (80017bc <selectChannel+0x1f0>)
 8001778:	f001 fb15 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 800177c:	e01a      	b.n	80017b4 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <selectChannel+0x1f0>)
 800178a:	f001 fb0c 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	2201      	movs	r2, #1
 8001798:	4619      	mov	r1, r3
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <selectChannel+0x1f0>)
 800179c:	f001 fb03 	bl	8002da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	3308      	adds	r3, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <selectChannel+0x1f0>)
 80017ae:	f001 fafa 	bl	8002da6 <HAL_GPIO_WritePin>
			break;
 80017b2:	bf00      	nop
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40020000 	.word	0x40020000

080017c0 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f001 fae7 	bl	8002da6 <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2201      	movs	r2, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 fad7 	bl	8002da6 <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc);
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <readPressure+0x38>)
 8001808:	f000 fc88 	bl	800211c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <readPressure+0x38>)
 8001812:	f000 fd0f 	bl	8002234 <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <readPressure+0x38>)
 8001818:	f000 fd9c 	bl	8002354 <HAL_ADC_GetValue>
 800181c:	4603      	mov	r3, r0
 800181e:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <readPressure+0x38>)
 8001822:	f000 fcdb 	bl	80021dc <HAL_ADC_Stop>
	HAL_Delay(5);
 8001826:	2005      	movs	r0, #5
 8001828:	f000 fb10 	bl	8001e4c <HAL_Delay>
    return data;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20001528 	.word	0x20001528

0800183c <samplePrototypeMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void samplePrototypeMat(int pwr_mux, int sense_mux, int* data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]

	int array_cnt = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
	enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <samplePrototypeMat+0x98>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001854:	4920      	ldr	r1, [pc, #128]	; (80018d8 <samplePrototypeMat+0x9c>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff ffae 	bl	80017c0 <enableMux>
	enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <samplePrototypeMat+0xa0>)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	491c      	ldr	r1, [pc, #112]	; (80018e0 <samplePrototypeMat+0xa4>)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f7ff ffa2 	bl	80017c0 <enableMux>

	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	e01f      	b.n	80018c2 <samplePrototypeMat+0x86>


		selectChannel(pwr_sel, pwrMuxSelect);
 8001882:	4918      	ldr	r1, [pc, #96]	; (80018e4 <samplePrototypeMat+0xa8>)
 8001884:	69b8      	ldr	r0, [r7, #24]
 8001886:	f7ff fea1 	bl	80015cc <selectChannel>
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e012      	b.n	80018b6 <samplePrototypeMat+0x7a>

			selectChannel(sense_sel, senseMuxSelect);
 8001890:	4915      	ldr	r1, [pc, #84]	; (80018e8 <samplePrototypeMat+0xac>)
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff fe9a 	bl	80015cc <selectChannel>

			/* Read voltage */
			int raw_ADC_pressure = readPressure();
 8001898:	f7ff ffb2 	bl	8001800 <readPressure>
 800189c:	6138      	str	r0, [r7, #16]

			data[array_cnt] = raw_ADC_pressure;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]
			array_cnt++;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	dde9      	ble.n	8001890 <samplePrototypeMat+0x54>
	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3301      	adds	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	dddc      	ble.n	8001882 <samplePrototypeMat+0x46>
		}
	}

}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000024 	.word	0x20000024
 80018d8:	0800b070 	.word	0x0800b070
 80018dc:	20000034 	.word	0x20000034
 80018e0:	0800b080 	.word	0x0800b080
 80018e4:	20000060 	.word	0x20000060
 80018e8:	20000054 	.word	0x20000054

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80018f4:	e7fe      	b.n	80018f4 <Error_Handler+0x8>
	...

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_MspInit+0x68>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_MspInit+0x68>)
 8001904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001908:	6253      	str	r3, [r2, #36]	; 0x24
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_MspInit+0x68>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_MspInit+0x68>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_MspInit+0x68>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x68>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x68>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_MspInit+0x68>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6253      	str	r3, [r2, #36]	; 0x24
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x68>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2005      	movs	r0, #5
 800194c:	f000 ffd3 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001950:	2005      	movs	r0, #5
 8001952:	f000 ffec 	bl	800292e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_ADC_MspInit+0x74>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d123      	bne.n	80019ce <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_ADC_MspInit+0x78>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_ADC_MspInit+0x78>)
 800198c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_ADC_MspInit+0x78>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_ADC_MspInit+0x78>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_ADC_MspInit+0x78>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_ADC_MspInit+0x78>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80019b6:	2302      	movs	r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ba:	2303      	movs	r3, #3
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_ADC_MspInit+0x7c>)
 80019ca:	f001 f855 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012400 	.word	0x40012400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_I2C_MspInit+0x9c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d138      	bne.n	8001a78 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a24:	2312      	movs	r3, #18
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a30:	2304      	movs	r3, #4
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <HAL_I2C_MspInit+0xa4>)
 8001a3c:	f001 f81c 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_I2C_MspInit+0xa0>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	201f      	movs	r0, #31
 8001a5e:	f000 ff4a 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a62:	201f      	movs	r0, #31
 8001a64:	f000 ff63 	bl	800292e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2020      	movs	r0, #32
 8001a6e:	f000 ff42 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a72:	2020      	movs	r0, #32
 8001a74:	f000 ff5b 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_RTC_MspInit+0x30>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RTC_MspInit+0x34>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2029      	movs	r0, #41	; 0x29
 8001aaa:	f000 ff24 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001aae:	2029      	movs	r0, #41	; 0x29
 8001ab0:	f000 ff3d 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40002800 	.word	0x40002800
 8001ac0:	424706d8 	.word	0x424706d8

08001ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d130      	bne.n	8001b48 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6253      	str	r3, [r2, #36]	; 0x24
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_SPI_MspInit+0x90>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_SPI_MspInit+0x94>)
 8001b34:	f000 ffa0 	bl	8002a78 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2024      	movs	r0, #36	; 0x24
 8001b3e:	f000 feda 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b42:	2024      	movs	r0, #36	; 0x24
 8001b44:	f000 fef3 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40003800 	.word	0x40003800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d130      	bne.n	8001be0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6253      	str	r3, [r2, #36]	; 0x24
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001bcc:	f000 ff54 	bl	8002a78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2027      	movs	r0, #39	; 0x27
 8001bd6:	f000 fe8e 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bda:	2027      	movs	r0, #39	; 0x27
 8001bdc:	f000 fea7 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40004800 	.word	0x40004800
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <SysTick_Handler+0x34>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <SysTick_Handler+0x18>
		Timer1--;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <SysTick_Handler+0x34>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <SysTick_Handler+0x34>)
 8001c4e:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <SysTick_Handler+0x38>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <SysTick_Handler+0x2c>
		Timer2--;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Handler+0x38>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <SysTick_Handler+0x38>)
 8001c62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f8d6 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000346 	.word	0x20000346
 8001c70:	20000344 	.word	0x20000344

08001c74 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <I2C1_EV_IRQHandler+0x10>)
 8001c86:	f001 f9eb 	bl	8003060 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20001420 	.word	0x20001420

08001c94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <I2C1_ER_IRQHandler+0x10>)
 8001c9a:	f001 fb52 	bl	8003342 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20001420 	.word	0x20001420

08001ca8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <SPI2_IRQHandler+0x10>)
 8001cae:	f004 fc63 	bl	8006578 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000034c 	.word	0x2000034c

08001cbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <USART3_IRQHandler+0x10>)
 8001cc2:	f004 ff07 	bl	8006ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003a4 	.word	0x200003a4

08001cd0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <RTC_Alarm_IRQHandler+0x10>)
 8001cd6:	f004 f82d 	bl	8005d34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200014e0 	.word	0x200014e0

08001ce4 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cee:	f009 f939 	bl	800af64 <__errno>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2216      	movs	r2, #22
 8001cf6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_exit>:

void _exit (int status)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ffe7 	bl	8001ce4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d16:	e7fe      	b.n	8001d16 <_exit+0x12>

08001d18 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d26:	490d      	ldr	r1, [pc, #52]	; (8001d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d3c:	4c0a      	ldr	r4, [pc, #40]	; (8001d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d4a:	f7ff ffe5 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f009 f923 	bl	800af98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d52:	f7ff f855 	bl	8000e00 <main>
  bx lr
 8001d56:	4770      	bx	lr
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001d60:	0800b518 	.word	0x0800b518
  ldr r2, =_sbss
 8001d64:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001d68:	20004620 	.word	0x20004620

08001d6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_IRQHandler>

08001d6e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fdb1 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f80e 	bl	8001da0 <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e001      	b.n	8001d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d90:	f7ff fdb2 	bl	80018f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_InitTick+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d022      	beq.n	8001dfa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_InitTick+0x6c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_InitTick+0x68>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fdbe 	bl	800294a <HAL_SYSTICK_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d809      	bhi.n	8001dee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	f000 fd88 	bl	80028f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_InitTick+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e004      	b.n	8001dfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000074 	.word	0x20000074
 8001e0c:	2000006c 	.word	0x2000006c
 8001e10:	20000070 	.word	0x20000070

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200025ac 	.word	0x200025ac
 8001e34:	20000074 	.word	0x20000074

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_GetTick+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	200025ac 	.word	0x200025ac

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d004      	beq.n	8001e70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_Delay+0x40>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e70:	bf00      	nop
 8001e72:	f7ff ffe1 	bl	8001e38 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d8f7      	bhi.n	8001e72 <HAL_Delay+0x26>
  {
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000074 	.word	0x20000074

08001e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e127      	b.n	8002100 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b8e      	ldr	r3, [pc, #568]	; (8002108 <HAL_ADC_Init+0x278>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a8d      	ldr	r2, [pc, #564]	; (8002108 <HAL_ADC_Init+0x278>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	4b8b      	ldr	r3, [pc, #556]	; (8002108 <HAL_ADC_Init+0x278>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fd3d 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 80ff 	bne.w	80020f6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f00:	f023 0302 	bic.w	r3, r3, #2
 8001f04:	f043 0202 	orr.w	r2, r3, #2
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001f0c:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_ADC_Init+0x27c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	497c      	ldr	r1, [pc, #496]	; (800210c <HAL_ADC_Init+0x27c>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f26:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f34:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001f4a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001f72:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f76:	4313      	orrs	r3, r2
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d007      	beq.n	8001f92 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d04f      	beq.n	8002040 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001fb2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6912      	ldr	r2, [r2, #16]
 8001fb8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001fbc:	d003      	beq.n	8001fc6 <HAL_ADC_Init+0x136>
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6912      	ldr	r2, [r2, #16]
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_ADC_Init+0x13c>
 8001fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fca:	e000      	b.n	8001fce <HAL_ADC_Init+0x13e>
 8001fcc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001fce:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d125      	bne.n	800202c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d114      	bne.n	8002014 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	617a      	str	r2, [r7, #20]
  return result;
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4093      	lsls	r3, r2
 8002008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800200c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800200e:	4313      	orrs	r3, r2
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
 8002012:	e00b      	b.n	800202c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <HAL_ADC_Init+0x280>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800203c:	430b      	orrs	r3, r1
 800203e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_ADC_Init+0x284>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002050:	430b      	orrs	r3, r1
 8002052:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205c:	d003      	beq.n	8002066 <HAL_ADC_Init+0x1d6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d119      	bne.n	800209a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800207a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	60fa      	str	r2, [r7, #12]
  return result;
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	fa03 f202 	lsl.w	r2, r3, r2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
 8002098:	e007      	b.n	80020aa <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_ADC_Init+0x288>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d10b      	bne.n	80020d2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f023 0303 	bic.w	r3, r3, #3
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	e014      	b.n	80020fc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f023 0312 	bic.w	r3, r3, #18
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020f4:	e002      	b.n	80020fc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002100:	4618      	mov	r0, r3
 8002102:	3738      	adds	r7, #56	; 0x38
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40012700 	.word	0x40012700
 8002110:	fcfc16ff 	.word	0xfcfc16ff
 8002114:	c0fff18d 	.word	0xc0fff18d
 8002118:	bf80fffe 	.word	0xbf80fffe

0800211c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start+0x1a>
 8002132:	2302      	movs	r3, #2
 8002134:	e04e      	b.n	80021d4 <HAL_ADC_Start+0xb8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa64 	bl	800260c <ADC_Enable>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d141      	bne.n	80021d2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d106      	bne.n	800219c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	f023 0206 	bic.w	r2, r3, #6
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	651a      	str	r2, [r3, #80]	; 0x50
 800219a:	e002      	b.n	80021a2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021b2:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Stop+0x1a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01a      	b.n	800222c <HAL_ADC_Stop+0x50>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa60 	bl	80026c4 <ADC_ConversionStop_Disable>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002250:	d113      	bne.n	800227a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d10b      	bne.n	800227a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e068      	b.n	800234c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800227a:	f7ff fddd 	bl	8001e38 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002280:	e021      	b.n	80022c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d01d      	beq.n	80022c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x6c>
 8002290:	f7ff fdd2 	bl	8001e38 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d212      	bcs.n	80022c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e042      	b.n	800234c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0d6      	beq.n	8002282 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0212 	mvn.w	r2, #18
 80022e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d124      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	d111      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x20>
 8002388:	2302      	movs	r3, #2
 800238a:	e134      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x28a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d81c      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	221f      	movs	r2, #31
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4019      	ands	r1, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b05      	subs	r3, #5
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
 80023d4:	e07e      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d81c      	bhi.n	8002418 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4019      	ands	r1, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b23      	subs	r3, #35	; 0x23
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	63da      	str	r2, [r3, #60]	; 0x3c
 8002416:	e05d      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d81c      	bhi.n	800245a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3b41      	subs	r3, #65	; 0x41
 8002432:	221f      	movs	r2, #31
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	4019      	ands	r1, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b41      	subs	r3, #65	; 0x41
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
 8002458:	e03c      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b18      	cmp	r3, #24
 8002460:	d81c      	bhi.n	800249c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b5f      	subs	r3, #95	; 0x5f
 8002474:	221f      	movs	r2, #31
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	4019      	ands	r1, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b5f      	subs	r3, #95	; 0x5f
 800248e:	fa00 f203 	lsl.w	r2, r0, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
 800249a:	e01b      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b7d      	subs	r3, #125	; 0x7d
 80024ae:	221f      	movs	r2, #31
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4019      	ands	r1, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3b7d      	subs	r3, #125	; 0x7d
 80024c8:	fa00 f203 	lsl.w	r2, r0, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d81a      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6959      	ldr	r1, [r3, #20]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	2207      	movs	r2, #7
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	4019      	ands	r1, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6898      	ldr	r0, [r3, #8]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	615a      	str	r2, [r3, #20]
 8002510:	e042      	b.n	8002598 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b13      	cmp	r3, #19
 8002518:	d81c      	bhi.n	8002554 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	3b1e      	subs	r3, #30
 800252c:	2207      	movs	r2, #7
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	4019      	ands	r1, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6898      	ldr	r0, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	3b1e      	subs	r3, #30
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e021      	b.n	8002598 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b1a      	cmp	r3, #26
 800255a:	d81c      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b3c      	subs	r3, #60	; 0x3c
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	3b3c      	subs	r3, #60	; 0x3c
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e000      	b.n	8002598 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002596:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	d003      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025a4:	2b11      	cmp	r3, #17
 80025a6:	d121      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_ADC_ConfigChannel+0x294>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11b      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_ADC_ConfigChannel+0x294>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_ADC_ConfigChannel+0x294>)
 80025ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025be:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_ADC_ConfigChannel+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_ADC_ConfigChannel+0x29c>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0c9a      	lsrs	r2, r3, #18
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80025de:	e002      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40012700 	.word	0x40012700
 8002604:	2000006c 	.word	0x2000006c
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d043      	beq.n	80026b2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <ADC_Enable+0xb0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <ADC_Enable+0xb4>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9a      	lsrs	r2, r3, #18
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800264e:	e002      	b.n	8002656 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3b01      	subs	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800265c:	f7ff fbec 	bl	8001e38 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002662:	e01f      	b.n	80026a4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002664:	f7ff fbe8 	bl	8001e38 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d918      	bls.n	80026a4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d011      	beq.n	80026a4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d1d8      	bne.n	8002664 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000006c 	.word	0x2000006c
 80026c0:	431bde83 	.word	0x431bde83

080026c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d12e      	bne.n	800273c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ee:	f7ff fba3 	bl	8001e38 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	e01b      	b.n	800272e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80026f6:	f7ff fb9f 	bl	8001e38 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d914      	bls.n	800272e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d10d      	bne.n	800272e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d0dc      	beq.n	80026f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4906      	ldr	r1, [pc, #24]	; (80027e0 <__NVIC_EnableIRQ+0x34>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff90 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff2d 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff42 	bl	8002790 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff35 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e022      	b.n	80029d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f003 021c 	and.w	r2, r3, #28
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d005      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2204      	movs	r2, #4
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e029      	b.n	8002a54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 020e 	bic.w	r2, r2, #14
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f003 021c 	and.w	r2, r3, #28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
    }
  }
  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6c:	b2db      	uxtb	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a8e:	e154      	b.n	8002d3a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8146 	beq.w	8002d34 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d130      	bne.n	8002b22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002af6:	2201      	movs	r2, #1
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 0201 	and.w	r2, r3, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d017      	beq.n	8002b5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d123      	bne.n	8002bb2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	6939      	ldr	r1, [r7, #16]
 8002bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a0 	beq.w	8002d34 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf4:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c0c:	4a53      	ldr	r2, [pc, #332]	; (8002d5c <HAL_GPIO_Init+0x2e4>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d019      	beq.n	8002c6c <HAL_GPIO_Init+0x1f4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <HAL_GPIO_Init+0x2ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <HAL_GPIO_Init+0x1f0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00d      	beq.n	8002c64 <HAL_GPIO_Init+0x1ec>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a48      	ldr	r2, [pc, #288]	; (8002d6c <HAL_GPIO_Init+0x2f4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <HAL_GPIO_Init+0x1e8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a47      	ldr	r2, [pc, #284]	; (8002d70 <HAL_GPIO_Init+0x2f8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_GPIO_Init+0x1e4>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e008      	b.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	e006      	b.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c60:	2303      	movs	r3, #3
 8002c62:	e004      	b.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e002      	b.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	f002 0203 	and.w	r2, r2, #3
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	4093      	lsls	r3, r2
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c7e:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_GPIO_Init+0x2e4>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb0:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cda:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d2e:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f47f aea3 	bne.w	8002a90 <HAL_GPIO_Init+0x18>
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40010400 	.word	0x40010400

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e12b      	b.n	8003042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fdf0 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f002 fae6 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4a81      	ldr	r2, [pc, #516]	; (800304c <HAL_I2C_Init+0x274>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d807      	bhi.n	8002e5c <HAL_I2C_Init+0x84>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_I2C_Init+0x278>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e006      	b.n	8002e6a <HAL_I2C_Init+0x92>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a7d      	ldr	r2, [pc, #500]	; (8003054 <HAL_I2C_Init+0x27c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0e7      	b.n	8003042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a78      	ldr	r2, [pc, #480]	; (8003058 <HAL_I2C_Init+0x280>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0c9b      	lsrs	r3, r3, #18
 8002e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a6a      	ldr	r2, [pc, #424]	; (800304c <HAL_I2C_Init+0x274>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d802      	bhi.n	8002eac <HAL_I2C_Init+0xd4>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	e009      	b.n	8002ec0 <HAL_I2C_Init+0xe8>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	4a69      	ldr	r2, [pc, #420]	; (800305c <HAL_I2C_Init+0x284>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	495c      	ldr	r1, [pc, #368]	; (800304c <HAL_I2C_Init+0x274>)
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d819      	bhi.n	8002f14 <HAL_I2C_Init+0x13c>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e59      	subs	r1, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_I2C_Init+0x138>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1e59      	subs	r1, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	e051      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e04f      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <HAL_I2C_Init+0x168>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e012      	b.n	8002f66 <HAL_I2C_Init+0x18e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Init+0x196>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e022      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10e      	bne.n	8002f94 <HAL_I2C_Init+0x1bc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e58      	subs	r0, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	440b      	add	r3, r1
 8002f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f92:	e00f      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	0099      	lsls	r1, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6911      	ldr	r1, [r2, #16]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	000186a0 	.word	0x000186a0
 8003050:	001e847f 	.word	0x001e847f
 8003054:	003d08ff 	.word	0x003d08ff
 8003058:	431bde83 	.word	0x431bde83
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003080:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b10      	cmp	r3, #16
 800308e:	d003      	beq.n	8003098 <HAL_I2C_EV_IRQHandler+0x38>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	f040 80c1 	bne.w	800321a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <HAL_I2C_EV_IRQHandler+0x6e>
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030b8:	d003      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x62>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_EV_IRQHandler+0x66>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x68>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f000 8132 	beq.w	8003332 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x92>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 fc63 	bl	80049b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fd6f 	bl	8003bce <I2C_Master_SB>
 80030f0:	e092      	b.n	8003218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0xb2>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fde4 	bl	8003cd8 <I2C_Master_ADD10>
 8003110:	e082      	b.n	8003218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_I2C_EV_IRQHandler+0xd2>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	0a5b      	lsrs	r3, r3, #9
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fdfd 	bl	8003d2a <I2C_Master_ADDR>
 8003130:	e072      	b.n	8003218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d03b      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314c:	f000 80f3 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	09db      	lsrs	r3, r3, #7
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00f      	beq.n	800317c <HAL_I2C_EV_IRQHandler+0x11c>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	0a9b      	lsrs	r3, r3, #10
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_I2C_EV_IRQHandler+0x11c>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f9e9 	bl	800354c <I2C_MasterTransmit_TXE>
 800317a:	e04d      	b.n	8003218 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80d6 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	0a5b      	lsrs	r3, r3, #9
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80cf 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003198:	7bbb      	ldrb	r3, [r7, #14]
 800319a:	2b21      	cmp	r3, #33	; 0x21
 800319c:	d103      	bne.n	80031a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa70 	bl	8003684 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a4:	e0c7      	b.n	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	f040 80c4 	bne.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fade 	bl	8003770 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b4:	e0bf      	b.n	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c4:	f000 80b7 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00f      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x194>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x194>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb53 	bl	8003898 <I2C_MasterReceive_RXNE>
 80031f2:	e011      	b.n	8003218 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 809a 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	0a5b      	lsrs	r3, r3, #9
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8093 	beq.w	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fbf2 	bl	80039fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003216:	e08e      	b.n	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003218:	e08d      	b.n	8003336 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e007      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x20e>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	0a5b      	lsrs	r3, r3, #9
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003264:	69b9      	ldr	r1, [r7, #24]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ffab 	bl	80041c2 <I2C_Slave_ADDR>
 800326c:	e066      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x22e>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	0a5b      	lsrs	r3, r3, #9
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 ffe6 	bl	8004258 <I2C_Slave_STOPF>
 800328c:	e056      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	2b21      	cmp	r3, #33	; 0x21
 8003292:	d002      	beq.n	800329a <HAL_I2C_EV_IRQHandler+0x23a>
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	2b29      	cmp	r3, #41	; 0x29
 8003298:	d125      	bne.n	80032e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00f      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x266>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	0a9b      	lsrs	r3, r3, #10
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x266>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fec3 	bl	800404a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c4:	e039      	b.n	800333a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d033      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0x2da>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	0a5b      	lsrs	r3, r3, #9
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d02d      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fef0 	bl	80040c4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e4:	e029      	b.n	800333a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00f      	beq.n	8003312 <HAL_I2C_EV_IRQHandler+0x2b2>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	0a9b      	lsrs	r3, r3, #10
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_I2C_EV_IRQHandler+0x2b2>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fefa 	bl	8004104 <I2C_SlaveReceive_RXNE>
 8003310:	e014      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	0a5b      	lsrs	r3, r3, #9
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 ff28 	bl	8004180 <I2C_SlaveReceive_BTF>
 8003330:	e004      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800333a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08a      	sub	sp, #40	; 0x28
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003364:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x4e>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800338e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	0a5b      	lsrs	r3, r3, #9
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_I2C_ER_IRQHandler+0x78>
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80033b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	0a9b      	lsrs	r3, r3, #10
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03f      	beq.n	8003446 <HAL_I2C_ER_IRQHandler+0x104>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d039      	beq.n	8003446 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80033d2:	7efb      	ldrb	r3, [r7, #27]
 80033d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80033ec:	7ebb      	ldrb	r3, [r7, #26]
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d112      	bne.n	8003418 <HAL_I2C_ER_IRQHandler+0xd6>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10f      	bne.n	8003418 <HAL_I2C_ER_IRQHandler+0xd6>
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b21      	cmp	r3, #33	; 0x21
 80033fc:	d008      	beq.n	8003410 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b29      	cmp	r3, #41	; 0x29
 8003402:	d005      	beq.n	8003410 <HAL_I2C_ER_IRQHandler+0xce>
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b28      	cmp	r3, #40	; 0x28
 8003408:	d106      	bne.n	8003418 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	d103      	bne.n	8003418 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f001 f851 	bl	80044b8 <I2C_Slave_AF>
 8003416:	e016      	b.n	8003446 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003420:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800342a:	7efb      	ldrb	r3, [r7, #27]
 800342c:	2b10      	cmp	r3, #16
 800342e:	d002      	beq.n	8003436 <HAL_I2C_ER_IRQHandler+0xf4>
 8003430:	7efb      	ldrb	r3, [r7, #27]
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d107      	bne.n	8003446 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	0adb      	lsrs	r3, r3, #11
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00e      	beq.n	8003470 <HAL_I2C_ER_IRQHandler+0x12e>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800346e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 f888 	bl	8004598 <I2C_ITError>
  }
}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
 80034e4:	4613      	mov	r3, r2
 80034e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	d150      	bne.n	8003614 <I2C_MasterTransmit_TXE+0xc8>
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b21      	cmp	r3, #33	; 0x21
 8003576:	d14d      	bne.n	8003614 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d01d      	beq.n	80035ba <I2C_MasterTransmit_TXE+0x6e>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b20      	cmp	r3, #32
 8003582:	d01a      	beq.n	80035ba <I2C_MasterTransmit_TXE+0x6e>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800358a:	d016      	beq.n	80035ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800359a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2211      	movs	r2, #17
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff6c 	bl	8003490 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b8:	e060      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d107      	bne.n	8003604 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff81 	bl	8003504 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003602:	e03b      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff3f 	bl	8003490 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003612:	e033      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b21      	cmp	r3, #33	; 0x21
 8003618:	d005      	beq.n	8003626 <I2C_MasterTransmit_TXE+0xda>
 800361a:	7bbb      	ldrb	r3, [r7, #14]
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d12d      	bne.n	800367c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b22      	cmp	r3, #34	; 0x22
 8003624:	d12a      	bne.n	800367c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003640:	e01c      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d103      	bne.n	8003656 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f88e 	bl	8003770 <I2C_MemoryTransmit_TXE_BTF>
}
 8003654:	e012      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800367a:	e7ff      	b.n	800367c <I2C_MasterTransmit_TXE+0x130>
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b21      	cmp	r3, #33	; 0x21
 800369c:	d164      	bne.n	8003768 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80036cc:	e04c      	b.n	8003768 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d01d      	beq.n	8003710 <I2C_MasterTransmit_BTF+0x8c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d01a      	beq.n	8003710 <I2C_MasterTransmit_BTF+0x8c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e0:	d016      	beq.n	8003710 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2211      	movs	r2, #17
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fec1 	bl	8003490 <HAL_I2C_MasterTxCpltCallback>
}
 800370e:	e02b      	b.n	8003768 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800371e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d107      	bne.n	800375a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fed6 	bl	8003504 <HAL_I2C_MemTxCpltCallback>
}
 8003758:	e006      	b.n	8003768 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fe94 	bl	8003490 <HAL_I2C_MasterTxCpltCallback>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11d      	bne.n	80037c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10b      	bne.n	80037a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003794:	b2da      	uxtb	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80037a6:	e073      	b.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	121b      	asrs	r3, r3, #8
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037c2:	e065      	b.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10b      	bne.n	80037e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037e2:	e055      	b.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d151      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b22      	cmp	r3, #34	; 0x22
 80037f0:	d10d      	bne.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800380c:	e040      	b.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b21      	cmp	r3, #33	; 0x21
 800381c:	d112      	bne.n	8003844 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003842:	e025      	b.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d120      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b21      	cmp	r3, #33	; 0x21
 8003852:	d11d      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003862:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fe3a 	bl	8003504 <HAL_I2C_MemTxCpltCallback>
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b22      	cmp	r3, #34	; 0x22
 80038aa:	f040 80a2 	bne.w	80039f2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d921      	bls.n	8003900 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	f040 8082 	bne.w	80039f2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80038fe:	e078      	b.n	80039f2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	2b02      	cmp	r3, #2
 8003906:	d074      	beq.n	80039f2 <I2C_MasterReceive_RXNE+0x15a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d002      	beq.n	8003914 <I2C_MasterReceive_RXNE+0x7c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d16e      	bne.n	80039f2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f001 f819 	bl	800494c <I2C_WaitOnSTOPRequestThroughIT>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d142      	bne.n	80039a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800393e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d10a      	bne.n	8003990 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fdc4 	bl	8003516 <HAL_I2C_MemRxCpltCallback>
}
 800398e:	e030      	b.n	80039f2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2212      	movs	r2, #18
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fd7f 	bl	80034a2 <HAL_I2C_MasterRxCpltCallback>
}
 80039a4:	e025      	b.n	80039f2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fd9b 	bl	8003528 <HAL_I2C_ErrorCallback>
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d11b      	bne.n	8003a4a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a48:	e0bd      	b.n	8003bc6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d129      	bne.n	8003aa8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00a      	beq.n	8003a80 <I2C_MasterReceive_BTF+0x86>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d007      	beq.n	8003a80 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aa6:	e08e      	b.n	8003bc6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d176      	bne.n	8003ba0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d002      	beq.n	8003abe <I2C_MasterReceive_BTF+0xc4>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d108      	bne.n	8003ad0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e019      	b.n	8003b04 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d002      	beq.n	8003adc <I2C_MasterReceive_BTF+0xe2>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d108      	bne.n	8003aee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e00a      	b.n	8003b04 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d007      	beq.n	8003b04 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d10a      	bne.n	8003b8a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fcc7 	bl	8003516 <HAL_I2C_MemRxCpltCallback>
}
 8003b88:	e01d      	b.n	8003bc6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2212      	movs	r2, #18
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fc82 	bl	80034a2 <HAL_I2C_MasterRxCpltCallback>
}
 8003b9e:	e012      	b.n	8003bc6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d117      	bne.n	8003c12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bfa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bfc:	e067      	b.n	8003cce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]
}
 8003c10:	e05d      	b.n	8003cce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1a:	d133      	bne.n	8003c84 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b21      	cmp	r3, #33	; 0x21
 8003c26:	d109      	bne.n	8003c3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e008      	b.n	8003c4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <I2C_Master_SB+0x92>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d108      	bne.n	8003c72 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d032      	beq.n	8003cce <I2C_Master_SB+0x100>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d02d      	beq.n	8003cce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c80:	605a      	str	r2, [r3, #4]
}
 8003c82:	e024      	b.n	8003cce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	11db      	asrs	r3, r3, #7
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0306 	and.w	r3, r3, #6
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f063 030f 	orn	r3, r3, #15
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]
}
 8003ca8:	e011      	b.n	8003cce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10d      	bne.n	8003cce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	11db      	asrs	r3, r3, #7
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0306 	and.w	r3, r3, #6
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f063 030e 	orn	r3, r3, #14
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <I2C_Master_ADD10+0x26>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <I2C_Master_ADD10+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	605a      	str	r2, [r3, #4]
  }
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b091      	sub	sp, #68	; 0x44
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b22      	cmp	r3, #34	; 0x22
 8003d52:	f040 8169 	bne.w	8004028 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <I2C_Master_ADDR+0x54>
 8003d5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d10b      	bne.n	8003d7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	e160      	b.n	8004040 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11d      	bne.n	8003dc2 <I2C_Master_ADDR+0x98>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d8e:	d118      	bne.n	8003dc2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003dc0:	e13e      	b.n	8004040 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e115      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	f040 808a 	bne.w	8003f14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e06:	d137      	bne.n	8003e78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e26:	d113      	bne.n	8003e50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	e0e7      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e0d3      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d02e      	beq.n	8003edc <I2C_Master_ADDR+0x1b2>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d02b      	beq.n	8003edc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2b12      	cmp	r3, #18
 8003e88:	d102      	bne.n	8003e90 <I2C_Master_ADDR+0x166>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d125      	bne.n	8003edc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00e      	beq.n	8003eb4 <I2C_Master_ADDR+0x18a>
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d00b      	beq.n	8003eb4 <I2C_Master_ADDR+0x18a>
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d008      	beq.n	8003eb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e007      	b.n	8003ec4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	e0a1      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e085      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d14d      	bne.n	8003fba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d016      	beq.n	8003f52 <I2C_Master_ADDR+0x228>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d013      	beq.n	8003f52 <I2C_Master_ADDR+0x228>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d010      	beq.n	8003f52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e007      	b.n	8003f62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f70:	d117      	bne.n	8003fa2 <I2C_Master_ADDR+0x278>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f78:	d00b      	beq.n	8003f92 <I2C_Master_ADDR+0x268>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d008      	beq.n	8003f92 <I2C_Master_ADDR+0x268>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d005      	beq.n	8003f92 <I2C_Master_ADDR+0x268>
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d002      	beq.n	8003f92 <I2C_Master_ADDR+0x268>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d107      	bne.n	8003fa2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	e032      	b.n	8004020 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	d117      	bne.n	800400a <I2C_Master_ADDR+0x2e0>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe0:	d00b      	beq.n	8003ffa <I2C_Master_ADDR+0x2d0>
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d008      	beq.n	8003ffa <I2C_Master_ADDR+0x2d0>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d005      	beq.n	8003ffa <I2C_Master_ADDR+0x2d0>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d002      	beq.n	8003ffa <I2C_Master_ADDR+0x2d0>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d107      	bne.n	800400a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004008:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004026:	e00b      	b.n	8004040 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	e7ff      	b.n	8004040 <I2C_Master_ADDR+0x316>
 8004040:	bf00      	nop
 8004042:	3744      	adds	r7, #68	; 0x44
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02b      	beq.n	80040bc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <I2C_SlaveTransmit_TXE+0x72>
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b29      	cmp	r3, #41	; 0x29
 8004096:	d111      	bne.n	80040bc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2221      	movs	r2, #33	; 0x21
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2228      	movs	r2, #40	; 0x28
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff f9fc 	bl	80034b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d011      	beq.n	80040fa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d02c      	beq.n	8004178 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d114      	bne.n	8004178 <I2C_SlaveReceive_RXNE+0x74>
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b2a      	cmp	r3, #42	; 0x2a
 8004152:	d111      	bne.n	8004178 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2222      	movs	r2, #34	; 0x22
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2228      	movs	r2, #40	; 0x28
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff f9a7 	bl	80034c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d012      	beq.n	80041b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041dc:	2b28      	cmp	r3, #40	; 0x28
 80041de:	d127      	bne.n	8004230 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	09db      	lsrs	r3, r3, #7
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	81bb      	strh	r3, [r7, #12]
 8004212:	e002      	b.n	800421a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004222:	89ba      	ldrh	r2, [r7, #12]
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff f955 	bl	80034d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800422e:	e00e      	b.n	800424e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004276:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b4:	d172      	bne.n	800439c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b22      	cmp	r3, #34	; 0x22
 80042ba:	d002      	beq.n	80042c2 <I2C_Slave_STOPF+0x6a>
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d135      	bne.n	800432e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fbaf 	bl	8002a5e <HAL_DMA_GetState>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d049      	beq.n	800439a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	4a69      	ldr	r2, [pc, #420]	; (80044b0 <I2C_Slave_STOPF+0x258>)
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fb62 	bl	80029dc <HAL_DMA_Abort_IT>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d03d      	beq.n	800439a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800432c:	e035      	b.n	800439a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f043 0204 	orr.w	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004360:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fb79 	bl	8002a5e <HAL_DMA_GetState>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d014      	beq.n	800439c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4a4e      	ldr	r2, [pc, #312]	; (80044b0 <I2C_Slave_STOPF+0x258>)
 8004378:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb2c 	bl	80029dc <HAL_DMA_Abort_IT>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004394:	4610      	mov	r0, r2
 8004396:	4798      	blx	r3
 8004398:	e000      	b.n	800439c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800439a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d03e      	beq.n	8004424 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d112      	bne.n	80043da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d112      	bne.n	800440e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0204 	orr.w	r2, r3, #4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8b3 	bl	8004598 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004432:	e039      	b.n	80044a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b2a      	cmp	r3, #42	; 0x2a
 8004438:	d109      	bne.n	800444e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2228      	movs	r2, #40	; 0x28
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff f83c 	bl	80034c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b28      	cmp	r3, #40	; 0x28
 8004458:	d111      	bne.n	800447e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <I2C_Slave_STOPF+0x25c>)
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff f83b 	bl	80034f2 <HAL_I2C_ListenCpltCallback>
}
 800447c:	e014      	b.n	80044a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	2b22      	cmp	r3, #34	; 0x22
 8004484:	d002      	beq.n	800448c <I2C_Slave_STOPF+0x234>
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b22      	cmp	r3, #34	; 0x22
 800448a:	d10d      	bne.n	80044a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff f80f 	bl	80034c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	080047fd 	.word	0x080047fd
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d002      	beq.n	80044da <I2C_Slave_AF+0x22>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d129      	bne.n	800452e <I2C_Slave_AF+0x76>
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b28      	cmp	r3, #40	; 0x28
 80044de:	d126      	bne.n	800452e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <I2C_Slave_AF+0xdc>)
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe ffe3 	bl	80034f2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800452c:	e02e      	b.n	800458c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b21      	cmp	r3, #33	; 0x21
 8004532:	d126      	bne.n	8004582 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <I2C_Slave_AF+0xdc>)
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2221      	movs	r2, #33	; 0x21
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004568:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe ff9a 	bl	80034b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004580:	e004      	b.n	800458c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800458a:	615a      	str	r2, [r3, #20]
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	ffff0000 	.word	0xffff0000

08004598 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d002      	beq.n	80045bc <I2C_ITError+0x24>
 80045b6:	7bbb      	ldrb	r3, [r7, #14]
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d10a      	bne.n	80045d2 <I2C_ITError+0x3a>
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b22      	cmp	r3, #34	; 0x22
 80045c0:	d107      	bne.n	80045d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045d8:	2b28      	cmp	r3, #40	; 0x28
 80045da:	d107      	bne.n	80045ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2228      	movs	r2, #40	; 0x28
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045ea:	e015      	b.n	8004618 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fa:	d00a      	beq.n	8004612 <I2C_ITError+0x7a>
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b60      	cmp	r3, #96	; 0x60
 8004600:	d007      	beq.n	8004612 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004626:	d162      	bne.n	80046ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004636:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d020      	beq.n	8004688 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	4a6a      	ldr	r2, [pc, #424]	; (80047f4 <I2C_ITError+0x25c>)
 800464c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f9c2 	bl	80029dc <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8089 	beq.w	8004772 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004682:	4610      	mov	r0, r2
 8004684:	4798      	blx	r3
 8004686:	e074      	b.n	8004772 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	4a59      	ldr	r2, [pc, #356]	; (80047f4 <I2C_ITError+0x25c>)
 800468e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe f9a1 	bl	80029dc <HAL_DMA_Abort_IT>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d068      	beq.n	8004772 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d10b      	bne.n	80046c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
 80046ec:	e041      	b.n	8004772 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b60      	cmp	r3, #96	; 0x60
 80046f8:	d125      	bne.n	8004746 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d10b      	bne.n	800472e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fe fefb 	bl	800353a <HAL_I2C_AbortCpltCallback>
 8004744:	e015      	b.n	8004772 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d10b      	bne.n	800476c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fe fedb 	bl	8003528 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10e      	bne.n	80047a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d113      	bne.n	80047ec <I2C_ITError+0x254>
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b28      	cmp	r3, #40	; 0x28
 80047c8:	d110      	bne.n	80047ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <I2C_ITError+0x260>)
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fe fe83 	bl	80034f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	080047fd 	.word	0x080047fd
 80047f8:	ffff0000 	.word	0xffff0000

080047fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004816:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <I2C_DMAAbort+0x148>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <I2C_DMAAbort+0x14c>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0a1a      	lsrs	r2, r3, #8
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	00da      	lsls	r2, r3, #3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004842:	e00a      	b.n	800485a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b01      	subs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004858:	d0ea      	beq.n	8004830 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	2200      	movs	r2, #0
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004888:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	2200      	movs	r2, #0
 800489e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	2200      	movs	r2, #0
 80048ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d10e      	bne.n	80048ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048e2:	6978      	ldr	r0, [r7, #20]
 80048e4:	f7fe fe29 	bl	800353a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048e8:	e027      	b.n	800493a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048f0:	2b28      	cmp	r3, #40	; 0x28
 80048f2:	d117      	bne.n	8004924 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004912:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2228      	movs	r2, #40	; 0x28
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004922:	e007      	b.n	8004934 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f7fe fdf7 	bl	8003528 <HAL_I2C_ErrorCallback>
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2000006c 	.word	0x2000006c
 8004948:	14f8b589 	.word	0x14f8b589

0800494c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	08db      	lsrs	r3, r3, #3
 800495e:	4a13      	ldr	r2, [pc, #76]	; (80049ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	0a1a      	lsrs	r2, r3, #8
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b01      	subs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e008      	b.n	800499c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d0e9      	beq.n	800496e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	2000006c 	.word	0x2000006c
 80049ac:	14f8b589 	.word	0x14f8b589

080049b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80049c0:	d103      	bne.n	80049ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80049c8:	e007      	b.n	80049da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049d2:	d102      	bne.n	80049da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2208      	movs	r2, #8
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e31d      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f6:	4b94      	ldr	r3, [pc, #592]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a00:	4b91      	ldr	r3, [pc, #580]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a08:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d07b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d006      	beq.n	8004a2a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d10f      	bne.n	8004a42 <HAL_RCC_OscConfig+0x5e>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d10b      	bne.n	8004a42 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2a:	4b87      	ldr	r3, [pc, #540]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d06a      	beq.n	8004b0c <HAL_RCC_OscConfig+0x128>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d166      	bne.n	8004b0c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e2f7      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x74>
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7e      	ldr	r2, [pc, #504]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e02d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x96>
 8004a60:	4b79      	ldr	r3, [pc, #484]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a78      	ldr	r2, [pc, #480]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a75      	ldr	r2, [pc, #468]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0xb8>
 8004a82:	4b71      	ldr	r3, [pc, #452]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6d      	ldr	r2, [pc, #436]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd0>
 8004a9c:	4b6a      	ldr	r3, [pc, #424]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a69      	ldr	r2, [pc, #420]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b67      	ldr	r3, [pc, #412]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a66      	ldr	r2, [pc, #408]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fd f9bc 	bl	8001e38 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd f9b8 	bl	8001e38 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e2ad      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad6:	4b5c      	ldr	r3, [pc, #368]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xe0>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd f9a8 	bl	8001e38 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fd f9a4 	bl	8001e38 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e299      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afe:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x108>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d05a      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d119      	bne.n	8004b5a <HAL_RCC_OscConfig+0x176>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2c:	4b46      	ldr	r3, [pc, #280]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_OscConfig+0x160>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e276      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	493d      	ldr	r1, [pc, #244]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b58:	e03a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b62:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCC_OscConfig+0x268>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd f966 	bl	8001e38 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fd f962 	bl	8001e38 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e257      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b82:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	492a      	ldr	r1, [pc, #168]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
 8004ba2:	e015      	b.n	8004bd0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCC_OscConfig+0x268>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fd f945 	bl	8001e38 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fd f941 	bl	8001e38 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e236      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80b8 	beq.w	8004d4e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d170      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x218>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e21a      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d921      	bls.n	8004c50 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fc23 	bl	800545c <RCC_SetFlashLatencyFromMSIRange>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e208      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4906      	ldr	r1, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	4901      	ldr	r1, [pc, #4]	; (8004c48 <HAL_RCC_OscConfig+0x264>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
 8004c46:	e020      	b.n	8004c8a <HAL_RCC_OscConfig+0x2a6>
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c50:	4ba4      	ldr	r3, [pc, #656]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	49a1      	ldr	r1, [pc, #644]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c62:	4ba0      	ldr	r3, [pc, #640]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	499c      	ldr	r1, [pc, #624]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbee 	bl	800545c <RCC_SetFlashLatencyFromMSIRange>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1d3      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	3301      	adds	r3, #1
 8004c92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c9a:	4a92      	ldr	r2, [pc, #584]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	0912      	lsrs	r2, r2, #4
 8004ca0:	f002 020f 	and.w	r2, r2, #15
 8004ca4:	4990      	ldr	r1, [pc, #576]	; (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	5c8a      	ldrb	r2, [r1, r2]
 8004ca8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004caa:	4a90      	ldr	r2, [pc, #576]	; (8004eec <HAL_RCC_OscConfig+0x508>)
 8004cac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cae:	4b90      	ldr	r3, [pc, #576]	; (8004ef0 <HAL_RCC_OscConfig+0x50c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd f874 	bl	8001da0 <HAL_InitTick>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d045      	beq.n	8004d4e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	e1b5      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d029      	beq.n	8004d22 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cce:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_RCC_OscConfig+0x510>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd f8b0 	bl	8001e38 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cdc:	f7fd f8ac 	bl	8001e38 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e1a1      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cee:	4b7d      	ldr	r3, [pc, #500]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cfa:	4b7a      	ldr	r3, [pc, #488]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	4977      	ldr	r1, [pc, #476]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d0c:	4b75      	ldr	r3, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	4972      	ldr	r1, [pc, #456]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
 8004d20:	e015      	b.n	8004d4e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d22:	4b74      	ldr	r3, [pc, #464]	; (8004ef4 <HAL_RCC_OscConfig+0x510>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd f886 	bl	8001e38 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d30:	f7fd f882 	bl	8001e38 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e177      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d42:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d030      	beq.n	8004dbc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCC_OscConfig+0x514>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d68:	f7fd f866 	bl	8001e38 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d70:	f7fd f862 	bl	8001e38 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e157      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d82:	4b58      	ldr	r3, [pc, #352]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x38c>
 8004d8e:	e015      	b.n	8004dbc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d90:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_OscConfig+0x514>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fd f84f 	bl	8001e38 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fd f84b 	bl	8001e38 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e140      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004db0:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80b5 	beq.w	8004f34 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dce:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	4a41      	ldr	r2, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6253      	str	r3, [r2, #36]	; 0x24
 8004de6:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df2:	2301      	movs	r3, #1
 8004df4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df6:	4b41      	ldr	r3, [pc, #260]	; (8004efc <HAL_RCC_OscConfig+0x518>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d118      	bne.n	8004e34 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_OscConfig+0x518>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3d      	ldr	r2, [pc, #244]	; (8004efc <HAL_RCC_OscConfig+0x518>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0e:	f7fd f813 	bl	8001e38 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fd f80f 	bl	8001e38 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b64      	cmp	r3, #100	; 0x64
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e104      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCC_OscConfig+0x518>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x466>
 8004e3c:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e46:	6353      	str	r3, [r2, #52]	; 0x34
 8004e48:	e02d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4c2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x488>
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e68:	6353      	str	r3, [r2, #52]	; 0x34
 8004e6a:	e01c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4c2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCC_OscConfig+0x4aa>
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e7e:	6353      	str	r3, [r2, #52]	; 0x34
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	6353      	str	r3, [r2, #52]	; 0x34
 8004e8c:	e00b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4c2>
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	6353      	str	r3, [r2, #52]	; 0x34
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d015      	beq.n	8004eda <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fc ffc3 	bl	8001e38 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fc ffbf 	bl	8001e38 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0b2      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_OscConfig+0x500>)
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ee      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4d2>
 8004ed8:	e023      	b.n	8004f22 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eda:	f7fc ffad 	bl	8001e38 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee0:	e019      	b.n	8004f16 <HAL_RCC_OscConfig+0x532>
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0800b0ac 	.word	0x0800b0ac
 8004eec:	2000006c 	.word	0x2000006c
 8004ef0:	20000070 	.word	0x20000070
 8004ef4:	42470020 	.word	0x42470020
 8004ef8:	42470680 	.word	0x42470680
 8004efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fc ff9a 	bl	8001e38 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e08d      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f16:	4b49      	ldr	r3, [pc, #292]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ee      	bne.n	8004f00 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b44      	ldr	r3, [pc, #272]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	4a43      	ldr	r2, [pc, #268]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d079      	beq.n	8005030 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d056      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d13b      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_OscConfig+0x65c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fc ff72 	bl	8001e38 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc ff6e 	bl	8001e38 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e063      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f6a:	4b34      	ldr	r3, [pc, #208]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f76:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4319      	orrs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	492b      	ldr	r1, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCC_OscConfig+0x65c>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fc ff4d 	bl	8001e38 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fc ff49 	bl	8001e38 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e03e      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x5be>
 8004fc0:	e036      	b.n	8005030 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_RCC_OscConfig+0x65c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fc ff36 	bl	8001e38 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fc ff32 	bl	8001e38 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e027      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x5ec>
 8004fee:	e01f      	b.n	8005030 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e01a      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <HAL_RCC_OscConfig+0x658>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	429a      	cmp	r2, r3
 800500e:	d10d      	bne.n	800502c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800
 8005040:	42470060 	.word	0x42470060

08005044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e11a      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b8f      	ldr	r3, [pc, #572]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d919      	bls.n	800509a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d105      	bne.n	8005078 <HAL_RCC_ClockConfig+0x34>
 800506c:	4b8a      	ldr	r3, [pc, #552]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a89      	ldr	r2, [pc, #548]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4b87      	ldr	r3, [pc, #540]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 0201 	bic.w	r2, r3, #1
 8005080:	4985      	ldr	r1, [pc, #532]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005088:	4b83      	ldr	r3, [pc, #524]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d001      	beq.n	800509a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e0f9      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a6:	4b7d      	ldr	r3, [pc, #500]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	497a      	ldr	r1, [pc, #488]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 808e 	beq.w	80051e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ce:	4b73      	ldr	r3, [pc, #460]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d121      	bne.n	800511e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0d7      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e6:	4b6d      	ldr	r3, [pc, #436]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0cb      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050fe:	4b67      	ldr	r3, [pc, #412]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0bf      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0b7      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	495c      	ldr	r1, [pc, #368]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7fc fe82 	bl	8001e38 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d112      	bne.n	8005164 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fc fe7a 	bl	8001e38 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e09b      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005156:	4b51      	ldr	r3, [pc, #324]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b08      	cmp	r3, #8
 8005160:	d1ee      	bne.n	8005140 <HAL_RCC_ClockConfig+0xfc>
 8005162:	e03e      	b.n	80051e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d112      	bne.n	8005192 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516e:	f7fc fe63 	bl	8001e38 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e084      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005184:	4b45      	ldr	r3, [pc, #276]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d1ee      	bne.n	800516e <HAL_RCC_ClockConfig+0x12a>
 8005190:	e027      	b.n	80051e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d11d      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519c:	f7fc fe4c 	bl	8001e38 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e06d      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b2:	4b3a      	ldr	r3, [pc, #232]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d1ee      	bne.n	800519c <HAL_RCC_ClockConfig+0x158>
 80051be:	e010      	b.n	80051e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fc fe3a 	bl	8001e38 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e05b      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ee      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e2:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d219      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <HAL_RCC_ClockConfig+0x1be>
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	4923      	ldr	r1, [pc, #140]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_RCC_ClockConfig+0x254>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e034      	b.n	800528e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4917      	ldr	r1, [pc, #92]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	490f      	ldr	r1, [pc, #60]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005262:	f000 f823 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005266:	4602      	mov	r2, r0
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_RCC_ClockConfig+0x258>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	490b      	ldr	r1, [pc, #44]	; (80052a0 <HAL_RCC_ClockConfig+0x25c>)
 8005274:	5ccb      	ldrb	r3, [r1, r3]
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_RCC_ClockConfig+0x260>)
 800527c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCC_ClockConfig+0x264>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fc fd8c 	bl	8001da0 <HAL_InitTick>
 8005288:	4603      	mov	r3, r0
 800528a:	72fb      	strb	r3, [r7, #11]

  return status;
 800528c:	7afb      	ldrb	r3, [r7, #11]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40023c00 	.word	0x40023c00
 800529c:	40023800 	.word	0x40023800
 80052a0:	0800b0ac 	.word	0x0800b0ac
 80052a4:	2000006c 	.word	0x2000006c
 80052a8:	20000070 	.word	0x20000070

080052ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	b5b0      	push	{r4, r5, r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x30>
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d87c      	bhi.n	80053c0 <HAL_RCC_GetSysClockFreq+0x114>
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x24>
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0x2a>
 80052ce:	e077      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d0:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_RCC_GetSysClockFreq+0x140>)
 80052d2:	613b      	str	r3, [r7, #16]
      break;
 80052d4:	e082      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052d6:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80052d8:	613b      	str	r3, [r7, #16]
      break;
 80052da:	e07f      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	4a43      	ldr	r2, [pc, #268]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	0d9b      	lsrs	r3, r3, #22
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	3301      	adds	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f6:	4b3c      	ldr	r3, [pc, #240]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01a      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	461a      	mov	r2, r3
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	4939      	ldr	r1, [pc, #228]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800530c:	fb01 f003 	mul.w	r0, r1, r3
 8005310:	2100      	movs	r1, #0
 8005312:	fb01 f102 	mul.w	r1, r1, r2
 8005316:	1844      	adds	r4, r0, r1
 8005318:	4935      	ldr	r1, [pc, #212]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800531a:	fba2 0101 	umull	r0, r1, r2, r1
 800531e:	1863      	adds	r3, r4, r1
 8005320:	4619      	mov	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	461a      	mov	r2, r3
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	f7fa ff27 	bl	800017c <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4613      	mov	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e040      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	461c      	mov	r4, r3
 800533c:	f04f 0500 	mov.w	r5, #0
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	014b      	lsls	r3, r1, #5
 800534e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005352:	0142      	lsls	r2, r0, #5
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	1b00      	subs	r0, r0, r4
 800535a:	eb61 0105 	sbc.w	r1, r1, r5
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800536c:	0182      	lsls	r2, r0, #6
 800536e:	1a12      	subs	r2, r2, r0
 8005370:	eb63 0301 	sbc.w	r3, r3, r1
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	00d9      	lsls	r1, r3, #3
 800537e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005382:	00d0      	lsls	r0, r2, #3
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	1912      	adds	r2, r2, r4
 800538a:	eb45 0303 	adc.w	r3, r5, r3
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	0299      	lsls	r1, r3, #10
 8005398:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800539c:	0290      	lsls	r0, r2, #10
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f7fa fee5 	bl	800017c <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4613      	mov	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	613b      	str	r3, [r7, #16]
      break;
 80053be:	e00d      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	0b5b      	lsrs	r3, r3, #13
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
      break;
 80053da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053dc:	693b      	ldr	r3, [r7, #16]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bdb0      	pop	{r4, r5, r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	00f42400 	.word	0x00f42400
 80053f0:	01312d00 	.word	0x01312d00
 80053f4:	0800b0a0 	.word	0x0800b0a0

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <HAL_RCC_GetHCLKFreq+0x10>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	2000006c 	.word	0x2000006c

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005410:	f7ff fff2 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	0800b0bc 	.word	0x0800b0bc

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005438:	f7ff ffde 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	0adb      	lsrs	r3, r3, #11
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4903      	ldr	r1, [pc, #12]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40023800 	.word	0x40023800
 8005458:	0800b0bc 	.word	0x0800b0bc

0800545c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005468:	4b29      	ldr	r3, [pc, #164]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d12c      	bne.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005474:	4b26      	ldr	r3, [pc, #152]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e016      	b.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005496:	6253      	str	r3, [r2, #36]	; 0x24
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80054a4:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80054ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ae:	4b18      	ldr	r3, [pc, #96]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80054c0:	d105      	bne.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054c8:	d101      	bne.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80054ca:	2301      	movs	r3, #1
 80054cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80054d4:	4b10      	ldr	r3, [pc, #64]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f023 0201 	bic.w	r2, r3, #1
 80054e8:	490b      	ldr	r1, [pc, #44]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d001      	beq.n	8005502 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800
 8005514:	40007000 	.word	0x40007000
 8005518:	40023c00 	.word	0x40023c00

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80ed 	beq.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005542:	4b78      	ldr	r3, [pc, #480]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10d      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	4b75      	ldr	r3, [pc, #468]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	4a74      	ldr	r2, [pc, #464]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005558:	6253      	str	r3, [r2, #36]	; 0x24
 800555a:	4b72      	ldr	r3, [pc, #456]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556a:	4b6f      	ldr	r3, [pc, #444]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d118      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005576:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6b      	ldr	r2, [pc, #428]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005582:	f7fc fc59 	bl	8001e38 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fc fc55 	bl	8001e38 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e0be      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559c:	4b62      	ldr	r3, [pc, #392]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80055a8:	4b5e      	ldr	r3, [pc, #376]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80055b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d00f      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055da:	d108      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055dc:	4b51      	ldr	r3, [pc, #324]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e8:	d101      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e095      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80055ee:	4b4d      	ldr	r3, [pc, #308]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d041      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	429a      	cmp	r2, r3
 800560a:	d005      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d02d      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d027      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005632:	4b3c      	ldr	r3, [pc, #240]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800563a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005648:	4a36      	ldr	r2, [pc, #216]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d014      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005658:	f7fc fbee 	bl	8001e38 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800565e:	e00a      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005660:	f7fc fbea 	bl	8001e38 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e051      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005676:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ee      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569a:	d10a      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800569c:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80056ac:	491d      	ldr	r1, [pc, #116]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056be:	4919      	ldr	r1, [pc, #100]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056dc:	d10a      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80056ee:	490d      	ldr	r1, [pc, #52]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005700:	4908      	ldr	r1, [pc, #32]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005702:	4313      	orrs	r3, r2
 8005704:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005716:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	424706dc 	.word	0x424706dc

08005730 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e07c      	b.n	800583c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7f5b      	ldrb	r3, [r3, #29]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc f99a 	bl	8001a8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	22ca      	movs	r2, #202	; 0xca
 8005764:	625a      	str	r2, [r3, #36]	; 0x24
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2253      	movs	r2, #83	; 0x53
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fb55 	bl	8005e1e <RTC_EnterInitMode>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e057      	b.n	800583c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800579a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6919      	ldr	r1, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	041a      	lsls	r2, r3, #16
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ea:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 faf0 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e018      	b.n	800583c <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
  }
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	7f1b      	ldrb	r3, [r3, #28]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_RTC_SetTime+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e0a3      	b.n	80059a4 <HAL_RTC_SetTime+0x160>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2202      	movs	r2, #2
 8005866:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d126      	bne.n	80058bc <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 faf3 	bl	8005e72 <RTC_ByteToBcd2>
 800588c:	4603      	mov	r3, r0
 800588e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 faec 	bl	8005e72 <RTC_ByteToBcd2>
 800589a:	4603      	mov	r3, r0
 800589c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800589e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fae4 	bl	8005e72 <RTC_ByteToBcd2>
 80058aa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80058ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	78db      	ldrb	r3, [r3, #3]
 80058b4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e018      	b.n	80058ee <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058dc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	22ca      	movs	r2, #202	; 0xca
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2253      	movs	r2, #83	; 0x53
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa8d 	bl	8005e1e <RTC_EnterInitMode>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2204      	movs	r2, #4
 8005916:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e040      	b.n	80059a4 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800592c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005940:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6899      	ldr	r1, [r3, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	431a      	orrs	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005968:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fa31 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2204      	movs	r2, #4
 8005982:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e00a      	b.n	80059a4 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	22ff      	movs	r2, #255	; 0xff
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059a2:	2300      	movs	r3, #0
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	7f1b      	ldrb	r3, [r3, #28]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_RTC_SetDate+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e08d      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10e      	bne.n	80059f4 <HAL_RTC_SetDate+0x48>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	330a      	adds	r3, #10
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11c      	bne.n	8005a34 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa37 	bl	8005e72 <RTC_ByteToBcd2>
 8005a04:	4603      	mov	r3, r0
 8005a06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fa30 	bl	8005e72 <RTC_ByteToBcd2>
 8005a12:	4603      	mov	r3, r0
 8005a14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	789b      	ldrb	r3, [r3, #2]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa28 	bl	8005e72 <RTC_ByteToBcd2>
 8005a22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e00e      	b.n	8005a52 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	78db      	ldrb	r3, [r3, #3]
 8005a38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a40:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	22ca      	movs	r2, #202	; 0xca
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2253      	movs	r2, #83	; 0x53
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f9db 	bl	8005e1e <RTC_EnterInitMode>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	22ff      	movs	r2, #255	; 0xff
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e02c      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa4:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f993 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2204      	movs	r2, #4
 8005abe:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}

08005ae8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7f1b      	ldrb	r3, [r3, #28]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_RTC_SetAlarm_IT+0x20>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e10f      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2202      	movs	r2, #2
 8005b12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d136      	bne.n	8005b88 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f99d 	bl	8005e72 <RTC_ByteToBcd2>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f996 	bl	8005e72 <RTC_ByteToBcd2>
 8005b46:	4603      	mov	r3, r0
 8005b48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f98e 	bl	8005e72 <RTC_ByteToBcd2>
 8005b56:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b62:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	7d1b      	ldrb	r3, [r3, #20]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f981 	bl	8005e72 <RTC_ByteToBcd2>
 8005b70:	4603      	mov	r3, r0
 8005b72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e022      	b.n	8005bce <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ba8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005bae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005bb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005bbe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005bc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ca      	movs	r2, #202	; 0xca
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2253      	movs	r2, #83	; 0x53
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d144      	bne.n	8005c72 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c0a:	f7fc f915 	bl	8001e38 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c10:	e013      	b.n	8005c3a <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c12:	f7fc f911 	bl	8001e38 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c20:	d90b      	bls.n	8005c3a <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	22ff      	movs	r2, #255	; 0xff
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e076      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0e4      	beq.n	8005c12 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	e043      	b.n	8005cfa <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c80:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c94:	f7fc f8d0 	bl	8001e38 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c9a:	e013      	b.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c9c:	f7fc f8cc 	bl	8001e38 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005caa:	d90b      	bls.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e031      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0e4      	beq.n	8005c9c <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d10:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ff      	movs	r2, #255	; 0xff
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}
 8005d30:	40010400 	.word	0x40010400

08005d34 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f831 	bl	8005dc0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d012      	beq.n	8005da4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f88f 	bl	8005eb0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005da2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <HAL_RTC_AlarmIRQHandler+0x88>)
 8005da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005daa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	775a      	strb	r2, [r3, #29]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dea:	f7fc f825 	bl	8001e38 <HAL_GetTick>
 8005dee:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005df2:	f7fc f821 	bl	8001e38 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e00:	d901      	bls.n	8005e06 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e007      	b.n	8005e16 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ee      	beq.n	8005df2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d119      	bne.n	8005e68 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e3e:	f7fb fffb 	bl	8001e38 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e44:	e009      	b.n	8005e5a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e46:	f7fb fff7 	bl	8001e38 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e54:	d901      	bls.n	8005e5a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e007      	b.n	8005e6a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ee      	beq.n	8005e46 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005e84:	e005      	b.n	8005e92 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3b0a      	subs	r3, #10
 8005e90:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d8f6      	bhi.n	8005e86 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e06e      	b.n	8005fb2 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee4:	d009      	beq.n	8005efa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	61da      	str	r2, [r3, #28]
 8005eec:	e005      	b.n	8005efa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fb fdd5 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	ea42 0103 	orr.w	r1, r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	0c1a      	lsrs	r2, r3, #16
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f002 0204 	and.w	r2, r2, #4
 8005fa0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_SPI_Transmit+0x22>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e126      	b.n	800622a <HAL_SPI_Transmit+0x270>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe4:	f7fb ff28 	bl	8001e38 <HAL_GetTick>
 8005fe8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ffe:	e10b      	b.n	8006218 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_SPI_Transmit+0x52>
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006010:	e102      	b.n	8006218 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2203      	movs	r2, #3
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	d10f      	bne.n	800607a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006078:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d007      	beq.n	8006098 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a0:	d14b      	bne.n	800613a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Transmit+0xf6>
 80060aa:	8afb      	ldrh	r3, [r7, #22]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d13e      	bne.n	800612e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060d4:	e02b      	b.n	800612e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d112      	bne.n	800610a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36
 8006108:	e011      	b.n	800612e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610a:	f7fb fe95 	bl	8001e38 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_Transmit+0x168>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Transmit+0x16e>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800612c:	e074      	b.n	8006218 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1ce      	bne.n	80060d6 <HAL_SPI_Transmit+0x11c>
 8006138:	e04c      	b.n	80061d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_SPI_Transmit+0x18e>
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d140      	bne.n	80061ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800616e:	e02c      	b.n	80061ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d113      	bne.n	80061a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80061a4:	e011      	b.n	80061ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a6:	f7fb fe47 	bl	8001e38 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d803      	bhi.n	80061be <HAL_SPI_Transmit+0x204>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Transmit+0x20a>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061c8:	e026      	b.n	8006218 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1cd      	bne.n	8006170 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fb59 	bl	8006890 <SPI_EndRxTxTransaction>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e000      	b.n	8006218 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006216:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006228:	7ffb      	ldrb	r3, [r7, #31]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b08c      	sub	sp, #48	; 0x30
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x26>
 8006254:	2302      	movs	r3, #2
 8006256:	e18a      	b.n	800656e <HAL_SPI_TransmitReceive+0x33c>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006260:	f7fb fdea 	bl	8001e38 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800627a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800627e:	2b01      	cmp	r3, #1
 8006280:	d00f      	beq.n	80062a2 <HAL_SPI_TransmitReceive+0x70>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006288:	d107      	bne.n	800629a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <HAL_SPI_TransmitReceive+0x68>
 8006292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006296:	2b04      	cmp	r3, #4
 8006298:	d003      	beq.n	80062a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800629a:	2302      	movs	r3, #2
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a0:	e15b      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x82>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x82>
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062ba:	e14e      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d003      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2205      	movs	r2, #5
 80062cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	887a      	ldrh	r2, [r7, #2]
 80062e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	887a      	ldrh	r2, [r7, #2]
 80062f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d007      	beq.n	8006324 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632c:	d178      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_SPI_TransmitReceive+0x10a>
 8006336:	8b7b      	ldrh	r3, [r7, #26]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d166      	bne.n	800640a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	881a      	ldrh	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	1c9a      	adds	r2, r3, #2
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006360:	e053      	b.n	800640a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d11b      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x176>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x176>
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d113      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d119      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x1b8>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d014      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	b292      	uxth	r2, r2
 80063cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e6:	2301      	movs	r3, #1
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063ea:	f7fb fd25 	bl	8001e38 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d807      	bhi.n	800640a <HAL_SPI_TransmitReceive+0x1d8>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d003      	beq.n	800640a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006408:	e0a7      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1a6      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x130>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1a1      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x130>
 800641e:	e07c      	b.n	800651a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_TransmitReceive+0x1fc>
 8006428:	8b7b      	ldrh	r3, [r7, #26]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d16b      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	330c      	adds	r3, #12
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006454:	e057      	b.n	8006506 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d11c      	bne.n	800649e <HAL_SPI_TransmitReceive+0x26c>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d017      	beq.n	800649e <HAL_SPI_TransmitReceive+0x26c>
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d114      	bne.n	800649e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d119      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x2ae>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d014      	beq.n	80064e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064dc:	2301      	movs	r3, #1
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064e0:	f7fb fcaa 	bl	8001e38 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d803      	bhi.n	80064f8 <HAL_SPI_TransmitReceive+0x2c6>
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x2cc>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006504:	e029      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1a2      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x224>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d19d      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f9b6 	bl	8006890 <SPI_EndRxTxTransaction>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d006      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006536:	e010      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	e000      	b.n	800655a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006558:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800656a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800656e:	4618      	mov	r0, r3
 8006570:	3730      	adds	r7, #48	; 0x30
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10f      	bne.n	80065bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	099b      	lsrs	r3, r3, #6
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
    return;
 80065ba:	e0be      	b.n	800673a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_SPI_IRQHandler+0x66>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	09db      	lsrs	r3, r3, #7
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
    return;
 80065dc:	e0ad      	b.n	800673a <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_SPI_IRQHandler+0x80>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	099b      	lsrs	r3, r3, #6
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80a1 	beq.w	800673a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 809a 	beq.w	800673a <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	099b      	lsrs	r3, r3, #6
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d023      	beq.n	800665a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d011      	beq.n	8006642 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	e00b      	b.n	800665a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	693b      	ldr	r3, [r7, #16]
        return;
 8006658:	e06f      	b.n	800673a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f043 0201 	orr.w	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	2b00      	cmp	r3, #0
 8006696:	d04f      	beq.n	8006738 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <HAL_SPI_IRQHandler+0x14c>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d034      	beq.n	800672e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0203 	bic.w	r2, r2, #3
 80066d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d011      	beq.n	8006700 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	4a17      	ldr	r2, [pc, #92]	; (8006740 <HAL_SPI_IRQHandler+0x1c8>)
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fc f977 	bl	80029dc <HAL_DMA_Abort_IT>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006704:	2b00      	cmp	r3, #0
 8006706:	d016      	beq.n	8006736 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670c:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <HAL_SPI_IRQHandler+0x1c8>)
 800670e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006714:	4618      	mov	r0, r3
 8006716:	f7fc f961 	bl	80029dc <HAL_DMA_Abort_IT>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800672c:	e003      	b.n	8006736 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f808 	bl	8006744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006734:	e000      	b.n	8006738 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006736:	bf00      	nop
    return;
 8006738:	bf00      	nop
  }
}
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	08006757 	.word	0x08006757

08006744 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr

08006756 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff ffe7 	bl	8006744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006790:	f7fb fb52 	bl	8001e38 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4413      	add	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a0:	f7fb fb4a 	bl	8001e38 <HAL_GetTick>
 80067a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	015b      	lsls	r3, r3, #5
 80067ac:	0d1b      	lsrs	r3, r3, #20
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	e054      	b.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d050      	beq.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c0:	f7fb fb3a 	bl	8001e38 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d902      	bls.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d13d      	bne.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ee:	d111      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d004      	beq.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006802:	d107      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681c:	d10f      	bne.n	800683e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800683c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e017      	b.n	8006882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3b01      	subs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	bf0c      	ite	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	2300      	movne	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d19b      	bne.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000006c 	.word	0x2000006c

08006890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800689c:	4b1b      	ldr	r3, [pc, #108]	; (800690c <SPI_EndRxTxTransaction+0x7c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <SPI_EndRxTxTransaction+0x80>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	0d5b      	lsrs	r3, r3, #21
 80068a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068ac:	fb02 f303 	mul.w	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ba:	d112      	bne.n	80068e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2200      	movs	r2, #0
 80068c4:	2180      	movs	r1, #128	; 0x80
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ff5a 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f043 0220 	orr.w	r2, r3, #32
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e00f      	b.n	8006902 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f8:	2b80      	cmp	r3, #128	; 0x80
 80068fa:	d0f2      	beq.n	80068e2 <SPI_EndRxTxTransaction+0x52>
 80068fc:	e000      	b.n	8006900 <SPI_EndRxTxTransaction+0x70>
        break;
 80068fe:	bf00      	nop
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000006c 	.word	0x2000006c
 8006910:	165e9f81 	.word	0x165e9f81

08006914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e03f      	b.n	80069a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fb f90e 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	; 0x24
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fc25 	bl	80071a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800696c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695a      	ldr	r2, [r3, #20]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800697c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800698c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	; 0x28
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d17c      	bne.n	8006ac8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_UART_Transmit+0x2c>
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e075      	b.n	8006aca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UART_Transmit+0x3e>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e06e      	b.n	8006aca <HAL_UART_Transmit+0x11c>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a02:	f7fb fa19 	bl	8001e38 <HAL_GetTick>
 8006a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	88fa      	ldrh	r2, [r7, #6]
 8006a0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1c:	d108      	bne.n	8006a30 <HAL_UART_Transmit+0x82>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e003      	b.n	8006a38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a40:	e02a      	b.n	8006a98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fa11 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e036      	b.n	8006aca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	3302      	adds	r3, #2
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e007      	b.n	8006a8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1cf      	bne.n	8006a42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2140      	movs	r1, #64	; 0x40
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f9e1 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e000      	b.n	8006aca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10d      	bne.n	8006b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <HAL_UART_IRQHandler+0x52>
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa99 	bl	8007056 <UART_Receive_IT>
      return;
 8006b24:	e17b      	b.n	8006e1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80b1 	beq.w	8006c90 <HAL_UART_IRQHandler+0x1bc>
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <HAL_UART_IRQHandler+0x70>
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80a6 	beq.w	8006c90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HAL_UART_IRQHandler+0x90>
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_UART_IRQHandler+0xb0>
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	f043 0202 	orr.w	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xd0>
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	f043 0204 	orr.w	r2, r3, #4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <HAL_UART_IRQHandler+0xfa>
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_UART_IRQHandler+0xee>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f043 0208 	orr.w	r2, r3, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 811e 	beq.w	8006e14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x11e>
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa32 	bl	8007056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <HAL_UART_IRQHandler+0x146>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d031      	beq.n	8006c7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f974 	bl	8006f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d123      	bne.n	8006c76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d013      	beq.n	8006c6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4a76      	ldr	r2, [pc, #472]	; (8006e24 <HAL_UART_IRQHandler+0x350>)
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fb fec2 	bl	80029dc <HAL_DMA_Abort_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d016      	beq.n	8006c8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e00e      	b.n	8006c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8ec 	bl	8006e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e00a      	b.n	8006c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8e8 	bl	8006e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	e006      	b.n	8006c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8e4 	bl	8006e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c8a:	e0c3      	b.n	8006e14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	bf00      	nop
    return;
 8006c8e:	e0c1      	b.n	8006e14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f040 80a1 	bne.w	8006ddc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 809b 	beq.w	8006ddc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8095 	beq.w	8006ddc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d14e      	bne.n	8006d74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006ce0:	8a3b      	ldrh	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8098 	beq.w	8006e18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cec:	8a3a      	ldrh	r2, [r7, #16]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f080 8092 	bcs.w	8006e18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8a3a      	ldrh	r2, [r7, #16]
 8006cf8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d02b      	beq.n	8006d5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0210 	bic.w	r2, r2, #16
 8006d50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fb fe03 	bl	8002962 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f876 	bl	8006e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d72:	e051      	b.n	8006e18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d047      	beq.n	8006e1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006d8c:	8a7b      	ldrh	r3, [r7, #18]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d044      	beq.n	8006e1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006da0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0210 	bic.w	r2, r2, #16
 8006dce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dd0:	8a7b      	ldrh	r3, [r7, #18]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f842 	bl	8006e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dda:	e01f      	b.n	8006e1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <HAL_UART_IRQHandler+0x324>
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f8c9 	bl	8006f88 <UART_Transmit_IT>
    return;
 8006df6:	e012      	b.n	8006e1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <HAL_UART_IRQHandler+0x34a>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f90a 	bl	8007026 <UART_EndTransmit_IT>
    return;
 8006e12:	e004      	b.n	8006e1e <HAL_UART_IRQHandler+0x34a>
    return;
 8006e14:	bf00      	nop
 8006e16:	e002      	b.n	8006e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006e1c:	bf00      	nop
  }
}
 8006e1e:	3728      	adds	r7, #40	; 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08006f61 	.word	0x08006f61

08006e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e84:	e02c      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d028      	beq.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e94:	f7fa ffd0 	bl	8001e38 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d21d      	bcs.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e00f      	b.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d0c3      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0210 	bic.w	r2, r2, #16
 8006f46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff ff66 	bl	8006e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b21      	cmp	r3, #33	; 0x21
 8006f9a:	d13e      	bne.n	800701a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa4:	d114      	bne.n	8006fd0 <UART_Transmit_IT+0x48>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d110      	bne.n	8006fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]
 8006fce:	e008      	b.n	8006fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6211      	str	r1, [r2, #32]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10f      	bne.n	8007016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e000      	b.n	800701c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800701a:	2302      	movs	r3, #2
  }
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff feee 	bl	8006e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b22      	cmp	r3, #34	; 0x22
 8007068:	f040 8099 	bne.w	800719e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d117      	bne.n	80070a6 <UART_Receive_IT+0x50>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d113      	bne.n	80070a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	b29a      	uxth	r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28
 80070a4:	e026      	b.n	80070f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d007      	beq.n	80070ca <UART_Receive_IT+0x74>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <UART_Receive_IT+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e008      	b.n	80070ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4619      	mov	r1, r3
 8007102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007104:	2b00      	cmp	r3, #0
 8007106:	d148      	bne.n	800719a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0220 	bic.w	r2, r2, #32
 8007116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d123      	bne.n	8007190 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0210 	bic.w	r2, r2, #16
 800715c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b10      	cmp	r3, #16
 800716a:	d10a      	bne.n	8007182 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fe68 	bl	8006e5e <HAL_UARTEx_RxEventCallback>
 800718e:	e002      	b.n	8007196 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fe52 	bl	8006e3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e002      	b.n	80071a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800719e:	2302      	movs	r3, #2
  }
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80071e8:	f023 030c 	bic.w	r3, r3, #12
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	430b      	orrs	r3, r1
 80071f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a55      	ldr	r2, [pc, #340]	; (8007368 <UART_SetConfig+0x1c0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d103      	bne.n	800721e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007216:	f7fe f90d 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	e002      	b.n	8007224 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fe f8f5 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8007222:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722c:	d14c      	bne.n	80072c8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009a      	lsls	r2, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	4a49      	ldr	r2, [pc, #292]	; (800736c <UART_SetConfig+0x1c4>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	0119      	lsls	r1, r3, #4
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009a      	lsls	r2, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	fbb2 f2f3 	udiv	r2, r2, r3
 8007264:	4b41      	ldr	r3, [pc, #260]	; (800736c <UART_SetConfig+0x1c4>)
 8007266:	fba3 0302 	umull	r0, r3, r3, r2
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2064      	movs	r0, #100	; 0x64
 800726e:	fb00 f303 	mul.w	r3, r0, r3
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	3332      	adds	r3, #50	; 0x32
 8007278:	4a3c      	ldr	r2, [pc, #240]	; (800736c <UART_SetConfig+0x1c4>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007286:	4419      	add	r1, r3
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009a      	lsls	r2, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	fbb2 f2f3 	udiv	r2, r2, r3
 800729e:	4b33      	ldr	r3, [pc, #204]	; (800736c <UART_SetConfig+0x1c4>)
 80072a0:	fba3 0302 	umull	r0, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2064      	movs	r0, #100	; 0x64
 80072a8:	fb00 f303 	mul.w	r3, r0, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	4a2e      	ldr	r2, [pc, #184]	; (800736c <UART_SetConfig+0x1c4>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 0207 	and.w	r2, r3, #7
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	440a      	add	r2, r1
 80072c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072c6:	e04a      	b.n	800735e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009a      	lsls	r2, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	4a23      	ldr	r2, [pc, #140]	; (800736c <UART_SetConfig+0x1c4>)
 80072e0:	fba2 2303 	umull	r2, r3, r2, r3
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	0119      	lsls	r1, r3, #4
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009a      	lsls	r2, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80072fe:	4b1b      	ldr	r3, [pc, #108]	; (800736c <UART_SetConfig+0x1c4>)
 8007300:	fba3 0302 	umull	r0, r3, r3, r2
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	2064      	movs	r0, #100	; 0x64
 8007308:	fb00 f303 	mul.w	r3, r0, r3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	3332      	adds	r3, #50	; 0x32
 8007312:	4a16      	ldr	r2, [pc, #88]	; (800736c <UART_SetConfig+0x1c4>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800731e:	4419      	add	r1, r3
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009a      	lsls	r2, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	fbb2 f2f3 	udiv	r2, r2, r3
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <UART_SetConfig+0x1c4>)
 8007338:	fba3 0302 	umull	r0, r3, r3, r2
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	2064      	movs	r0, #100	; 0x64
 8007340:	fb00 f303 	mul.w	r3, r0, r3
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	3332      	adds	r3, #50	; 0x32
 800734a:	4a08      	ldr	r2, [pc, #32]	; (800736c <UART_SetConfig+0x1c4>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	f003 020f 	and.w	r2, r3, #15
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	440a      	add	r2, r1
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40013800 	.word	0x40013800
 800736c:	51eb851f 	.word	0x51eb851f

08007370 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007374:	4904      	ldr	r1, [pc, #16]	; (8007388 <MX_FATFS_Init+0x18>)
 8007376:	4805      	ldr	r0, [pc, #20]	; (800738c <MX_FATFS_Init+0x1c>)
 8007378:	f003 fd22 	bl	800adc0 <FATFS_LinkDriver>
 800737c:	4603      	mov	r3, r0
 800737e:	461a      	mov	r2, r3
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <MX_FATFS_Init+0x20>)
 8007382:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	200025b0 	.word	0x200025b0
 800738c:	20000078 	.word	0x20000078
 8007390:	200025b4 	.word	0x200025b4

08007394 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007398:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7f9 fa12 	bl	80007d8 <SD_disk_initialize>
 80073b4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	4603      	mov	r3, r0
 80073c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f9 faea 	bl	80009a4 <SD_disk_status>
 80073d0:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80073ea:	7bf8      	ldrb	r0, [r7, #15]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	f7f9 faeb 	bl	80009cc <SD_disk_read>
 80073f6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007410:	7bf8      	ldrb	r0, [r7, #15]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	f7f9 fb42 	bl	8000aa0 <SD_disk_write>
 800741c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	4603      	mov	r3, r0
 800742e:	603a      	str	r2, [r7, #0]
 8007430:	71fb      	strb	r3, [r7, #7]
 8007432:	460b      	mov	r3, r1
 8007434:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007436:	79b9      	ldrb	r1, [r7, #6]
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 fbb3 	bl	8000ba8 <SD_disk_ioctl>
 8007442:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	4a08      	ldr	r2, [pc, #32]	; (800747c <disk_status+0x30>)
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	79fa      	ldrb	r2, [r7, #7]
 8007464:	4905      	ldr	r1, [pc, #20]	; (800747c <disk_status+0x30>)
 8007466:	440a      	add	r2, r1
 8007468:	7a12      	ldrb	r2, [r2, #8]
 800746a:	4610      	mov	r0, r2
 800746c:	4798      	blx	r3
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000338 	.word	0x20000338

08007480 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <disk_initialize+0x48>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d111      	bne.n	80074bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <disk_initialize+0x48>)
 800749c:	2101      	movs	r1, #1
 800749e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <disk_initialize+0x48>)
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	79fa      	ldrb	r2, [r7, #7]
 80074ae:	4906      	ldr	r1, [pc, #24]	; (80074c8 <disk_initialize+0x48>)
 80074b0:	440a      	add	r2, r1
 80074b2:	7a12      	ldrb	r2, [r2, #8]
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000338 	.word	0x20000338

080074cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4a0a      	ldr	r2, [pc, #40]	; (8007508 <disk_read+0x3c>)
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	689c      	ldr	r4, [r3, #8]
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	4a07      	ldr	r2, [pc, #28]	; (8007508 <disk_read+0x3c>)
 80074ec:	4413      	add	r3, r2
 80074ee:	7a18      	ldrb	r0, [r3, #8]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	47a0      	blx	r4
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd90      	pop	{r4, r7, pc}
 8007506:	bf00      	nop
 8007508:	20000338 	.word	0x20000338

0800750c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <disk_write+0x3c>)
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	68dc      	ldr	r4, [r3, #12]
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <disk_write+0x3c>)
 800752c:	4413      	add	r3, r2
 800752e:	7a18      	ldrb	r0, [r3, #8]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	47a0      	blx	r4
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]
  return res;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd90      	pop	{r4, r7, pc}
 8007546:	bf00      	nop
 8007548:	20000338 	.word	0x20000338

0800754c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	603a      	str	r2, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
 8007558:	460b      	mov	r3, r1
 800755a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <disk_ioctl+0x38>)
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	79fa      	ldrb	r2, [r7, #7]
 800756a:	4906      	ldr	r1, [pc, #24]	; (8007584 <disk_ioctl+0x38>)
 800756c:	440a      	add	r2, r1
 800756e:	7a10      	ldrb	r0, [r2, #8]
 8007570:	79b9      	ldrb	r1, [r7, #6]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4798      	blx	r3
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
  return res;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000338 	.word	0x20000338

08007588 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3301      	adds	r3, #1
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007598:	89fb      	ldrh	r3, [r7, #14]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b21a      	sxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b21b      	sxth	r3, r3
 80075a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075aa:	89fb      	ldrh	r3, [r7, #14]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	3202      	adds	r2, #2
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	3201      	adds	r2, #1
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
	return rv;
 80075ee:	68fb      	ldr	r3, [r7, #12]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr

080075fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	887a      	ldrh	r2, [r7, #2]
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	0a1b      	lsrs	r3, r3, #8
 8007616:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	607a      	str	r2, [r7, #4]
 800761e:	887a      	ldrh	r2, [r7, #2]
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	0a1b      	lsrs	r3, r3, #8
 8007648:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr

08007684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	1c53      	adds	r3, r2, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1c59      	adds	r1, r3, #1
 80076a8:	6179      	str	r1, [r7, #20]
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f1      	bne.n	800769e <mem_cpy+0x1a>
	}
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	617a      	str	r2, [r7, #20]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f3      	bne.n	80076d4 <mem_set+0x10>
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80076f8:	b480      	push	{r7}
 80076fa:	b089      	sub	sp, #36	; 0x24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	61fa      	str	r2, [r7, #28]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	61ba      	str	r2, [r7, #24]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	1acb      	subs	r3, r1, r3
 8007724:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <mem_cmp+0x40>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0eb      	beq.n	8007710 <mem_cmp+0x18>

	return r;
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800774e:	e002      	b.n	8007756 <chk_chr+0x12>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3301      	adds	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <chk_chr+0x26>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	4293      	cmp	r3, r2
 8007768:	d1f2      	bne.n	8007750 <chk_chr+0xc>
	return *str;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	781b      	ldrb	r3, [r3, #0]
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007782:	2300      	movs	r3, #0
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e029      	b.n	80077e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800778c:	4a26      	ldr	r2, [pc, #152]	; (8007828 <chk_lock+0xb0>)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	4413      	add	r3, r2
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01d      	beq.n	80077d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800779a:	4a23      	ldr	r2, [pc, #140]	; (8007828 <chk_lock+0xb0>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	4413      	add	r3, r2
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d116      	bne.n	80077da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077ac:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <chk_lock+0xb0>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	4413      	add	r3, r2
 80077b4:	3304      	adds	r3, #4
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077bc:	429a      	cmp	r2, r3
 80077be:	d10c      	bne.n	80077da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <chk_lock+0xb0>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4413      	add	r3, r2
 80077c8:	3308      	adds	r3, #8
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d102      	bne.n	80077da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077d4:	e007      	b.n	80077e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d9d2      	bls.n	800778c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d109      	bne.n	8007800 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <chk_lock+0x80>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d101      	bne.n	80077fc <chk_lock+0x84>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e010      	b.n	800781e <chk_lock+0xa6>
 80077fc:	2312      	movs	r3, #18
 80077fe:	e00e      	b.n	800781e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d108      	bne.n	8007818 <chk_lock+0xa0>
 8007806:	4a08      	ldr	r2, [pc, #32]	; (8007828 <chk_lock+0xb0>)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	4413      	add	r3, r2
 800780e:	330c      	adds	r3, #12
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007816:	d101      	bne.n	800781c <chk_lock+0xa4>
 8007818:	2310      	movs	r3, #16
 800781a:	e000      	b.n	800781e <chk_lock+0xa6>
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	20000118 	.word	0x20000118

0800782c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	e002      	b.n	800783e <enq_lock+0x12>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3301      	adds	r3, #1
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d806      	bhi.n	8007852 <enq_lock+0x26>
 8007844:	4a08      	ldr	r2, [pc, #32]	; (8007868 <enq_lock+0x3c>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	4413      	add	r3, r2
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f2      	bne.n	8007838 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b02      	cmp	r3, #2
 8007856:	bf14      	ite	ne
 8007858:	2301      	movne	r3, #1
 800785a:	2300      	moveq	r3, #0
 800785c:	b2db      	uxtb	r3, r3
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr
 8007868:	20000118 	.word	0x20000118

0800786c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e01f      	b.n	80078bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800787c:	4a41      	ldr	r2, [pc, #260]	; (8007984 <inc_lock+0x118>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	4413      	add	r3, r2
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d113      	bne.n	80078b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800788e:	4a3d      	ldr	r2, [pc, #244]	; (8007984 <inc_lock+0x118>)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	4413      	add	r3, r2
 8007896:	3304      	adds	r3, #4
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800789e:	429a      	cmp	r2, r3
 80078a0:	d109      	bne.n	80078b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078a2:	4a38      	ldr	r2, [pc, #224]	; (8007984 <inc_lock+0x118>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	4413      	add	r3, r2
 80078aa:	3308      	adds	r3, #8
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d006      	beq.n	80078c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d9dc      	bls.n	800787c <inc_lock+0x10>
 80078c2:	e000      	b.n	80078c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80078c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d132      	bne.n	8007932 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e002      	b.n	80078d8 <inc_lock+0x6c>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d806      	bhi.n	80078ec <inc_lock+0x80>
 80078de:	4a29      	ldr	r2, [pc, #164]	; (8007984 <inc_lock+0x118>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f2      	bne.n	80078d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d101      	bne.n	80078f6 <inc_lock+0x8a>
 80078f2:	2300      	movs	r3, #0
 80078f4:	e040      	b.n	8007978 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4922      	ldr	r1, [pc, #136]	; (8007984 <inc_lock+0x118>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	440b      	add	r3, r1
 8007902:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	491e      	ldr	r1, [pc, #120]	; (8007984 <inc_lock+0x118>)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	440b      	add	r3, r1
 8007910:	3304      	adds	r3, #4
 8007912:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	491a      	ldr	r1, [pc, #104]	; (8007984 <inc_lock+0x118>)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	440b      	add	r3, r1
 8007920:	3308      	adds	r3, #8
 8007922:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007924:	4a17      	ldr	r2, [pc, #92]	; (8007984 <inc_lock+0x118>)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	4413      	add	r3, r2
 800792c:	330c      	adds	r3, #12
 800792e:	2200      	movs	r2, #0
 8007930:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <inc_lock+0xe0>
 8007938:	4a12      	ldr	r2, [pc, #72]	; (8007984 <inc_lock+0x118>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	4413      	add	r3, r2
 8007940:	330c      	adds	r3, #12
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <inc_lock+0xe0>
 8007948:	2300      	movs	r3, #0
 800794a:	e015      	b.n	8007978 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d108      	bne.n	8007964 <inc_lock+0xf8>
 8007952:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <inc_lock+0x118>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	4413      	add	r3, r2
 800795a:	330c      	adds	r3, #12
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	e001      	b.n	8007968 <inc_lock+0xfc>
 8007964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007968:	4906      	ldr	r1, [pc, #24]	; (8007984 <inc_lock+0x118>)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	440b      	add	r3, r1
 8007970:	330c      	adds	r3, #12
 8007972:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000118 	.word	0x20000118

08007988 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3b01      	subs	r3, #1
 8007994:	607b      	str	r3, [r7, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d825      	bhi.n	80079e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800799c:	4a16      	ldr	r2, [pc, #88]	; (80079f8 <dec_lock+0x70>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	4413      	add	r3, r2
 80079a4:	330c      	adds	r3, #12
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079aa:	89fb      	ldrh	r3, [r7, #14]
 80079ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b0:	d101      	bne.n	80079b6 <dec_lock+0x2e>
 80079b2:	2300      	movs	r3, #0
 80079b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80079b6:	89fb      	ldrh	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <dec_lock+0x3a>
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	3b01      	subs	r3, #1
 80079c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80079c2:	4a0d      	ldr	r2, [pc, #52]	; (80079f8 <dec_lock+0x70>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	4413      	add	r3, r2
 80079ca:	330c      	adds	r3, #12
 80079cc:	89fa      	ldrh	r2, [r7, #14]
 80079ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80079d0:	89fb      	ldrh	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <dec_lock+0x5a>
 80079d6:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <dec_lock+0x70>)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	4413      	add	r3, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	737b      	strb	r3, [r7, #13]
 80079e6:	e001      	b.n	80079ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80079e8:	2302      	movs	r3, #2
 80079ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80079ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr
 80079f8:	20000118 	.word	0x20000118

080079fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e010      	b.n	8007a2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	; (8007a40 <clear_lock+0x44>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	4413      	add	r3, r2
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d105      	bne.n	8007a26 <clear_lock+0x2a>
 8007a1a:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <clear_lock+0x44>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4413      	add	r3, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d9eb      	bls.n	8007a0a <clear_lock+0xe>
	}
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000118 	.word	0x20000118

08007a44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	78db      	ldrb	r3, [r3, #3]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d034      	beq.n	8007ac2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	7858      	ldrb	r0, [r3, #1]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a68:	2301      	movs	r3, #1
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	f7ff fd4e 	bl	800750c <disk_write>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	73fb      	strb	r3, [r7, #15]
 8007a7a:	e022      	b.n	8007ac2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d217      	bcs.n	8007ac2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	789b      	ldrb	r3, [r3, #2]
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	e010      	b.n	8007abc <sync_window+0x78>
					wsect += fs->fsize;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7858      	ldrb	r0, [r3, #1]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007aae:	2301      	movs	r3, #1
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	f7ff fd2b 	bl	800750c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d8eb      	bhi.n	8007a9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d01b      	beq.n	8007b1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ffad 	bl	8007a44 <sync_window>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d113      	bne.n	8007b1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7858      	ldrb	r0, [r3, #1]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007afe:	2301      	movs	r3, #1
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	f7ff fce3 	bl	80074cc <disk_read>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d004      	beq.n	8007b16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff ff87 	bl	8007a44 <sync_window>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d159      	bne.n	8007bf4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d149      	bne.n	8007bdc <sync_fs+0xb4>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d145      	bne.n	8007bdc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	899b      	ldrh	r3, [r3, #12]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	f7ff fdb1 	bl	80076c4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3338      	adds	r3, #56	; 0x38
 8007b66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b6a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fd43 	bl	80075fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3338      	adds	r3, #56	; 0x38
 8007b78:	4921      	ldr	r1, [pc, #132]	; (8007c00 <sync_fs+0xd8>)
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fd57 	bl	800762e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3338      	adds	r3, #56	; 0x38
 8007b84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b88:	491e      	ldr	r1, [pc, #120]	; (8007c04 <sync_fs+0xdc>)
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fd4f 	bl	800762e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3338      	adds	r3, #56	; 0x38
 8007b94:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7ff fd45 	bl	800762e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3338      	adds	r3, #56	; 0x38
 8007ba8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7ff fd3b 	bl	800762e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7858      	ldrb	r0, [r3, #1]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f7ff fc9b 	bl	800750c <disk_write>
			fs->fsi_flag = 0;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fcb1 	bl	800754c <disk_ioctl>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <sync_fs+0xcc>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	41615252 	.word	0x41615252
 8007c04:	61417272 	.word	0x61417272

08007c08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	3b02      	subs	r3, #2
 8007c16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	3b02      	subs	r3, #2
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d301      	bcc.n	8007c28 <clust2sect+0x20>
 8007c24:	2300      	movs	r3, #0
 8007c26:	e008      	b.n	8007c3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	895b      	ldrh	r3, [r3, #10]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	fb03 f202 	mul.w	r2, r3, r2
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	4413      	add	r3, r2
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d904      	bls.n	8007c64 <get_fat+0x20>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	e0bb      	b.n	8007de2 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	f000 8083 	beq.w	8007d80 <get_fat+0x13c>
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	f300 80a7 	bgt.w	8007dce <get_fat+0x18a>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d002      	beq.n	8007c8a <get_fat+0x46>
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d056      	beq.n	8007d36 <get_fat+0xf2>
 8007c88:	e0a1      	b.n	8007dce <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	899b      	ldrh	r3, [r3, #12]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ca8:	4413      	add	r3, r2
 8007caa:	4619      	mov	r1, r3
 8007cac:	6938      	ldr	r0, [r7, #16]
 8007cae:	f7ff ff0d 	bl	8007acc <move_window>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 808d 	bne.w	8007dd4 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	60fa      	str	r2, [r7, #12]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	8992      	ldrh	r2, [r2, #12]
 8007cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cc8:	fb02 f201 	mul.w	r2, r2, r1
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cd6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	899b      	ldrh	r3, [r3, #12]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ce8:	4413      	add	r3, r2
 8007cea:	4619      	mov	r1, r3
 8007cec:	6938      	ldr	r0, [r7, #16]
 8007cee:	f7ff feed 	bl	8007acc <move_window>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d16f      	bne.n	8007dd8 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	899b      	ldrh	r3, [r3, #12]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d04:	fb02 f201 	mul.w	r2, r2, r1
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	461a      	mov	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <get_fat+0xe8>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	e002      	b.n	8007d32 <get_fat+0xee>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d32:	617b      	str	r3, [r7, #20]
			break;
 8007d34:	e055      	b.n	8007de2 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	899b      	ldrh	r3, [r3, #12]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6938      	ldr	r0, [r7, #16]
 8007d50:	f7ff febc 	bl	8007acc <move_window>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d140      	bne.n	8007ddc <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	8992      	ldrh	r2, [r2, #12]
 8007d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d6c:	fb02 f200 	mul.w	r2, r2, r0
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	440b      	add	r3, r1
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fc07 	bl	8007588 <ld_word>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	617b      	str	r3, [r7, #20]
			break;
 8007d7e:	e030      	b.n	8007de2 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	899b      	ldrh	r3, [r3, #12]
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d94:	4413      	add	r3, r2
 8007d96:	4619      	mov	r1, r3
 8007d98:	6938      	ldr	r0, [r7, #16]
 8007d9a:	f7ff fe97 	bl	8007acc <move_window>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11d      	bne.n	8007de0 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	8992      	ldrh	r2, [r2, #12]
 8007db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007db6:	fb02 f200 	mul.w	r2, r2, r0
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fbf9 	bl	80075b6 <ld_dword>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dca:	617b      	str	r3, [r7, #20]
			break;
 8007dcc:	e009      	b.n	8007de2 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007dce:	2301      	movs	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	e006      	b.n	8007de2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd4:	bf00      	nop
 8007dd6:	e004      	b.n	8007de2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007de0:	bf00      	nop
		}
	}

	return val;
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b089      	sub	sp, #36	; 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	f240 8102 	bls.w	8008008 <put_fat+0x21c>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	f080 80fc 	bcs.w	8008008 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	f000 80b6 	beq.w	8007f86 <put_fat+0x19a>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	f300 80fd 	bgt.w	800801a <put_fat+0x22e>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d003      	beq.n	8007e2c <put_fat+0x40>
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	f000 8083 	beq.w	8007f30 <put_fat+0x144>
 8007e2a:	e0f6      	b.n	800801a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4413      	add	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	899b      	ldrh	r3, [r3, #12]
 8007e42:	4619      	mov	r1, r3
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e4a:	4413      	add	r3, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fe3c 	bl	8007acc <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e58:	7ffb      	ldrb	r3, [r7, #31]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 80d6 	bne.w	800800c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	61ba      	str	r2, [r7, #24]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	8992      	ldrh	r2, [r2, #12]
 8007e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e74:	fb02 f200 	mul.w	r2, r2, r0
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <put_fat+0xb8>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b25b      	sxtb	r3, r3
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	b25a      	sxtb	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	e001      	b.n	8007ea8 <put_fat+0xbc>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	899b      	ldrh	r3, [r3, #12]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff fe00 	bl	8007acc <move_window>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ed0:	7ffb      	ldrb	r3, [r7, #31]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 809c 	bne.w	8008010 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	899b      	ldrh	r3, [r3, #12]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eea:	fb02 f200 	mul.w	r2, r2, r0
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	440b      	add	r3, r1
 8007ef2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <put_fat+0x11a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	091b      	lsrs	r3, r3, #4
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	e00e      	b.n	8007f24 <put_fat+0x138>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	f023 030f 	bic.w	r3, r3, #15
 8007f10:	b25a      	sxtb	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	70da      	strb	r2, [r3, #3]
			break;
 8007f2e:	e074      	b.n	800801a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	899b      	ldrh	r3, [r3, #12]
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f44:	4413      	add	r3, r2
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fdbf 	bl	8007acc <move_window>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d15d      	bne.n	8008014 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	8992      	ldrh	r2, [r2, #12]
 8007f66:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f6a:	fb02 f200 	mul.w	r2, r2, r0
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	440b      	add	r3, r1
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	b292      	uxth	r2, r2
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fb3e 	bl	80075fa <st_word>
			fs->wflag = 1;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	70da      	strb	r2, [r3, #3]
			break;
 8007f84:	e049      	b.n	800801a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	899b      	ldrh	r3, [r3, #12]
 8007f8e:	089b      	lsrs	r3, r3, #2
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fd94 	bl	8007acc <move_window>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fa8:	7ffb      	ldrb	r3, [r7, #31]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d134      	bne.n	8008018 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	8992      	ldrh	r2, [r2, #12]
 8007fc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fc6:	fb02 f200 	mul.w	r2, r2, r0
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	440b      	add	r3, r1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff faf1 	bl	80075b6 <ld_dword>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007fda:	4323      	orrs	r3, r4
 8007fdc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	8992      	ldrh	r2, [r2, #12]
 8007fec:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ff0:	fb02 f200 	mul.w	r2, r2, r0
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fb17 	bl	800762e <st_dword>
			fs->wflag = 1;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	70da      	strb	r2, [r3, #3]
			break;
 8008006:	e008      	b.n	800801a <put_fat+0x22e>
		}
	}
 8008008:	bf00      	nop
 800800a:	e006      	b.n	800801a <put_fat+0x22e>
			if (res != FR_OK) break;
 800800c:	bf00      	nop
 800800e:	e004      	b.n	800801a <put_fat+0x22e>
			if (res != FR_OK) break;
 8008010:	bf00      	nop
 8008012:	e002      	b.n	800801a <put_fat+0x22e>
			if (res != FR_OK) break;
 8008014:	bf00      	nop
 8008016:	e000      	b.n	800801a <put_fat+0x22e>
			if (res != FR_OK) break;
 8008018:	bf00      	nop
	return res;
 800801a:	7ffb      	ldrb	r3, [r7, #31]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3724      	adds	r7, #36	; 0x24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd90      	pop	{r4, r7, pc}

08008024 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d904      	bls.n	800804a <remove_chain+0x26>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	d301      	bcc.n	800804e <remove_chain+0x2a>
 800804a:	2302      	movs	r3, #2
 800804c:	e04b      	b.n	80080e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008054:	f04f 32ff 	mov.w	r2, #4294967295
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	69b8      	ldr	r0, [r7, #24]
 800805c:	f7ff fec6 	bl	8007dec <put_fat>
 8008060:	4603      	mov	r3, r0
 8008062:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008064:	7ffb      	ldrb	r3, [r7, #31]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <remove_chain+0x4a>
 800806a:	7ffb      	ldrb	r3, [r7, #31]
 800806c:	e03b      	b.n	80080e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fde7 	bl	8007c44 <get_fat>
 8008076:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d031      	beq.n	80080e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <remove_chain+0x64>
 8008084:	2302      	movs	r3, #2
 8008086:	e02e      	b.n	80080e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d101      	bne.n	8008094 <remove_chain+0x70>
 8008090:	2301      	movs	r3, #1
 8008092:	e028      	b.n	80080e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008094:	2200      	movs	r2, #0
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	69b8      	ldr	r0, [r7, #24]
 800809a:	f7ff fea7 	bl	8007dec <put_fat>
 800809e:	4603      	mov	r3, r0
 80080a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80080a2:	7ffb      	ldrb	r3, [r7, #31]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <remove_chain+0x88>
 80080a8:	7ffb      	ldrb	r3, [r7, #31]
 80080aa:	e01c      	b.n	80080e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	699a      	ldr	r2, [r3, #24]
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	3b02      	subs	r3, #2
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d20b      	bcs.n	80080d2 <remove_chain+0xae>
			fs->free_clst++;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d3c6      	bcc.n	800806e <remove_chain+0x4a>
 80080e0:	e000      	b.n	80080e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80080e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b088      	sub	sp, #32
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <create_chain+0x2c>
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	429a      	cmp	r2, r3
 8008118:	d31b      	bcc.n	8008152 <create_chain+0x64>
 800811a:	2301      	movs	r3, #1
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	e018      	b.n	8008152 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fd8e 	bl	8007c44 <get_fat>
 8008128:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d801      	bhi.n	8008134 <create_chain+0x46>
 8008130:	2301      	movs	r3, #1
 8008132:	e070      	b.n	8008216 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d101      	bne.n	8008140 <create_chain+0x52>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	e06a      	b.n	8008216 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	429a      	cmp	r2, r3
 8008148:	d201      	bcs.n	800814e <create_chain+0x60>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	e063      	b.n	8008216 <create_chain+0x128>
		scl = clst;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	3301      	adds	r3, #1
 800815a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	429a      	cmp	r2, r3
 8008164:	d307      	bcc.n	8008176 <create_chain+0x88>
				ncl = 2;
 8008166:	2302      	movs	r3, #2
 8008168:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	429a      	cmp	r2, r3
 8008170:	d901      	bls.n	8008176 <create_chain+0x88>
 8008172:	2300      	movs	r3, #0
 8008174:	e04f      	b.n	8008216 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008176:	69f9      	ldr	r1, [r7, #28]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fd63 	bl	8007c44 <get_fat>
 800817e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d003      	beq.n	8008194 <create_chain+0xa6>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d101      	bne.n	8008198 <create_chain+0xaa>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	e03e      	b.n	8008216 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d1da      	bne.n	8008156 <create_chain+0x68>
 80081a0:	2300      	movs	r3, #0
 80081a2:	e038      	b.n	8008216 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80081a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	69f9      	ldr	r1, [r7, #28]
 80081ac:	6938      	ldr	r0, [r7, #16]
 80081ae:	f7ff fe1d 	bl	8007dec <put_fat>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <create_chain+0xe2>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d006      	beq.n	80081d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6938      	ldr	r0, [r7, #16]
 80081c8:	f7ff fe10 	bl	8007dec <put_fat>
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d116      	bne.n	8008204 <create_chain+0x116>
		fs->last_clst = ncl;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	3b02      	subs	r3, #2
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d804      	bhi.n	80081f4 <create_chain+0x106>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	1e5a      	subs	r2, r3, #1
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	791b      	ldrb	r3, [r3, #4]
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	711a      	strb	r2, [r3, #4]
 8008202:	e007      	b.n	8008214 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d102      	bne.n	8008210 <create_chain+0x122>
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
 800820e:	e000      	b.n	8008212 <create_chain+0x124>
 8008210:	2301      	movs	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008214:	69fb      	ldr	r3, [r7, #28]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800821e:	b480      	push	{r7}
 8008220:	b087      	sub	sp, #28
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	3304      	adds	r3, #4
 8008234:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	899b      	ldrh	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	8952      	ldrh	r2, [r2, #10]
 8008246:	fbb3 f3f2 	udiv	r3, r3, r2
 800824a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1d1a      	adds	r2, r3, #4
 8008250:	613a      	str	r2, [r7, #16]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <clmt_clust+0x42>
 800825c:	2300      	movs	r3, #0
 800825e:	e010      	b.n	8008282 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	d307      	bcc.n	8008278 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008276:	e7e9      	b.n	800824c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008278:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	4413      	add	r3, r2
}
 8008282:	4618      	mov	r0, r3
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	bc80      	pop	{r7}
 800828a:	4770      	bx	lr

0800828c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082a2:	d204      	bcs.n	80082ae <dir_sdi+0x22>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e071      	b.n	8008396 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <dir_sdi+0x46>
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d902      	bls.n	80082d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10c      	bne.n	80082f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	8912      	ldrh	r2, [r2, #8]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d301      	bcc.n	80082e8 <dir_sdi+0x5c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e056      	b.n	8008396 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	61da      	str	r2, [r3, #28]
 80082f0:	e02d      	b.n	800834e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	895b      	ldrh	r3, [r3, #10]
 80082f6:	461a      	mov	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	899b      	ldrh	r3, [r3, #12]
 80082fc:	fb03 f302 	mul.w	r3, r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008302:	e019      	b.n	8008338 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6979      	ldr	r1, [r7, #20]
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fc9b 	bl	8007c44 <get_fat>
 800830e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d101      	bne.n	800831c <dir_sdi+0x90>
 8008318:	2301      	movs	r3, #1
 800831a:	e03c      	b.n	8008396 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d904      	bls.n	800832c <dir_sdi+0xa0>
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	429a      	cmp	r2, r3
 800832a:	d301      	bcc.n	8008330 <dir_sdi+0xa4>
 800832c:	2302      	movs	r3, #2
 800832e:	e032      	b.n	8008396 <dir_sdi+0x10a>
			ofs -= csz;
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	429a      	cmp	r2, r3
 800833e:	d2e1      	bcs.n	8008304 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008340:	6979      	ldr	r1, [r7, #20]
 8008342:	6938      	ldr	r0, [r7, #16]
 8008344:	f7ff fc60 	bl	8007c08 <clust2sect>
 8008348:	4602      	mov	r2, r0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <dir_sdi+0xd4>
 800835c:	2302      	movs	r3, #2
 800835e:	e01a      	b.n	8008396 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	899b      	ldrh	r3, [r3, #12]
 8008368:	4619      	mov	r1, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	899b      	ldrh	r3, [r3, #12]
 8008380:	461a      	mov	r2, r3
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	fbb3 f0f2 	udiv	r0, r3, r2
 8008388:	fb02 f200 	mul.w	r2, r2, r0
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	18ca      	adds	r2, r1, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	3320      	adds	r3, #32
 80083b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <dir_next+0x28>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083c4:	d301      	bcc.n	80083ca <dir_next+0x2c>
 80083c6:	2304      	movs	r3, #4
 80083c8:	e0bb      	b.n	8008542 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	899b      	ldrh	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80083d6:	fb02 f201 	mul.w	r2, r2, r1
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 809d 	bne.w	800851c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	8912      	ldrh	r2, [r2, #8]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f0c0 808d 	bcc.w	800851c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	61da      	str	r2, [r3, #28]
 8008408:	2304      	movs	r3, #4
 800840a:	e09a      	b.n	8008542 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	899b      	ldrh	r3, [r3, #12]
 8008410:	461a      	mov	r2, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	fbb3 f3f2 	udiv	r3, r3, r2
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	8952      	ldrh	r2, [r2, #10]
 800841c:	3a01      	subs	r2, #1
 800841e:	4013      	ands	r3, r2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d17b      	bne.n	800851c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7ff fc09 	bl	8007c44 <get_fat>
 8008432:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d801      	bhi.n	800843e <dir_next+0xa0>
 800843a:	2302      	movs	r3, #2
 800843c:	e081      	b.n	8008542 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d101      	bne.n	800844a <dir_next+0xac>
 8008446:	2301      	movs	r3, #1
 8008448:	e07b      	b.n	8008542 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	429a      	cmp	r2, r3
 8008452:	d359      	bcc.n	8008508 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	61da      	str	r2, [r3, #28]
 8008460:	2304      	movs	r3, #4
 8008462:	e06e      	b.n	8008542 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7ff fe3e 	bl	80080ee <create_chain>
 8008472:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <dir_next+0xe0>
 800847a:	2307      	movs	r3, #7
 800847c:	e061      	b.n	8008542 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <dir_next+0xea>
 8008484:	2302      	movs	r3, #2
 8008486:	e05c      	b.n	8008542 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848e:	d101      	bne.n	8008494 <dir_next+0xf6>
 8008490:	2301      	movs	r3, #1
 8008492:	e056      	b.n	8008542 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fad5 	bl	8007a44 <sync_window>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <dir_next+0x106>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04e      	b.n	8008542 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	899b      	ldrh	r3, [r3, #12]
 80084ae:	461a      	mov	r2, r3
 80084b0:	2100      	movs	r1, #0
 80084b2:	f7ff f907 	bl	80076c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	6979      	ldr	r1, [r7, #20]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff fba3 	bl	8007c08 <clust2sect>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	635a      	str	r2, [r3, #52]	; 0x34
 80084c8:	e012      	b.n	80084f0 <dir_next+0x152>
						fs->wflag = 1;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fab7 	bl	8007a44 <sync_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <dir_next+0x142>
 80084dc:	2301      	movs	r3, #1
 80084de:	e030      	b.n	8008542 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3301      	adds	r3, #1
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	635a      	str	r2, [r3, #52]	; 0x34
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	895b      	ldrh	r3, [r3, #10]
 80084f4:	461a      	mov	r2, r3
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d3e6      	bcc.n	80084ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800850e:	6979      	ldr	r1, [r7, #20]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7ff fb79 	bl	8007c08 <clust2sect>
 8008516:	4602      	mov	r2, r0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	899b      	ldrh	r3, [r3, #12]
 800852c:	461a      	mov	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	fbb3 f0f2 	udiv	r0, r3, r2
 8008534:	fb02 f200 	mul.w	r2, r2, r0
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	18ca      	adds	r2, r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff fe95 	bl	800828c <dir_sdi>
 8008562:	4603      	mov	r3, r0
 8008564:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d12b      	bne.n	80085c4 <dir_alloc+0x7a>
		n = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4619      	mov	r1, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff faa8 	bl	8007acc <move_window>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d11d      	bne.n	80085c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2be5      	cmp	r3, #229	; 0xe5
 800858e:	d004      	beq.n	800859a <dir_alloc+0x50>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d107      	bne.n	80085aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3301      	adds	r3, #1
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d102      	bne.n	80085ae <dir_alloc+0x64>
 80085a8:	e00c      	b.n	80085c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80085ae:	2101      	movs	r1, #1
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff fef4 	bl	800839e <dir_next>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0d7      	beq.n	8008570 <dir_alloc+0x26>
 80085c0:	e000      	b.n	80085c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80085c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d101      	bne.n	80085ce <dir_alloc+0x84>
 80085ca:	2307      	movs	r3, #7
 80085cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	331a      	adds	r3, #26
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe ffce 	bl	8007588 <ld_word>
 80085ec:	4603      	mov	r3, r0
 80085ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d109      	bne.n	800860c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	3314      	adds	r3, #20
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe ffc3 	bl	8007588 <ld_word>
 8008602:	4603      	mov	r3, r0
 8008604:	041b      	lsls	r3, r3, #16
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	331a      	adds	r3, #26
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	b292      	uxth	r2, r2
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe ffe4 	bl	80075fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d109      	bne.n	800864e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f103 0214 	add.w	r2, r3, #20
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	b29b      	uxth	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe ffd6 	bl	80075fa <st_word>
	}
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008658:	b590      	push	{r4, r7, lr}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	331a      	adds	r3, #26
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe ff8e 	bl	8007588 <ld_word>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <cmp_lfn+0x1e>
 8008672:	2300      	movs	r3, #0
 8008674:	e059      	b.n	800872a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800867e:	1e5a      	subs	r2, r3, #1
 8008680:	4613      	mov	r3, r2
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800868c:	2301      	movs	r3, #1
 800868e:	81fb      	strh	r3, [r7, #14]
 8008690:	2300      	movs	r3, #0
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	e033      	b.n	80086fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008696:	4a27      	ldr	r2, [pc, #156]	; (8008734 <cmp_lfn+0xdc>)
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	4413      	add	r3, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe ff6f 	bl	8007588 <ld_word>
 80086aa:	4603      	mov	r3, r0
 80086ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80086ae:	89fb      	ldrh	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01a      	beq.n	80086ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2bfe      	cmp	r3, #254	; 0xfe
 80086b8:	d812      	bhi.n	80086e0 <cmp_lfn+0x88>
 80086ba:	89bb      	ldrh	r3, [r7, #12]
 80086bc:	4618      	mov	r0, r3
 80086be:	f002 fbc9 	bl	800ae54 <ff_wtoupper>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461c      	mov	r4, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	617a      	str	r2, [r7, #20]
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f002 fbbd 	bl	800ae54 <ff_wtoupper>
 80086da:	4603      	mov	r3, r0
 80086dc:	429c      	cmp	r4, r3
 80086de:	d001      	beq.n	80086e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80086e0:	2300      	movs	r3, #0
 80086e2:	e022      	b.n	800872a <cmp_lfn+0xd2>
			}
			wc = uc;
 80086e4:	89bb      	ldrh	r3, [r7, #12]
 80086e6:	81fb      	strh	r3, [r7, #14]
 80086e8:	e006      	b.n	80086f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80086ea:	89bb      	ldrh	r3, [r7, #12]
 80086ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d001      	beq.n	80086f8 <cmp_lfn+0xa0>
 80086f4:	2300      	movs	r3, #0
 80086f6:	e018      	b.n	800872a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3301      	adds	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b0c      	cmp	r3, #12
 8008702:	d9c8      	bls.n	8008696 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <cmp_lfn+0xd0>
 8008710:	89fb      	ldrh	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <cmp_lfn+0xd0>
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <cmp_lfn+0xd0>
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008728:	2301      	movs	r3, #1
}
 800872a:	4618      	mov	r0, r3
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	bd90      	pop	{r4, r7, pc}
 8008732:	bf00      	nop
 8008734:	0800b144 	.word	0x0800b144

08008738 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4611      	mov	r1, r2
 8008744:	461a      	mov	r2, r3
 8008746:	460b      	mov	r3, r1
 8008748:	71fb      	strb	r3, [r7, #7]
 800874a:	4613      	mov	r3, r2
 800874c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	330d      	adds	r3, #13
 8008752:	79ba      	ldrb	r2, [r7, #6]
 8008754:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	330b      	adds	r3, #11
 800875a:	220f      	movs	r2, #15
 800875c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	330c      	adds	r3, #12
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	331a      	adds	r3, #26
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe ff44 	bl	80075fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	4613      	mov	r3, r2
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	82fb      	strh	r3, [r7, #22]
 8008786:	2300      	movs	r3, #0
 8008788:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800878a:	8afb      	ldrh	r3, [r7, #22]
 800878c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008790:	4293      	cmp	r3, r2
 8008792:	d007      	beq.n	80087a4 <put_lfn+0x6c>
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	61fa      	str	r2, [r7, #28]
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80087a4:	4a17      	ldr	r2, [pc, #92]	; (8008804 <put_lfn+0xcc>)
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	4413      	add	r3, r2
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	8afa      	ldrh	r2, [r7, #22]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe ff1f 	bl	80075fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80087bc:	8afb      	ldrh	r3, [r7, #22]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <put_lfn+0x90>
 80087c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	3301      	adds	r3, #1
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b0c      	cmp	r3, #12
 80087d2:	d9da      	bls.n	800878a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80087d4:	8afb      	ldrh	r3, [r7, #22]
 80087d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087da:	4293      	cmp	r3, r2
 80087dc:	d006      	beq.n	80087ec <put_lfn+0xb4>
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <put_lfn+0xbc>
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	79fa      	ldrb	r2, [r7, #7]
 80087f8:	701a      	strb	r2, [r3, #0]
}
 80087fa:	bf00      	nop
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	0800b144 	.word	0x0800b144

08008808 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	; 0x30
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008816:	220b      	movs	r2, #11
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7fe ff32 	bl	8007684 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b05      	cmp	r3, #5
 8008824:	d92b      	bls.n	800887e <gen_numname+0x76>
		sr = seq;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800882a:	e022      	b.n	8008872 <gen_numname+0x6a>
			wc = *lfn++;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	1c9a      	adds	r2, r3, #2
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008836:	2300      	movs	r3, #0
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
 800883a:	e017      	b.n	800886c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	005a      	lsls	r2, r3, #1
 8008840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	4413      	add	r3, r2
 8008848:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800884a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <gen_numname+0x5e>
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008860:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008864:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	3301      	adds	r3, #1
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	2b0f      	cmp	r3, #15
 8008870:	d9e4      	bls.n	800883c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1d8      	bne.n	800882c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800887e:	2307      	movs	r3, #7
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	b2db      	uxtb	r3, r3
 800888c:	3330      	adds	r3, #48	; 0x30
 800888e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008896:	2b39      	cmp	r3, #57	; 0x39
 8008898:	d904      	bls.n	80088a4 <gen_numname+0x9c>
 800889a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889e:	3307      	adds	r3, #7
 80088a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80088aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80088ae:	4413      	add	r3, r2
 80088b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	091b      	lsrs	r3, r3, #4
 80088bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1de      	bne.n	8008882 <gen_numname+0x7a>
	ns[i] = '~';
 80088c4:	f107 0214 	add.w	r2, r7, #20
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	4413      	add	r3, r2
 80088cc:	227e      	movs	r2, #126	; 0x7e
 80088ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80088d0:	2300      	movs	r3, #0
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
 80088d4:	e002      	b.n	80088dc <gen_numname+0xd4>
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	3301      	adds	r3, #1
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d205      	bcs.n	80088f0 <gen_numname+0xe8>
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	4413      	add	r3, r2
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d1f2      	bne.n	80088d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	2b07      	cmp	r3, #7
 80088f4:	d808      	bhi.n	8008908 <gen_numname+0x100>
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80088fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008900:	4413      	add	r3, r2
 8008902:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008906:	e000      	b.n	800890a <gen_numname+0x102>
 8008908:	2120      	movs	r1, #32
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	627a      	str	r2, [r7, #36]	; 0x24
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	460a      	mov	r2, r1
 8008916:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	2b07      	cmp	r3, #7
 800891c:	d9e8      	bls.n	80088f0 <gen_numname+0xe8>
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	3730      	adds	r7, #48	; 0x30
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008934:	230b      	movs	r3, #11
 8008936:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	0852      	lsrs	r2, r2, #1
 800893e:	01db      	lsls	r3, r3, #7
 8008940:	4313      	orrs	r3, r2
 8008942:	b2da      	uxtb	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	1c59      	adds	r1, r3, #1
 8008948:	6079      	str	r1, [r7, #4]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4413      	add	r3, r2
 800894e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3b01      	subs	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1ed      	bne.n	8008938 <sum_sfn+0x10>
	return sum;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr

08008968 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fc87 	bl	800828c <dir_sdi>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <dir_find+0x24>
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	e0a9      	b.n	8008ae0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800898c:	23ff      	movs	r3, #255	; 0xff
 800898e:	753b      	strb	r3, [r7, #20]
 8008990:	7d3b      	ldrb	r3, [r7, #20]
 8008992:	757b      	strb	r3, [r7, #21]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6938      	ldr	r0, [r7, #16]
 80089a4:	f7ff f892 	bl	8007acc <move_window>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 8090 	bne.w	8008ad4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089bc:	7dbb      	ldrb	r3, [r7, #22]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <dir_find+0x60>
 80089c2:	2304      	movs	r3, #4
 80089c4:	75fb      	strb	r3, [r7, #23]
 80089c6:	e08a      	b.n	8008ade <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	330b      	adds	r3, #11
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089d4:	73fb      	strb	r3, [r7, #15]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7bfa      	ldrb	r2, [r7, #15]
 80089da:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80089dc:	7dbb      	ldrb	r3, [r7, #22]
 80089de:	2be5      	cmp	r3, #229	; 0xe5
 80089e0:	d007      	beq.n	80089f2 <dir_find+0x8a>
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	f003 0308 	and.w	r3, r3, #8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <dir_find+0x98>
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d006      	beq.n	8008a00 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80089f2:	23ff      	movs	r3, #255	; 0xff
 80089f4:	757b      	strb	r3, [r7, #21]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f04f 32ff 	mov.w	r2, #4294967295
 80089fc:	631a      	str	r2, [r3, #48]	; 0x30
 80089fe:	e05e      	b.n	8008abe <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b0f      	cmp	r3, #15
 8008a04:	d136      	bne.n	8008a74 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d154      	bne.n	8008abe <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008a14:	7dbb      	ldrb	r3, [r7, #22]
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00d      	beq.n	8008a3a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	7b5b      	ldrb	r3, [r3, #13]
 8008a24:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2c:	75bb      	strb	r3, [r7, #22]
 8008a2e:	7dbb      	ldrb	r3, [r7, #22]
 8008a30:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695a      	ldr	r2, [r3, #20]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008a3a:	7dba      	ldrb	r2, [r7, #22]
 8008a3c:	7d7b      	ldrb	r3, [r7, #21]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d115      	bne.n	8008a6e <dir_find+0x106>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	330d      	adds	r3, #13
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	7d3a      	ldrb	r2, [r7, #20]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d10e      	bne.n	8008a6e <dir_find+0x106>
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7ff fdfc 	bl	8008658 <cmp_lfn>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <dir_find+0x106>
 8008a66:	7d7b      	ldrb	r3, [r7, #21]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	e000      	b.n	8008a70 <dir_find+0x108>
 8008a6e:	23ff      	movs	r3, #255	; 0xff
 8008a70:	757b      	strb	r3, [r7, #21]
 8008a72:	e024      	b.n	8008abe <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008a74:	7d7b      	ldrb	r3, [r7, #21]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <dir_find+0x126>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff ff52 	bl	8008928 <sum_sfn>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	7d3b      	ldrb	r3, [r7, #20]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d024      	beq.n	8008ad8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <dir_find+0x14a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a18      	ldr	r0, [r3, #32]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3324      	adds	r3, #36	; 0x24
 8008aa4:	220b      	movs	r2, #11
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f7fe fe26 	bl	80076f8 <mem_cmp>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d014      	beq.n	8008adc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ab2:	23ff      	movs	r3, #255	; 0xff
 8008ab4:	757b      	strb	r3, [r7, #21]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008abe:	2100      	movs	r1, #0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fc6c 	bl	800839e <dir_next>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f43f af65 	beq.w	800899c <dir_find+0x34>
 8008ad2:	e004      	b.n	8008ade <dir_find+0x176>
		if (res != FR_OK) break;
 8008ad4:	bf00      	nop
 8008ad6:	e002      	b.n	8008ade <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008ad8:	bf00      	nop
 8008ada:	e000      	b.n	8008ade <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008adc:	bf00      	nop

	return res;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08c      	sub	sp, #48	; 0x30
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008afc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <dir_register+0x20>
 8008b04:	2306      	movs	r3, #6
 8008b06:	e0e0      	b.n	8008cca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008b08:	2300      	movs	r3, #0
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0c:	e002      	b.n	8008b14 <dir_register+0x2c>
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	3301      	adds	r3, #1
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	691a      	ldr	r2, [r3, #16]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f4      	bne.n	8008b0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	220c      	movs	r2, #12
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fda7 	bl	8007684 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d032      	beq.n	8008ba6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2240      	movs	r2, #64	; 0x40
 8008b44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008b48:	2301      	movs	r3, #1
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b4c:	e016      	b.n	8008b7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	f107 010c 	add.w	r1, r7, #12
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	f7ff fe53 	bl	8008808 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff ff00 	bl	8008968 <dir_find>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	3301      	adds	r3, #1
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b63      	cmp	r3, #99	; 0x63
 8008b80:	d9e5      	bls.n	8008b4e <dir_register+0x66>
 8008b82:	e000      	b.n	8008b86 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008b84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	2b64      	cmp	r3, #100	; 0x64
 8008b8a:	d101      	bne.n	8008b90 <dir_register+0xa8>
 8008b8c:	2307      	movs	r3, #7
 8008b8e:	e09c      	b.n	8008cca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d002      	beq.n	8008b9e <dir_register+0xb6>
 8008b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b9c:	e095      	b.n	8008cca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008b9e:	7dfa      	ldrb	r2, [r7, #23]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <dir_register+0xd8>
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	4a47      	ldr	r2, [pc, #284]	; (8008cd4 <dir_register+0x1ec>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	089b      	lsrs	r3, r3, #2
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <dir_register+0xda>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008bc4:	6a39      	ldr	r1, [r7, #32]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fcbf 	bl	800854a <dir_alloc>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d148      	bne.n	8008c6c <dir_register+0x184>
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	623b      	str	r3, [r7, #32]
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d042      	beq.n	8008c6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	695a      	ldr	r2, [r3, #20]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	015b      	lsls	r3, r3, #5
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fb4a 	bl	800828c <dir_sdi>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d132      	bne.n	8008c6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3324      	adds	r3, #36	; 0x24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fe8c 	bl	8008928 <sum_sfn>
 8008c10:	4603      	mov	r3, r0
 8008c12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	69f8      	ldr	r0, [r7, #28]
 8008c1c:	f7fe ff56 	bl	8007acc <move_window>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11d      	bne.n	8008c6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	6918      	ldr	r0, [r3, #16]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a19      	ldr	r1, [r3, #32]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	7efb      	ldrb	r3, [r7, #27]
 8008c3c:	f7ff fd7c 	bl	8008738 <put_lfn>
				fs->wflag = 1;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2201      	movs	r2, #1
 8008c44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008c46:	2100      	movs	r1, #0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fba8 	bl	800839e <dir_next>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <dir_register+0x184>
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	623b      	str	r3, [r7, #32]
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1d5      	bne.n	8008c14 <dir_register+0x12c>
 8008c68:	e000      	b.n	8008c6c <dir_register+0x184>
				if (res != FR_OK) break;
 8008c6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d128      	bne.n	8008cc6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	69f8      	ldr	r0, [r7, #28]
 8008c7c:	f7fe ff26 	bl	8007acc <move_window>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d11b      	bne.n	8008cc6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	2220      	movs	r2, #32
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fd14 	bl	80076c4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a18      	ldr	r0, [r3, #32]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	220b      	movs	r2, #11
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	f7fe fcec 	bl	8007684 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	f002 0218 	and.w	r2, r2, #24
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3730      	adds	r7, #48	; 0x30
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	4ec4ec4f 	.word	0x4ec4ec4f

08008cd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	61ba      	str	r2, [r7, #24]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d08:	2b1f      	cmp	r3, #31
 8008d0a:	d940      	bls.n	8008d8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d0e:	2b2f      	cmp	r3, #47	; 0x2f
 8008d10:	d006      	beq.n	8008d20 <create_name+0x48>
 8008d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d14:	2b5c      	cmp	r3, #92	; 0x5c
 8008d16:	d110      	bne.n	8008d3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d18:	e002      	b.n	8008d20 <create_name+0x48>
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	4413      	add	r3, r2
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b2f      	cmp	r3, #47	; 0x2f
 8008d2a:	d0f6      	beq.n	8008d1a <create_name+0x42>
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	4413      	add	r3, r2
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b5c      	cmp	r3, #92	; 0x5c
 8008d36:	d0f0      	beq.n	8008d1a <create_name+0x42>
			break;
 8008d38:	e02a      	b.n	8008d90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2bfe      	cmp	r3, #254	; 0xfe
 8008d3e:	d901      	bls.n	8008d44 <create_name+0x6c>
 8008d40:	2306      	movs	r3, #6
 8008d42:	e177      	b.n	8009034 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 f846 	bl	800ade0 <ff_convert>
 8008d54:	4603      	mov	r3, r0
 8008d56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <create_name+0x8a>
 8008d5e:	2306      	movs	r3, #6
 8008d60:	e168      	b.n	8009034 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d64:	2b7f      	cmp	r3, #127	; 0x7f
 8008d66:	d809      	bhi.n	8008d7c <create_name+0xa4>
 8008d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	48b3      	ldr	r0, [pc, #716]	; (800903c <create_name+0x364>)
 8008d6e:	f7fe fce9 	bl	8007744 <chk_chr>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <create_name+0xa4>
 8008d78:	2306      	movs	r3, #6
 8008d7a:	e15b      	b.n	8009034 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	617a      	str	r2, [r7, #20]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008d8c:	e7b4      	b.n	8008cf8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008d8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	441a      	add	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d9c:	2b1f      	cmp	r3, #31
 8008d9e:	d801      	bhi.n	8008da4 <create_name+0xcc>
 8008da0:	2304      	movs	r3, #4
 8008da2:	e000      	b.n	8008da6 <create_name+0xce>
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008daa:	e011      	b.n	8008dd0 <create_name+0xf8>
		w = lfn[di - 1];
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008db2:	3b01      	subs	r3, #1
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d002      	beq.n	8008dca <create_name+0xf2>
 8008dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc8:	d106      	bne.n	8008dd8 <create_name+0x100>
		di--;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1ea      	bne.n	8008dac <create_name+0xd4>
 8008dd6:	e000      	b.n	8008dda <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008dd8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	2200      	movs	r2, #0
 8008de4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <create_name+0x118>
 8008dec:	2306      	movs	r3, #6
 8008dee:	e121      	b.n	8009034 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3324      	adds	r3, #36	; 0x24
 8008df4:	220b      	movs	r2, #11
 8008df6:	2120      	movs	r1, #32
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fc63 	bl	80076c4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008dfe:	2300      	movs	r3, #0
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	e002      	b.n	8008e0a <create_name+0x132>
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	3301      	adds	r3, #1
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d0f5      	beq.n	8008e04 <create_name+0x12c>
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	2b2e      	cmp	r3, #46	; 0x2e
 8008e24:	d0ee      	beq.n	8008e04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <create_name+0x168>
 8008e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e30:	f043 0303 	orr.w	r3, r3, #3
 8008e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008e38:	e002      	b.n	8008e40 <create_name+0x168>
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <create_name+0x182>
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	2b2e      	cmp	r3, #46	; 0x2e
 8008e58:	d1ef      	bne.n	8008e3a <create_name+0x162>

	i = b = 0; ni = 8;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
 8008e64:	2308      	movs	r3, #8
 8008e66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	61ba      	str	r2, [r7, #24]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 8090 	beq.w	8008fa0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d006      	beq.n	8008e94 <create_name+0x1bc>
 8008e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e88:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8a:	d10a      	bne.n	8008ea2 <create_name+0x1ca>
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d006      	beq.n	8008ea2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e98:	f043 0303 	orr.w	r3, r3, #3
 8008e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ea0:	e07d      	b.n	8008f9e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d203      	bcs.n	8008eb2 <create_name+0x1da>
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d123      	bne.n	8008efa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	2b0b      	cmp	r3, #11
 8008eb6:	d106      	bne.n	8008ec6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebc:	f043 0303 	orr.w	r3, r3, #3
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ec4:	e06f      	b.n	8008fa6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d005      	beq.n	8008eda <create_name+0x202>
 8008ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed2:	f043 0303 	orr.w	r3, r3, #3
 8008ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d860      	bhi.n	8008fa4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	623b      	str	r3, [r7, #32]
 8008eea:	230b      	movs	r3, #11
 8008eec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008eee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ef8:	e051      	b.n	8008f9e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008efc:	2b7f      	cmp	r3, #127	; 0x7f
 8008efe:	d914      	bls.n	8008f2a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 ff6b 	bl	800ade0 <ff_convert>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <create_name+0x246>
 8008f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f16:	3b80      	subs	r3, #128	; 0x80
 8008f18:	4a49      	ldr	r2, [pc, #292]	; (8009040 <create_name+0x368>)
 8008f1a:	5cd3      	ldrb	r3, [r2, r3]
 8008f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f22:	f043 0302 	orr.w	r3, r3, #2
 8008f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <create_name+0x268>
 8008f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f32:	4619      	mov	r1, r3
 8008f34:	4843      	ldr	r0, [pc, #268]	; (8009044 <create_name+0x36c>)
 8008f36:	f7fe fc05 	bl	8007744 <chk_chr>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008f40:	235f      	movs	r3, #95	; 0x5f
 8008f42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f48:	f043 0303 	orr.w	r3, r3, #3
 8008f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f50:	e01b      	b.n	8008f8a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f54:	2b40      	cmp	r3, #64	; 0x40
 8008f56:	d909      	bls.n	8008f6c <create_name+0x294>
 8008f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f5a:	2b5a      	cmp	r3, #90	; 0x5a
 8008f5c:	d806      	bhi.n	8008f6c <create_name+0x294>
					b |= 2;
 8008f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f62:	f043 0302 	orr.w	r3, r3, #2
 8008f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f6a:	e00e      	b.n	8008f8a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f6e:	2b60      	cmp	r3, #96	; 0x60
 8008f70:	d90b      	bls.n	8008f8a <create_name+0x2b2>
 8008f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f74:	2b7a      	cmp	r3, #122	; 0x7a
 8008f76:	d808      	bhi.n	8008f8a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f86:	3b20      	subs	r3, #32
 8008f88:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	623a      	str	r2, [r7, #32]
 8008f90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f92:	b2d1      	uxtb	r1, r2
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	4413      	add	r3, r2
 8008f98:	460a      	mov	r2, r1
 8008f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008f9e:	e763      	b.n	8008e68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008fa4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fac:	2be5      	cmp	r3, #229	; 0xe5
 8008fae:	d103      	bne.n	8008fb8 <create_name+0x2e0>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2205      	movs	r2, #5
 8008fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d104      	bne.n	8008fc8 <create_name+0x2f0>
 8008fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fcc:	f003 030c 	and.w	r3, r3, #12
 8008fd0:	2b0c      	cmp	r3, #12
 8008fd2:	d005      	beq.n	8008fe0 <create_name+0x308>
 8008fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d105      	bne.n	8008fec <create_name+0x314>
 8008fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe4:	f043 0302 	orr.w	r3, r3, #2
 8008fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d117      	bne.n	8009028 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d105      	bne.n	8009010 <create_name+0x338>
 8009004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009008:	f043 0310 	orr.w	r3, r3, #16
 800900c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009014:	f003 030c 	and.w	r3, r3, #12
 8009018:	2b04      	cmp	r3, #4
 800901a:	d105      	bne.n	8009028 <create_name+0x350>
 800901c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009020:	f043 0308 	orr.w	r3, r3, #8
 8009024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800902e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009032:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009034:	4618      	mov	r0, r3
 8009036:	3728      	adds	r7, #40	; 0x28
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	0800b028 	.word	0x0800b028
 8009040:	0800b0c4 	.word	0x0800b0c4
 8009044:	0800b034 	.word	0x0800b034

08009048 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800905c:	e002      	b.n	8009064 <follow_path+0x1c>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b2f      	cmp	r3, #47	; 0x2f
 800906a:	d0f8      	beq.n	800905e <follow_path+0x16>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b5c      	cmp	r3, #92	; 0x5c
 8009072:	d0f4      	beq.n	800905e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2200      	movs	r2, #0
 8009078:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b1f      	cmp	r3, #31
 8009080:	d80a      	bhi.n	8009098 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2280      	movs	r2, #128	; 0x80
 8009086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f8fd 	bl	800828c <dir_sdi>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]
 8009096:	e048      	b.n	800912a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009098:	463b      	mov	r3, r7
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fe1b 	bl	8008cd8 <create_name>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d139      	bne.n	8009120 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff fc5b 	bl	8008968 <dir_find>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d12c      	bne.n	8009124 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d127      	bne.n	8009124 <follow_path+0xdc>
 80090d4:	2305      	movs	r3, #5
 80090d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80090d8:	e024      	b.n	8009124 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d121      	bne.n	8009128 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	799b      	ldrb	r3, [r3, #6]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80090f0:	2305      	movs	r3, #5
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	e019      	b.n	800912a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	8992      	ldrh	r2, [r2, #12]
 8009104:	fbb3 f0f2 	udiv	r0, r3, r2
 8009108:	fb02 f200 	mul.w	r2, r2, r0
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	440b      	add	r3, r1
 8009110:	4619      	mov	r1, r3
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7ff fa60 	bl	80085d8 <ld_clust>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800911e:	e7bb      	b.n	8009098 <follow_path+0x50>
			if (res != FR_OK) break;
 8009120:	bf00      	nop
 8009122:	e002      	b.n	800912a <follow_path+0xe2>
				break;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009128:	bf00      	nop
			}
		}
	}

	return res;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800913c:	f04f 33ff 	mov.w	r3, #4294967295
 8009140:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d031      	beq.n	80091ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e002      	b.n	8009158 <get_ldnumber+0x24>
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	3301      	adds	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b1f      	cmp	r3, #31
 800915e:	d903      	bls.n	8009168 <get_ldnumber+0x34>
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b3a      	cmp	r3, #58	; 0x3a
 8009166:	d1f4      	bne.n	8009152 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b3a      	cmp	r3, #58	; 0x3a
 800916e:	d11c      	bne.n	80091aa <get_ldnumber+0x76>
			tp = *path;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	60fa      	str	r2, [r7, #12]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	3b30      	subs	r3, #48	; 0x30
 8009180:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b09      	cmp	r3, #9
 8009186:	d80e      	bhi.n	80091a6 <get_ldnumber+0x72>
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	429a      	cmp	r2, r3
 800918e:	d10a      	bne.n	80091a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <get_ldnumber+0x72>
					vol = (int)i;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	3301      	adds	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	e002      	b.n	80091b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80091ae:	693b      	ldr	r3, [r7, #16]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr
	...

080091bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	70da      	strb	r2, [r3, #3]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7fe fc78 	bl	8007acc <move_window>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <check_fs+0x2a>
 80091e2:	2304      	movs	r3, #4
 80091e4:	e038      	b.n	8009258 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3338      	adds	r3, #56	; 0x38
 80091ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe f9ca 	bl	8007588 <ld_word>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d001      	beq.n	8009204 <check_fs+0x48>
 8009200:	2303      	movs	r3, #3
 8009202:	e029      	b.n	8009258 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800920a:	2be9      	cmp	r3, #233	; 0xe9
 800920c:	d009      	beq.n	8009222 <check_fs+0x66>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009214:	2beb      	cmp	r3, #235	; 0xeb
 8009216:	d11e      	bne.n	8009256 <check_fs+0x9a>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800921e:	2b90      	cmp	r3, #144	; 0x90
 8009220:	d119      	bne.n	8009256 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3338      	adds	r3, #56	; 0x38
 8009226:	3336      	adds	r3, #54	; 0x36
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe f9c4 	bl	80075b6 <ld_dword>
 800922e:	4603      	mov	r3, r0
 8009230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009234:	4a0a      	ldr	r2, [pc, #40]	; (8009260 <check_fs+0xa4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d101      	bne.n	800923e <check_fs+0x82>
 800923a:	2300      	movs	r3, #0
 800923c:	e00c      	b.n	8009258 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3338      	adds	r3, #56	; 0x38
 8009242:	3352      	adds	r3, #82	; 0x52
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe f9b6 	bl	80075b6 <ld_dword>
 800924a:	4603      	mov	r3, r0
 800924c:	4a05      	ldr	r2, [pc, #20]	; (8009264 <check_fs+0xa8>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d101      	bne.n	8009256 <check_fs+0x9a>
 8009252:	2300      	movs	r3, #0
 8009254:	e000      	b.n	8009258 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009256:	2302      	movs	r3, #2
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	00544146 	.word	0x00544146
 8009264:	33544146 	.word	0x33544146

08009268 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b096      	sub	sp, #88	; 0x58
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff ff59 	bl	8009134 <get_ldnumber>
 8009282:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009286:	2b00      	cmp	r3, #0
 8009288:	da01      	bge.n	800928e <find_volume+0x26>
 800928a:	230b      	movs	r3, #11
 800928c:	e268      	b.n	8009760 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800928e:	4ab0      	ldr	r2, [pc, #704]	; (8009550 <find_volume+0x2e8>)
 8009290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009296:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <find_volume+0x3a>
 800929e:	230c      	movs	r3, #12
 80092a0:	e25e      	b.n	8009760 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01a      	beq.n	80092ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe f8c5 	bl	800744c <disk_status>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80092c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10c      	bne.n	80092ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <find_volume+0x82>
 80092da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80092e6:	230a      	movs	r3, #10
 80092e8:	e23a      	b.n	8009760 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80092ea:	2300      	movs	r3, #0
 80092ec:	e238      	b.n	8009760 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe f8bd 	bl	8007480 <disk_initialize>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800930c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009318:	2303      	movs	r3, #3
 800931a:	e221      	b.n	8009760 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <find_volume+0xca>
 8009322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800932e:	230a      	movs	r3, #10
 8009330:	e216      	b.n	8009760 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	7858      	ldrb	r0, [r3, #1]
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	330c      	adds	r3, #12
 800933a:	461a      	mov	r2, r3
 800933c:	2102      	movs	r1, #2
 800933e:	f7fe f905 	bl	800754c <disk_ioctl>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <find_volume+0xe4>
 8009348:	2301      	movs	r3, #1
 800934a:	e209      	b.n	8009760 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	899b      	ldrh	r3, [r3, #12]
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009354:	d80d      	bhi.n	8009372 <find_volume+0x10a>
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	899b      	ldrh	r3, [r3, #12]
 800935a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800935e:	d308      	bcc.n	8009372 <find_volume+0x10a>
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	899b      	ldrh	r3, [r3, #12]
 8009364:	461a      	mov	r2, r3
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	899b      	ldrh	r3, [r3, #12]
 800936a:	3b01      	subs	r3, #1
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <find_volume+0x10e>
 8009372:	2301      	movs	r3, #1
 8009374:	e1f4      	b.n	8009760 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800937a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800937c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800937e:	f7ff ff1d 	bl	80091bc <check_fs>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800938c:	2b02      	cmp	r3, #2
 800938e:	d14b      	bne.n	8009428 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009390:	2300      	movs	r3, #0
 8009392:	643b      	str	r3, [r7, #64]	; 0x40
 8009394:	e01f      	b.n	80093d6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80093a4:	4413      	add	r3, r2
 80093a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	3304      	adds	r3, #4
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <find_volume+0x158>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	3308      	adds	r3, #8
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe f8fd 	bl	80075b6 <ld_dword>
 80093bc:	4602      	mov	r2, r0
 80093be:	e000      	b.n	80093c2 <find_volume+0x15a>
 80093c0:	2200      	movs	r2, #0
 80093c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80093ca:	440b      	add	r3, r1
 80093cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d2:	3301      	adds	r3, #1
 80093d4:	643b      	str	r3, [r7, #64]	; 0x40
 80093d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d9dc      	bls.n	8009396 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80093dc:	2300      	movs	r3, #0
 80093de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80093e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <find_volume+0x184>
 80093e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e8:	3b01      	subs	r3, #1
 80093ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80093ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80093f4:	4413      	add	r3, r2
 80093f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80093fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80093fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <find_volume+0x1a6>
 8009402:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009406:	f7ff fed9 	bl	80091bc <check_fs>
 800940a:	4603      	mov	r3, r0
 800940c:	e000      	b.n	8009410 <find_volume+0x1a8>
 800940e:	2303      	movs	r3, #3
 8009410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009418:	2b01      	cmp	r3, #1
 800941a:	d905      	bls.n	8009428 <find_volume+0x1c0>
 800941c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941e:	3301      	adds	r3, #1
 8009420:	643b      	str	r3, [r7, #64]	; 0x40
 8009422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009424:	2b03      	cmp	r3, #3
 8009426:	d9e1      	bls.n	80093ec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800942c:	2b04      	cmp	r3, #4
 800942e:	d101      	bne.n	8009434 <find_volume+0x1cc>
 8009430:	2301      	movs	r3, #1
 8009432:	e195      	b.n	8009760 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009438:	2b01      	cmp	r3, #1
 800943a:	d901      	bls.n	8009440 <find_volume+0x1d8>
 800943c:	230d      	movs	r3, #13
 800943e:	e18f      	b.n	8009760 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	3338      	adds	r3, #56	; 0x38
 8009444:	330b      	adds	r3, #11
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe f89e 	bl	8007588 <ld_word>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	899b      	ldrh	r3, [r3, #12]
 8009454:	429a      	cmp	r2, r3
 8009456:	d001      	beq.n	800945c <find_volume+0x1f4>
 8009458:	230d      	movs	r3, #13
 800945a:	e181      	b.n	8009760 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	3338      	adds	r3, #56	; 0x38
 8009460:	3316      	adds	r3, #22
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe f890 	bl	8007588 <ld_word>
 8009468:	4603      	mov	r3, r0
 800946a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800946c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <find_volume+0x218>
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	3338      	adds	r3, #56	; 0x38
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe f89c 	bl	80075b6 <ld_dword>
 800947e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009484:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	789b      	ldrb	r3, [r3, #2]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d005      	beq.n	80094a4 <find_volume+0x23c>
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	789b      	ldrb	r3, [r3, #2]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d001      	beq.n	80094a4 <find_volume+0x23c>
 80094a0:	230d      	movs	r3, #13
 80094a2:	e15d      	b.n	8009760 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	789b      	ldrb	r3, [r3, #2]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	895b      	ldrh	r3, [r3, #10]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d008      	beq.n	80094d8 <find_volume+0x270>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	895b      	ldrh	r3, [r3, #10]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	895b      	ldrh	r3, [r3, #10]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	4013      	ands	r3, r2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <find_volume+0x274>
 80094d8:	230d      	movs	r3, #13
 80094da:	e141      	b.n	8009760 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	3338      	adds	r3, #56	; 0x38
 80094e0:	3311      	adds	r3, #17
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe f850 	bl	8007588 <ld_word>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094f6:	8992      	ldrh	r2, [r2, #12]
 80094f8:	0952      	lsrs	r2, r2, #5
 80094fa:	b292      	uxth	r2, r2
 80094fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009500:	fb02 f201 	mul.w	r2, r2, r1
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <find_volume+0x2a8>
 800950c:	230d      	movs	r3, #13
 800950e:	e127      	b.n	8009760 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	3338      	adds	r3, #56	; 0x38
 8009514:	3313      	adds	r3, #19
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe f836 	bl	8007588 <ld_word>
 800951c:	4603      	mov	r3, r0
 800951e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <find_volume+0x2cc>
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	3338      	adds	r3, #56	; 0x38
 800952a:	3320      	adds	r3, #32
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe f842 	bl	80075b6 <ld_dword>
 8009532:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	3338      	adds	r3, #56	; 0x38
 8009538:	330e      	adds	r3, #14
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe f824 	bl	8007588 <ld_word>
 8009540:	4603      	mov	r3, r0
 8009542:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009546:	2b00      	cmp	r3, #0
 8009548:	d104      	bne.n	8009554 <find_volume+0x2ec>
 800954a:	230d      	movs	r3, #13
 800954c:	e108      	b.n	8009760 <find_volume+0x4f8>
 800954e:	bf00      	nop
 8009550:	20000110 	.word	0x20000110

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009558:	4413      	add	r3, r2
 800955a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955c:	8911      	ldrh	r1, [r2, #8]
 800955e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009560:	8992      	ldrh	r2, [r2, #12]
 8009562:	0952      	lsrs	r2, r2, #5
 8009564:	b292      	uxth	r2, r2
 8009566:	fbb1 f2f2 	udiv	r2, r1, r2
 800956a:	b292      	uxth	r2, r2
 800956c:	4413      	add	r3, r2
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	429a      	cmp	r2, r3
 8009576:	d201      	bcs.n	800957c <find_volume+0x314>
 8009578:	230d      	movs	r3, #13
 800957a:	e0f1      	b.n	8009760 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800957c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009584:	8952      	ldrh	r2, [r2, #10]
 8009586:	fbb3 f3f2 	udiv	r3, r3, r2
 800958a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <find_volume+0x32e>
 8009592:	230d      	movs	r3, #13
 8009594:	e0e4      	b.n	8009760 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009596:	2303      	movs	r3, #3
 8009598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d802      	bhi.n	80095ac <find_volume+0x344>
 80095a6:	2302      	movs	r3, #2
 80095a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d802      	bhi.n	80095bc <find_volume+0x354>
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	1c9a      	adds	r2, r3, #2
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80095ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ce:	441a      	add	r2, r3
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80095d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	441a      	add	r2, r3
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80095de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d11e      	bne.n	8009624 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	3338      	adds	r3, #56	; 0x38
 80095ea:	332a      	adds	r3, #42	; 0x2a
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fd ffcb 	bl	8007588 <ld_word>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <find_volume+0x394>
 80095f8:	230d      	movs	r3, #13
 80095fa:	e0b1      	b.n	8009760 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	891b      	ldrh	r3, [r3, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <find_volume+0x3a0>
 8009604:	230d      	movs	r3, #13
 8009606:	e0ab      	b.n	8009760 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	3338      	adds	r3, #56	; 0x38
 800960c:	332c      	adds	r3, #44	; 0x2c
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd ffd1 	bl	80075b6 <ld_dword>
 8009614:	4602      	mov	r2, r0
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	647b      	str	r3, [r7, #68]	; 0x44
 8009622:	e01f      	b.n	8009664 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	891b      	ldrh	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <find_volume+0x3c8>
 800962c:	230d      	movs	r3, #13
 800962e:	e097      	b.n	8009760 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009636:	441a      	add	r2, r3
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800963c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009640:	2b02      	cmp	r3, #2
 8009642:	d103      	bne.n	800964c <find_volume+0x3e4>
 8009644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	e00a      	b.n	8009662 <find_volume+0x3fa>
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	4613      	mov	r3, r2
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	4413      	add	r3, r2
 8009656:	085a      	lsrs	r2, r3, #1
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009662:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	6a1a      	ldr	r2, [r3, #32]
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	899b      	ldrh	r3, [r3, #12]
 800966c:	4619      	mov	r1, r3
 800966e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009670:	440b      	add	r3, r1
 8009672:	3b01      	subs	r3, #1
 8009674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009676:	8989      	ldrh	r1, [r1, #12]
 8009678:	fbb3 f3f1 	udiv	r3, r3, r1
 800967c:	429a      	cmp	r2, r3
 800967e:	d201      	bcs.n	8009684 <find_volume+0x41c>
 8009680:	230d      	movs	r3, #13
 8009682:	e06d      	b.n	8009760 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	619a      	str	r2, [r3, #24]
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	2280      	movs	r2, #128	; 0x80
 8009698:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800969a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d149      	bne.n	8009736 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	3338      	adds	r3, #56	; 0x38
 80096a6:	3330      	adds	r3, #48	; 0x30
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd ff6d 	bl	8007588 <ld_word>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d140      	bne.n	8009736 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b6:	3301      	adds	r3, #1
 80096b8:	4619      	mov	r1, r3
 80096ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096bc:	f7fe fa06 	bl	8007acc <move_window>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d137      	bne.n	8009736 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	2200      	movs	r2, #0
 80096ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	3338      	adds	r3, #56	; 0x38
 80096d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd ff57 	bl	8007588 <ld_word>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d127      	bne.n	8009736 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	3338      	adds	r3, #56	; 0x38
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fd ff63 	bl	80075b6 <ld_dword>
 80096f0:	4603      	mov	r3, r0
 80096f2:	4a1d      	ldr	r2, [pc, #116]	; (8009768 <find_volume+0x500>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d11e      	bne.n	8009736 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	3338      	adds	r3, #56	; 0x38
 80096fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009700:	4618      	mov	r0, r3
 8009702:	f7fd ff58 	bl	80075b6 <ld_dword>
 8009706:	4603      	mov	r3, r0
 8009708:	4a18      	ldr	r2, [pc, #96]	; (800976c <find_volume+0x504>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d113      	bne.n	8009736 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	3338      	adds	r3, #56	; 0x38
 8009712:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd ff4d 	bl	80075b6 <ld_dword>
 800971c:	4602      	mov	r2, r0
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	3338      	adds	r3, #56	; 0x38
 8009726:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd ff43 	bl	80075b6 <ld_dword>
 8009730:	4602      	mov	r2, r0
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800973c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <find_volume+0x508>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <find_volume+0x508>)
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <find_volume+0x508>)
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	4a07      	ldr	r2, [pc, #28]	; (8009774 <find_volume+0x50c>)
 8009756:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800975a:	f7fe f94f 	bl	80079fc <clear_lock>
#endif
	return FR_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3758      	adds	r7, #88	; 0x58
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	41615252 	.word	0x41615252
 800976c:	61417272 	.word	0x61417272
 8009770:	20000114 	.word	0x20000114
 8009774:	20000138 	.word	0x20000138

08009778 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009782:	2309      	movs	r3, #9
 8009784:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01c      	beq.n	80097c6 <validate+0x4e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d018      	beq.n	80097c6 <validate+0x4e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d013      	beq.n	80097c6 <validate+0x4e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	889a      	ldrh	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	88db      	ldrh	r3, [r3, #6]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d10c      	bne.n	80097c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd fe4a 	bl	800744c <disk_status>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <validate+0x4e>
			res = FR_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <validate+0x5a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	e000      	b.n	80097d4 <validate+0x5c>
 80097d2:	2300      	movs	r3, #0
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	6013      	str	r3, [r2, #0]
	return res;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80097f6:	f107 0310 	add.w	r3, r7, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff fc9a 	bl	8009134 <get_ldnumber>
 8009800:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	da01      	bge.n	800980c <f_mount+0x28>
 8009808:	230b      	movs	r3, #11
 800980a:	e02b      	b.n	8009864 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800980c:	4a17      	ldr	r2, [pc, #92]	; (800986c <f_mount+0x88>)
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009814:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800981c:	69b8      	ldr	r0, [r7, #24]
 800981e:	f7fe f8ed 	bl	80079fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	490d      	ldr	r1, [pc, #52]	; (800986c <f_mount+0x88>)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <f_mount+0x66>
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d001      	beq.n	800984e <f_mount+0x6a>
 800984a:	2300      	movs	r3, #0
 800984c:	e00a      	b.n	8009864 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800984e:	f107 010c 	add.w	r1, r7, #12
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	2200      	movs	r2, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fd05 	bl	8009268 <find_volume>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000110 	.word	0x20000110

08009870 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b09a      	sub	sp, #104	; 0x68
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <f_open+0x18>
 8009884:	2309      	movs	r3, #9
 8009886:	e1bb      	b.n	8009c00 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009888:	79fb      	ldrb	r3, [r7, #7]
 800988a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800988e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009890:	79fa      	ldrb	r2, [r7, #7]
 8009892:	f107 0114 	add.w	r1, r7, #20
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fce4 	bl	8009268 <find_volume>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80098a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f040 819f 	bne.w	8009bee <f_open+0x37e>
		dj.obj.fs = fs;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	f107 0318 	add.w	r3, r7, #24
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff fbc3 	bl	8009048 <follow_path>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d11a      	bne.n	8009906 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80098d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098d4:	b25b      	sxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	da03      	bge.n	80098e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80098da:	2306      	movs	r3, #6
 80098dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098e0:	e011      	b.n	8009906 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	f023 0301 	bic.w	r3, r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	461a      	mov	r2, r3
 80098f4:	f107 0318 	add.w	r3, r7, #24
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fd ff3c 	bl	8007778 <chk_lock>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	f003 031c 	and.w	r3, r3, #28
 800990c:	2b00      	cmp	r3, #0
 800990e:	d07f      	beq.n	8009a10 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009914:	2b00      	cmp	r3, #0
 8009916:	d017      	beq.n	8009948 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009918:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800991c:	2b04      	cmp	r3, #4
 800991e:	d10e      	bne.n	800993e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009920:	f7fd ff84 	bl	800782c <enq_lock>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d006      	beq.n	8009938 <f_open+0xc8>
 800992a:	f107 0318 	add.w	r3, r7, #24
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff f8da 	bl	8008ae8 <dir_register>
 8009934:	4603      	mov	r3, r0
 8009936:	e000      	b.n	800993a <f_open+0xca>
 8009938:	2312      	movs	r3, #18
 800993a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800993e:	79fb      	ldrb	r3, [r7, #7]
 8009940:	f043 0308 	orr.w	r3, r3, #8
 8009944:	71fb      	strb	r3, [r7, #7]
 8009946:	e010      	b.n	800996a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009948:	7fbb      	ldrb	r3, [r7, #30]
 800994a:	f003 0311 	and.w	r3, r3, #17
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <f_open+0xea>
					res = FR_DENIED;
 8009952:	2307      	movs	r3, #7
 8009954:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009958:	e007      	b.n	800996a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <f_open+0xfa>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800996a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800996e:	2b00      	cmp	r3, #0
 8009970:	d168      	bne.n	8009a44 <f_open+0x1d4>
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	f003 0308 	and.w	r3, r3, #8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d063      	beq.n	8009a44 <f_open+0x1d4>
				dw = GET_FATTIME();
 800997c:	f7fd fd0a 	bl	8007394 <get_fattime>
 8009980:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	330e      	adds	r3, #14
 8009986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009988:	4618      	mov	r0, r3
 800998a:	f7fd fe50 	bl	800762e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	3316      	adds	r3, #22
 8009992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009994:	4618      	mov	r0, r3
 8009996:	f7fd fe4a 	bl	800762e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	330b      	adds	r3, #11
 800999e:	2220      	movs	r2, #32
 80099a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fe15 	bl	80085d8 <ld_clust>
 80099ae:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099b4:	2200      	movs	r2, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fe2d 	bl	8008616 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	331c      	adds	r3, #28
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fd fe33 	bl	800762e <st_dword>
					fs->wflag = 1;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	2201      	movs	r2, #1
 80099cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80099ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d037      	beq.n	8009a44 <f_open+0x1d4>
						dw = fs->winsect;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80099da:	f107 0318 	add.w	r3, r7, #24
 80099de:	2200      	movs	r2, #0
 80099e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fb1e 	bl	8008024 <remove_chain>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80099ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d126      	bne.n	8009a44 <f_open+0x1d4>
							res = move_window(fs, dw);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe f866 	bl	8007acc <move_window>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a0a:	3a01      	subs	r2, #1
 8009a0c:	615a      	str	r2, [r3, #20]
 8009a0e:	e019      	b.n	8009a44 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d115      	bne.n	8009a44 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a18:	7fbb      	ldrb	r3, [r7, #30]
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009a22:	2304      	movs	r3, #4
 8009a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a28:	e00c      	b.n	8009a44 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <f_open+0x1d4>
 8009a34:	7fbb      	ldrb	r3, [r7, #30]
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <f_open+0x1d4>
						res = FR_DENIED;
 8009a3e:	2307      	movs	r3, #7
 8009a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009a44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d128      	bne.n	8009a9e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bf14      	ite	ne
 8009a76:	2301      	movne	r3, #1
 8009a78:	2300      	moveq	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f107 0318 	add.w	r3, r7, #24
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fd fef1 	bl	800786c <inc_lock>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <f_open+0x22e>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f040 80a3 	bne.w	8009bee <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fd92 	bl	80085d8 <ld_clust>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	331c      	adds	r3, #28
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fd fd79 	bl	80075b6 <ld_dword>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	88da      	ldrh	r2, [r3, #6]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	79fa      	ldrb	r2, [r7, #7]
 8009ae2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3330      	adds	r3, #48	; 0x30
 8009afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fd fddf 	bl	80076c4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d06e      	beq.n	8009bee <f_open+0x37e>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d06a      	beq.n	8009bee <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68da      	ldr	r2, [r3, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	895b      	ldrh	r3, [r3, #10]
 8009b24:	461a      	mov	r2, r3
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	899b      	ldrh	r3, [r3, #12]
 8009b2a:	fb03 f302 	mul.w	r3, r3, r2
 8009b2e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b3c:	e016      	b.n	8009b6c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe f87e 	bl	8007c44 <get_fat>
 8009b48:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d802      	bhi.n	8009b56 <f_open+0x2e6>
 8009b50:	2302      	movs	r3, #2
 8009b52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d102      	bne.n	8009b64 <f_open+0x2f4>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <f_open+0x30c>
 8009b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d8e0      	bhi.n	8009b3e <f_open+0x2ce>
				}
				fp->clust = clst;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009b82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d131      	bne.n	8009bee <f_open+0x37e>
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	899b      	ldrh	r3, [r3, #12]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b96:	fb02 f201 	mul.w	r2, r2, r1
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d026      	beq.n	8009bee <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe f82f 	bl	8007c08 <clust2sect>
 8009baa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <f_open+0x34a>
						res = FR_INT_ERR;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009bb8:	e019      	b.n	8009bee <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	899b      	ldrh	r3, [r3, #12]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc8:	441a      	add	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	7858      	ldrb	r0, [r3, #1]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f7fd fc75 	bl	80074cc <disk_read>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <f_open+0x37e>
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009bee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <f_open+0x38c>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3768      	adds	r7, #104	; 0x68
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08e      	sub	sp, #56	; 0x38
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f107 0214 	add.w	r2, r7, #20
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff fda5 	bl	8009778 <validate>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d107      	bne.n	8009c4c <f_read+0x44>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	7d5b      	ldrb	r3, [r3, #21]
 8009c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <f_read+0x4a>
 8009c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c50:	e135      	b.n	8009ebe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	7d1b      	ldrb	r3, [r3, #20]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <f_read+0x5a>
 8009c5e:	2307      	movs	r3, #7
 8009c60:	e12d      	b.n	8009ebe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	f240 811e 	bls.w	8009eb4 <f_read+0x2ac>
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c7c:	e11a      	b.n	8009eb4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	8992      	ldrh	r2, [r2, #12]
 8009c86:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c8a:	fb02 f201 	mul.w	r2, r2, r1
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f040 80d5 	bne.w	8009e40 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	8992      	ldrh	r2, [r2, #12]
 8009c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	8952      	ldrh	r2, [r2, #10]
 8009ca6:	3a01      	subs	r2, #1
 8009ca8:	4013      	ands	r3, r2
 8009caa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d12f      	bne.n	8009d12 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8009cc0:	e013      	b.n	8009cea <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7fe faa4 	bl	800821e <clmt_clust>
 8009cd6:	6338      	str	r0, [r7, #48]	; 0x30
 8009cd8:	e007      	b.n	8009cea <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7fd ffae 	bl	8007c44 <get_fat>
 8009ce8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d804      	bhi.n	8009cfa <f_read+0xf2>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	755a      	strb	r2, [r3, #21]
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e0e1      	b.n	8009ebe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d104      	bne.n	8009d0c <f_read+0x104>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	755a      	strb	r2, [r3, #21]
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e0d8      	b.n	8009ebe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d10:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fd ff74 	bl	8007c08 <clust2sect>
 8009d20:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <f_read+0x12a>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	755a      	strb	r2, [r3, #21]
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e0c5      	b.n	8009ebe <f_read+0x2b6>
			sect += csect;
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	899b      	ldrh	r3, [r3, #12]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d46:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d041      	beq.n	8009dd2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	4413      	add	r3, r2
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	8952      	ldrh	r2, [r2, #10]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d905      	bls.n	8009d68 <f_read+0x160>
					cc = fs->csize - csect;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	895b      	ldrh	r3, [r3, #10]
 8009d60:	461a      	mov	r2, r3
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	7858      	ldrb	r0, [r3, #1]
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d72:	f7fd fbab 	bl	80074cc <disk_read>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d004      	beq.n	8009d86 <f_read+0x17e>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	755a      	strb	r2, [r3, #21]
 8009d82:	2301      	movs	r3, #1
 8009d84:	e09b      	b.n	8009ebe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	7d1b      	ldrb	r3, [r3, #20]
 8009d8a:	b25b      	sxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da18      	bge.n	8009dc2 <f_read+0x1ba>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1a      	ldr	r2, [r3, #32]
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d911      	bls.n	8009dc2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a1a      	ldr	r2, [r3, #32]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	8992      	ldrh	r2, [r2, #12]
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db0:	18d0      	adds	r0, r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f7fd fc61 	bl	8007684 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	899b      	ldrh	r3, [r3, #12]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	fb02 f303 	mul.w	r3, r2, r3
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009dd0:	e05c      	b.n	8009e8c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	69ba      	ldr	r2, [r7, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d02e      	beq.n	8009e3a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	7d1b      	ldrb	r3, [r3, #20]
 8009de0:	b25b      	sxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da18      	bge.n	8009e18 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	7858      	ldrb	r0, [r3, #1]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a1a      	ldr	r2, [r3, #32]
 8009df4:	2301      	movs	r3, #1
 8009df6:	f7fd fb89 	bl	800750c <disk_write>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <f_read+0x202>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2201      	movs	r2, #1
 8009e04:	755a      	strb	r2, [r3, #21]
 8009e06:	2301      	movs	r3, #1
 8009e08:	e059      	b.n	8009ebe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	7d1b      	ldrb	r3, [r3, #20]
 8009e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	7858      	ldrb	r0, [r3, #1]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e22:	2301      	movs	r3, #1
 8009e24:	69ba      	ldr	r2, [r7, #24]
 8009e26:	f7fd fb51 	bl	80074cc <disk_read>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d004      	beq.n	8009e3a <f_read+0x232>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	755a      	strb	r2, [r3, #21]
 8009e36:	2301      	movs	r3, #1
 8009e38:	e041      	b.n	8009ebe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	899b      	ldrh	r3, [r3, #12]
 8009e44:	4618      	mov	r0, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	8992      	ldrh	r2, [r2, #12]
 8009e4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e52:	fb02 f201 	mul.w	r2, r2, r1
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	1ac3      	subs	r3, r0, r3
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d901      	bls.n	8009e68 <f_read+0x260>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	8992      	ldrh	r2, [r2, #12]
 8009e76:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e7a:	fb02 f200 	mul.w	r2, r2, r0
 8009e7e:	1a9b      	subs	r3, r3, r2
 8009e80:	440b      	add	r3, r1
 8009e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e84:	4619      	mov	r1, r3
 8009e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e88:	f7fd fbfc 	bl	8007684 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	4413      	add	r3, r2
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	441a      	add	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	619a      	str	r2, [r3, #24]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	441a      	add	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f47f aee1 	bne.w	8009c7e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3738      	adds	r7, #56	; 0x38
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b08c      	sub	sp, #48	; 0x30
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f107 0210 	add.w	r2, r7, #16
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fc46 	bl	8009778 <validate>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d107      	bne.n	8009f0a <f_write+0x44>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	7d5b      	ldrb	r3, [r3, #21]
 8009efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <f_write+0x4a>
 8009f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f0e:	e16a      	b.n	800a1e6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	7d1b      	ldrb	r3, [r3, #20]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <f_write+0x5a>
 8009f1c:	2307      	movs	r3, #7
 8009f1e:	e162      	b.n	800a1e6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	f080 814c 	bcs.w	800a1ca <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	43db      	mvns	r3, r3
 8009f38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009f3a:	e146      	b.n	800a1ca <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	8992      	ldrh	r2, [r2, #12]
 8009f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f48:	fb02 f201 	mul.w	r2, r2, r1
 8009f4c:	1a9b      	subs	r3, r3, r2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 80f1 	bne.w	800a136 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	8992      	ldrh	r2, [r2, #12]
 8009f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	8952      	ldrh	r2, [r2, #10]
 8009f64:	3a01      	subs	r2, #1
 8009f66:	4013      	ands	r3, r2
 8009f68:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d143      	bne.n	8009ff8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10c      	bne.n	8009f92 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d11a      	bne.n	8009fba <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2100      	movs	r1, #0
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f8b0 	bl	80080ee <create_chain>
 8009f8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f90:	e013      	b.n	8009fba <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7fe f93c 	bl	800821e <clmt_clust>
 8009fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8009fa8:	e007      	b.n	8009fba <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fe f89b 	bl	80080ee <create_chain>
 8009fb8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8109 	beq.w	800a1d4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d104      	bne.n	8009fd2 <f_write+0x10c>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	755a      	strb	r2, [r3, #21]
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e109      	b.n	800a1e6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd8:	d104      	bne.n	8009fe4 <f_write+0x11e>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	755a      	strb	r2, [r3, #21]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e100      	b.n	800a1e6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <f_write+0x132>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	7d1b      	ldrb	r3, [r3, #20]
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da18      	bge.n	800a034 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	7858      	ldrb	r0, [r3, #1]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	2301      	movs	r3, #1
 800a012:	f7fd fa7b 	bl	800750c <disk_write>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <f_write+0x160>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	755a      	strb	r2, [r3, #21]
 800a022:	2301      	movs	r3, #1
 800a024:	e0df      	b.n	800a1e6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	7d1b      	ldrb	r3, [r3, #20]
 800a02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f7fd fde3 	bl	8007c08 <clust2sect>
 800a042:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d104      	bne.n	800a054 <f_write+0x18e>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2202      	movs	r2, #2
 800a04e:	755a      	strb	r2, [r3, #21]
 800a050:	2302      	movs	r3, #2
 800a052:	e0c8      	b.n	800a1e6 <f_write+0x320>
			sect += csect;
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	4413      	add	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	899b      	ldrh	r3, [r3, #12]
 800a060:	461a      	mov	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	fbb3 f3f2 	udiv	r3, r3, r2
 800a068:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d043      	beq.n	800a0f8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	4413      	add	r3, r2
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	8952      	ldrh	r2, [r2, #10]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d905      	bls.n	800a08a <f_write+0x1c4>
					cc = fs->csize - csect;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	895b      	ldrh	r3, [r3, #10]
 800a082:	461a      	mov	r2, r3
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	7858      	ldrb	r0, [r3, #1]
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	f7fd fa3a 	bl	800750c <disk_write>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <f_write+0x1e2>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	755a      	strb	r2, [r3, #21]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e09e      	b.n	800a1e6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1a      	ldr	r2, [r3, #32]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	6a3a      	ldr	r2, [r7, #32]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d918      	bls.n	800a0e8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1a      	ldr	r2, [r3, #32]
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	8992      	ldrh	r2, [r2, #12]
 800a0c8:	fb02 f303 	mul.w	r3, r2, r3
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	18d1      	adds	r1, r2, r3
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	899b      	ldrh	r3, [r3, #12]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f7fd fad5 	bl	8007684 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	7d1b      	ldrb	r3, [r3, #20]
 800a0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	899b      	ldrh	r3, [r3, #12]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a0f6:	e04b      	b.n	800a190 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d016      	beq.n	800a130 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	699a      	ldr	r2, [r3, #24]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d210      	bcs.n	800a130 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	7858      	ldrb	r0, [r3, #1]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a118:	2301      	movs	r3, #1
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	f7fd f9d6 	bl	80074cc <disk_read>
 800a120:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	755a      	strb	r2, [r3, #21]
 800a12c:	2301      	movs	r3, #1
 800a12e:	e05a      	b.n	800a1e6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	899b      	ldrh	r3, [r3, #12]
 800a13a:	4618      	mov	r0, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	8992      	ldrh	r2, [r2, #12]
 800a144:	fbb3 f1f2 	udiv	r1, r3, r2
 800a148:	fb02 f201 	mul.w	r2, r2, r1
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	1ac3      	subs	r3, r0, r3
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	429a      	cmp	r2, r3
 800a158:	d901      	bls.n	800a15e <f_write+0x298>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	8992      	ldrh	r2, [r2, #12]
 800a16c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a170:	fb02 f200 	mul.w	r2, r2, r0
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	440b      	add	r3, r1
 800a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17a:	69f9      	ldr	r1, [r7, #28]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd fa81 	bl	8007684 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	7d1b      	ldrb	r3, [r3, #20]
 800a186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	4413      	add	r3, r2
 800a196:	61fb      	str	r3, [r7, #28]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	441a      	add	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	619a      	str	r2, [r3, #24]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	bf38      	it	cc
 800a1b0:	461a      	movcc	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	60da      	str	r2, [r3, #12]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	441a      	add	r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f47f aeb5 	bne.w	8009f3c <f_write+0x76>
 800a1d2:	e000      	b.n	800a1d6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a1d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	7d1b      	ldrb	r3, [r3, #20]
 800a1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3730      	adds	r7, #48	; 0x30
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f107 0208 	add.w	r2, r7, #8
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff faba 	bl	8009778 <validate>
 800a204:	4603      	mov	r3, r0
 800a206:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d168      	bne.n	800a2e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7d1b      	ldrb	r3, [r3, #20]
 800a212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d062      	beq.n	800a2e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	7d1b      	ldrb	r3, [r3, #20]
 800a21e:	b25b      	sxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	da15      	bge.n	800a250 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	7858      	ldrb	r0, [r3, #1]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	2301      	movs	r3, #1
 800a234:	f7fd f96a 	bl	800750c <disk_write>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <f_sync+0x54>
 800a23e:	2301      	movs	r3, #1
 800a240:	e04f      	b.n	800a2e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7d1b      	ldrb	r3, [r3, #20]
 800a246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a250:	f7fd f8a0 	bl	8007394 <get_fattime>
 800a254:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fd fc34 	bl	8007acc <move_window>
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d138      	bne.n	800a2e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a272:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	330b      	adds	r3, #11
 800a278:	781a      	ldrb	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	330b      	adds	r3, #11
 800a27e:	f042 0220 	orr.w	r2, r2, #32
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	461a      	mov	r2, r3
 800a290:	68f9      	ldr	r1, [r7, #12]
 800a292:	f7fe f9c0 	bl	8008616 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f103 021c 	add.w	r2, r3, #28
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	f7fd f9c3 	bl	800762e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3316      	adds	r3, #22
 800a2ac:	6939      	ldr	r1, [r7, #16]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd f9bd 	bl	800762e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3312      	adds	r3, #18
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd f99d 	bl	80075fa <st_word>
					fs->wflag = 1;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fd fc2d 	bl	8007b28 <sync_fs>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	7d1b      	ldrb	r3, [r3, #20]
 800a2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff ff7b 	bl	800a1ee <f_sync>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d118      	bne.n	800a334 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f107 0208 	add.w	r2, r7, #8
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff fa34 	bl	8009778 <validate>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10c      	bne.n	800a334 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd fb32 	bl	8007988 <dec_lock>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b090      	sub	sp, #64	; 0x40
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f107 0208 	add.w	r2, r7, #8
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff fa11 	bl	8009778 <validate>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a35c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <f_lseek+0x2e>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7d5b      	ldrb	r3, [r3, #21]
 800a368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a36c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <f_lseek+0x3c>
 800a374:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a378:	e201      	b.n	800a77e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80d9 	beq.w	800a536 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d15a      	bne.n	800a442 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	1d1a      	adds	r2, r3, #4
 800a396:	627a      	str	r2, [r7, #36]	; 0x24
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	2302      	movs	r3, #2
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d03a      	beq.n	800a422 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fd fc3b 	bl	8007c44 <get_fat>
 800a3ce:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d804      	bhi.n	800a3e0 <f_lseek+0xa2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	755a      	strb	r2, [r3, #21]
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e1ce      	b.n	800a77e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d104      	bne.n	800a3f2 <f_lseek+0xb4>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	755a      	strb	r2, [r3, #21]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e1c5      	b.n	800a77e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d0de      	beq.n	800a3ba <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	429a      	cmp	r2, r3
 800a402:	d809      	bhi.n	800a418 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	1d1a      	adds	r2, r3, #4
 800a408:	627a      	str	r2, [r7, #36]	; 0x24
 800a40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	627a      	str	r2, [r7, #36]	; 0x24
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41e:	429a      	cmp	r2, r3
 800a420:	d3c4      	bcc.n	800a3ac <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a428:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d803      	bhi.n	800a43a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	e19f      	b.n	800a77a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a43a:	2311      	movs	r3, #17
 800a43c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a440:	e19b      	b.n	800a77a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d902      	bls.n	800a452 <f_lseek+0x114>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 818d 	beq.w	800a77a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	3b01      	subs	r3, #1
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7fd fed9 	bl	800821e <clmt_clust>
 800a46c:	4602      	mov	r2, r0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fd fbc4 	bl	8007c08 <clust2sect>
 800a480:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d104      	bne.n	800a492 <f_lseek+0x154>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	755a      	strb	r2, [r3, #21]
 800a48e:	2302      	movs	r3, #2
 800a490:	e175      	b.n	800a77e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	3b01      	subs	r3, #1
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	8992      	ldrh	r2, [r2, #12]
 800a49a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	8952      	ldrh	r2, [r2, #10]
 800a4a2:	3a01      	subs	r2, #1
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	8992      	ldrh	r2, [r2, #12]
 800a4b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4b8:	fb02 f201 	mul.w	r2, r2, r1
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 815b 	beq.w	800a77a <f_lseek+0x43c>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	f000 8155 	beq.w	800a77a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	7d1b      	ldrb	r3, [r3, #20]
 800a4d4:	b25b      	sxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da18      	bge.n	800a50c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	7858      	ldrb	r0, [r3, #1]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1a      	ldr	r2, [r3, #32]
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f7fd f80f 	bl	800750c <disk_write>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <f_lseek+0x1c0>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	755a      	strb	r2, [r3, #21]
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e13f      	b.n	800a77e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7d1b      	ldrb	r3, [r3, #20]
 800a502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a506:	b2da      	uxtb	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	7858      	ldrb	r0, [r3, #1]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a516:	2301      	movs	r3, #1
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	f7fc ffd7 	bl	80074cc <disk_read>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d004      	beq.n	800a52e <f_lseek+0x1f0>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	755a      	strb	r2, [r3, #21]
 800a52a:	2301      	movs	r3, #1
 800a52c:	e127      	b.n	800a77e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	621a      	str	r2, [r3, #32]
 800a534:	e121      	b.n	800a77a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d908      	bls.n	800a552 <f_lseek+0x214>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7d1b      	ldrb	r3, [r3, #20]
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	637b      	str	r3, [r7, #52]	; 0x34
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a560:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 80b5 	beq.w	800a6d4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	895b      	ldrh	r3, [r3, #10]
 800a56e:	461a      	mov	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	899b      	ldrh	r3, [r3, #12]
 800a574:	fb03 f302 	mul.w	r3, r3, r2
 800a578:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01b      	beq.n	800a5b8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	1e5a      	subs	r2, r3, #1
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	fbb2 f2f3 	udiv	r2, r2, r3
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	1e59      	subs	r1, r3, #1
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a594:	429a      	cmp	r2, r3
 800a596:	d30f      	bcc.n	800a5b8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	1e5a      	subs	r2, r3, #1
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	425b      	negs	r3, r3
 800a5a0:	401a      	ands	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5b6:	e022      	b.n	800a5fe <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d119      	bne.n	800a5f8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd fd90 	bl	80080ee <create_chain>
 800a5ce:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d104      	bne.n	800a5e0 <f_lseek+0x2a2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	755a      	strb	r2, [r3, #21]
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e0ce      	b.n	800a77e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d104      	bne.n	800a5f2 <f_lseek+0x2b4>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	755a      	strb	r2, [r3, #21]
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e0c5      	b.n	800a77e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	2b00      	cmp	r3, #0
 800a602:	d067      	beq.n	800a6d4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a604:	e03a      	b.n	800a67c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	603b      	str	r3, [r7, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7d1b      	ldrb	r3, [r3, #20]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fd fd5f 	bl	80080ee <create_chain>
 800a630:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	2b00      	cmp	r3, #0
 800a636:	d108      	bne.n	800a64a <f_lseek+0x30c>
							ofs = 0; break;
 800a638:	2300      	movs	r3, #0
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	e022      	b.n	800a684 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a642:	4618      	mov	r0, r3
 800a644:	f7fd fafe 	bl	8007c44 <get_fat>
 800a648:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d104      	bne.n	800a65c <f_lseek+0x31e>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	755a      	strb	r2, [r3, #21]
 800a658:	2301      	movs	r3, #1
 800a65a:	e090      	b.n	800a77e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d904      	bls.n	800a66c <f_lseek+0x32e>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a668:	429a      	cmp	r2, r3
 800a66a:	d304      	bcc.n	800a676 <f_lseek+0x338>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	755a      	strb	r2, [r3, #21]
 800a672:	2302      	movs	r3, #2
 800a674:	e083      	b.n	800a77e <f_lseek+0x440>
					fp->clust = clst;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	429a      	cmp	r2, r3
 800a682:	d8c0      	bhi.n	800a606 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	899b      	ldrh	r3, [r3, #12]
 800a694:	461a      	mov	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	fbb3 f1f2 	udiv	r1, r3, r2
 800a69c:	fb02 f201 	mul.w	r2, r2, r1
 800a6a0:	1a9b      	subs	r3, r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d016      	beq.n	800a6d4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd faac 	bl	8007c08 <clust2sect>
 800a6b0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <f_lseek+0x384>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	755a      	strb	r2, [r3, #21]
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e05d      	b.n	800a77e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	899b      	ldrh	r3, [r3, #12]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d0:	4413      	add	r3, r2
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699a      	ldr	r2, [r3, #24]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d90a      	bls.n	800a6f6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699a      	ldr	r2, [r3, #24]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7d1b      	ldrb	r3, [r3, #20]
 800a6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	8992      	ldrh	r2, [r2, #12]
 800a6fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a702:	fb02 f201 	mul.w	r2, r2, r1
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d036      	beq.n	800a77a <f_lseek+0x43c>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a712:	429a      	cmp	r2, r3
 800a714:	d031      	beq.n	800a77a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	b25b      	sxtb	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da18      	bge.n	800a752 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	7858      	ldrb	r0, [r3, #1]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1a      	ldr	r2, [r3, #32]
 800a72e:	2301      	movs	r3, #1
 800a730:	f7fc feec 	bl	800750c <disk_write>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <f_lseek+0x406>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	755a      	strb	r2, [r3, #21]
 800a740:	2301      	movs	r3, #1
 800a742:	e01c      	b.n	800a77e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7d1b      	ldrb	r3, [r3, #20]
 800a748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	7858      	ldrb	r0, [r3, #1]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a75c:	2301      	movs	r3, #1
 800a75e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a760:	f7fc feb4 	bl	80074cc <disk_read>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <f_lseek+0x436>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	755a      	strb	r2, [r3, #21]
 800a770:	2301      	movs	r3, #1
 800a772:	e004      	b.n	800a77e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a778:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a77a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3740      	adds	r7, #64	; 0x40
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b088      	sub	sp, #32
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a79a:	e01b      	b.n	800a7d4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a79c:	f107 0310 	add.w	r3, r7, #16
 800a7a0:	f107 0114 	add.w	r1, r7, #20
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fa2e 	bl	8009c08 <f_read>
		if (rc != 1) break;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d116      	bne.n	800a7e0 <f_gets+0x5a>
		c = s[0];
 800a7b2:	7d3b      	ldrb	r3, [r7, #20]
 800a7b4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	2b0d      	cmp	r3, #13
 800a7ba:	d100      	bne.n	800a7be <f_gets+0x38>
 800a7bc:	e00a      	b.n	800a7d4 <f_gets+0x4e>
		*p++ = c;
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	61ba      	str	r2, [r7, #24]
 800a7c4:	7dfa      	ldrb	r2, [r7, #23]
 800a7c6:	701a      	strb	r2, [r3, #0]
		n++;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b0a      	cmp	r3, #10
 800a7d2:	d007      	beq.n	800a7e4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	dbde      	blt.n	800a79c <f_gets+0x16>
 800a7de:	e002      	b.n	800a7e6 <f_gets+0x60>
		if (rc != 1) break;
 800a7e0:	bf00      	nop
 800a7e2:	e000      	b.n	800a7e6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a7e4:	bf00      	nop
	}
	*p = 0;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <f_gets+0x70>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	e000      	b.n	800a7f8 <f_gets+0x72>
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3720      	adds	r7, #32
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	2b0a      	cmp	r3, #10
 800a810:	d103      	bne.n	800a81a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a812:	210d      	movs	r1, #13
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fff3 	bl	800a800 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	db25      	blt.n	800a872 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	60fa      	str	r2, [r7, #12]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4413      	add	r3, r2
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b3c      	cmp	r3, #60	; 0x3c
 800a838:	dd12      	ble.n	800a860 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f103 010c 	add.w	r1, r3, #12
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	f7ff fb3c 	bl	8009ec6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	429a      	cmp	r2, r3
 800a854:	d101      	bne.n	800a85a <putc_bfd+0x5a>
 800a856:	2300      	movs	r3, #0
 800a858:	e001      	b.n	800a85e <putc_bfd+0x5e>
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	609a      	str	r2, [r3, #8]
 800a870:	e000      	b.n	800a874 <putc_bfd+0x74>
	if (i < 0) return;
 800a872:	bf00      	nop
}
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	db16      	blt.n	800a8b8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f103 010c 	add.w	r1, r3, #12
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	461a      	mov	r2, r3
 800a89a:	f107 030c 	add.w	r3, r7, #12
 800a89e:	f7ff fb12 	bl	8009ec6 <f_write>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d107      	bne.n	800a8b8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d102      	bne.n	800a8b8 <putc_flush+0x3e>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	e001      	b.n	800a8bc <putc_flush+0x42>
	return EOF;
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	605a      	str	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	609a      	str	r2, [r3, #8]
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr

0800a8ec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a8ec:	b40e      	push	{r1, r2, r3}
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b0a7      	sub	sp, #156	; 0x9c
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a8f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8fa:	6879      	ldr	r1, [r7, #4]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff ffe1 	bl	800a8c4 <putc_init>

	va_start(arp, fmt);
 800a902:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a906:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a918:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 81f4 	beq.w	800ad0a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a922:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a926:	2b25      	cmp	r3, #37	; 0x25
 800a928:	d008      	beq.n	800a93c <f_printf+0x50>
			putc_bfd(&pb, c);
 800a92a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a92e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff ff63 	bl	800a800 <putc_bfd>
			continue;
 800a93a:	e1e5      	b.n	800ad08 <f_printf+0x41c>
		}
		w = f = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a942:	2300      	movs	r3, #0
 800a944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a958:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a95c:	2b30      	cmp	r3, #48	; 0x30
 800a95e:	d10b      	bne.n	800a978 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a976:	e024      	b.n	800a9c2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a978:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a97c:	2b2d      	cmp	r3, #45	; 0x2d
 800a97e:	d120      	bne.n	800a9c2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a980:	2302      	movs	r3, #2
 800a982:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a996:	e014      	b.n	800a9c2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a998:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3b30      	subs	r3, #48	; 0x30
 800a9ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a9b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a9c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9c6:	2b2f      	cmp	r3, #47	; 0x2f
 800a9c8:	d903      	bls.n	800a9d2 <f_printf+0xe6>
 800a9ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9ce:	2b39      	cmp	r3, #57	; 0x39
 800a9d0:	d9e2      	bls.n	800a998 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a9d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9d6:	2b6c      	cmp	r3, #108	; 0x6c
 800a9d8:	d003      	beq.n	800a9e2 <f_printf+0xf6>
 800a9da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9de:	2b4c      	cmp	r3, #76	; 0x4c
 800a9e0:	d10d      	bne.n	800a9fe <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a9e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9e6:	f043 0304 	orr.w	r3, r3, #4
 800a9ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a9ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a9fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8183 	beq.w	800ad0e <f_printf+0x422>
		d = c;
 800aa08:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa0c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800aa10:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aa14:	2b60      	cmp	r3, #96	; 0x60
 800aa16:	d908      	bls.n	800aa2a <f_printf+0x13e>
 800aa18:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aa1c:	2b7a      	cmp	r3, #122	; 0x7a
 800aa1e:	d804      	bhi.n	800aa2a <f_printf+0x13e>
 800aa20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aa24:	3b20      	subs	r3, #32
 800aa26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800aa2a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aa2e:	3b42      	subs	r3, #66	; 0x42
 800aa30:	2b16      	cmp	r3, #22
 800aa32:	f200 8098 	bhi.w	800ab66 <f_printf+0x27a>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <f_printf+0x150>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800ab47 	.word	0x0800ab47
 800aa40:	0800ab2f 	.word	0x0800ab2f
 800aa44:	0800ab57 	.word	0x0800ab57
 800aa48:	0800ab67 	.word	0x0800ab67
 800aa4c:	0800ab67 	.word	0x0800ab67
 800aa50:	0800ab67 	.word	0x0800ab67
 800aa54:	0800ab67 	.word	0x0800ab67
 800aa58:	0800ab67 	.word	0x0800ab67
 800aa5c:	0800ab67 	.word	0x0800ab67
 800aa60:	0800ab67 	.word	0x0800ab67
 800aa64:	0800ab67 	.word	0x0800ab67
 800aa68:	0800ab67 	.word	0x0800ab67
 800aa6c:	0800ab67 	.word	0x0800ab67
 800aa70:	0800ab4f 	.word	0x0800ab4f
 800aa74:	0800ab67 	.word	0x0800ab67
 800aa78:	0800ab67 	.word	0x0800ab67
 800aa7c:	0800ab67 	.word	0x0800ab67
 800aa80:	0800aa99 	.word	0x0800aa99
 800aa84:	0800ab67 	.word	0x0800ab67
 800aa88:	0800ab57 	.word	0x0800ab57
 800aa8c:	0800ab67 	.word	0x0800ab67
 800aa90:	0800ab67 	.word	0x0800ab67
 800aa94:	0800ab5f 	.word	0x0800ab5f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800aa98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9a:	1d1a      	adds	r2, r3, #4
 800aa9c:	67ba      	str	r2, [r7, #120]	; 0x78
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aaa8:	e004      	b.n	800aab4 <f_printf+0x1c8>
 800aaaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaae:	3301      	adds	r3, #1
 800aab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aab4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaba:	4413      	add	r3, r2
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f3      	bne.n	800aaaa <f_printf+0x1be>
			if (!(f & 2)) {
 800aac2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d11a      	bne.n	800ab04 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800aace:	e005      	b.n	800aadc <f_printf+0x1f0>
 800aad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aad4:	2120      	movs	r1, #32
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fe92 	bl	800a800 <putc_bfd>
 800aadc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aae6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d8f0      	bhi.n	800aad0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800aaee:	e009      	b.n	800ab04 <f_printf+0x218>
 800aaf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fe7e 	bl	800a800 <putc_bfd>
 800ab04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1f1      	bne.n	800aaf0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ab0c:	e005      	b.n	800ab1a <f_printf+0x22e>
 800ab0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab12:	2120      	movs	r1, #32
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fe73 	bl	800a800 <putc_bfd>
 800ab1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d8f0      	bhi.n	800ab0e <f_printf+0x222>
			continue;
 800ab2c:	e0ec      	b.n	800ad08 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ab2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab30:	1d1a      	adds	r2, r3, #4
 800ab32:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff fe5e 	bl	800a800 <putc_bfd>
 800ab44:	e0e0      	b.n	800ad08 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800ab46:	2302      	movs	r3, #2
 800ab48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab4c:	e014      	b.n	800ab78 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ab4e:	2308      	movs	r3, #8
 800ab50:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab54:	e010      	b.n	800ab78 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ab56:	230a      	movs	r3, #10
 800ab58:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab5c:	e00c      	b.n	800ab78 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ab5e:	2310      	movs	r3, #16
 800ab60:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab64:	e008      	b.n	800ab78 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ab66:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ab6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fe45 	bl	800a800 <putc_bfd>
 800ab76:	e0c7      	b.n	800ad08 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ab78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <f_printf+0x2a2>
 800ab84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab86:	1d1a      	adds	r2, r3, #4
 800ab88:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	e00c      	b.n	800aba8 <f_printf+0x2bc>
 800ab8e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab92:	2b44      	cmp	r3, #68	; 0x44
 800ab94:	d104      	bne.n	800aba0 <f_printf+0x2b4>
 800ab96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab98:	1d1a      	adds	r2, r3, #4
 800ab9a:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	e003      	b.n	800aba8 <f_printf+0x2bc>
 800aba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	67ba      	str	r2, [r7, #120]	; 0x78
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800abac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800abb0:	2b44      	cmp	r3, #68	; 0x44
 800abb2:	d10e      	bne.n	800abd2 <f_printf+0x2e6>
 800abb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abb8:	2b00      	cmp	r3, #0
 800abba:	da0a      	bge.n	800abd2 <f_printf+0x2e6>
			v = 0 - v;
 800abbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abc0:	425b      	negs	r3, r3
 800abc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800abc6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800abca:	f043 0308 	orr.w	r3, r3, #8
 800abce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800abd8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800abdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abe0:	fbb3 f1f2 	udiv	r1, r3, r2
 800abe4:	fb02 f201 	mul.w	r2, r2, r1
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800abee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800abf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800abfe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d90b      	bls.n	800ac1e <f_printf+0x332>
 800ac06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac0a:	2b78      	cmp	r3, #120	; 0x78
 800ac0c:	d101      	bne.n	800ac12 <f_printf+0x326>
 800ac0e:	2227      	movs	r2, #39	; 0x27
 800ac10:	e000      	b.n	800ac14 <f_printf+0x328>
 800ac12:	2207      	movs	r2, #7
 800ac14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac18:	4413      	add	r3, r2
 800ac1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ac1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ac28:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ac2c:	3230      	adds	r2, #48	; 0x30
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800ac34:	440b      	add	r3, r1
 800ac36:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ac3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <f_printf+0x35e>
 800ac42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac46:	2b1f      	cmp	r3, #31
 800ac48:	d9c6      	bls.n	800abd8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ac4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <f_printf+0x380>
 800ac56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ac60:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ac64:	4413      	add	r3, r2
 800ac66:	222d      	movs	r2, #45	; 0x2d
 800ac68:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ac6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <f_printf+0x398>
 800ac80:	2330      	movs	r3, #48	; 0x30
 800ac82:	e000      	b.n	800ac86 <f_printf+0x39a>
 800ac84:	2320      	movs	r3, #32
 800ac86:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ac8a:	e007      	b.n	800ac9c <f_printf+0x3b0>
 800ac8c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ac90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fdb2 	bl	800a800 <putc_bfd>
 800ac9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d108      	bne.n	800acba <f_printf+0x3ce>
 800aca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d8e8      	bhi.n	800ac8c <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800acba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acbe:	3b01      	subs	r3, #1
 800acc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800acc4:	f107 020c 	add.w	r2, r7, #12
 800acc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800accc:	4413      	add	r3, r2
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acd4:	4611      	mov	r1, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fd92 	bl	800a800 <putc_bfd>
		} while (i);
 800acdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1ea      	bne.n	800acba <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800ace4:	e007      	b.n	800acf6 <f_printf+0x40a>
 800ace6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800acea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fd85 	bl	800a800 <putc_bfd>
 800acf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad00:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d8ee      	bhi.n	800ace6 <f_printf+0x3fa>
		c = *fmt++;
 800ad08:	e5fe      	b.n	800a908 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ad0a:	bf00      	nop
 800ad0c:	e000      	b.n	800ad10 <f_printf+0x424>
		if (!c) break;
 800ad0e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ad10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff fdb0 	bl	800a87a <putc_flush>
 800ad1a:	4603      	mov	r3, r0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	379c      	adds	r7, #156	; 0x9c
 800ad20:	46bd      	mov	sp, r7
 800ad22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad26:	b003      	add	sp, #12
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop

0800ad2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	4613      	mov	r3, r2
 800ad38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad42:	4b1e      	ldr	r3, [pc, #120]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad44:	7a5b      	ldrb	r3, [r3, #9]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d131      	bne.n	800adb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad4c:	4b1b      	ldr	r3, [pc, #108]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad4e:	7a5b      	ldrb	r3, [r3, #9]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad56:	2100      	movs	r1, #0
 800ad58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad5a:	4b18      	ldr	r3, [pc, #96]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad5c:	7a5b      	ldrb	r3, [r3, #9]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	4a16      	ldr	r2, [pc, #88]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad6c:	7a5b      	ldrb	r3, [r3, #9]
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad74:	4413      	add	r3, r2
 800ad76:	79fa      	ldrb	r2, [r7, #7]
 800ad78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad7c:	7a5b      	ldrb	r3, [r3, #9]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	b2d1      	uxtb	r1, r2
 800ad84:	4a0d      	ldr	r2, [pc, #52]	; (800adbc <FATFS_LinkDriverEx+0x90>)
 800ad86:	7251      	strb	r1, [r2, #9]
 800ad88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad8a:	7dbb      	ldrb	r3, [r7, #22]
 800ad8c:	3330      	adds	r3, #48	; 0x30
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	3301      	adds	r3, #1
 800ad98:	223a      	movs	r2, #58	; 0x3a
 800ad9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	3302      	adds	r3, #2
 800ada0:	222f      	movs	r2, #47	; 0x2f
 800ada2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3303      	adds	r3, #3
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr
 800adbc:	20000338 	.word	0x20000338

0800adc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff ffac 	bl	800ad2c <FATFS_LinkDriverEx>
 800add4:	4603      	mov	r3, r0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	2b7f      	cmp	r3, #127	; 0x7f
 800adf0:	d802      	bhi.n	800adf8 <ff_convert+0x18>
		c = chr;
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	81fb      	strh	r3, [r7, #14]
 800adf6:	e025      	b.n	800ae44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	2bff      	cmp	r3, #255	; 0xff
 800ae02:	d805      	bhi.n	800ae10 <ff_convert+0x30>
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	3b80      	subs	r3, #128	; 0x80
 800ae08:	4a11      	ldr	r2, [pc, #68]	; (800ae50 <ff_convert+0x70>)
 800ae0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae0e:	e000      	b.n	800ae12 <ff_convert+0x32>
 800ae10:	2300      	movs	r3, #0
 800ae12:	81fb      	strh	r3, [r7, #14]
 800ae14:	e016      	b.n	800ae44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ae16:	2300      	movs	r3, #0
 800ae18:	81fb      	strh	r3, [r7, #14]
 800ae1a:	e009      	b.n	800ae30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ae1c:	89fb      	ldrh	r3, [r7, #14]
 800ae1e:	4a0c      	ldr	r2, [pc, #48]	; (800ae50 <ff_convert+0x70>)
 800ae20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae24:	88fa      	ldrh	r2, [r7, #6]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d006      	beq.n	800ae38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ae2a:	89fb      	ldrh	r3, [r7, #14]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	81fb      	strh	r3, [r7, #14]
 800ae30:	89fb      	ldrh	r3, [r7, #14]
 800ae32:	2b7f      	cmp	r3, #127	; 0x7f
 800ae34:	d9f2      	bls.n	800ae1c <ff_convert+0x3c>
 800ae36:	e000      	b.n	800ae3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ae38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ae3a:	89fb      	ldrh	r3, [r7, #14]
 800ae3c:	3380      	adds	r3, #128	; 0x80
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ae44:	89fb      	ldrh	r3, [r7, #14]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr
 800ae50:	0800b154 	.word	0x0800b154

0800ae54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae64:	d201      	bcs.n	800ae6a <ff_wtoupper+0x16>
 800ae66:	4b3d      	ldr	r3, [pc, #244]	; (800af5c <ff_wtoupper+0x108>)
 800ae68:	e000      	b.n	800ae6c <ff_wtoupper+0x18>
 800ae6a:	4b3d      	ldr	r3, [pc, #244]	; (800af60 <ff_wtoupper+0x10c>)
 800ae6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	1c9a      	adds	r2, r3, #2
 800ae72:	617a      	str	r2, [r7, #20]
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ae78:	8a7b      	ldrh	r3, [r7, #18]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d068      	beq.n	800af50 <ff_wtoupper+0xfc>
 800ae7e:	88fa      	ldrh	r2, [r7, #6]
 800ae80:	8a7b      	ldrh	r3, [r7, #18]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d364      	bcc.n	800af50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	1c9a      	adds	r2, r3, #2
 800ae8a:	617a      	str	r2, [r7, #20]
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	823b      	strh	r3, [r7, #16]
 800ae90:	8a3b      	ldrh	r3, [r7, #16]
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	81fb      	strh	r3, [r7, #14]
 800ae96:	8a3b      	ldrh	r3, [r7, #16]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ae9c:	88fa      	ldrh	r2, [r7, #6]
 800ae9e:	8a79      	ldrh	r1, [r7, #18]
 800aea0:	8a3b      	ldrh	r3, [r7, #16]
 800aea2:	440b      	add	r3, r1
 800aea4:	429a      	cmp	r2, r3
 800aea6:	da49      	bge.n	800af3c <ff_wtoupper+0xe8>
			switch (cmd) {
 800aea8:	89fb      	ldrh	r3, [r7, #14]
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d84f      	bhi.n	800af4e <ff_wtoupper+0xfa>
 800aeae:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <ff_wtoupper+0x60>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aeeb 	.word	0x0800aeeb
 800aebc:	0800af01 	.word	0x0800af01
 800aec0:	0800af09 	.word	0x0800af09
 800aec4:	0800af11 	.word	0x0800af11
 800aec8:	0800af19 	.word	0x0800af19
 800aecc:	0800af21 	.word	0x0800af21
 800aed0:	0800af29 	.word	0x0800af29
 800aed4:	0800af31 	.word	0x0800af31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800aed8:	88fa      	ldrh	r2, [r7, #6]
 800aeda:	8a7b      	ldrh	r3, [r7, #18]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	80fb      	strh	r3, [r7, #6]
 800aee8:	e027      	b.n	800af3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800aeea:	88fa      	ldrh	r2, [r7, #6]
 800aeec:	8a7b      	ldrh	r3, [r7, #18]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	88fa      	ldrh	r2, [r7, #6]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	80fb      	strh	r3, [r7, #6]
 800aefe:	e01c      	b.n	800af3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	3b10      	subs	r3, #16
 800af04:	80fb      	strh	r3, [r7, #6]
 800af06:	e018      	b.n	800af3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	3b20      	subs	r3, #32
 800af0c:	80fb      	strh	r3, [r7, #6]
 800af0e:	e014      	b.n	800af3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800af10:	88fb      	ldrh	r3, [r7, #6]
 800af12:	3b30      	subs	r3, #48	; 0x30
 800af14:	80fb      	strh	r3, [r7, #6]
 800af16:	e010      	b.n	800af3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	3b1a      	subs	r3, #26
 800af1c:	80fb      	strh	r3, [r7, #6]
 800af1e:	e00c      	b.n	800af3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	3308      	adds	r3, #8
 800af24:	80fb      	strh	r3, [r7, #6]
 800af26:	e008      	b.n	800af3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	3b50      	subs	r3, #80	; 0x50
 800af2c:	80fb      	strh	r3, [r7, #6]
 800af2e:	e004      	b.n	800af3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800af30:	88fb      	ldrh	r3, [r7, #6]
 800af32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800af36:	80fb      	strh	r3, [r7, #6]
 800af38:	bf00      	nop
			}
			break;
 800af3a:	e008      	b.n	800af4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800af3c:	89fb      	ldrh	r3, [r7, #14]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d195      	bne.n	800ae6e <ff_wtoupper+0x1a>
 800af42:	8a3b      	ldrh	r3, [r7, #16]
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4413      	add	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800af4c:	e78f      	b.n	800ae6e <ff_wtoupper+0x1a>
			break;
 800af4e:	bf00      	nop
	}

	return chr;
 800af50:	88fb      	ldrh	r3, [r7, #6]
}
 800af52:	4618      	mov	r0, r3
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	bc80      	pop	{r7}
 800af5a:	4770      	bx	lr
 800af5c:	0800b254 	.word	0x0800b254
 800af60:	0800b448 	.word	0x0800b448

0800af64 <__errno>:
 800af64:	4b01      	ldr	r3, [pc, #4]	; (800af6c <__errno+0x8>)
 800af66:	6818      	ldr	r0, [r3, #0]
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	2000008c 	.word	0x2000008c

0800af70 <exit>:
 800af70:	b508      	push	{r3, lr}
 800af72:	4b07      	ldr	r3, [pc, #28]	; (800af90 <exit+0x20>)
 800af74:	4604      	mov	r4, r0
 800af76:	b113      	cbz	r3, 800af7e <exit+0xe>
 800af78:	2100      	movs	r1, #0
 800af7a:	f3af 8000 	nop.w
 800af7e:	4b05      	ldr	r3, [pc, #20]	; (800af94 <exit+0x24>)
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800af84:	b103      	cbz	r3, 800af88 <exit+0x18>
 800af86:	4798      	blx	r3
 800af88:	4620      	mov	r0, r4
 800af8a:	f7f6 febb 	bl	8001d04 <_exit>
 800af8e:	bf00      	nop
 800af90:	00000000 	.word	0x00000000
 800af94:	0800b504 	.word	0x0800b504

0800af98 <__libc_init_array>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	2600      	movs	r6, #0
 800af9c:	4d0c      	ldr	r5, [pc, #48]	; (800afd0 <__libc_init_array+0x38>)
 800af9e:	4c0d      	ldr	r4, [pc, #52]	; (800afd4 <__libc_init_array+0x3c>)
 800afa0:	1b64      	subs	r4, r4, r5
 800afa2:	10a4      	asrs	r4, r4, #2
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	d109      	bne.n	800afbc <__libc_init_array+0x24>
 800afa8:	f000 f822 	bl	800aff0 <_init>
 800afac:	2600      	movs	r6, #0
 800afae:	4d0a      	ldr	r5, [pc, #40]	; (800afd8 <__libc_init_array+0x40>)
 800afb0:	4c0a      	ldr	r4, [pc, #40]	; (800afdc <__libc_init_array+0x44>)
 800afb2:	1b64      	subs	r4, r4, r5
 800afb4:	10a4      	asrs	r4, r4, #2
 800afb6:	42a6      	cmp	r6, r4
 800afb8:	d105      	bne.n	800afc6 <__libc_init_array+0x2e>
 800afba:	bd70      	pop	{r4, r5, r6, pc}
 800afbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc0:	4798      	blx	r3
 800afc2:	3601      	adds	r6, #1
 800afc4:	e7ee      	b.n	800afa4 <__libc_init_array+0xc>
 800afc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afca:	4798      	blx	r3
 800afcc:	3601      	adds	r6, #1
 800afce:	e7f2      	b.n	800afb6 <__libc_init_array+0x1e>
 800afd0:	0800b510 	.word	0x0800b510
 800afd4:	0800b510 	.word	0x0800b510
 800afd8:	0800b510 	.word	0x0800b510
 800afdc:	0800b514 	.word	0x0800b514

0800afe0 <memset>:
 800afe0:	4603      	mov	r3, r0
 800afe2:	4402      	add	r2, r0
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d100      	bne.n	800afea <memset+0xa>
 800afe8:	4770      	bx	lr
 800afea:	f803 1b01 	strb.w	r1, [r3], #1
 800afee:	e7f9      	b.n	800afe4 <memset+0x4>

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr
