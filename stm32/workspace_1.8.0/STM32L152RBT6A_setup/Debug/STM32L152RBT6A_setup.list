
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002238  2000006c  08006d00  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022a4  08006d00  000222a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012845  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002beb  00000000  00000000  000328da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d3d  00000000  00000000  00037150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001185b  00000000  00000000  0004ce8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082341  00000000  00000000  0005e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0a29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000e0a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	08006c18 	.word	0x08006c18

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	08006c18 	.word	0x08006c18

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_frsub>:
 80002e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__addsf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_fsub>:
 80002ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f0 <__addsf3>:
 80002f0:	0042      	lsls	r2, r0, #1
 80002f2:	bf1f      	itttt	ne
 80002f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f8:	ea92 0f03 	teqne	r2, r3
 80002fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000300:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000304:	d06a      	beq.n	80003dc <__addsf3+0xec>
 8000306:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030e:	bfc1      	itttt	gt
 8000310:	18d2      	addgt	r2, r2, r3
 8000312:	4041      	eorgt	r1, r0
 8000314:	4048      	eorgt	r0, r1
 8000316:	4041      	eorgt	r1, r0
 8000318:	bfb8      	it	lt
 800031a:	425b      	neglt	r3, r3
 800031c:	2b19      	cmp	r3, #25
 800031e:	bf88      	it	hi
 8000320:	4770      	bxhi	lr
 8000322:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4240      	negne	r0, r0
 8000332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000336:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800033a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4249      	negne	r1, r1
 8000342:	ea92 0f03 	teq	r2, r3
 8000346:	d03f      	beq.n	80003c8 <__addsf3+0xd8>
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
 800034c:	fa41 fc03 	asr.w	ip, r1, r3
 8000350:	eb10 000c 	adds.w	r0, r0, ip
 8000354:	f1c3 0320 	rsb	r3, r3, #32
 8000358:	fa01 f103 	lsl.w	r1, r1, r3
 800035c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000360:	d502      	bpl.n	8000368 <__addsf3+0x78>
 8000362:	4249      	negs	r1, r1
 8000364:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800036c:	d313      	bcc.n	8000396 <__addsf3+0xa6>
 800036e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000372:	d306      	bcc.n	8000382 <__addsf3+0x92>
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	ea4f 0131 	mov.w	r1, r1, rrx
 800037a:	f102 0201 	add.w	r2, r2, #1
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	d251      	bcs.n	8000426 <__addsf3+0x136>
 8000382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000386:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038a:	bf08      	it	eq
 800038c:	f020 0001 	biceq.w	r0, r0, #1
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	4770      	bx	lr
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	eb40 0000 	adc.w	r0, r0, r0
 800039c:	3a01      	subs	r2, #1
 800039e:	bf28      	it	cs
 80003a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a4:	d2ed      	bcs.n	8000382 <__addsf3+0x92>
 80003a6:	fab0 fc80 	clz	ip, r0
 80003aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ae:	ebb2 020c 	subs.w	r2, r2, ip
 80003b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b6:	bfaa      	itet	ge
 80003b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003bc:	4252      	neglt	r2, r2
 80003be:	4318      	orrge	r0, r3
 80003c0:	bfbc      	itt	lt
 80003c2:	40d0      	lsrlt	r0, r2
 80003c4:	4318      	orrlt	r0, r3
 80003c6:	4770      	bx	lr
 80003c8:	f092 0f00 	teq	r2, #0
 80003cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d0:	bf06      	itte	eq
 80003d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d6:	3201      	addeq	r2, #1
 80003d8:	3b01      	subne	r3, #1
 80003da:	e7b5      	b.n	8000348 <__addsf3+0x58>
 80003dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e4:	bf18      	it	ne
 80003e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ea:	d021      	beq.n	8000430 <__addsf3+0x140>
 80003ec:	ea92 0f03 	teq	r2, r3
 80003f0:	d004      	beq.n	80003fc <__addsf3+0x10c>
 80003f2:	f092 0f00 	teq	r2, #0
 80003f6:	bf08      	it	eq
 80003f8:	4608      	moveq	r0, r1
 80003fa:	4770      	bx	lr
 80003fc:	ea90 0f01 	teq	r0, r1
 8000400:	bf1c      	itt	ne
 8000402:	2000      	movne	r0, #0
 8000404:	4770      	bxne	lr
 8000406:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800040a:	d104      	bne.n	8000416 <__addsf3+0x126>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	bf28      	it	cs
 8000410:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000414:	4770      	bx	lr
 8000416:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800041a:	bf3c      	itt	cc
 800041c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000420:	4770      	bxcc	lr
 8000422:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000426:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800042a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042e:	4770      	bx	lr
 8000430:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000434:	bf16      	itet	ne
 8000436:	4608      	movne	r0, r1
 8000438:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800043c:	4601      	movne	r1, r0
 800043e:	0242      	lsls	r2, r0, #9
 8000440:	bf06      	itte	eq
 8000442:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000446:	ea90 0f01 	teqeq	r0, r1
 800044a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044e:	4770      	bx	lr

08000450 <__aeabi_ui2f>:
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e004      	b.n	8000460 <__aeabi_i2f+0x8>
 8000456:	bf00      	nop

08000458 <__aeabi_i2f>:
 8000458:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800045c:	bf48      	it	mi
 800045e:	4240      	negmi	r0, r0
 8000460:	ea5f 0c00 	movs.w	ip, r0
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800046c:	4601      	mov	r1, r0
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	e01c      	b.n	80004ae <__aeabi_l2f+0x2a>

08000474 <__aeabi_ul2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e00a      	b.n	8000498 <__aeabi_l2f+0x14>
 8000482:	bf00      	nop

08000484 <__aeabi_l2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000490:	d502      	bpl.n	8000498 <__aeabi_l2f+0x14>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	ea5f 0c01 	movs.w	ip, r1
 800049c:	bf02      	ittt	eq
 800049e:	4684      	moveq	ip, r0
 80004a0:	4601      	moveq	r1, r0
 80004a2:	2000      	moveq	r0, #0
 80004a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a8:	bf08      	it	eq
 80004aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004b2:	fabc f28c 	clz	r2, ip
 80004b6:	3a08      	subs	r2, #8
 80004b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004bc:	db10      	blt.n	80004e0 <__aeabi_l2f+0x5c>
 80004be:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	fa20 f202 	lsr.w	r2, r0, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	f020 0001 	biceq.w	r0, r0, #1
 80004de:	4770      	bx	lr
 80004e0:	f102 0220 	add.w	r2, r2, #32
 80004e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e8:	f1c2 0220 	rsb	r2, r2, #32
 80004ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f0:	fa21 f202 	lsr.w	r2, r1, r2
 80004f4:	eb43 0002 	adc.w	r0, r3, r2
 80004f8:	bf08      	it	eq
 80004fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fe:	4770      	bx	lr

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b96e 	b.w	80007f4 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	468e      	mov	lr, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8083 	bne.w	8000648 <__udivmoddi4+0x118>
 8000542:	428a      	cmp	r2, r1
 8000544:	4617      	mov	r7, r2
 8000546:	d947      	bls.n	80005d8 <__udivmoddi4+0xa8>
 8000548:	fab2 f382 	clz	r3, r2
 800054c:	b14b      	cbz	r3, 8000562 <__udivmoddi4+0x32>
 800054e:	f1c3 0120 	rsb	r1, r3, #32
 8000552:	fa05 fe03 	lsl.w	lr, r5, r3
 8000556:	fa20 f101 	lsr.w	r1, r0, r1
 800055a:	409f      	lsls	r7, r3
 800055c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000560:	409c      	lsls	r4, r3
 8000562:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000566:	fbbe fcf8 	udiv	ip, lr, r8
 800056a:	fa1f f987 	uxth.w	r9, r7
 800056e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000572:	fb0c f009 	mul.w	r0, ip, r9
 8000576:	0c21      	lsrs	r1, r4, #16
 8000578:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800057c:	4290      	cmp	r0, r2
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x66>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000586:	f080 8118 	bcs.w	80007ba <__udivmoddi4+0x28a>
 800058a:	4290      	cmp	r0, r2
 800058c:	f240 8115 	bls.w	80007ba <__udivmoddi4+0x28a>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	443a      	add	r2, r7
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f8 	udiv	r0, r2, r8
 800059c:	fb08 2210 	mls	r2, r8, r0, r2
 80005a0:	fb00 f109 	mul.w	r1, r0, r9
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	d909      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	f080 8103 	bcs.w	80007be <__udivmoddi4+0x28e>
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	f240 8100 	bls.w	80007be <__udivmoddi4+0x28e>
 80005be:	3802      	subs	r0, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	1a64      	subs	r4, r4, r1
 80005c4:	2100      	movs	r1, #0
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	b11e      	cbz	r6, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	2200      	movs	r2, #0
 80005ce:	40dc      	lsrs	r4, r3
 80005d0:	e9c6 4200 	strd	r4, r2, [r6]
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xac>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f382 	clz	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d14f      	bne.n	8000684 <__udivmoddi4+0x154>
 80005e4:	1a8d      	subs	r5, r1, r2
 80005e6:	2101      	movs	r1, #1
 80005e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005ec:	fa1f f882 	uxth.w	r8, r2
 80005f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80005f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80005f8:	fb08 f00c 	mul.w	r0, r8, ip
 80005fc:	0c22      	lsrs	r2, r4, #16
 80005fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000602:	42a8      	cmp	r0, r5
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0xe6>
 8000606:	197d      	adds	r5, r7, r5
 8000608:	f10c 32ff 	add.w	r2, ip, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0xe4>
 800060e:	42a8      	cmp	r0, r5
 8000610:	f200 80e9 	bhi.w	80007e6 <__udivmoddi4+0x2b6>
 8000614:	4694      	mov	ip, r2
 8000616:	1a2d      	subs	r5, r5, r0
 8000618:	fbb5 f0fe 	udiv	r0, r5, lr
 800061c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000620:	fb08 f800 	mul.w	r8, r8, r0
 8000624:	b2a4      	uxth	r4, r4
 8000626:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800062a:	45a0      	cmp	r8, r4
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x10e>
 800062e:	193c      	adds	r4, r7, r4
 8000630:	f100 32ff 	add.w	r2, r0, #4294967295
 8000634:	d202      	bcs.n	800063c <__udivmoddi4+0x10c>
 8000636:	45a0      	cmp	r8, r4
 8000638:	f200 80d9 	bhi.w	80007ee <__udivmoddi4+0x2be>
 800063c:	4610      	mov	r0, r2
 800063e:	eba4 0408 	sub.w	r4, r4, r8
 8000642:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000646:	e7c0      	b.n	80005ca <__udivmoddi4+0x9a>
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x12e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	f000 80b1 	beq.w	80007b4 <__udivmoddi4+0x284>
 8000652:	2100      	movs	r1, #0
 8000654:	e9c6 0500 	strd	r0, r5, [r6]
 8000658:	4608      	mov	r0, r1
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	fab3 f183 	clz	r1, r3
 8000662:	2900      	cmp	r1, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0x1ce>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d302      	bcc.n	8000670 <__udivmoddi4+0x140>
 800066a:	4282      	cmp	r2, r0
 800066c:	f200 80b9 	bhi.w	80007e2 <__udivmoddi4+0x2b2>
 8000670:	1a84      	subs	r4, r0, r2
 8000672:	eb65 0303 	sbc.w	r3, r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	469e      	mov	lr, r3
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0aa      	beq.n	80005d4 <__udivmoddi4+0xa4>
 800067e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000682:	e7a7      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000684:	409f      	lsls	r7, r3
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	40d1      	lsrs	r1, r2
 800068c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000690:	fbb1 f0fe 	udiv	r0, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1110 	mls	r1, lr, r0, r1
 800069c:	fa24 f202 	lsr.w	r2, r4, r2
 80006a0:	409d      	lsls	r5, r3
 80006a2:	fb00 fc08 	mul.w	ip, r0, r8
 80006a6:	432a      	orrs	r2, r5
 80006a8:	0c15      	lsrs	r5, r2, #16
 80006aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	fa04 f403 	lsl.w	r4, r4, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x19a>
 80006b6:	197d      	adds	r5, r7, r5
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	f080 808f 	bcs.w	80007de <__udivmoddi4+0x2ae>
 80006c0:	45ac      	cmp	ip, r5
 80006c2:	f240 808c 	bls.w	80007de <__udivmoddi4+0x2ae>
 80006c6:	3802      	subs	r0, #2
 80006c8:	443d      	add	r5, r7
 80006ca:	eba5 050c 	sub.w	r5, r5, ip
 80006ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80006d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80006d6:	fb01 f908 	mul.w	r9, r1, r8
 80006da:	b295      	uxth	r5, r2
 80006dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006e0:	45a9      	cmp	r9, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x1c4>
 80006e4:	197d      	adds	r5, r7, r5
 80006e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80006ea:	d274      	bcs.n	80007d6 <__udivmoddi4+0x2a6>
 80006ec:	45a9      	cmp	r9, r5
 80006ee:	d972      	bls.n	80007d6 <__udivmoddi4+0x2a6>
 80006f0:	3902      	subs	r1, #2
 80006f2:	443d      	add	r5, r7
 80006f4:	eba5 0509 	sub.w	r5, r5, r9
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e778      	b.n	80005f0 <__udivmoddi4+0xc0>
 80006fe:	f1c1 0720 	rsb	r7, r1, #32
 8000702:	408b      	lsls	r3, r1
 8000704:	fa22 fc07 	lsr.w	ip, r2, r7
 8000708:	ea4c 0c03 	orr.w	ip, ip, r3
 800070c:	fa25 f407 	lsr.w	r4, r5, r7
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fbb4 f9fe 	udiv	r9, r4, lr
 8000718:	fa1f f88c 	uxth.w	r8, ip
 800071c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000720:	fa20 f307 	lsr.w	r3, r0, r7
 8000724:	fb09 fa08 	mul.w	sl, r9, r8
 8000728:	408d      	lsls	r5, r1
 800072a:	431d      	orrs	r5, r3
 800072c:	0c2b      	lsrs	r3, r5, #16
 800072e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000732:	45a2      	cmp	sl, r4
 8000734:	fa02 f201 	lsl.w	r2, r2, r1
 8000738:	fa00 f301 	lsl.w	r3, r0, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0x222>
 800073e:	eb1c 0404 	adds.w	r4, ip, r4
 8000742:	f109 30ff 	add.w	r0, r9, #4294967295
 8000746:	d248      	bcs.n	80007da <__udivmoddi4+0x2aa>
 8000748:	45a2      	cmp	sl, r4
 800074a:	d946      	bls.n	80007da <__udivmoddi4+0x2aa>
 800074c:	f1a9 0902 	sub.w	r9, r9, #2
 8000750:	4464      	add	r4, ip
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	fbb4 f0fe 	udiv	r0, r4, lr
 800075a:	fb0e 4410 	mls	r4, lr, r0, r4
 800075e:	fb00 fa08 	mul.w	sl, r0, r8
 8000762:	b2ad      	uxth	r5, r5
 8000764:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000768:	45a2      	cmp	sl, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x24e>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 35ff 	add.w	r5, r0, #4294967295
 8000774:	d22d      	bcs.n	80007d2 <__udivmoddi4+0x2a2>
 8000776:	45a2      	cmp	sl, r4
 8000778:	d92b      	bls.n	80007d2 <__udivmoddi4+0x2a2>
 800077a:	3802      	subs	r0, #2
 800077c:	4464      	add	r4, ip
 800077e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000782:	fba0 8902 	umull	r8, r9, r0, r2
 8000786:	eba4 040a 	sub.w	r4, r4, sl
 800078a:	454c      	cmp	r4, r9
 800078c:	46c6      	mov	lr, r8
 800078e:	464d      	mov	r5, r9
 8000790:	d319      	bcc.n	80007c6 <__udivmoddi4+0x296>
 8000792:	d016      	beq.n	80007c2 <__udivmoddi4+0x292>
 8000794:	b15e      	cbz	r6, 80007ae <__udivmoddi4+0x27e>
 8000796:	ebb3 020e 	subs.w	r2, r3, lr
 800079a:	eb64 0405 	sbc.w	r4, r4, r5
 800079e:	fa04 f707 	lsl.w	r7, r4, r7
 80007a2:	fa22 f301 	lsr.w	r3, r2, r1
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	e9c6 7400 	strd	r7, r4, [r6]
 80007ae:	2100      	movs	r1, #0
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	4631      	mov	r1, r6
 80007b6:	4630      	mov	r0, r6
 80007b8:	e70c      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007ba:	468c      	mov	ip, r1
 80007bc:	e6eb      	b.n	8000596 <__udivmoddi4+0x66>
 80007be:	4610      	mov	r0, r2
 80007c0:	e6ff      	b.n	80005c2 <__udivmoddi4+0x92>
 80007c2:	4543      	cmp	r3, r8
 80007c4:	d2e6      	bcs.n	8000794 <__udivmoddi4+0x264>
 80007c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80007ca:	eb69 050c 	sbc.w	r5, r9, ip
 80007ce:	3801      	subs	r0, #1
 80007d0:	e7e0      	b.n	8000794 <__udivmoddi4+0x264>
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7d3      	b.n	800077e <__udivmoddi4+0x24e>
 80007d6:	4611      	mov	r1, r2
 80007d8:	e78c      	b.n	80006f4 <__udivmoddi4+0x1c4>
 80007da:	4681      	mov	r9, r0
 80007dc:	e7b9      	b.n	8000752 <__udivmoddi4+0x222>
 80007de:	4608      	mov	r0, r1
 80007e0:	e773      	b.n	80006ca <__udivmoddi4+0x19a>
 80007e2:	4608      	mov	r0, r1
 80007e4:	e749      	b.n	800067a <__udivmoddi4+0x14a>
 80007e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80007ea:	443d      	add	r5, r7
 80007ec:	e713      	b.n	8000616 <__udivmoddi4+0xe6>
 80007ee:	3802      	subs	r0, #2
 80007f0:	443c      	add	r4, r7
 80007f2:	e724      	b.n	800063e <__udivmoddi4+0x10e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	3301      	adds	r3, #1
 800080a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800080e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d007      	beq.n	800082a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	79f9      	ldrb	r1, [r7, #7]
 8000822:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	2b00      	cmp	r3, #0
 8000854:	d013      	beq.n	800087e <Uart_isr+0x4a>
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00e      	beq.n	800087e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <Uart_isr+0xac>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffbe 	bl	80007f8 <store_char>
        return;
 800087c:	e02c      	b.n	80008d8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	2b00      	cmp	r3, #0
 8000886:	d027      	beq.n	80008d8 <Uart_isr+0xa4>
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <Uart_isr+0xb0>)
 8000894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <Uart_isr+0xb0>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	429a      	cmp	r2, r3
 800089c:	d108      	bne.n	80008b0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80008ae:	e012      	b.n	80008d6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <Uart_isr+0xb0>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <Uart_isr+0xb0>)
 80008b6:	5cd3      	ldrb	r3, [r2, r3]
 80008b8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <Uart_isr+0xb0>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	3301      	adds	r3, #1
 80008c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <Uart_isr+0xb0>)
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	7bba      	ldrb	r2, [r7, #14]
 80008d4:	605a      	str	r2, [r3, #4]
    	return;
 80008d6:	bf00      	nop
    }
}
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000128 	.word	0x20000128
 80008e4:	20000088 	.word	0x20000088

080008e8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <SELECT+0x1c>)
 80008f4:	f002 fb6e 	bl	8002fd4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f001 fbd5 	bl	80020a8 <HAL_Delay>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400

08000908 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <DESELECT+0x1c>)
 8000914:	f002 fb5e 	bl	8002fd4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f001 fbc5 	bl	80020a8 <HAL_Delay>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020400 	.word	0x40020400

08000928 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000932:	bf00      	nop
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <SPI_TxByte+0x30>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b02      	cmp	r3, #2
 8000940:	d1f8      	bne.n	8000934 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000942:	1df9      	adds	r1, r7, #7
 8000944:	2364      	movs	r3, #100	; 0x64
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <SPI_TxByte+0x30>)
 800094a:	f004 ff79 	bl	8005840 <HAL_SPI_Transmit>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000130 	.word	0x20000130

0800095c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000968:	bf00      	nop
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <SPI_TxBuffer+0x30>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	2b02      	cmp	r3, #2
 8000976:	d1f8      	bne.n	800096a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000978:	887a      	ldrh	r2, [r7, #2]
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <SPI_TxBuffer+0x30>)
 8000980:	f004 ff5e 	bl	8005840 <HAL_SPI_Transmit>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000130 	.word	0x20000130

08000990 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000996:	23ff      	movs	r3, #255	; 0xff
 8000998:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800099a:	bf00      	nop
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <SPI_RxByte+0x34>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d1f8      	bne.n	800099c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009aa:	1dba      	adds	r2, r7, #6
 80009ac:	1df9      	adds	r1, r7, #7
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <SPI_RxByte+0x34>)
 80009b6:	f005 f87f 	bl	8005ab8 <HAL_SPI_TransmitReceive>

	return data;
 80009ba:	79bb      	ldrb	r3, [r7, #6]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000130 	.word	0x20000130

080009c8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009d0:	f7ff ffde 	bl	8000990 <SPI_RxByte>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SD_ReadyWait+0x30>)
 80009ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009f0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80009f2:	f7ff ffcd 	bl	8000990 <SPI_RxByte>
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2bff      	cmp	r3, #255	; 0xff
 80009fe:	d003      	beq.n	8000a08 <SD_ReadyWait+0x24>
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SD_ReadyWait+0x30>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f4      	bne.n	80009f2 <SD_ReadyWait+0xe>

	return res;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000012c 	.word	0x2000012c

08000a18 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a1e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a22:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a24:	f7ff ff70 	bl	8000908 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	e005      	b.n	8000a3a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	f7ff ff7a 	bl	8000928 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b09      	cmp	r3, #9
 8000a3e:	ddf6      	ble.n	8000a2e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a40:	f7ff ff52 	bl	80008e8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a58:	2395      	movs	r3, #149	; 0x95
 8000a5a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2106      	movs	r1, #6
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff7b 	bl	800095c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a66:	e002      	b.n	8000a6e <SD_PowerOn+0x56>
	{
		cnt--;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a6e:	f7ff ff8f 	bl	8000990 <SPI_RxByte>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d002      	beq.n	8000a7e <SD_PowerOn+0x66>
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1f4      	bne.n	8000a68 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a7e:	f7ff ff43 	bl	8000908 <DESELECT>
	SPI_TxByte(0XFF);
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	f7ff ff50 	bl	8000928 <SPI_TxByte>

	PowerFlag = 1;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <SD_PowerOn+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000d1 	.word	0x200000d1

08000a9c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_PowerOff+0x14>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000d1 	.word	0x200000d1

08000ab4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <SD_CheckPower+0x10>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200000d1 	.word	0x200000d1

08000ac8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <SD_RxDataBlock+0x58>)
 8000ad4:	22c8      	movs	r2, #200	; 0xc8
 8000ad6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ad8:	f7ff ff5a 	bl	8000990 <SPI_RxByte>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2bff      	cmp	r3, #255	; 0xff
 8000ae4:	d103      	bne.n	8000aee <SD_RxDataBlock+0x26>
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <SD_RxDataBlock+0x58>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f4      	bne.n	8000ad8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2bfe      	cmp	r3, #254	; 0xfe
 8000af2:	d001      	beq.n	8000af8 <SD_RxDataBlock+0x30>
 8000af4:	2300      	movs	r3, #0
 8000af6:	e00f      	b.n	8000b18 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff62 	bl	80009c8 <SPI_RxBytePtr>
	} while(len--);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	603a      	str	r2, [r7, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f4      	bne.n	8000af8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b0e:	f7ff ff3f 	bl	8000990 <SPI_RxByte>
	SPI_RxByte();
 8000b12:	f7ff ff3d 	bl	8000990 <SPI_RxByte>

	return TRUE;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000012e 	.word	0x2000012e

08000b24 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b34:	f7ff ff56 	bl	80009e4 <SD_ReadyWait>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d001      	beq.n	8000b42 <SD_TxDataBlock+0x1e>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e02f      	b.n	8000ba2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff feef 	bl	8000928 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b4a:	78fb      	ldrb	r3, [r7, #3]
 8000b4c:	2bfd      	cmp	r3, #253	; 0xfd
 8000b4e:	d020      	beq.n	8000b92 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff01 	bl	800095c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b5a:	f7ff ff19 	bl	8000990 <SPI_RxByte>
		SPI_RxByte();
 8000b5e:	f7ff ff17 	bl	8000990 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b62:	e00b      	b.n	8000b7c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b64:	f7ff ff14 	bl	8000990 <SPI_RxByte>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f003 031f 	and.w	r3, r3, #31
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d006      	beq.n	8000b84 <SD_TxDataBlock+0x60>
			i++;
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	2b40      	cmp	r3, #64	; 0x40
 8000b80:	d9f0      	bls.n	8000b64 <SD_TxDataBlock+0x40>
 8000b82:	e000      	b.n	8000b86 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b84:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b86:	bf00      	nop
 8000b88:	f7ff ff02 	bl	8000990 <SPI_RxByte>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0fa      	beq.n	8000b88 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	2b05      	cmp	r3, #5
 8000b9a:	d101      	bne.n	8000ba0 <SD_TxDataBlock+0x7c>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	6039      	str	r1, [r7, #0]
 8000bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bb6:	f7ff ff15 	bl	80009e4 <SD_ReadyWait>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2bff      	cmp	r3, #255	; 0xff
 8000bbe:	d001      	beq.n	8000bc4 <SD_SendCmd+0x1a>
 8000bc0:	23ff      	movs	r3, #255	; 0xff
 8000bc2:	e042      	b.n	8000c4a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff feae 	bl	8000928 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	0e1b      	lsrs	r3, r3, #24
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fea8 	bl	8000928 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	0c1b      	lsrs	r3, r3, #16
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fea2 	bl	8000928 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe9c 	bl	8000928 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe97 	bl	8000928 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b40      	cmp	r3, #64	; 0x40
 8000bfe:	d102      	bne.n	8000c06 <SD_SendCmd+0x5c>
 8000c00:	2395      	movs	r3, #149	; 0x95
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e007      	b.n	8000c16 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b48      	cmp	r3, #72	; 0x48
 8000c0a:	d102      	bne.n	8000c12 <SD_SendCmd+0x68>
 8000c0c:	2387      	movs	r3, #135	; 0x87
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e001      	b.n	8000c16 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe85 	bl	8000928 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b4c      	cmp	r3, #76	; 0x4c
 8000c22:	d101      	bne.n	8000c28 <SD_SendCmd+0x7e>
 8000c24:	f7ff feb4 	bl	8000990 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c28:	230a      	movs	r3, #10
 8000c2a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c2c:	f7ff feb0 	bl	8000990 <SPI_RxByte>
 8000c30:	4603      	mov	r3, r0
 8000c32:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da05      	bge.n	8000c48 <SD_SendCmd+0x9e>
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	73bb      	strb	r3, [r7, #14]
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f1      	bne.n	8000c2c <SD_SendCmd+0x82>

	return res;
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SD_disk_initialize+0x14>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e0d1      	b.n	8000e0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c68:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <SD_disk_initialize+0x1c0>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <SD_disk_initialize+0x2a>
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <SD_disk_initialize+0x1c0>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	e0c6      	b.n	8000e0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c7e:	f7ff fecb 	bl	8000a18 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c82:	f7ff fe31 	bl	80008e8 <SELECT>

	/* check disk type */
	type = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2040      	movs	r0, #64	; 0x40
 8000c8e:	f7ff ff8c 	bl	8000baa <SD_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f040 80a1 	bne.w	8000ddc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <SD_disk_initialize+0x1c4>)
 8000c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ca2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ca6:	2048      	movs	r0, #72	; 0x48
 8000ca8:	f7ff ff7f 	bl	8000baa <SD_SendCmd>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d155      	bne.n	8000d5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e00c      	b.n	8000cd2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cb8:	7bfc      	ldrb	r4, [r7, #15]
 8000cba:	f7ff fe69 	bl	8000990 <SPI_RxByte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4423      	add	r3, r4
 8000cc8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d9ef      	bls.n	8000cb8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d17e      	bne.n	8000ddc <SD_disk_initialize+0x188>
 8000cde:	7afb      	ldrb	r3, [r7, #11]
 8000ce0:	2baa      	cmp	r3, #170	; 0xaa
 8000ce2:	d17b      	bne.n	8000ddc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2077      	movs	r0, #119	; 0x77
 8000ce8:	f7ff ff5f 	bl	8000baa <SD_SendCmd>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d807      	bhi.n	8000d02 <SD_disk_initialize+0xae>
 8000cf2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000cf6:	2069      	movs	r0, #105	; 0x69
 8000cf8:	f7ff ff57 	bl	8000baa <SD_SendCmd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d02:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <SD_disk_initialize+0x1c4>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1ec      	bne.n	8000ce4 <SD_disk_initialize+0x90>
 8000d0a:	e000      	b.n	8000d0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <SD_disk_initialize+0x1c4>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d062      	beq.n	8000ddc <SD_disk_initialize+0x188>
 8000d16:	2100      	movs	r1, #0
 8000d18:	207a      	movs	r0, #122	; 0x7a
 8000d1a:	f7ff ff46 	bl	8000baa <SD_SendCmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d15b      	bne.n	8000ddc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e00c      	b.n	8000d44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d2a:	7bfc      	ldrb	r4, [r7, #15]
 8000d2c:	f7ff fe30 	bl	8000990 <SPI_RxByte>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4423      	add	r3, r4
 8000d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d9ef      	bls.n	8000d2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d4a:	7a3b      	ldrb	r3, [r7, #8]
 8000d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SD_disk_initialize+0x104>
 8000d54:	230c      	movs	r3, #12
 8000d56:	e000      	b.n	8000d5a <SD_disk_initialize+0x106>
 8000d58:	2304      	movs	r3, #4
 8000d5a:	73bb      	strb	r3, [r7, #14]
 8000d5c:	e03e      	b.n	8000ddc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2077      	movs	r0, #119	; 0x77
 8000d62:	f7ff ff22 	bl	8000baa <SD_SendCmd>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d808      	bhi.n	8000d7e <SD_disk_initialize+0x12a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2069      	movs	r0, #105	; 0x69
 8000d70:	f7ff ff1b 	bl	8000baa <SD_SendCmd>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d801      	bhi.n	8000d7e <SD_disk_initialize+0x12a>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e000      	b.n	8000d80 <SD_disk_initialize+0x12c>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d10e      	bne.n	8000da6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2077      	movs	r0, #119	; 0x77
 8000d8c:	f7ff ff0d 	bl	8000baa <SD_SendCmd>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d80e      	bhi.n	8000db4 <SD_disk_initialize+0x160>
 8000d96:	2100      	movs	r1, #0
 8000d98:	2069      	movs	r0, #105	; 0x69
 8000d9a:	f7ff ff06 	bl	8000baa <SD_SendCmd>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d107      	bne.n	8000db4 <SD_disk_initialize+0x160>
 8000da4:	e00c      	b.n	8000dc0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000da6:	2100      	movs	r1, #0
 8000da8:	2041      	movs	r0, #65	; 0x41
 8000daa:	f7ff fefe 	bl	8000baa <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d004      	beq.n	8000dbe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <SD_disk_initialize+0x1c4>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e2      	bne.n	8000d82 <SD_disk_initialize+0x12e>
 8000dbc:	e000      	b.n	8000dc0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dbe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <SD_disk_initialize+0x1c4>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <SD_disk_initialize+0x184>
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	2050      	movs	r0, #80	; 0x50
 8000dce:	f7ff feec 	bl	8000baa <SD_SendCmd>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SD_disk_initialize+0x188>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <SD_disk_initialize+0x1c8>)
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000de2:	f7ff fd91 	bl	8000908 <DESELECT>
	SPI_RxByte();
 8000de6:	f7ff fdd3 	bl	8000990 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d008      	beq.n	8000e02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SD_disk_initialize+0x1c0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SD_disk_initialize+0x1c0>)
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e001      	b.n	8000e06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e02:	f7ff fe4b 	bl	8000a9c <SD_PowerOff>
	}

	return Stat;
 8000e06:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SD_disk_initialize+0x1c0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	2000012e 	.word	0x2000012e
 8000e1c:	200000d0 	.word	0x200000d0

08000e20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SD_disk_status+0x14>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e002      	b.n	8000e3a <SD_disk_status+0x1a>
	return Stat;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <SD_disk_status+0x24>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000000 	.word	0x20000000

08000e48 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <SD_disk_read+0x1c>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <SD_disk_read+0x20>
 8000e64:	2304      	movs	r3, #4
 8000e66:	e051      	b.n	8000f0c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <SD_disk_read+0xcc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SD_disk_read+0x32>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e048      	b.n	8000f0c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <SD_disk_read+0xd0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <SD_disk_read+0x44>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e8c:	f7ff fd2c 	bl	80008e8 <SELECT>

	if (count == 1)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d111      	bne.n	8000eba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2051      	movs	r0, #81	; 0x51
 8000e9a:	f7ff fe86 	bl	8000baa <SD_SendCmd>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d129      	bne.n	8000ef8 <SD_disk_read+0xb0>
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	68b8      	ldr	r0, [r7, #8]
 8000eaa:	f7ff fe0d 	bl	8000ac8 <SD_RxDataBlock>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d021      	beq.n	8000ef8 <SD_disk_read+0xb0>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	e01e      	b.n	8000ef8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2052      	movs	r0, #82	; 0x52
 8000ebe:	f7ff fe74 	bl	8000baa <SD_SendCmd>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d117      	bne.n	8000ef8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f7ff fdfb 	bl	8000ac8 <SD_RxDataBlock>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00a      	beq.n	8000eee <SD_disk_read+0xa6>
				buff += 512;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ede:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ed      	bne.n	8000ec8 <SD_disk_read+0x80>
 8000eec:	e000      	b.n	8000ef0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000eee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	204c      	movs	r0, #76	; 0x4c
 8000ef4:	f7ff fe59 	bl	8000baa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ef8:	f7ff fd06 	bl	8000908 <DESELECT>
	SPI_RxByte();
 8000efc:	f7ff fd48 	bl	8000990 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	200000d0 	.word	0x200000d0

08000f1c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <SD_disk_write+0x1c>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <SD_disk_write+0x20>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e06b      	b.n	8001014 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <SD_disk_write+0x100>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SD_disk_write+0x32>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e062      	b.n	8001014 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <SD_disk_write+0x100>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SD_disk_write+0x44>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e059      	b.n	8001014 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <SD_disk_write+0x104>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <SD_disk_write+0x56>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	025b      	lsls	r3, r3, #9
 8000f70:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f72:	f7ff fcb9 	bl	80008e8 <SELECT>

	if (count == 1)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d110      	bne.n	8000f9e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	2058      	movs	r0, #88	; 0x58
 8000f80:	f7ff fe13 	bl	8000baa <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d13a      	bne.n	8001000 <SD_disk_write+0xe4>
 8000f8a:	21fe      	movs	r1, #254	; 0xfe
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f7ff fdc9 	bl	8000b24 <SD_TxDataBlock>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d033      	beq.n	8001000 <SD_disk_write+0xe4>
			count = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	e030      	b.n	8001000 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <SD_disk_write+0x104>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000faa:	2100      	movs	r1, #0
 8000fac:	2077      	movs	r0, #119	; 0x77
 8000fae:	f7ff fdfc 	bl	8000baa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	2057      	movs	r0, #87	; 0x57
 8000fb6:	f7ff fdf8 	bl	8000baa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2059      	movs	r0, #89	; 0x59
 8000fbe:	f7ff fdf4 	bl	8000baa <SD_SendCmd>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11b      	bne.n	8001000 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fc8:	21fc      	movs	r1, #252	; 0xfc
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	f7ff fdaa 	bl	8000b24 <SD_TxDataBlock>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <SD_disk_write+0xd0>
				buff += 512;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fdc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1ee      	bne.n	8000fc8 <SD_disk_write+0xac>
 8000fea:	e000      	b.n	8000fee <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fec:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000fee:	21fd      	movs	r1, #253	; 0xfd
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fd97 	bl	8000b24 <SD_TxDataBlock>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <SD_disk_write+0xe4>
			{
				count = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001000:	f7ff fc82 	bl	8000908 <DESELECT>
	SPI_RxByte();
 8001004:	f7ff fcc4 	bl	8000990 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	200000d0 	.word	0x200000d0

08001024 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	603a      	str	r2, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	460b      	mov	r3, r1
 8001032:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SD_disk_ioctl+0x1e>
 800103e:	2304      	movs	r3, #4
 8001040:	e115      	b.n	800126e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d124      	bne.n	8001098 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d012      	beq.n	800107c <SD_disk_ioctl+0x58>
 8001056:	2b02      	cmp	r3, #2
 8001058:	dc1a      	bgt.n	8001090 <SD_disk_ioctl+0x6c>
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <SD_disk_ioctl+0x40>
 800105e:	2b01      	cmp	r3, #1
 8001060:	d006      	beq.n	8001070 <SD_disk_ioctl+0x4c>
 8001062:	e015      	b.n	8001090 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001064:	f7ff fd1a 	bl	8000a9c <SD_PowerOff>
			res = RES_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800106e:	e0fc      	b.n	800126a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001070:	f7ff fcd2 	bl	8000a18 <SD_PowerOn>
			res = RES_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800107a:	e0f6      	b.n	800126a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	1c5c      	adds	r4, r3, #1
 8001080:	f7ff fd18 	bl	8000ab4 <SD_CheckPower>
 8001084:	4603      	mov	r3, r0
 8001086:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800108e:	e0ec      	b.n	800126a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001090:	2304      	movs	r3, #4
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001096:	e0e8      	b.n	800126a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001098:	4b77      	ldr	r3, [pc, #476]	; (8001278 <SD_disk_ioctl+0x254>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SD_disk_ioctl+0x86>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e0e1      	b.n	800126e <SD_disk_ioctl+0x24a>

		SELECT();
 80010aa:	f7ff fc1d 	bl	80008e8 <SELECT>

		switch (ctrl)
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2b0d      	cmp	r3, #13
 80010b2:	f200 80cb 	bhi.w	800124c <SD_disk_ioctl+0x228>
 80010b6:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <SD_disk_ioctl+0x98>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080011b7 	.word	0x080011b7
 80010c0:	080010f5 	.word	0x080010f5
 80010c4:	080011a7 	.word	0x080011a7
 80010c8:	0800124d 	.word	0x0800124d
 80010cc:	0800124d 	.word	0x0800124d
 80010d0:	0800124d 	.word	0x0800124d
 80010d4:	0800124d 	.word	0x0800124d
 80010d8:	0800124d 	.word	0x0800124d
 80010dc:	0800124d 	.word	0x0800124d
 80010e0:	0800124d 	.word	0x0800124d
 80010e4:	0800124d 	.word	0x0800124d
 80010e8:	080011c9 	.word	0x080011c9
 80010ec:	080011ed 	.word	0x080011ed
 80010f0:	08001211 	.word	0x08001211
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010f4:	2100      	movs	r1, #0
 80010f6:	2049      	movs	r0, #73	; 0x49
 80010f8:	f7ff fd57 	bl	8000baa <SD_SendCmd>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80a8 	bne.w	8001254 <SD_disk_ioctl+0x230>
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2110      	movs	r1, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fcdc 	bl	8000ac8 <SD_RxDataBlock>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 809e 	beq.w	8001254 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	099b      	lsrs	r3, r3, #6
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10e      	bne.n	8001140 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001122:	7d7b      	ldrb	r3, [r7, #21]
 8001124:	b29a      	uxth	r2, r3
 8001126:	7d3b      	ldrb	r3, [r7, #20]
 8001128:	b29b      	uxth	r3, r3
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	3301      	adds	r3, #1
 8001134:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001136:	8bfb      	ldrh	r3, [r7, #30]
 8001138:	029a      	lsls	r2, r3, #10
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e02e      	b.n	800119e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001140:	7c7b      	ldrb	r3, [r7, #17]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	b2da      	uxtb	r2, r3
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	09db      	lsrs	r3, r3, #7
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	7d7b      	ldrb	r3, [r7, #21]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0306 	and.w	r3, r3, #6
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3302      	adds	r3, #2
 8001164:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001168:	7d3b      	ldrb	r3, [r7, #20]
 800116a:	099b      	lsrs	r3, r3, #6
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b29a      	uxth	r2, r3
 8001170:	7cfb      	ldrb	r3, [r7, #19]
 8001172:	b29b      	uxth	r3, r3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	7cbb      	ldrb	r3, [r7, #18]
 800117e:	029b      	lsls	r3, r3, #10
 8001180:	b29b      	uxth	r3, r3
 8001182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	3301      	adds	r3, #1
 800118e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001190:	8bfa      	ldrh	r2, [r7, #30]
 8001192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001196:	3b09      	subs	r3, #9
 8001198:	409a      	lsls	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80011a4:	e056      	b.n	8001254 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011b4:	e055      	b.n	8001262 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011b6:	f7ff fc15 	bl	80009e4 <SD_ReadyWait>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2bff      	cmp	r3, #255	; 0xff
 80011be:	d14b      	bne.n	8001258 <SD_disk_ioctl+0x234>
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011c6:	e047      	b.n	8001258 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011c8:	2100      	movs	r1, #0
 80011ca:	2049      	movs	r0, #73	; 0x49
 80011cc:	f7ff fced 	bl	8000baa <SD_SendCmd>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d142      	bne.n	800125c <SD_disk_ioctl+0x238>
 80011d6:	2110      	movs	r1, #16
 80011d8:	6a38      	ldr	r0, [r7, #32]
 80011da:	f7ff fc75 	bl	8000ac8 <SD_RxDataBlock>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03b      	beq.n	800125c <SD_disk_ioctl+0x238>
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011ea:	e037      	b.n	800125c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011ec:	2100      	movs	r1, #0
 80011ee:	204a      	movs	r0, #74	; 0x4a
 80011f0:	f7ff fcdb 	bl	8000baa <SD_SendCmd>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d132      	bne.n	8001260 <SD_disk_ioctl+0x23c>
 80011fa:	2110      	movs	r1, #16
 80011fc:	6a38      	ldr	r0, [r7, #32]
 80011fe:	f7ff fc63 	bl	8000ac8 <SD_RxDataBlock>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d02b      	beq.n	8001260 <SD_disk_ioctl+0x23c>
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800120e:	e027      	b.n	8001260 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001210:	2100      	movs	r1, #0
 8001212:	207a      	movs	r0, #122	; 0x7a
 8001214:	f7ff fcc9 	bl	8000baa <SD_SendCmd>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d116      	bne.n	800124c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001224:	e00b      	b.n	800123e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001226:	6a3c      	ldr	r4, [r7, #32]
 8001228:	1c63      	adds	r3, r4, #1
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	f7ff fbb0 	bl	8000990 <SPI_RxByte>
 8001230:	4603      	mov	r3, r0
 8001232:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001238:	3301      	adds	r3, #1
 800123a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	2b03      	cmp	r3, #3
 8001244:	d9ef      	bls.n	8001226 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800124c:	2304      	movs	r3, #4
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001252:	e006      	b.n	8001262 <SD_disk_ioctl+0x23e>
			break;
 8001254:	bf00      	nop
 8001256:	e004      	b.n	8001262 <SD_disk_ioctl+0x23e>
			break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <SD_disk_ioctl+0x23e>
			break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <SD_disk_ioctl+0x23e>
			break;
 8001260:	bf00      	nop
		}

		DESELECT();
 8001262:	f7ff fb51 	bl	8000908 <DESELECT>
		SPI_RxByte();
 8001266:	f7ff fb93 	bl	8000990 <SPI_RxByte>
	}

	return res;
 800126a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800126e:	4618      	mov	r0, r3
 8001270:	372c      	adds	r7, #44	; 0x2c
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e01f      	b.n	80012ce <selectMux+0x52>
		if (pin & (i << 1)) {
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005a      	lsls	r2, r3, #1
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <selectMux+0x64>)
 80012ac:	f001 fe92 	bl	8002fd4 <HAL_GPIO_WritePin>
 80012b0:	e00a      	b.n	80012c8 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <selectMux+0x64>)
 80012c4:	f001 fe86 	bl	8002fd4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	dddc      	ble.n	800128e <selectMux+0x12>
		}
	}
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000

080012e4 <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f001 fe6c 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <disableMux>:

void disableMux(GPIO_TypeDef *type, int pin) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f001 fe5c 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <ADC_Select_CH3>:

void logSDCard(char* print_statement) {
	// TODO
}

void ADC_Select_CH3(void) { // Used for 3V3
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_3;
 8001334:	2303      	movs	r3, #3
 8001336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <ADC_Select_CH3+0x38>)
 8001346:	f001 f93f 	bl	80025c8 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <ADC_Select_CH3+0x30>
  {
	Error_Handler();
 8001350:	f000 fbe6 	bl	8001b20 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200001dc 	.word	0x200001dc

08001360 <ADC_Select_CH9>:

void ADC_Select_CH9(void) { // Used for sense mux
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_9;
 8001370:	2309      	movs	r3, #9
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <ADC_Select_CH9+0x38>)
 8001382:	f001 f921 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <ADC_Select_CH9+0x30>
  {
	Error_Handler();
 800138c:	f000 fbc8 	bl	8001b20 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200001dc 	.word	0x200001dc

0800139c <read3V3>:

float read3V3() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  ADC_Select_CH3();
 80013a2:	f7ff ffbf 	bl	8001324 <ADC_Select_CH3>
  HAL_ADC_Start(&hadc);
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <read3V3+0x50>)
 80013a8:	f000 ffe6 	bl	8002378 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <read3V3+0x50>)
 80013b2:	f001 f86d 	bl	8002490 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc) * ADC_VOLTAGE_CONVERSION;
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <read3V3+0x50>)
 80013b8:	f001 f8fa 	bl	80025b0 <HAL_ADC_GetValue>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f846 	bl	8000450 <__aeabi_ui2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <read3V3+0x54>)
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fed6 	bl	800017c <__aeabi_fmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <read3V3+0x50>)
 80013d6:	f001 f82f 	bl	8002438 <HAL_ADC_Stop>
  HAL_Delay(100);
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	f000 fe64 	bl	80020a8 <HAL_Delay>
  return data;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001dc 	.word	0x200001dc
 80013f0:	3a533334 	.word	0x3a533334

080013f4 <readPressure>:

int readPressure() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  ADC_Select_CH9();
 80013fa:	f7ff ffb1 	bl	8001360 <ADC_Select_CH9>
  HAL_ADC_Start(&hadc);
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <readPressure+0x34>)
 8001400:	f000 ffba 	bl	8002378 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <readPressure+0x34>)
 800140a:	f001 f841 	bl	8002490 <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <readPressure+0x34>)
 8001410:	f001 f8ce 	bl	80025b0 <HAL_ADC_GetValue>
 8001414:	4603      	mov	r3, r0
 8001416:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <readPressure+0x34>)
 800141a:	f001 f80d 	bl	8002438 <HAL_ADC_Stop>
  return data;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001dc 	.word	0x200001dc

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001436:	f000 fdc8 	bl	8001fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143a:	f000 f96b 	bl	8001714 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 800143e:	4bac      	ldr	r3, [pc, #688]	; (80016f0 <main+0x2c4>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 faac 	bl	80019a0 <MX_GPIO_Init>
  MX_ADC_Init();
 8001448:	f000 f9b4 	bl	80017b4 <MX_ADC_Init>
  MX_I2C1_Init();
 800144c:	f000 fa1a 	bl	8001884 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001450:	f000 fa46 	bl	80018e0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001454:	f000 fa7a 	bl	800194c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001458:	f005 faf0 	bl	8006a3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2101      	movs	r1, #1
 8001460:	48a4      	ldr	r0, [pc, #656]	; (80016f4 <main+0x2c8>)
 8001462:	f001 fdb7 	bl	8002fd4 <HAL_GPIO_WritePin>
//  printf("Initialization complete \r\n");

  int init_cnt = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800146c:	f102 021c 	add.w	r2, r2, #28
 8001470:	6013      	str	r3, [r2, #0]
  while (init_cnt < 4) {
 8001472:	e016      	b.n	80014a2 <main+0x76>
	  init_cnt++;
 8001474:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001478:	f103 031c 	add.w	r3, r3, #28
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001484:	f102 021c 	add.w	r2, r2, #28
 8001488:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001490:	4898      	ldr	r0, [pc, #608]	; (80016f4 <main+0x2c8>)
 8001492:	f001 fd9f 	bl	8002fd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149c:	4895      	ldr	r0, [pc, #596]	; (80016f4 <main+0x2c8>)
 800149e:	f001 fd99 	bl	8002fd4 <HAL_GPIO_WritePin>
  while (init_cnt < 4) {
 80014a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014a6:	f103 031c 	add.w	r3, r3, #28
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	dde1      	ble.n	8001474 <main+0x48>
  }

  ITM_Port32(31) = 2;
 80014b0:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <main+0x2c4>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	601a      	str	r2, [r3, #0]

//  int voltage_thresh_count = 0;
  int pressure_data[NUM_NODES] = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	3b20      	subs	r3, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	461a      	mov	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f005 fb9f 	bl	8006c08 <memset>
  int array_cnt = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014d0:	f102 0218 	add.w	r2, r2, #24
 80014d4:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read3V3();
 80014d6:	f7ff ff61 	bl	800139c <read3V3>
//		  exit(EXIT_SUCCESS);
//	}

	// TODO: setup timer to read from SD card and send to database

	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014e0:	f102 0214 	add.w	r2, r2, #20
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e0eb      	b.n	80016c0 <main+0x294>
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80014e8:	4a83      	ldr	r2, [pc, #524]	; (80016f8 <main+0x2cc>)
 80014ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ee:	f103 0314 	add.w	r3, r3, #20
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f8:	4980      	ldr	r1, [pc, #512]	; (80016fc <main+0x2d0>)
 80014fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014fe:	f103 0314 	add.w	r3, r3, #20
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff feea 	bl	80012e4 <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8001510:	2300      	movs	r3, #0
 8001512:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001516:	f102 0210 	add.w	r2, r2, #16
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e0a9      	b.n	8001672 <main+0x246>
			selectMux(pwr_sel, pwrMuxSelect, 4);
 800151e:	2204      	movs	r2, #4
 8001520:	4977      	ldr	r1, [pc, #476]	; (8001700 <main+0x2d4>)
 8001522:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001526:	f103 0310 	add.w	r3, r3, #16
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f7ff fea6 	bl	800127c <selectMux>
			// TODO: Timer for 3v3 checking
//			if (belowVoltageThresh()) { // ADC channel for 3v3 sense
//				voltage_thresh_count++;
//			}

			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8001530:	2300      	movs	r3, #0
 8001532:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001536:	f102 020c 	add.w	r2, r2, #12
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e086      	b.n	800164c <main+0x220>
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800153e:	4a71      	ldr	r2, [pc, #452]	; (8001704 <main+0x2d8>)
 8001540:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001544:	f103 030c 	add.w	r3, r3, #12
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800154e:	496e      	ldr	r1, [pc, #440]	; (8001708 <main+0x2dc>)
 8001550:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001554:	f103 030c 	add.w	r3, r3, #12
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800155e:	4619      	mov	r1, r3
 8001560:	4610      	mov	r0, r2
 8001562:	f7ff febf 	bl	80012e4 <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8001566:	2300      	movs	r3, #0
 8001568:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800156c:	f102 0208 	add.w	r2, r2, #8
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e045      	b.n	8001600 <main+0x1d4>
					selectMux(sense_sel, senseMuxSelect, 8);
 8001574:	2208      	movs	r2, #8
 8001576:	4965      	ldr	r1, [pc, #404]	; (800170c <main+0x2e0>)
 8001578:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800157c:	f103 0308 	add.w	r3, r3, #8
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f7ff fe7b 	bl	800127c <selectMux>

					// Read voltage sense
					int raw_ADC_pressure = readPressure(); // ADC channel for voltage
 8001586:	f7ff ff35 	bl	80013f4 <readPressure>
 800158a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800158e:	f103 0304 	add.w	r3, r3, #4
 8001592:	6018      	str	r0, [r3, #0]
					float test_voltage = raw_ADC_pressure * ADC_VOLTAGE_CONVERSION;
 8001594:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001598:	f103 0304 	add.w	r3, r3, #4
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	f7fe ff5b 	bl	8000458 <__aeabi_i2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a5a      	ldr	r2, [pc, #360]	; (8001710 <main+0x2e4>)
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fde7 	bl	800017c <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015b4:	6013      	str	r3, [r2, #0]
//					printf("raw pressure voltage: %d", raw_pressure_voltage);
					pressure_data[array_cnt] = raw_ADC_pressure;
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	3b20      	subs	r3, #32
 80015bc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015c0:	f102 0218 	add.w	r2, r2, #24
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80015ca:	f101 0104 	add.w	r1, r1, #4
 80015ce:	6809      	ldr	r1, [r1, #0]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					array_cnt++;
 80015d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015d8:	f103 0318 	add.w	r3, r3, #24
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015e4:	f102 0218 	add.w	r2, r2, #24
 80015e8:	6013      	str	r3, [r2, #0]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 80015ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015ee:	f103 0308 	add.w	r3, r3, #8
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015fa:	f102 0208 	add.w	r2, r2, #8
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001604:	f103 0308 	add.w	r3, r3, #8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b07      	cmp	r3, #7
 800160c:	ddb2      	ble.n	8001574 <main+0x148>
					// TODO: write to SD card
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800160e:	4a3d      	ldr	r2, [pc, #244]	; (8001704 <main+0x2d8>)
 8001610:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001614:	f103 030c 	add.w	r3, r3, #12
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800161e:	493a      	ldr	r1, [pc, #232]	; (8001708 <main+0x2dc>)
 8001620:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001624:	f103 030c 	add.w	r3, r3, #12
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f7ff fe67 	bl	8001304 <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8001636:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800163a:	f103 030c 	add.w	r3, r3, #12
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001646:	f102 020c 	add.w	r2, r2, #12
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001650:	f103 030c 	add.w	r3, r3, #12
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b07      	cmp	r3, #7
 8001658:	f77f af71 	ble.w	800153e <main+0x112>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 800165c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001660:	f103 0310 	add.w	r3, r3, #16
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800166c:	f102 0210 	add.w	r2, r2, #16
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001676:	f103 0310 	add.w	r3, r3, #16
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b07      	cmp	r3, #7
 800167e:	f77f af4e 	ble.w	800151e <main+0xf2>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <main+0x2cc>)
 8001684:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001688:	f103 0314 	add.w	r3, r3, #20
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001692:	491a      	ldr	r1, [pc, #104]	; (80016fc <main+0x2d0>)
 8001694:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001698:	f103 0314 	add.w	r3, r3, #20
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f7ff fe2d 	bl	8001304 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 80016aa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016ae:	f103 0314 	add.w	r3, r3, #20
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016ba:	f102 0214 	add.w	r2, r2, #20
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016c4:	f103 0314 	add.w	r3, r3, #20
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	f77f af0c 	ble.w	80014e8 <main+0xbc>
	 }
//	printf("array cnt: %d", array_cnt);
	array_cnt = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016d6:	f102 0218 	add.w	r2, r2, #24
 80016da:	6013      	str	r3, [r2, #0]
	memset(pressure_data, 0, sizeof(pressure_data));
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	3b20      	subs	r3, #32
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fa8d 	bl	8006c08 <memset>
	read3V3();
 80016ee:	e6f2      	b.n	80014d6 <main+0xaa>
 80016f0:	e000007c 	.word	0xe000007c
 80016f4:	40020800 	.word	0x40020800
 80016f8:	20000004 	.word	0x20000004
 80016fc:	08006c30 	.word	0x08006c30
 8001700:	20000020 	.word	0x20000020
 8001704:	2000002c 	.word	0x2000002c
 8001708:	08006c40 	.word	0x08006c40
 800170c:	20000014 	.word	0x20000014
 8001710:	3a533334 	.word	0x3a533334

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b092      	sub	sp, #72	; 0x48
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2234      	movs	r2, #52	; 0x34
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fa70 	bl	8006c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <SystemClock_Config+0x9c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <SystemClock_Config+0x9c>)
 8001740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001744:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001746:	2303      	movs	r3, #3
 8001748:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001752:	2310      	movs	r3, #16
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001760:	2300      	movs	r3, #0
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001768:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fa4e 	bl	8004c10 <HAL_RCC_OscConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800177a:	f000 f9d1 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
 8001780:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	2303      	movs	r3, #3
 8001784:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fd6a 	bl	8005270 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017a2:	f000 f9bd 	bl	8001b20 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3748      	adds	r7, #72	; 0x48
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <MX_ADC_Init+0xc8>)
 80017c6:	4a2e      	ldr	r2, [pc, #184]	; (8001880 <MX_ADC_Init+0xcc>)
 80017c8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_ADC_Init+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <MX_ADC_Init+0xc8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_ADC_Init+0xc8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <MX_ADC_Init+0xc8>)
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <MX_ADC_Init+0xc8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <MX_ADC_Init+0xc8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_ADC_Init+0xc8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_ADC_Init+0xc8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_ADC_Init+0xc8>)
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_ADC_Init+0xc8>)
 8001806:	2202      	movs	r2, #2
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_ADC_Init+0xc8>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_ADC_Init+0xc8>)
 8001814:	2210      	movs	r2, #16
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_ADC_Init+0xc8>)
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_ADC_Init+0xc8>)
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <MX_ADC_Init+0xc8>)
 8001828:	f000 fc60 	bl	80020ec <HAL_ADC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8001832:	f000 f975 	bl	8001b20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001836:	2303      	movs	r3, #3
 8001838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800183a:	2301      	movs	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_ADC_Init+0xc8>)
 8001848:	f000 febe 	bl	80025c8 <HAL_ADC_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001852:	f000 f965 	bl	8001b20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001856:	2309      	movs	r3, #9
 8001858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800185a:	2302      	movs	r3, #2
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_ADC_Init+0xc8>)
 8001864:	f000 feb0 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800186e:	f000 f957 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001dc 	.word	0x200001dc
 8001880:	40012400 	.word	0x40012400

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f001 fb9f 	bl	8003004 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f928 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000188 	.word	0x20000188
 80018d8:	40005400 	.word	0x40005400
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <MX_SPI2_Init+0x64>)
 80018e6:	4a18      	ldr	r2, [pc, #96]	; (8001948 <MX_SPI2_Init+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_SPI2_Init+0x64>)
 80018ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_SPI2_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_SPI2_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_SPI2_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_SPI2_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_SPI2_Init+0x64>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_SPI2_Init+0x64>)
 8001914:	2210      	movs	r2, #16
 8001916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_SPI2_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_SPI2_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_SPI2_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_SPI2_Init+0x64>)
 800192c:	220a      	movs	r2, #10
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_SPI2_Init+0x64>)
 8001932:	f003 ff09 	bl	8005748 <HAL_SPI_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800193c:	f000 f8f0 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000130 	.word	0x20000130
 8001948:	40003800 	.word	0x40003800

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_USART3_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001984:	f004 fc08 	bl	8006198 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f000 f8c7 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000e0 	.word	0x200000e0
 800199c:	40004800 	.word	0x40004800

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a48      	ldr	r2, [pc, #288]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <MX_GPIO_Init+0x16c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a42      	ldr	r2, [pc, #264]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <MX_GPIO_Init+0x16c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001a34:	4836      	ldr	r0, [pc, #216]	; (8001b10 <MX_GPIO_Init+0x170>)
 8001a36:	f001 facd 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001a40:	4834      	ldr	r0, [pc, #208]	; (8001b14 <MX_GPIO_Init+0x174>)
 8001a42:	f001 fac7 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001a46:	2200      	movs	r2, #0
 8001a48:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001a4c:	4832      	ldr	r0, [pc, #200]	; (8001b18 <MX_GPIO_Init+0x178>)
 8001a4e:	f001 fac1 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	4831      	ldr	r0, [pc, #196]	; (8001b1c <MX_GPIO_Init+0x17c>)
 8001a58:	f001 fabc 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001a5c:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001a60:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4826      	ldr	r0, [pc, #152]	; (8001b10 <MX_GPIO_Init+0x170>)
 8001a76:	f001 f92d 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001a7a:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001a7e:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4820      	ldr	r0, [pc, #128]	; (8001b14 <MX_GPIO_Init+0x174>)
 8001a94:	f001 f91e 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001a98:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001a9c:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <MX_GPIO_Init+0x178>)
 8001ab2:	f001 f90f 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8001ab6:	2340      	movs	r3, #64	; 0x40
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <MX_GPIO_Init+0x170>)
 8001aca:	f001 f903 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8001ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_GPIO_Init+0x174>)
 8001ae4:	f001 f8f6 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <MX_GPIO_Init+0x17c>)
 8001b00:	f001 f8e8 	bl	8002cd4 <HAL_GPIO_Init>

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_MspInit+0x68>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_MspInit+0x68>)
 8001b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b3c:	6253      	str	r3, [r2, #36]	; 0x24
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_MspInit+0x68>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_MspInit+0x68>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_MspInit+0x68>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_MspInit+0x68>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_MspInit+0x68>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_MspInit+0x68>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6253      	str	r3, [r2, #36]	; 0x24
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_MspInit+0x68>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f000 ffe7 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b84:	2005      	movs	r0, #5
 8001b86:	f001 f800 	bl	8002b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <HAL_ADC_MspInit+0xd4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d153      	bne.n	8001c62 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_ADC_MspInit+0xd8>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <HAL_ADC_MspInit+0xdc>)
 8001c2e:	f001 f851 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_3V3_Pin;
 8001c32:	2308      	movs	r3, #8
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_3V3_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001c46:	f001 f845 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <HAL_ADC_MspInit+0xe4>)
 8001c5e:	f001 f839 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40012400 	.word	0x40012400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400

08001c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_I2C_MspInit+0x9c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d138      	bne.n	8001d14 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc0:	2312      	movs	r3, #18
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4813      	ldr	r0, [pc, #76]	; (8001d24 <HAL_I2C_MspInit+0xa4>)
 8001cd8:	f000 fffc 	bl	8002cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce6:	6253      	str	r3, [r2, #36]	; 0x24
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_I2C_MspInit+0xa0>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	201f      	movs	r0, #31
 8001cfa:	f000 ff2a 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cfe:	201f      	movs	r0, #31
 8001d00:	f000 ff43 	bl	8002b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2020      	movs	r0, #32
 8001d0a:	f000 ff22 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d0e:	2020      	movs	r0, #32
 8001d10:	f000 ff3b 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020400 	.word	0x40020400

08001d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d130      	bne.n	8001dac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6253      	str	r3, [r2, #36]	; 0x24
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_SPI_MspInit+0x94>)
 8001d98:	f000 ff9c 	bl	8002cd4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2024      	movs	r0, #36	; 0x24
 8001da2:	f000 fed6 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001da6:	2024      	movs	r0, #36	; 0x24
 8001da8:	f000 feef 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40003800 	.word	0x40003800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_UART_MspInit+0x8c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d130      	bne.n	8001e44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6253      	str	r3, [r2, #36]	; 0x24
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_UART_MspInit+0x90>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e24:	2307      	movs	r3, #7
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_UART_MspInit+0x94>)
 8001e30:	f000 ff50 	bl	8002cd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2027      	movs	r0, #39	; 0x27
 8001e3a:	f000 fe8a 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e3e:	2027      	movs	r0, #39	; 0x27
 8001e40:	f000 fea3 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40004800 	.word	0x40004800
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020800 	.word	0x40020800

08001e58 <SDTimer_Handler>:
extern void Uart_isr (UART_HandleTypeDef *huart);
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <SDTimer_Handler+0x3c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <SDTimer_Handler+0x1c>
		Timer1--;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <SDTimer_Handler+0x3c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <SDTimer_Handler+0x3c>)
 8001e72:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <SDTimer_Handler+0x40>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <SDTimer_Handler+0x34>
		Timer2--;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <SDTimer_Handler+0x40>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <SDTimer_Handler+0x40>)
 8001e8a:	701a      	strb	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	2000012e 	.word	0x2000012e
 8001e98:	2000012c 	.word	0x2000012c

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <SysTick_Handler+0x30>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SysTick_Handler+0x30>)
 8001ef0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <SysTick_Handler+0x30>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d904      	bls.n	8001f06 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Handler+0x30>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001f02:	f7ff ffa9 	bl	8001e58 <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f06:	f000 f8b3 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000d2 	.word	0x200000d2

08001f14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <I2C1_EV_IRQHandler+0x10>)
 8001f26:	f001 f9b1 	bl	800328c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000188 	.word	0x20000188

08001f34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <I2C1_ER_IRQHandler+0x10>)
 8001f3a:	f001 fb18 	bl	800356e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000188 	.word	0x20000188

08001f48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <SPI2_IRQHandler+0x10>)
 8001f4e:	f003 ff55 	bl	8005dfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000130 	.word	0x20000130

08001f5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <USART3_IRQHandler+0x14>)
 8001f62:	f7fe fc67 	bl	8000834 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f66:	4802      	ldr	r0, [pc, #8]	; (8001f70 <USART3_IRQHandler+0x14>)
 8001f68:	f004 f964 	bl	8006234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200000e0 	.word	0x200000e0

08001f74 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ffe5 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f004 fe09 	bl	8006bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff fa3d 	bl	800142c <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fbc:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 8001fc0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fc4:	200022a4 	.word	0x200022a4

08001fc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_IRQHandler>

08001fca <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 fdb1 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 f80e 	bl	8001ffc <HAL_InitTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	e001      	b.n	8001ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fec:	f7ff fd9e 	bl	8001b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_InitTick+0x68>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d022      	beq.n	8002056 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_InitTick+0x6c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_InitTick+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fdbe 	bl	8002ba6 <HAL_SYSTICK_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10f      	bne.n	8002050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d809      	bhi.n	800204a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002036:	2200      	movs	r2, #0
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
 800203e:	f000 fd88 	bl	8002b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_InitTick+0x70>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e007      	b.n	800205a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e004      	b.n	800205a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000054 	.word	0x20000054
 8002068:	2000004c 	.word	0x2000004c
 800206c:	20000050 	.word	0x20000050

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x1c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x20>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4413      	add	r3, r2
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_IncTick+0x1c>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000230 	.word	0x20000230
 8002090:	20000054 	.word	0x20000054

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_GetTick+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000230 	.word	0x20000230

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff fff0 	bl	8002094 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d004      	beq.n	80020cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_Delay+0x40>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020cc:	bf00      	nop
 80020ce:	f7ff ffe1 	bl	8002094 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d8f7      	bhi.n	80020ce <HAL_Delay+0x26>
  {
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000054 	.word	0x20000054

080020ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e127      	b.n	800235c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b8e      	ldr	r3, [pc, #568]	; (8002364 <HAL_ADC_Init+0x278>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a8d      	ldr	r2, [pc, #564]	; (8002364 <HAL_ADC_Init+0x278>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_ADC_Init+0x278>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fd29 	bl	8001b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80ff 	bne.w	8002352 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002168:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_ADC_Init+0x27c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	497c      	ldr	r1, [pc, #496]	; (8002368 <HAL_ADC_Init+0x27c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002182:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218a:	4619      	mov	r1, r3
 800218c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002190:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80021a6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	2302      	movs	r3, #2
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80021ce:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80021d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d2:	4313      	orrs	r3, r2
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021e6:	4313      	orrs	r3, r2
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	4313      	orrs	r3, r2
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d04f      	beq.n	800229c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002202:	4313      	orrs	r3, r2
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800220e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6912      	ldr	r2, [r2, #16]
 8002214:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002218:	d003      	beq.n	8002222 <HAL_ADC_Init+0x136>
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6912      	ldr	r2, [r2, #16]
 800221e:	2a01      	cmp	r2, #1
 8002220:	d102      	bne.n	8002228 <HAL_ADC_Init+0x13c>
 8002222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002226:	e000      	b.n	800222a <HAL_ADC_Init+0x13e>
 8002228:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800222a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222e:	4313      	orrs	r3, r2
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d125      	bne.n	8002288 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	3b01      	subs	r3, #1
 800224c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	617a      	str	r2, [r7, #20]
  return result;
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4093      	lsls	r3, r2
 8002264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226a:	4313      	orrs	r3, r2
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
 800226e:	e00b      	b.n	8002288 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_ADC_Init+0x280>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002298:	430b      	orrs	r3, r1
 800229a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_ADC_Init+0x284>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b8:	d003      	beq.n	80022c2 <HAL_ADC_Init+0x1d6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d119      	bne.n	80022f6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80022d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60fa      	str	r2, [r7, #12]
  return result;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	fa03 f202 	lsl.w	r2, r3, r2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
 80022f4:	e007      	b.n	8002306 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_ADC_Init+0x288>)
 800230e:	4013      	ands	r3, r2
 8002310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002312:	429a      	cmp	r2, r3
 8002314:	d10b      	bne.n	800232e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	f023 0303 	bic.w	r3, r3, #3
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	64da      	str	r2, [r3, #76]	; 0x4c
 800232c:	e014      	b.n	8002358 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	f023 0312 	bic.w	r3, r3, #18
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002350:	e002      	b.n	8002358 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002358:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800235c:	4618      	mov	r0, r3
 800235e:	3738      	adds	r7, #56	; 0x38
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	40012700 	.word	0x40012700
 800236c:	fcfc16ff 	.word	0xfcfc16ff
 8002370:	c0fff18d 	.word	0xc0fff18d
 8002374:	bf80fffe 	.word	0xbf80fffe

08002378 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Start+0x1a>
 800238e:	2302      	movs	r3, #2
 8002390:	e04e      	b.n	8002430 <HAL_ADC_Start+0xb8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa64 	bl	8002868 <ADC_Enable>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d141      	bne.n	800242e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d106      	bne.n	80023f8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ee:	f023 0206 	bic.w	r2, r3, #6
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
 80023f6:	e002      	b.n	80023fe <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800240e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800242c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_ADC_Stop+0x1a>
 800244e:	2302      	movs	r3, #2
 8002450:	e01a      	b.n	8002488 <HAL_ADC_Stop+0x50>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa60 	bl	8002920 <ADC_ConversionStop_Disable>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	d113      	bne.n	80024d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d10b      	bne.n	80024d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e068      	b.n	80025a8 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024d6:	f7ff fddd 	bl	8002094 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024dc:	e021      	b.n	8002522 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d01d      	beq.n	8002522 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_ADC_PollForConversion+0x6c>
 80024ec:	f7ff fdd2 	bl	8002094 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d212      	bcs.n	8002522 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10b      	bne.n	8002522 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e042      	b.n	80025a8 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0d6      	beq.n	80024de <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0212 	mvn.w	r2, #18
 8002540:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d124      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11f      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x20>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e134      	b.n	8002852 <HAL_ADC_ConfigChannel+0x28a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d81c      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b05      	subs	r3, #5
 800260a:	221f      	movs	r2, #31
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	4019      	ands	r1, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b05      	subs	r3, #5
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
 8002630:	e07e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d81c      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b23      	subs	r3, #35	; 0x23
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	4019      	ands	r1, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3b23      	subs	r3, #35	; 0x23
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
 8002672:	e05d      	b.n	8002730 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d81c      	bhi.n	80026b6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b41      	subs	r3, #65	; 0x41
 800268e:	221f      	movs	r2, #31
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4019      	ands	r1, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b41      	subs	r3, #65	; 0x41
 80026a8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38
 80026b4:	e03c      	b.n	8002730 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b18      	cmp	r3, #24
 80026bc:	d81c      	bhi.n	80026f8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b5f      	subs	r3, #95	; 0x5f
 80026d0:	221f      	movs	r2, #31
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	4019      	ands	r1, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3b5f      	subs	r3, #95	; 0x5f
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
 80026f6:	e01b      	b.n	8002730 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b7d      	subs	r3, #125	; 0x7d
 800270a:	221f      	movs	r2, #31
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b7d      	subs	r3, #125	; 0x7d
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d81a      	bhi.n	800276e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	2207      	movs	r2, #7
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	4019      	ands	r1, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6898      	ldr	r0, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	615a      	str	r2, [r3, #20]
 800276c:	e042      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b13      	cmp	r3, #19
 8002774:	d81c      	bhi.n	80027b0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	3b1e      	subs	r3, #30
 8002788:	2207      	movs	r2, #7
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	4019      	ands	r1, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6898      	ldr	r0, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	3b1e      	subs	r3, #30
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	611a      	str	r2, [r3, #16]
 80027ae:	e021      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b1a      	cmp	r3, #26
 80027b6:	d81c      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	3b3c      	subs	r3, #60	; 0x3c
 80027ca:	2207      	movs	r2, #7
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4019      	ands	r1, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6898      	ldr	r0, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	3b3c      	subs	r3, #60	; 0x3c
 80027e4:	fa00 f203 	lsl.w	r2, r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027f2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d003      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002800:	2b11      	cmp	r3, #17
 8002802:	d121      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_ADC_ConfigChannel+0x294>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11b      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_ADC_ConfigChannel+0x294>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x294>)
 8002816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800281a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b10      	cmp	r3, #16
 8002822:	d111      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_ADC_ConfigChannel+0x298>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_ADC_ConfigChannel+0x29c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9a      	lsrs	r2, r3, #18
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800283a:	e002      	b.n	8002842 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3b01      	subs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012700 	.word	0x40012700
 8002860:	2000004c 	.word	0x2000004c
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d043      	beq.n	800290e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <ADC_Enable+0xb0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <ADC_Enable+0xb4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9a      	lsrs	r2, r3, #18
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028aa:	e002      	b.n	80028b2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80028b8:	f7ff fbec 	bl	8002094 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028be:	e01f      	b.n	8002900 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80028c0:	f7ff fbe8 	bl	8002094 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d918      	bls.n	8002900 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d011      	beq.n	8002900 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	f043 0210 	orr.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e007      	b.n	8002910 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d1d8      	bne.n	80028c0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000004c 	.word	0x2000004c
 800291c:	431bde83 	.word	0x431bde83

08002920 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d12e      	bne.n	8002998 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294a:	f7ff fba3 	bl	8002094 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002950:	e01b      	b.n	800298a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002952:	f7ff fb9f 	bl	8002094 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d914      	bls.n	800298a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d10d      	bne.n	800298a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d0dc      	beq.n	8002952 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4906      	ldr	r1, [pc, #24]	; (8002a3c <__NVIC_EnableIRQ+0x34>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff90 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff2d 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff42 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff90 	bl	8002a94 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5f 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff35 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d008      	beq.n	8002be8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e022      	b.n	8002c2e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 020e 	bic.w	r2, r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 021c 	and.w	r2, r3, #28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d005      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e029      	b.n	8002cb0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 020e 	bic.w	r2, r2, #14
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 021c 	and.w	r2, r3, #28
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
    }
  }
  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cc8:	b2db      	uxtb	r3, r3
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cea:	e154      	b.n	8002f96 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8146 	beq.w	8002f90 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d005      	beq.n	8002d1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d130      	bne.n	8002d7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002d52:	2201      	movs	r2, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0201 	and.w	r2, r3, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d017      	beq.n	8002dba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d123      	bne.n	8002e0e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	6939      	ldr	r1, [r7, #16]
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0203 	and.w	r2, r3, #3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a0 	beq.w	8002f90 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_GPIO_Init+0x2e0>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_GPIO_Init+0x2e0>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_GPIO_Init+0x2e0>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e68:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a4b      	ldr	r2, [pc, #300]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d019      	beq.n	8002ec8 <HAL_GPIO_Init+0x1f4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_GPIO_Init+0x1f0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_GPIO_Init+0x1ec>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_GPIO_Init+0x2f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d007      	beq.n	8002ebc <HAL_GPIO_Init+0x1e8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_GPIO_Init+0x2f8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_GPIO_Init+0x1e4>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e008      	b.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002eb8:	2305      	movs	r3, #5
 8002eba:	e006      	b.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e004      	b.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e002      	b.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	f002 0203 	and.w	r2, r2, #3
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	4093      	lsls	r3, r2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eda:	4937      	ldr	r1, [pc, #220]	; (8002fb8 <HAL_GPIO_Init+0x2e4>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3301      	adds	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f aea3 	bne.w	8002cec <HAL_GPIO_Init+0x18>
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40010400 	.word	0x40010400

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e12b      	b.n	800326e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe fe28 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003068:	f002 fae6 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a81      	ldr	r2, [pc, #516]	; (8003278 <HAL_I2C_Init+0x274>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d807      	bhi.n	8003088 <HAL_I2C_Init+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_I2C_Init+0x278>)
 800307c:	4293      	cmp	r3, r2
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e006      	b.n	8003096 <HAL_I2C_Init+0x92>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a7d      	ldr	r2, [pc, #500]	; (8003280 <HAL_I2C_Init+0x27c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0e7      	b.n	800326e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_I2C_Init+0x280>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_I2C_Init+0x274>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d802      	bhi.n	80030d8 <HAL_I2C_Init+0xd4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	e009      	b.n	80030ec <HAL_I2C_Init+0xe8>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <HAL_I2C_Init+0x284>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	3301      	adds	r3, #1
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	495c      	ldr	r1, [pc, #368]	; (8003278 <HAL_I2C_Init+0x274>)
 8003108:	428b      	cmp	r3, r1
 800310a:	d819      	bhi.n	8003140 <HAL_I2C_Init+0x13c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e59      	subs	r1, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fbb1 f3f3 	udiv	r3, r1, r3
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003120:	400b      	ands	r3, r1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_I2C_Init+0x138>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e59      	subs	r1, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fbb1 f3f3 	udiv	r3, r1, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	e051      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800313c:	2304      	movs	r3, #4
 800313e:	e04f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <HAL_I2C_Init+0x168>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e012      	b.n	8003192 <HAL_I2C_Init+0x18e>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x196>
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <HAL_I2C_Init+0x1bc>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e58      	subs	r0, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	440b      	add	r3, r1
 80031b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	6809      	ldr	r1, [r1, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800320e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6911      	ldr	r1, [r2, #16]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	430b      	orrs	r3, r1
 8003222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	000186a0 	.word	0x000186a0
 800327c:	001e847f 	.word	0x001e847f
 8003280:	003d08ff 	.word	0x003d08ff
 8003284:	431bde83 	.word	0x431bde83
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d003      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x38>
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	f040 80c1 	bne.w	8003446 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_I2C_EV_IRQHandler+0x6e>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032e4:	d003      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x62>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_EV_IRQHandler+0x66>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x68>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	f000 8132 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x92>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 fc63 	bl	8004bdc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fd6f 	bl	8003dfa <I2C_Master_SB>
 800331c:	e092      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0xb2>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fde4 	bl	8003f04 <I2C_Master_ADD10>
 800333c:	e082      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xd2>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	0a5b      	lsrs	r3, r3, #9
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fdfd 	bl	8003f56 <I2C_Master_ADDR>
 800335c:	e072      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03b      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	f000 80f3 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	09db      	lsrs	r3, r3, #7
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00f      	beq.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9e9 	bl	8003778 <I2C_MasterTransmit_TXE>
 80033a6:	e04d      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80d6 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80cf 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	2b21      	cmp	r3, #33	; 0x21
 80033c8:	d103      	bne.n	80033d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa70 	bl	80038b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d0:	e0c7      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	f040 80c4 	bne.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fade 	bl	800399c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e0:	e0bf      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f0:	f000 80b7 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb53 	bl	8003ac4 <I2C_MasterReceive_RXNE>
 800341e:	e011      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 809a 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	0a5b      	lsrs	r3, r3, #9
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8093 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fbf2 	bl	8003c26 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003442:	e08e      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003444:	e08d      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e007      	b.n	8003468 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x20e>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	0a5b      	lsrs	r3, r3, #9
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ffab 	bl	80043ee <I2C_Slave_ADDR>
 8003498:	e066      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x22e>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	0a5b      	lsrs	r3, r3, #9
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ffe6 	bl	8004484 <I2C_Slave_STOPF>
 80034b8:	e056      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	2b21      	cmp	r3, #33	; 0x21
 80034be:	d002      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
 80034c2:	2b29      	cmp	r3, #41	; 0x29
 80034c4:	d125      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	09db      	lsrs	r3, r3, #7
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0a9b      	lsrs	r3, r3, #10
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fec3 	bl	8004276 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f0:	e039      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d033      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fef0 	bl	80042f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003510:	e029      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00f      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0a9b      	lsrs	r3, r3, #10
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fefa 	bl	8004330 <I2C_SlaveReceive_RXNE>
 800353c:	e014      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0a5b      	lsrs	r3, r3, #9
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 ff28 	bl	80043ac <I2C_SlaveReceive_BTF>
 800355c:	e004      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003566:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b08a      	sub	sp, #40	; 0x28
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003590:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00e      	beq.n	80035bc <HAL_I2C_ER_IRQHandler+0x4e>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0x78>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80035e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	0a9b      	lsrs	r3, r3, #10
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d03f      	beq.n	8003672 <HAL_I2C_ER_IRQHandler+0x104>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d039      	beq.n	8003672 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035fe:	7efb      	ldrb	r3, [r7, #27]
 8003600:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003618:	7ebb      	ldrb	r3, [r7, #26]
 800361a:	2b20      	cmp	r3, #32
 800361c:	d112      	bne.n	8003644 <HAL_I2C_ER_IRQHandler+0xd6>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_I2C_ER_IRQHandler+0xd6>
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b21      	cmp	r3, #33	; 0x21
 8003628:	d008      	beq.n	800363c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b29      	cmp	r3, #41	; 0x29
 800362e:	d005      	beq.n	800363c <HAL_I2C_ER_IRQHandler+0xce>
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b28      	cmp	r3, #40	; 0x28
 8003634:	d106      	bne.n	8003644 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d103      	bne.n	8003644 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f001 f851 	bl	80046e4 <I2C_Slave_AF>
 8003642:	e016      	b.n	8003672 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800364c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003656:	7efb      	ldrb	r3, [r7, #27]
 8003658:	2b10      	cmp	r3, #16
 800365a:	d002      	beq.n	8003662 <HAL_I2C_ER_IRQHandler+0xf4>
 800365c:	7efb      	ldrb	r3, [r7, #27]
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d107      	bne.n	8003672 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003670:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	0adb      	lsrs	r3, r3, #11
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <HAL_I2C_ER_IRQHandler+0x12e>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f043 0308 	orr.w	r3, r3, #8
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800369a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f001 f888 	bl	80047c4 <I2C_ITError>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
 8003710:	4613      	mov	r3, r2
 8003712:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d150      	bne.n	8003840 <I2C_MasterTransmit_TXE+0xc8>
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b21      	cmp	r3, #33	; 0x21
 80037a2:	d14d      	bne.n	8003840 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d01d      	beq.n	80037e6 <I2C_MasterTransmit_TXE+0x6e>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d01a      	beq.n	80037e6 <I2C_MasterTransmit_TXE+0x6e>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b6:	d016      	beq.n	80037e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2211      	movs	r2, #17
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff6c 	bl	80036bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e4:	e060      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003804:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d107      	bne.n	8003830 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff81 	bl	8003730 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800382e:	e03b      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff3f 	bl	80036bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383e:	e033      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b21      	cmp	r3, #33	; 0x21
 8003844:	d005      	beq.n	8003852 <I2C_MasterTransmit_TXE+0xda>
 8003846:	7bbb      	ldrb	r3, [r7, #14]
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d12d      	bne.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b22      	cmp	r3, #34	; 0x22
 8003850:	d12a      	bne.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800386c:	e01c      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d103      	bne.n	8003882 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f88e 	bl	800399c <I2C_MemoryTransmit_TXE_BTF>
}
 8003880:	e012      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038a6:	e7ff      	b.n	80038a8 <I2C_MasterTransmit_TXE+0x130>
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b21      	cmp	r3, #33	; 0x21
 80038c8:	d164      	bne.n	8003994 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d012      	beq.n	80038fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038f8:	e04c      	b.n	8003994 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d01d      	beq.n	800393c <I2C_MasterTransmit_BTF+0x8c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b20      	cmp	r3, #32
 8003904:	d01a      	beq.n	800393c <I2C_MasterTransmit_BTF+0x8c>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800390c:	d016      	beq.n	800393c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2211      	movs	r2, #17
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fec1 	bl	80036bc <HAL_I2C_MasterTxCpltCallback>
}
 800393a:	e02b      	b.n	8003994 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d107      	bne.n	8003986 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fed6 	bl	8003730 <HAL_I2C_MemTxCpltCallback>
}
 8003984:	e006      	b.n	8003994 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fe94 	bl	80036bc <HAL_I2C_MasterTxCpltCallback>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10b      	bne.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80039d2:	e073      	b.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	b29b      	uxth	r3, r3
 80039da:	121b      	asrs	r3, r3, #8
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ee:	e065      	b.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10b      	bne.n	8003a10 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a0e:	e055      	b.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d151      	bne.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b22      	cmp	r3, #34	; 0x22
 8003a1c:	d10d      	bne.n	8003a3a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a38:	e040      	b.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b21      	cmp	r3, #33	; 0x21
 8003a48:	d112      	bne.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a6e:	e025      	b.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d120      	bne.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b21      	cmp	r3, #33	; 0x21
 8003a7e:	d11d      	bne.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a8e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe3a 	bl	8003730 <HAL_I2C_MemTxCpltCallback>
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b22      	cmp	r3, #34	; 0x22
 8003ad6:	f040 80a2 	bne.w	8003c1e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d921      	bls.n	8003b2c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	f040 8082 	bne.w	8003c1e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b28:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b2a:	e078      	b.n	8003c1e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d074      	beq.n	8003c1e <I2C_MasterReceive_RXNE+0x15a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <I2C_MasterReceive_RXNE+0x7c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d16e      	bne.n	8003c1e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 f819 	bl	8004b78 <I2C_WaitOnSTOPRequestThroughIT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d142      	bne.n	8003bd2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b6a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d10a      	bne.n	8003bbc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fdc4 	bl	8003742 <HAL_I2C_MemRxCpltCallback>
}
 8003bba:	e030      	b.n	8003c1e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2212      	movs	r2, #18
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fd7f 	bl	80036ce <HAL_I2C_MasterRxCpltCallback>
}
 8003bd0:	e025      	b.n	8003c1e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003be0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fd9b 	bl	8003754 <HAL_I2C_ErrorCallback>
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d11b      	bne.n	8003c76 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c74:	e0bd      	b.n	8003df2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d129      	bne.n	8003cd4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00a      	beq.n	8003cac <I2C_MasterReceive_BTF+0x86>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d007      	beq.n	8003cac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd2:	e08e      	b.n	8003df2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d176      	bne.n	8003dcc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d002      	beq.n	8003cea <I2C_MasterReceive_BTF+0xc4>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d108      	bne.n	8003cfc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e019      	b.n	8003d30 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d002      	beq.n	8003d08 <I2C_MasterReceive_BTF+0xe2>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d108      	bne.n	8003d1a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e00a      	b.n	8003d30 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d007      	beq.n	8003d30 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10a      	bne.n	8003db6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fcc7 	bl	8003742 <HAL_I2C_MemRxCpltCallback>
}
 8003db4:	e01d      	b.n	8003df2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2212      	movs	r2, #18
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fc82 	bl	80036ce <HAL_I2C_MasterRxCpltCallback>
}
 8003dca:	e012      	b.n	8003df2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d117      	bne.n	8003e3e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e26:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e28:	e067      	b.n	8003efa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]
}
 8003e3c:	e05d      	b.n	8003efa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e46:	d133      	bne.n	8003eb0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b21      	cmp	r3, #33	; 0x21
 8003e52:	d109      	bne.n	8003e68 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	e008      	b.n	8003e7a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <I2C_Master_SB+0x92>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d032      	beq.n	8003efa <I2C_Master_SB+0x100>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02d      	beq.n	8003efa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eac:	605a      	str	r2, [r3, #4]
}
 8003eae:	e024      	b.n	8003efa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10e      	bne.n	8003ed6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	11db      	asrs	r3, r3, #7
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0306 	and.w	r3, r3, #6
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f063 030f 	orn	r3, r3, #15
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
}
 8003ed4:	e011      	b.n	8003efa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10d      	bne.n	8003efa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	11db      	asrs	r3, r3, #7
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0306 	and.w	r3, r3, #6
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f063 030e 	orn	r3, r3, #14
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <I2C_Master_ADD10+0x26>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <I2C_Master_ADD10+0x48>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4a:	605a      	str	r2, [r3, #4]
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b091      	sub	sp, #68	; 0x44
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	f040 8169 	bne.w	8004254 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <I2C_Master_ADDR+0x54>
 8003f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d10b      	bne.n	8003faa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f92:	2300      	movs	r3, #0
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	e160      	b.n	800426c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <I2C_Master_ADDR+0x98>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fba:	d118      	bne.n	8003fee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	651a      	str	r2, [r3, #80]	; 0x50
 8003fec:	e13e      	b.n	800426c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e115      	b.n	800424c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 808a 	bne.w	8004140 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004032:	d137      	bne.n	80040a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004052:	d113      	bne.n	800407c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	e0e7      	b.n	800424c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e0d3      	b.n	800424c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d02e      	beq.n	8004108 <I2C_Master_ADDR+0x1b2>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d02b      	beq.n	8004108 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	2b12      	cmp	r3, #18
 80040b4:	d102      	bne.n	80040bc <I2C_Master_ADDR+0x166>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d125      	bne.n	8004108 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00e      	beq.n	80040e0 <I2C_Master_ADDR+0x18a>
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d00b      	beq.n	80040e0 <I2C_Master_ADDR+0x18a>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d008      	beq.n	80040e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	e0a1      	b.n	800424c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004116:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e085      	b.n	800424c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d14d      	bne.n	80041e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2b04      	cmp	r3, #4
 800414e:	d016      	beq.n	800417e <I2C_Master_ADDR+0x228>
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	2b02      	cmp	r3, #2
 8004154:	d013      	beq.n	800417e <I2C_Master_ADDR+0x228>
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	2b10      	cmp	r3, #16
 800415a:	d010      	beq.n	800417e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e007      	b.n	800418e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419c:	d117      	bne.n	80041ce <I2C_Master_ADDR+0x278>
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a4:	d00b      	beq.n	80041be <I2C_Master_ADDR+0x268>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d008      	beq.n	80041be <I2C_Master_ADDR+0x268>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d005      	beq.n	80041be <I2C_Master_ADDR+0x268>
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d002      	beq.n	80041be <I2C_Master_ADDR+0x268>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d107      	bne.n	80041ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	e032      	b.n	800424c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d117      	bne.n	8004236 <I2C_Master_ADDR+0x2e0>
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800420c:	d00b      	beq.n	8004226 <I2C_Master_ADDR+0x2d0>
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b01      	cmp	r3, #1
 8004212:	d008      	beq.n	8004226 <I2C_Master_ADDR+0x2d0>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2b08      	cmp	r3, #8
 8004218:	d005      	beq.n	8004226 <I2C_Master_ADDR+0x2d0>
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b10      	cmp	r3, #16
 800421e:	d002      	beq.n	8004226 <I2C_Master_ADDR+0x2d0>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	2b20      	cmp	r3, #32
 8004224:	d107      	bne.n	8004236 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004234:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004252:	e00b      	b.n	800426c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
}
 800426a:	e7ff      	b.n	800426c <I2C_Master_ADDR+0x316>
 800426c:	bf00      	nop
 800426e:	3744      	adds	r7, #68	; 0x44
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02b      	beq.n	80042e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d114      	bne.n	80042e8 <I2C_SlaveTransmit_TXE+0x72>
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b29      	cmp	r3, #41	; 0x29
 80042c2:	d111      	bne.n	80042e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2221      	movs	r2, #33	; 0x21
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2228      	movs	r2, #40	; 0x28
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff f9fc 	bl	80036e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02c      	beq.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d114      	bne.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b2a      	cmp	r3, #42	; 0x2a
 800437e:	d111      	bne.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2222      	movs	r2, #34	; 0x22
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2228      	movs	r2, #40	; 0x28
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff f9a7 	bl	80036f2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004408:	2b28      	cmp	r3, #40	; 0x28
 800440a:	d127      	bne.n	800445c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d103      	bne.n	8004440 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	81bb      	strh	r3, [r7, #12]
 800443e:	e002      	b.n	8004446 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800444e:	89ba      	ldrh	r2, [r7, #12]
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff f955 	bl	8003704 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800445a:	e00e      	b.n	800447a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e0:	d172      	bne.n	80045c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b22      	cmp	r3, #34	; 0x22
 80044e6:	d002      	beq.n	80044ee <I2C_Slave_STOPF+0x6a>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b2a      	cmp	r3, #42	; 0x2a
 80044ec:	d135      	bne.n	800455a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fbc7 	bl	8002cba <HAL_DMA_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d049      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <I2C_Slave_STOPF+0x258>)
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb7a 	bl	8002c38 <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03d      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004558:	e035      	b.n	80045c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fb91 	bl	8002cba <HAL_DMA_GetState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d014      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	4a4e      	ldr	r2, [pc, #312]	; (80046dc <I2C_Slave_STOPF+0x258>)
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fb44 	bl	8002c38 <HAL_DMA_Abort_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c0:	4610      	mov	r0, r2
 80045c2:	4798      	blx	r3
 80045c4:	e000      	b.n	80045c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03e      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d112      	bne.n	8004606 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d112      	bne.n	800463a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8b3 	bl	80047c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800465e:	e039      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d109      	bne.n	800467a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2228      	movs	r2, #40	; 0x28
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff f83c 	bl	80036f2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b28      	cmp	r3, #40	; 0x28
 8004684:	d111      	bne.n	80046aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <I2C_Slave_STOPF+0x25c>)
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f83b 	bl	800371e <HAL_I2C_ListenCpltCallback>
}
 80046a8:	e014      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	2b22      	cmp	r3, #34	; 0x22
 80046b0:	d002      	beq.n	80046b8 <I2C_Slave_STOPF+0x234>
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b22      	cmp	r3, #34	; 0x22
 80046b6:	d10d      	bne.n	80046d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff f80f 	bl	80036f2 <HAL_I2C_SlaveRxCpltCallback>
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08004a29 	.word	0x08004a29
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d002      	beq.n	8004706 <I2C_Slave_AF+0x22>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d129      	bne.n	800475a <I2C_Slave_AF+0x76>
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b28      	cmp	r3, #40	; 0x28
 800470a:	d126      	bne.n	800475a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <I2C_Slave_AF+0xdc>)
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004720:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800472a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe ffe3 	bl	800371e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004758:	e02e      	b.n	80047b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b21      	cmp	r3, #33	; 0x21
 800475e:	d126      	bne.n	80047ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <I2C_Slave_AF+0xdc>)
 8004764:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800478a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004794:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe ff9a 	bl	80036e0 <HAL_I2C_SlaveTxCpltCallback>
}
 80047ac:	e004      	b.n	80047b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b6:	615a      	str	r2, [r3, #20]
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d002      	beq.n	80047e8 <I2C_ITError+0x24>
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d10a      	bne.n	80047fe <I2C_ITError+0x3a>
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b22      	cmp	r3, #34	; 0x22
 80047ec:	d107      	bne.n	80047fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004804:	2b28      	cmp	r3, #40	; 0x28
 8004806:	d107      	bne.n	8004818 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2228      	movs	r2, #40	; 0x28
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004816:	e015      	b.n	8004844 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d00a      	beq.n	800483e <I2C_ITError+0x7a>
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b60      	cmp	r3, #96	; 0x60
 800482c:	d007      	beq.n	800483e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004852:	d162      	bne.n	800491a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004862:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d020      	beq.n	80048b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4a6a      	ldr	r2, [pc, #424]	; (8004a20 <I2C_ITError+0x25c>)
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe f9da 	bl	8002c38 <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8089 	beq.w	800499e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ae:	4610      	mov	r0, r2
 80048b0:	4798      	blx	r3
 80048b2:	e074      	b.n	800499e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	4a59      	ldr	r2, [pc, #356]	; (8004a20 <I2C_ITError+0x25c>)
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe f9b9 	bl	8002c38 <HAL_DMA_Abort_IT>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d068      	beq.n	800499e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d10b      	bne.n	80048f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
 8004918:	e041      	b.n	800499e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b60      	cmp	r3, #96	; 0x60
 8004924:	d125      	bne.n	8004972 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10b      	bne.n	800495a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fe fefb 	bl	8003766 <HAL_I2C_AbortCpltCallback>
 8004970:	e015      	b.n	800499e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d10b      	bne.n	8004998 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fe fedb 	bl	8003754 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d113      	bne.n	8004a18 <I2C_ITError+0x254>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b28      	cmp	r3, #40	; 0x28
 80049f4:	d110      	bne.n	8004a18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <I2C_ITError+0x260>)
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fe fe83 	bl	800371e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	08004a29 	.word	0x08004a29
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a42:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <I2C_DMAAbort+0x148>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	08db      	lsrs	r3, r3, #3
 8004a48:	4a4a      	ldr	r2, [pc, #296]	; (8004b74 <I2C_DMAAbort+0x14c>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a1a      	lsrs	r2, r3, #8
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00da      	lsls	r2, r3, #3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a6e:	e00a      	b.n	8004a86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d0ea      	beq.n	8004a5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	2200      	movs	r2, #0
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	2200      	movs	r2, #0
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d10e      	bne.n	8004b16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	f7fe fe29 	bl	8003766 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b14:	e027      	b.n	8004b66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b1c:	2b28      	cmp	r3, #40	; 0x28
 8004b1e:	d117      	bne.n	8004b50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2228      	movs	r2, #40	; 0x28
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b4e:	e007      	b.n	8004b60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b60:	6978      	ldr	r0, [r7, #20]
 8004b62:	f7fe fdf7 	bl	8003754 <HAL_I2C_ErrorCallback>
}
 8004b66:	bf00      	nop
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000004c 	.word	0x2000004c
 8004b74:	14f8b589 	.word	0x14f8b589

08004b78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	0a1a      	lsrs	r2, r3, #8
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e008      	b.n	8004bc8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc4:	d0e9      	beq.n	8004b9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	2000004c 	.word	0x2000004c
 8004bd8:	14f8b589 	.word	0x14f8b589

08004bdc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bec:	d103      	bne.n	8004bf6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bf4:	e007      	b.n	8004c06 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bfe:	d102      	bne.n	8004c06 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2208      	movs	r2, #8
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e31d      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c22:	4b94      	ldr	r3, [pc, #592]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2c:	4b91      	ldr	r3, [pc, #580]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d07b      	beq.n	8004d3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d006      	beq.n	8004c56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d10f      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d10b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c56:	4b87      	ldr	r3, [pc, #540]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06a      	beq.n	8004d38 <HAL_RCC_OscConfig+0x128>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d166      	bne.n	8004d38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e2f7      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <HAL_RCC_OscConfig+0x74>
 8004c76:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7e      	ldr	r2, [pc, #504]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e02d      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10c      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x96>
 8004c8c:	4b79      	ldr	r3, [pc, #484]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a78      	ldr	r2, [pc, #480]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a75      	ldr	r2, [pc, #468]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0xb8>
 8004cae:	4b71      	ldr	r3, [pc, #452]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a70      	ldr	r2, [pc, #448]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6d      	ldr	r2, [pc, #436]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd0>
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a66      	ldr	r2, [pc, #408]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fd f9d4 	bl	8002094 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd f9d0 	bl	8002094 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e2ad      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d02:	4b5c      	ldr	r3, [pc, #368]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xe0>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd f9c0 	bl	8002094 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fd f9bc 	bl	8002094 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e299      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2a:	4b52      	ldr	r3, [pc, #328]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x108>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d05a      	beq.n	8004dfc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d119      	bne.n	8004d86 <HAL_RCC_OscConfig+0x176>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d58:	4b46      	ldr	r3, [pc, #280]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x160>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e276      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	493d      	ldr	r1, [pc, #244]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d84:	e03a      	b.n	8004dfc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <HAL_RCC_OscConfig+0x268>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fd f97e 	bl	8002094 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9c:	f7fd f97a 	bl	8002094 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e257      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dae:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	492a      	ldr	r1, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
 8004dce:	e015      	b.n	8004dfc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_RCC_OscConfig+0x268>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fd f95d 	bl	8002094 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fd f959 	bl	8002094 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e236      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004df0:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80b8 	beq.w	8004f7a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d170      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e10:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_OscConfig+0x218>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e21a      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d921      	bls.n	8004e7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fc23 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e208      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	4906      	ldr	r1, [pc, #24]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	061b      	lsls	r3, r3, #24
 8004e6c:	4901      	ldr	r1, [pc, #4]	; (8004e74 <HAL_RCC_OscConfig+0x264>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]
 8004e72:	e020      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2a6>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e7c:	4ba4      	ldr	r3, [pc, #656]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	49a1      	ldr	r1, [pc, #644]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e8e:	4ba0      	ldr	r3, [pc, #640]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	061b      	lsls	r3, r3, #24
 8004e9c:	499c      	ldr	r1, [pc, #624]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fbee 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e1d3      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	0b5b      	lsrs	r3, r3, #13
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004ec6:	4a92      	ldr	r2, [pc, #584]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	0912      	lsrs	r2, r2, #4
 8004ecc:	f002 020f 	and.w	r2, r2, #15
 8004ed0:	4990      	ldr	r1, [pc, #576]	; (8005114 <HAL_RCC_OscConfig+0x504>)
 8004ed2:	5c8a      	ldrb	r2, [r1, r2]
 8004ed4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ed6:	4a90      	ldr	r2, [pc, #576]	; (8005118 <HAL_RCC_OscConfig+0x508>)
 8004ed8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004eda:	4b90      	ldr	r3, [pc, #576]	; (800511c <HAL_RCC_OscConfig+0x50c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd f88c 	bl	8001ffc <HAL_InitTick>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d045      	beq.n	8004f7a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	e1b5      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d029      	beq.n	8004f4e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004efa:	4b89      	ldr	r3, [pc, #548]	; (8005120 <HAL_RCC_OscConfig+0x510>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd f8c8 	bl	8002094 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f08:	f7fd f8c4 	bl	8002094 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1a1      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f1a:	4b7d      	ldr	r3, [pc, #500]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f26:	4b7a      	ldr	r3, [pc, #488]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4977      	ldr	r1, [pc, #476]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f38:	4b75      	ldr	r3, [pc, #468]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	4972      	ldr	r1, [pc, #456]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f4e:	4b74      	ldr	r3, [pc, #464]	; (8005120 <HAL_RCC_OscConfig+0x510>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd f89e 	bl	8002094 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f5c:	f7fd f89a 	bl	8002094 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e177      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f6e:	4b68      	ldr	r3, [pc, #416]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d030      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8e:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x514>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f94:	f7fd f87e 	bl	8002094 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7fd f87a 	bl	8002094 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e157      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fae:	4b58      	ldr	r3, [pc, #352]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x38c>
 8004fba:	e015      	b.n	8004fe8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fbc:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCC_OscConfig+0x514>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc2:	f7fd f867 	bl	8002094 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fca:	f7fd f863 	bl	8002094 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e140      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fdc:	4b4c      	ldr	r3, [pc, #304]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b5 	beq.w	8005160 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b45      	ldr	r3, [pc, #276]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	4b42      	ldr	r3, [pc, #264]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	4a41      	ldr	r2, [pc, #260]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6253      	str	r3, [r2, #36]	; 0x24
 8005012:	4b3f      	ldr	r3, [pc, #252]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501e:	2301      	movs	r3, #1
 8005020:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x518>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d118      	bne.n	8005060 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502e:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <HAL_RCC_OscConfig+0x518>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3d      	ldr	r2, [pc, #244]	; (8005128 <HAL_RCC_OscConfig+0x518>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503a:	f7fd f82b 	bl	8002094 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005042:	f7fd f827 	bl	8002094 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b64      	cmp	r3, #100	; 0x64
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e104      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005054:	4b34      	ldr	r3, [pc, #208]	; (8005128 <HAL_RCC_OscConfig+0x518>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d106      	bne.n	8005076 <HAL_RCC_OscConfig+0x466>
 8005068:	4b29      	ldr	r3, [pc, #164]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	4a28      	ldr	r2, [pc, #160]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005072:	6353      	str	r3, [r2, #52]	; 0x34
 8005074:	e02d      	b.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x488>
 800507e:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	4a23      	ldr	r2, [pc, #140]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8005084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005088:	6353      	str	r3, [r2, #52]	; 0x34
 800508a:	4b21      	ldr	r3, [pc, #132]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 8005090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005094:	6353      	str	r3, [r2, #52]	; 0x34
 8005096:	e01c      	b.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d10c      	bne.n	80050ba <HAL_RCC_OscConfig+0x4aa>
 80050a0:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050aa:	6353      	str	r3, [r2, #52]	; 0x34
 80050ac:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b6:	6353      	str	r3, [r2, #52]	; 0x34
 80050b8:	e00b      	b.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	4a14      	ldr	r2, [pc, #80]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c4:	6353      	str	r3, [r2, #52]	; 0x34
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d015      	beq.n	8005106 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050da:	f7fc ffdb 	bl	8002094 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e2:	f7fc ffd7 	bl	8002094 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e0b2      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0ee      	beq.n	80050e2 <HAL_RCC_OscConfig+0x4d2>
 8005104:	e023      	b.n	800514e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005106:	f7fc ffc5 	bl	8002094 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800510c:	e019      	b.n	8005142 <HAL_RCC_OscConfig+0x532>
 800510e:	bf00      	nop
 8005110:	40023800 	.word	0x40023800
 8005114:	08006c6c 	.word	0x08006c6c
 8005118:	2000004c 	.word	0x2000004c
 800511c:	20000050 	.word	0x20000050
 8005120:	42470020 	.word	0x42470020
 8005124:	42470680 	.word	0x42470680
 8005128:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fc ffb2 	bl	8002094 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e08d      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005142:	4b49      	ldr	r3, [pc, #292]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b44      	ldr	r3, [pc, #272]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	4a43      	ldr	r2, [pc, #268]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d079      	beq.n	800525c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d056      	beq.n	800521c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b02      	cmp	r3, #2
 8005174:	d13b      	bne.n	80051ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCC_OscConfig+0x65c>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fc ff8a 	bl	8002094 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005184:	f7fc ff86 	bl	8002094 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e063      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005196:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a2:	4b31      	ldr	r3, [pc, #196]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	4319      	orrs	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	430b      	orrs	r3, r1
 80051ba:	492b      	ldr	r1, [pc, #172]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c0:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_RCC_OscConfig+0x65c>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c6:	f7fc ff65 	bl	8002094 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ce:	f7fc ff61 	bl	8002094 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e03e      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x5be>
 80051ec:	e036      	b.n	800525c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ee:	4b1f      	ldr	r3, [pc, #124]	; (800526c <HAL_RCC_OscConfig+0x65c>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fc ff4e 	bl	8002094 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fc ff4a 	bl	8002094 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e027      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x5ec>
 800521a:	e01f      	b.n	800525c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e01a      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <HAL_RCC_OscConfig+0x658>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	429a      	cmp	r2, r3
 800523a:	d10d      	bne.n	8005258 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	42470060 	.word	0x42470060

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e11a      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005284:	4b8f      	ldr	r3, [pc, #572]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d919      	bls.n	80052c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x34>
 8005298:	4b8a      	ldr	r3, [pc, #552]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a89      	ldr	r2, [pc, #548]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b87      	ldr	r3, [pc, #540]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 0201 	bic.w	r2, r3, #1
 80052ac:	4985      	ldr	r1, [pc, #532]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b4:	4b83      	ldr	r3, [pc, #524]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0f9      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d2:	4b7d      	ldr	r3, [pc, #500]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	497a      	ldr	r1, [pc, #488]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 808e 	beq.w	800540e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d121      	bne.n	800534a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0d7      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005312:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d115      	bne.n	800534a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e0cb      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532a:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e0bf      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800533a:	4b63      	ldr	r3, [pc, #396]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0b7      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	495c      	ldr	r1, [pc, #368]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800535c:	f7fc fe9a 	bl	8002094 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d112      	bne.n	8005390 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536c:	f7fc fe92 	bl	8002094 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e09b      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005382:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b08      	cmp	r3, #8
 800538c:	d1ee      	bne.n	800536c <HAL_RCC_ClockConfig+0xfc>
 800538e:	e03e      	b.n	800540e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d112      	bne.n	80053be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005398:	e00a      	b.n	80053b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539a:	f7fc fe7b 	bl	8002094 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e084      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b0:	4b45      	ldr	r3, [pc, #276]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d1ee      	bne.n	800539a <HAL_RCC_ClockConfig+0x12a>
 80053bc:	e027      	b.n	800540e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d11d      	bne.n	8005402 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053c6:	e00a      	b.n	80053de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c8:	f7fc fe64 	bl	8002094 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e06d      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053de:	4b3a      	ldr	r3, [pc, #232]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d1ee      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x158>
 80053ea:	e010      	b.n	800540e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	f7fc fe52 	bl	8002094 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e05b      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005402:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ee      	bne.n	80053ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800540e:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d219      	bcs.n	8005450 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_ClockConfig+0x1be>
 8005422:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a27      	ldr	r2, [pc, #156]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	4923      	ldr	r1, [pc, #140]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <HAL_RCC_ClockConfig+0x254>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e034      	b.n	80054ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4917      	ldr	r1, [pc, #92]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800546a:	4313      	orrs	r3, r2
 800546c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	490f      	ldr	r1, [pc, #60]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 800548a:	4313      	orrs	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800548e:	f000 f823 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8005492:	4602      	mov	r2, r0
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <HAL_RCC_ClockConfig+0x258>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	490b      	ldr	r1, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x25c>)
 80054a0:	5ccb      	ldrb	r3, [r1, r3]
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80054a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fc fda4 	bl	8001ffc <HAL_InitTick>
 80054b4:	4603      	mov	r3, r0
 80054b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80054b8:	7afb      	ldrb	r3, [r7, #11]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023c00 	.word	0x40023c00
 80054c8:	40023800 	.word	0x40023800
 80054cc:	08006c6c 	.word	0x08006c6c
 80054d0:	2000004c 	.word	0x2000004c
 80054d4:	20000050 	.word	0x20000050

080054d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b5b0      	push	{r4, r5, r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80054de:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d00c      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x30>
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d87c      	bhi.n	80055ec <HAL_RCC_GetSysClockFreq+0x114>
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d002      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x24>
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d003      	beq.n	8005502 <HAL_RCC_GetSysClockFreq+0x2a>
 80054fa:	e077      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054fc:	4b46      	ldr	r3, [pc, #280]	; (8005618 <HAL_RCC_GetSysClockFreq+0x140>)
 80054fe:	613b      	str	r3, [r7, #16]
      break;
 8005500:	e082      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005502:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_GetSysClockFreq+0x144>)
 8005504:	613b      	str	r3, [r7, #16]
      break;
 8005506:	e07f      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	0c9b      	lsrs	r3, r3, #18
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	4a43      	ldr	r2, [pc, #268]	; (8005620 <HAL_RCC_GetSysClockFreq+0x148>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	0d9b      	lsrs	r3, r3, #22
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005522:	4b3c      	ldr	r3, [pc, #240]	; (8005614 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01a      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	4939      	ldr	r1, [pc, #228]	; (800561c <HAL_RCC_GetSysClockFreq+0x144>)
 8005538:	fb01 f003 	mul.w	r0, r1, r3
 800553c:	2100      	movs	r1, #0
 800553e:	fb01 f102 	mul.w	r1, r1, r2
 8005542:	1844      	adds	r4, r0, r1
 8005544:	4935      	ldr	r1, [pc, #212]	; (800561c <HAL_RCC_GetSysClockFreq+0x144>)
 8005546:	fba2 0101 	umull	r0, r1, r2, r1
 800554a:	1863      	adds	r3, r4, r1
 800554c:	4619      	mov	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	461a      	mov	r2, r3
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	f7fa ffd3 	bl	8000500 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4613      	mov	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e040      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	461c      	mov	r4, r3
 8005568:	f04f 0500 	mov.w	r5, #0
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	014b      	lsls	r3, r1, #5
 800557a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800557e:	0142      	lsls	r2, r0, #5
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	1b00      	subs	r0, r0, r4
 8005586:	eb61 0105 	sbc.w	r1, r1, r5
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	018b      	lsls	r3, r1, #6
 8005594:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005598:	0182      	lsls	r2, r0, #6
 800559a:	1a12      	subs	r2, r2, r0
 800559c:	eb63 0301 	sbc.w	r3, r3, r1
 80055a0:	f04f 0000 	mov.w	r0, #0
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	00d9      	lsls	r1, r3, #3
 80055aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055ae:	00d0      	lsls	r0, r2, #3
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	1912      	adds	r2, r2, r4
 80055b6:	eb45 0303 	adc.w	r3, r5, r3
 80055ba:	f04f 0000 	mov.w	r0, #0
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	0299      	lsls	r1, r3, #10
 80055c4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055c8:	0290      	lsls	r0, r2, #10
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	f7fa ff91 	bl	8000500 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4613      	mov	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	613b      	str	r3, [r7, #16]
      break;
 80055ea:	e00d      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetSysClockFreq+0x13c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	0b5b      	lsrs	r3, r3, #13
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	613b      	str	r3, [r7, #16]
      break;
 8005606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005608:	693b      	ldr	r3, [r7, #16]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bdb0      	pop	{r4, r5, r7, pc}
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	00f42400 	.word	0x00f42400
 800561c:	01312d00 	.word	0x01312d00
 8005620:	08006c60 	.word	0x08006c60

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b02      	ldr	r3, [pc, #8]	; (8005634 <HAL_RCC_GetHCLKFreq+0x10>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	2000004c 	.word	0x2000004c

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800563c:	f7ff fff2 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40023800 	.word	0x40023800
 800565c:	08006c7c 	.word	0x08006c7c

08005660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005664:	f7ff ffde 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0adb      	lsrs	r3, r3, #11
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	08006c7c 	.word	0x08006c7c

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005694:	4b29      	ldr	r3, [pc, #164]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d12c      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056a0:	4b26      	ldr	r3, [pc, #152]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e016      	b.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6253      	str	r3, [r2, #36]	; 0x24
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80056ec:	d105      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f4:	d101      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80056f6:	2301      	movs	r3, #1
 80056f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 0201 	bic.w	r2, r3, #1
 8005714:	490b      	ldr	r1, [pc, #44]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d001      	beq.n	800572e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	40007000 	.word	0x40007000
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06e      	b.n	8005838 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d108      	bne.n	8005774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576a:	d009      	beq.n	8005780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
 8005772:	e005      	b.n	8005780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc fac4 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	ea42 0103 	orr.w	r1, r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	0c1a      	lsrs	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f002 0204 	and.w	r2, r2, #4
 8005826:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Transmit+0x22>
 800585e:	2302      	movs	r3, #2
 8005860:	e126      	b.n	8005ab0 <HAL_SPI_Transmit+0x270>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586a:	f7fc fc13 	bl	8002094 <HAL_GetTick>
 800586e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005884:	e10b      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x52>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005896:	e102      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2203      	movs	r2, #3
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058de:	d10f      	bne.n	8005900 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d007      	beq.n	800591e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005926:	d14b      	bne.n	80059c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_SPI_Transmit+0xf6>
 8005930:	8afb      	ldrh	r3, [r7, #22]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d13e      	bne.n	80059b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800595a:	e02b      	b.n	80059b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d112      	bne.n	8005990 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36
 800598e:	e011      	b.n	80059b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005990:	f7fc fb80 	bl	8002094 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d803      	bhi.n	80059a8 <HAL_SPI_Transmit+0x168>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d102      	bne.n	80059ae <HAL_SPI_Transmit+0x16e>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059b2:	e074      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ce      	bne.n	800595c <HAL_SPI_Transmit+0x11c>
 80059be:	e04c      	b.n	8005a5a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Transmit+0x18e>
 80059c8:	8afb      	ldrh	r3, [r7, #22]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d140      	bne.n	8005a50 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059f4:	e02c      	b.n	8005a50 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d113      	bne.n	8005a2c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a2a:	e011      	b.n	8005a50 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2c:	f7fc fb32 	bl	8002094 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d803      	bhi.n	8005a44 <HAL_SPI_Transmit+0x204>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d102      	bne.n	8005a4a <HAL_SPI_Transmit+0x20a>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a4e:	e026      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1cd      	bne.n	80059f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fb58 	bl	8006114 <SPI_EndRxTxTransaction>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e000      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x26>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e18a      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x33c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fc fad5 	bl	8002094 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d00f      	beq.n	8005b28 <HAL_SPI_TransmitReceive+0x70>
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0e:	d107      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x68>
 8005b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d003      	beq.n	8005b28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b26:	e15b      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x82>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x82>
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b40:	e14e      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d003      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2205      	movs	r2, #5
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	887a      	ldrh	r2, [r7, #2]
 8005b66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	887a      	ldrh	r2, [r7, #2]
 8005b7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d007      	beq.n	8005baa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d178      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x10a>
 8005bbc:	8b7b      	ldrh	r3, [r7, #26]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d166      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	881a      	ldrh	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	1c9a      	adds	r2, r3, #2
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	e053      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d11b      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x176>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d016      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x176>
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d113      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d119      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x1b8>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d014      	beq.n	8005c70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	b292      	uxth	r2, r2
 8005c52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c70:	f7fc fa10 	bl	8002094 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d807      	bhi.n	8005c90 <HAL_SPI_TransmitReceive+0x1d8>
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d003      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c8e:	e0a7      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1a6      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x130>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1a1      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x130>
 8005ca4:	e07c      	b.n	8005da0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_TransmitReceive+0x1fc>
 8005cae:	8b7b      	ldrh	r3, [r7, #26]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d16b      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	7812      	ldrb	r2, [r2, #0]
 8005cc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cda:	e057      	b.n	8005d8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d11c      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x26c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d017      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x26c>
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d114      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d119      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x2ae>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d014      	beq.n	8005d66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d62:	2301      	movs	r3, #1
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d66:	f7fc f995 	bl	8002094 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d803      	bhi.n	8005d7e <HAL_SPI_TransmitReceive+0x2c6>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d102      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x2cc>
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d8a:	e029      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1a2      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x224>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d19d      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f9b5 	bl	8006114 <SPI_EndRxTxTransaction>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dbc:	e010      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	e000      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005dde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3730      	adds	r7, #48	; 0x30
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	099b      	lsrs	r3, r3, #6
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
    return;
 8005e3e:	e0be      	b.n	8005fbe <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_SPI_IRQHandler+0x66>
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
    return;
 8005e60:	e0ad      	b.n	8005fbe <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_SPI_IRQHandler+0x80>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	099b      	lsrs	r3, r3, #6
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a1 	beq.w	8005fbe <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 809a 	beq.w	8005fbe <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	099b      	lsrs	r3, r3, #6
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d023      	beq.n	8005ede <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d011      	beq.n	8005ec6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f043 0204 	orr.w	r2, r3, #4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e00b      	b.n	8005ede <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	693b      	ldr	r3, [r7, #16]
        return;
 8005edc:	e06f      	b.n	8005fbe <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f043 0201 	orr.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d04f      	beq.n	8005fbc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <HAL_SPI_IRQHandler+0x14c>
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d034      	beq.n	8005fb2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0203 	bic.w	r2, r2, #3
 8005f56:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <HAL_SPI_IRQHandler+0x1c8>)
 8005f66:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fc fe63 	bl	8002c38 <HAL_DMA_Abort_IT>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	4a0c      	ldr	r2, [pc, #48]	; (8005fc4 <HAL_SPI_IRQHandler+0x1c8>)
 8005f92:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fc fe4d 	bl	8002c38 <HAL_DMA_Abort_IT>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005fb0:	e003      	b.n	8005fba <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f808 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fb8:	e000      	b.n	8005fbc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005fba:	bf00      	nop
    return;
 8005fbc:	bf00      	nop
  }
}
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08005fdb 	.word	0x08005fdb

08005fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff ffe7 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006014:	f7fc f83e 	bl	8002094 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4413      	add	r3, r2
 8006022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006024:	f7fc f836 	bl	8002094 <HAL_GetTick>
 8006028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800602a:	4b39      	ldr	r3, [pc, #228]	; (8006110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	015b      	lsls	r3, r3, #5
 8006030:	0d1b      	lsrs	r3, r3, #20
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	fb02 f303 	mul.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800603a:	e054      	b.n	80060e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d050      	beq.n	80060e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006044:	f7fc f826 	bl	8002094 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	429a      	cmp	r2, r3
 8006052:	d902      	bls.n	800605a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d13d      	bne.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006072:	d111      	bne.n	8006098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607c:	d004      	beq.n	8006088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006086:	d107      	bne.n	8006098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a0:	d10f      	bne.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e017      	b.n	8006106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4013      	ands	r3, r2
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	bf0c      	ite	eq
 80060f6:	2301      	moveq	r3, #1
 80060f8:	2300      	movne	r3, #0
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	429a      	cmp	r2, r3
 8006102:	d19b      	bne.n	800603c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	2000004c 	.word	0x2000004c

08006114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <SPI_EndRxTxTransaction+0x7c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <SPI_EndRxTxTransaction+0x80>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	0d5b      	lsrs	r3, r3, #21
 800612c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006130:	fb02 f303 	mul.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613e:	d112      	bne.n	8006166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff5a 	bl	8006004 <SPI_WaitFlagStateUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d016      	beq.n	8006184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00f      	b.n	8006186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	3b01      	subs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d0f2      	beq.n	8006166 <SPI_EndRxTxTransaction+0x52>
 8006180:	e000      	b.n	8006184 <SPI_EndRxTxTransaction+0x70>
        break;
 8006182:	bf00      	nop
  }

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	2000004c 	.word	0x2000004c
 8006194:	165e9f81 	.word	0x165e9f81

08006198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e03f      	b.n	800622a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb fdfe 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fb49 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	; 0x28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_UART_IRQHandler+0x52>
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa4f 	bl	8006722 <UART_Receive_IT>
      return;
 8006284:	e17b      	b.n	800657e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80b1 	beq.w	80063f0 <HAL_UART_IRQHandler+0x1bc>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <HAL_UART_IRQHandler+0x70>
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80a6 	beq.w	80063f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_UART_IRQHandler+0x90>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	f043 0201 	orr.w	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_UART_IRQHandler+0xb0>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f043 0202 	orr.w	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_UART_IRQHandler+0xd0>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f043 0204 	orr.w	r2, r3, #4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00f      	beq.n	800632e <HAL_UART_IRQHandler+0xfa>
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_UART_IRQHandler+0xee>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f043 0208 	orr.w	r2, r3, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 811e 	beq.w	8006574 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_UART_IRQHandler+0x11e>
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9e8 	bl	8006722 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <HAL_UART_IRQHandler+0x146>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d031      	beq.n	80063de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f92a 	bl	80065d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d123      	bne.n	80063d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d013      	beq.n	80063ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	4a76      	ldr	r2, [pc, #472]	; (8006584 <HAL_UART_IRQHandler+0x350>)
 80063ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fc fc40 	bl	8002c38 <HAL_DMA_Abort_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e00e      	b.n	80063ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f8ec 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	e00a      	b.n	80063ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8e8 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	e006      	b.n	80063ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8e4 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063ea:	e0c3      	b.n	8006574 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	bf00      	nop
    return;
 80063ee:	e0c1      	b.n	8006574 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f040 80a1 	bne.w	800653c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 809b 	beq.w	800653c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8095 	beq.w	800653c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d14e      	bne.n	80064d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006440:	8a3b      	ldrh	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8098 	beq.w	8006578 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800644c:	8a3a      	ldrh	r2, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	f080 8092 	bcs.w	8006578 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8a3a      	ldrh	r2, [r7, #16]
 8006458:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b20      	cmp	r3, #32
 8006462:	d02b      	beq.n	80064bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006472:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006492:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0210 	bic.w	r2, r2, #16
 80064b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc fb81 	bl	8002bbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f876 	bl	80065be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064d2:	e051      	b.n	8006578 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d047      	beq.n	800657c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80064ec:	8a7b      	ldrh	r3, [r7, #18]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d044      	beq.n	800657c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006500:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0210 	bic.w	r2, r2, #16
 800652e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f842 	bl	80065be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800653a:	e01f      	b.n	800657c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_UART_IRQHandler+0x324>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f87f 	bl	8006654 <UART_Transmit_IT>
    return;
 8006556:	e012      	b.n	800657e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <HAL_UART_IRQHandler+0x34a>
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f8c0 	bl	80066f2 <UART_EndTransmit_IT>
    return;
 8006572:	e004      	b.n	800657e <HAL_UART_IRQHandler+0x34a>
    return;
 8006574:	bf00      	nop
 8006576:	e002      	b.n	800657e <HAL_UART_IRQHandler+0x34a>
      return;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <HAL_UART_IRQHandler+0x34a>
      return;
 800657c:	bf00      	nop
  }
}
 800657e:	3728      	adds	r7, #40	; 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	0800662d 	.word	0x0800662d

08006588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr

0800659a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr

080065be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	2b01      	cmp	r3, #1
 8006602:	d107      	bne.n	8006614 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0210 	bic.w	r2, r2, #16
 8006612:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff ffb0 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b21      	cmp	r3, #33	; 0x21
 8006666:	d13e      	bne.n	80066e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d114      	bne.n	800669c <UART_Transmit_IT+0x48>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d110      	bne.n	800669c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800668e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]
 800669a:	e008      	b.n	80066ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6211      	str	r1, [r2, #32]
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4619      	mov	r1, r3
 80066bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10f      	bne.n	80066e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006708:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ff38 	bl	8006588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b22      	cmp	r3, #34	; 0x22
 8006734:	f040 8099 	bne.w	800686a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006740:	d117      	bne.n	8006772 <UART_Receive_IT+0x50>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d113      	bne.n	8006772 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	b29a      	uxth	r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
 8006770:	e026      	b.n	80067c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	d007      	beq.n	8006796 <UART_Receive_IT+0x74>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <UART_Receive_IT+0x82>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e008      	b.n	80067b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4619      	mov	r1, r3
 80067ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d148      	bne.n	8006866 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0220 	bic.w	r2, r2, #32
 80067e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	2b01      	cmp	r3, #1
 8006812:	d123      	bne.n	800685c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0210 	bic.w	r2, r2, #16
 8006828:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b10      	cmp	r3, #16
 8006836:	d10a      	bne.n	800684e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff feb2 	bl	80065be <HAL_UARTEx_RxEventCallback>
 800685a:	e002      	b.n	8006862 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fe9c 	bl	800659a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e002      	b.n	800686c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068b4:	f023 030c 	bic.w	r3, r3, #12
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	430b      	orrs	r3, r1
 80068c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a55      	ldr	r2, [pc, #340]	; (8006a34 <UART_SetConfig+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d103      	bne.n	80068ea <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068e2:	f7fe febd 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fe fea5 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 80068ee:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	d14c      	bne.n	8006994 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009a      	lsls	r2, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	4a49      	ldr	r2, [pc, #292]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	0119      	lsls	r1, r3, #4
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009a      	lsls	r2, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006932:	fba3 0302 	umull	r0, r3, r3, r2
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2064      	movs	r0, #100	; 0x64
 800693a:	fb00 f303 	mul.w	r3, r0, r3
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	3332      	adds	r3, #50	; 0x32
 8006944:	4a3c      	ldr	r2, [pc, #240]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006952:	4419      	add	r1, r3
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009a      	lsls	r2, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	fbb2 f2f3 	udiv	r2, r2, r3
 800696a:	4b33      	ldr	r3, [pc, #204]	; (8006a38 <UART_SetConfig+0x1c4>)
 800696c:	fba3 0302 	umull	r0, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	2064      	movs	r0, #100	; 0x64
 8006974:	fb00 f303 	mul.w	r3, r0, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	3332      	adds	r3, #50	; 0x32
 800697e:	4a2e      	ldr	r2, [pc, #184]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006980:	fba2 2303 	umull	r2, r3, r2, r3
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	f003 0207 	and.w	r2, r3, #7
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	440a      	add	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006992:	e04a      	b.n	8006a2a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009a      	lsls	r2, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <UART_SetConfig+0x1c4>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	0119      	lsls	r1, r3, #4
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009a      	lsls	r2, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <UART_SetConfig+0x1c4>)
 80069cc:	fba3 0302 	umull	r0, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2064      	movs	r0, #100	; 0x64
 80069d4:	fb00 f303 	mul.w	r3, r0, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	3332      	adds	r3, #50	; 0x32
 80069de:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <UART_SetConfig+0x1c4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ea:	4419      	add	r1, r3
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009a      	lsls	r2, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a02:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006a04:	fba3 0302 	umull	r0, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	2064      	movs	r0, #100	; 0x64
 8006a0c:	fb00 f303 	mul.w	r3, r0, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	3332      	adds	r3, #50	; 0x32
 8006a16:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <UART_SetConfig+0x1c4>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	f003 020f 	and.w	r2, r3, #15
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	440a      	add	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
}
 8006a2a:	bf00      	nop
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40013800 	.word	0x40013800
 8006a38:	51eb851f 	.word	0x51eb851f

08006a3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a40:	4904      	ldr	r1, [pc, #16]	; (8006a54 <MX_FATFS_Init+0x18>)
 8006a42:	4805      	ldr	r0, [pc, #20]	; (8006a58 <MX_FATFS_Init+0x1c>)
 8006a44:	f000 f8ac 	bl	8006ba0 <FATFS_LinkDriver>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <MX_FATFS_Init+0x20>)
 8006a4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000234 	.word	0x20000234
 8006a58:	20000058 	.word	0x20000058
 8006a5c:	20000238 	.word	0x20000238

08006a60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fa f8f1 	bl	8000c54 <SD_disk_initialize>
 8006a72:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fa f9c9 	bl	8000e20 <SD_disk_status>
 8006a8e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006aa8:	7bf8      	ldrb	r0, [r7, #15]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	f7fa f9ca 	bl	8000e48 <SD_disk_read>
 8006ab4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006ace:	7bf8      	ldrb	r0, [r7, #15]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	f7fa fa21 	bl	8000f1c <SD_disk_write>
 8006ada:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	603a      	str	r2, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
 8006af0:	460b      	mov	r3, r1
 8006af2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006af4:	79b9      	ldrb	r1, [r7, #6]
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fa fa92 	bl	8001024 <SD_disk_ioctl>
 8006b00:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006b22:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b24:	7a5b      	ldrb	r3, [r3, #9]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d131      	bne.n	8006b90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b2e:	7a5b      	ldrb	r3, [r3, #9]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b36:	2100      	movs	r1, #0
 8006b38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b3c:	7a5b      	ldrb	r3, [r3, #9]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b4a:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b4c:	7a5b      	ldrb	r3, [r3, #9]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b54:	4413      	add	r3, r2
 8006b56:	79fa      	ldrb	r2, [r7, #7]
 8006b58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b5a:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b5c:	7a5b      	ldrb	r3, [r3, #9]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	b2d1      	uxtb	r1, r2
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <FATFS_LinkDriverEx+0x90>)
 8006b66:	7251      	strb	r1, [r2, #9]
 8006b68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3301      	adds	r3, #1
 8006b78:	223a      	movs	r2, #58	; 0x3a
 8006b7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3302      	adds	r3, #2
 8006b80:	222f      	movs	r2, #47	; 0x2f
 8006b82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	3303      	adds	r3, #3
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	200000d4 	.word	0x200000d4

08006ba0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006baa:	2200      	movs	r2, #0
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ffac 	bl	8006b0c <FATFS_LinkDriverEx>
 8006bb4:	4603      	mov	r3, r0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <__libc_init_array>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	4d0c      	ldr	r5, [pc, #48]	; (8006bf8 <__libc_init_array+0x38>)
 8006bc6:	4c0d      	ldr	r4, [pc, #52]	; (8006bfc <__libc_init_array+0x3c>)
 8006bc8:	1b64      	subs	r4, r4, r5
 8006bca:	10a4      	asrs	r4, r4, #2
 8006bcc:	42a6      	cmp	r6, r4
 8006bce:	d109      	bne.n	8006be4 <__libc_init_array+0x24>
 8006bd0:	f000 f822 	bl	8006c18 <_init>
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4d0a      	ldr	r5, [pc, #40]	; (8006c00 <__libc_init_array+0x40>)
 8006bd8:	4c0a      	ldr	r4, [pc, #40]	; (8006c04 <__libc_init_array+0x44>)
 8006bda:	1b64      	subs	r4, r4, r5
 8006bdc:	10a4      	asrs	r4, r4, #2
 8006bde:	42a6      	cmp	r6, r4
 8006be0:	d105      	bne.n	8006bee <__libc_init_array+0x2e>
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be8:	4798      	blx	r3
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7ee      	b.n	8006bcc <__libc_init_array+0xc>
 8006bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf2:	4798      	blx	r3
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	e7f2      	b.n	8006bde <__libc_init_array+0x1e>
 8006bf8:	08006c8c 	.word	0x08006c8c
 8006bfc:	08006c8c 	.word	0x08006c8c
 8006c00:	08006c8c 	.word	0x08006c8c
 8006c04:	08006c90 	.word	0x08006c90

08006c08 <memset>:
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4402      	add	r2, r0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <memset+0xa>
 8006c10:	4770      	bx	lr
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	e7f9      	b.n	8006c0c <memset+0x4>

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
