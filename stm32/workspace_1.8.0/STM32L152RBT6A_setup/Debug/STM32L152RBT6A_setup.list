
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009780  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e00  08009e00  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e08  08009e08  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000453c  2000006c  08009e7c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200045a8  08009e7c  000245a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001729f  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003302  00000000  00000000  00037334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a31  00000000  00000000  0003c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167e8  00000000  00000000  000531f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083555  00000000  00000000  000699d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecf2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  000ecf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	080098a4 	.word	0x080098a4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	080098a4 	.word	0x080098a4

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_frsub>:
 80002e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__addsf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_fsub>:
 80002ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f0 <__addsf3>:
 80002f0:	0042      	lsls	r2, r0, #1
 80002f2:	bf1f      	itttt	ne
 80002f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f8:	ea92 0f03 	teqne	r2, r3
 80002fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000300:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000304:	d06a      	beq.n	80003dc <__addsf3+0xec>
 8000306:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030e:	bfc1      	itttt	gt
 8000310:	18d2      	addgt	r2, r2, r3
 8000312:	4041      	eorgt	r1, r0
 8000314:	4048      	eorgt	r0, r1
 8000316:	4041      	eorgt	r1, r0
 8000318:	bfb8      	it	lt
 800031a:	425b      	neglt	r3, r3
 800031c:	2b19      	cmp	r3, #25
 800031e:	bf88      	it	hi
 8000320:	4770      	bxhi	lr
 8000322:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4240      	negne	r0, r0
 8000332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000336:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800033a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4249      	negne	r1, r1
 8000342:	ea92 0f03 	teq	r2, r3
 8000346:	d03f      	beq.n	80003c8 <__addsf3+0xd8>
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
 800034c:	fa41 fc03 	asr.w	ip, r1, r3
 8000350:	eb10 000c 	adds.w	r0, r0, ip
 8000354:	f1c3 0320 	rsb	r3, r3, #32
 8000358:	fa01 f103 	lsl.w	r1, r1, r3
 800035c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000360:	d502      	bpl.n	8000368 <__addsf3+0x78>
 8000362:	4249      	negs	r1, r1
 8000364:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800036c:	d313      	bcc.n	8000396 <__addsf3+0xa6>
 800036e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000372:	d306      	bcc.n	8000382 <__addsf3+0x92>
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	ea4f 0131 	mov.w	r1, r1, rrx
 800037a:	f102 0201 	add.w	r2, r2, #1
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	d251      	bcs.n	8000426 <__addsf3+0x136>
 8000382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000386:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038a:	bf08      	it	eq
 800038c:	f020 0001 	biceq.w	r0, r0, #1
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	4770      	bx	lr
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	eb40 0000 	adc.w	r0, r0, r0
 800039c:	3a01      	subs	r2, #1
 800039e:	bf28      	it	cs
 80003a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a4:	d2ed      	bcs.n	8000382 <__addsf3+0x92>
 80003a6:	fab0 fc80 	clz	ip, r0
 80003aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ae:	ebb2 020c 	subs.w	r2, r2, ip
 80003b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b6:	bfaa      	itet	ge
 80003b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003bc:	4252      	neglt	r2, r2
 80003be:	4318      	orrge	r0, r3
 80003c0:	bfbc      	itt	lt
 80003c2:	40d0      	lsrlt	r0, r2
 80003c4:	4318      	orrlt	r0, r3
 80003c6:	4770      	bx	lr
 80003c8:	f092 0f00 	teq	r2, #0
 80003cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d0:	bf06      	itte	eq
 80003d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d6:	3201      	addeq	r2, #1
 80003d8:	3b01      	subne	r3, #1
 80003da:	e7b5      	b.n	8000348 <__addsf3+0x58>
 80003dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e4:	bf18      	it	ne
 80003e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ea:	d021      	beq.n	8000430 <__addsf3+0x140>
 80003ec:	ea92 0f03 	teq	r2, r3
 80003f0:	d004      	beq.n	80003fc <__addsf3+0x10c>
 80003f2:	f092 0f00 	teq	r2, #0
 80003f6:	bf08      	it	eq
 80003f8:	4608      	moveq	r0, r1
 80003fa:	4770      	bx	lr
 80003fc:	ea90 0f01 	teq	r0, r1
 8000400:	bf1c      	itt	ne
 8000402:	2000      	movne	r0, #0
 8000404:	4770      	bxne	lr
 8000406:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800040a:	d104      	bne.n	8000416 <__addsf3+0x126>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	bf28      	it	cs
 8000410:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000414:	4770      	bx	lr
 8000416:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800041a:	bf3c      	itt	cc
 800041c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000420:	4770      	bxcc	lr
 8000422:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000426:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800042a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042e:	4770      	bx	lr
 8000430:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000434:	bf16      	itet	ne
 8000436:	4608      	movne	r0, r1
 8000438:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800043c:	4601      	movne	r1, r0
 800043e:	0242      	lsls	r2, r0, #9
 8000440:	bf06      	itte	eq
 8000442:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000446:	ea90 0f01 	teqeq	r0, r1
 800044a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044e:	4770      	bx	lr

08000450 <__aeabi_ui2f>:
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e004      	b.n	8000460 <__aeabi_i2f+0x8>
 8000456:	bf00      	nop

08000458 <__aeabi_i2f>:
 8000458:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800045c:	bf48      	it	mi
 800045e:	4240      	negmi	r0, r0
 8000460:	ea5f 0c00 	movs.w	ip, r0
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800046c:	4601      	mov	r1, r0
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	e01c      	b.n	80004ae <__aeabi_l2f+0x2a>

08000474 <__aeabi_ul2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e00a      	b.n	8000498 <__aeabi_l2f+0x14>
 8000482:	bf00      	nop

08000484 <__aeabi_l2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000490:	d502      	bpl.n	8000498 <__aeabi_l2f+0x14>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	ea5f 0c01 	movs.w	ip, r1
 800049c:	bf02      	ittt	eq
 800049e:	4684      	moveq	ip, r0
 80004a0:	4601      	moveq	r1, r0
 80004a2:	2000      	moveq	r0, #0
 80004a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a8:	bf08      	it	eq
 80004aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004b2:	fabc f28c 	clz	r2, ip
 80004b6:	3a08      	subs	r2, #8
 80004b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004bc:	db10      	blt.n	80004e0 <__aeabi_l2f+0x5c>
 80004be:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	fa20 f202 	lsr.w	r2, r0, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	f020 0001 	biceq.w	r0, r0, #1
 80004de:	4770      	bx	lr
 80004e0:	f102 0220 	add.w	r2, r2, #32
 80004e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e8:	f1c2 0220 	rsb	r2, r2, #32
 80004ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f0:	fa21 f202 	lsr.w	r2, r1, r2
 80004f4:	eb43 0002 	adc.w	r0, r3, r2
 80004f8:	bf08      	it	eq
 80004fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fe:	4770      	bx	lr

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b96e 	b.w	80007f4 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	468e      	mov	lr, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8083 	bne.w	8000648 <__udivmoddi4+0x118>
 8000542:	428a      	cmp	r2, r1
 8000544:	4617      	mov	r7, r2
 8000546:	d947      	bls.n	80005d8 <__udivmoddi4+0xa8>
 8000548:	fab2 f382 	clz	r3, r2
 800054c:	b14b      	cbz	r3, 8000562 <__udivmoddi4+0x32>
 800054e:	f1c3 0120 	rsb	r1, r3, #32
 8000552:	fa05 fe03 	lsl.w	lr, r5, r3
 8000556:	fa20 f101 	lsr.w	r1, r0, r1
 800055a:	409f      	lsls	r7, r3
 800055c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000560:	409c      	lsls	r4, r3
 8000562:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000566:	fbbe fcf8 	udiv	ip, lr, r8
 800056a:	fa1f f987 	uxth.w	r9, r7
 800056e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000572:	fb0c f009 	mul.w	r0, ip, r9
 8000576:	0c21      	lsrs	r1, r4, #16
 8000578:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800057c:	4290      	cmp	r0, r2
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x66>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000586:	f080 8118 	bcs.w	80007ba <__udivmoddi4+0x28a>
 800058a:	4290      	cmp	r0, r2
 800058c:	f240 8115 	bls.w	80007ba <__udivmoddi4+0x28a>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	443a      	add	r2, r7
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f8 	udiv	r0, r2, r8
 800059c:	fb08 2210 	mls	r2, r8, r0, r2
 80005a0:	fb00 f109 	mul.w	r1, r0, r9
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	d909      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	f080 8103 	bcs.w	80007be <__udivmoddi4+0x28e>
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	f240 8100 	bls.w	80007be <__udivmoddi4+0x28e>
 80005be:	3802      	subs	r0, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	1a64      	subs	r4, r4, r1
 80005c4:	2100      	movs	r1, #0
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	b11e      	cbz	r6, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	2200      	movs	r2, #0
 80005ce:	40dc      	lsrs	r4, r3
 80005d0:	e9c6 4200 	strd	r4, r2, [r6]
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xac>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f382 	clz	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d14f      	bne.n	8000684 <__udivmoddi4+0x154>
 80005e4:	1a8d      	subs	r5, r1, r2
 80005e6:	2101      	movs	r1, #1
 80005e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005ec:	fa1f f882 	uxth.w	r8, r2
 80005f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80005f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80005f8:	fb08 f00c 	mul.w	r0, r8, ip
 80005fc:	0c22      	lsrs	r2, r4, #16
 80005fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000602:	42a8      	cmp	r0, r5
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0xe6>
 8000606:	197d      	adds	r5, r7, r5
 8000608:	f10c 32ff 	add.w	r2, ip, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0xe4>
 800060e:	42a8      	cmp	r0, r5
 8000610:	f200 80e9 	bhi.w	80007e6 <__udivmoddi4+0x2b6>
 8000614:	4694      	mov	ip, r2
 8000616:	1a2d      	subs	r5, r5, r0
 8000618:	fbb5 f0fe 	udiv	r0, r5, lr
 800061c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000620:	fb08 f800 	mul.w	r8, r8, r0
 8000624:	b2a4      	uxth	r4, r4
 8000626:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800062a:	45a0      	cmp	r8, r4
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x10e>
 800062e:	193c      	adds	r4, r7, r4
 8000630:	f100 32ff 	add.w	r2, r0, #4294967295
 8000634:	d202      	bcs.n	800063c <__udivmoddi4+0x10c>
 8000636:	45a0      	cmp	r8, r4
 8000638:	f200 80d9 	bhi.w	80007ee <__udivmoddi4+0x2be>
 800063c:	4610      	mov	r0, r2
 800063e:	eba4 0408 	sub.w	r4, r4, r8
 8000642:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000646:	e7c0      	b.n	80005ca <__udivmoddi4+0x9a>
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x12e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	f000 80b1 	beq.w	80007b4 <__udivmoddi4+0x284>
 8000652:	2100      	movs	r1, #0
 8000654:	e9c6 0500 	strd	r0, r5, [r6]
 8000658:	4608      	mov	r0, r1
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	fab3 f183 	clz	r1, r3
 8000662:	2900      	cmp	r1, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0x1ce>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d302      	bcc.n	8000670 <__udivmoddi4+0x140>
 800066a:	4282      	cmp	r2, r0
 800066c:	f200 80b9 	bhi.w	80007e2 <__udivmoddi4+0x2b2>
 8000670:	1a84      	subs	r4, r0, r2
 8000672:	eb65 0303 	sbc.w	r3, r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	469e      	mov	lr, r3
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0aa      	beq.n	80005d4 <__udivmoddi4+0xa4>
 800067e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000682:	e7a7      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000684:	409f      	lsls	r7, r3
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	40d1      	lsrs	r1, r2
 800068c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000690:	fbb1 f0fe 	udiv	r0, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1110 	mls	r1, lr, r0, r1
 800069c:	fa24 f202 	lsr.w	r2, r4, r2
 80006a0:	409d      	lsls	r5, r3
 80006a2:	fb00 fc08 	mul.w	ip, r0, r8
 80006a6:	432a      	orrs	r2, r5
 80006a8:	0c15      	lsrs	r5, r2, #16
 80006aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	fa04 f403 	lsl.w	r4, r4, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x19a>
 80006b6:	197d      	adds	r5, r7, r5
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	f080 808f 	bcs.w	80007de <__udivmoddi4+0x2ae>
 80006c0:	45ac      	cmp	ip, r5
 80006c2:	f240 808c 	bls.w	80007de <__udivmoddi4+0x2ae>
 80006c6:	3802      	subs	r0, #2
 80006c8:	443d      	add	r5, r7
 80006ca:	eba5 050c 	sub.w	r5, r5, ip
 80006ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80006d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80006d6:	fb01 f908 	mul.w	r9, r1, r8
 80006da:	b295      	uxth	r5, r2
 80006dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006e0:	45a9      	cmp	r9, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x1c4>
 80006e4:	197d      	adds	r5, r7, r5
 80006e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80006ea:	d274      	bcs.n	80007d6 <__udivmoddi4+0x2a6>
 80006ec:	45a9      	cmp	r9, r5
 80006ee:	d972      	bls.n	80007d6 <__udivmoddi4+0x2a6>
 80006f0:	3902      	subs	r1, #2
 80006f2:	443d      	add	r5, r7
 80006f4:	eba5 0509 	sub.w	r5, r5, r9
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e778      	b.n	80005f0 <__udivmoddi4+0xc0>
 80006fe:	f1c1 0720 	rsb	r7, r1, #32
 8000702:	408b      	lsls	r3, r1
 8000704:	fa22 fc07 	lsr.w	ip, r2, r7
 8000708:	ea4c 0c03 	orr.w	ip, ip, r3
 800070c:	fa25 f407 	lsr.w	r4, r5, r7
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fbb4 f9fe 	udiv	r9, r4, lr
 8000718:	fa1f f88c 	uxth.w	r8, ip
 800071c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000720:	fa20 f307 	lsr.w	r3, r0, r7
 8000724:	fb09 fa08 	mul.w	sl, r9, r8
 8000728:	408d      	lsls	r5, r1
 800072a:	431d      	orrs	r5, r3
 800072c:	0c2b      	lsrs	r3, r5, #16
 800072e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000732:	45a2      	cmp	sl, r4
 8000734:	fa02 f201 	lsl.w	r2, r2, r1
 8000738:	fa00 f301 	lsl.w	r3, r0, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0x222>
 800073e:	eb1c 0404 	adds.w	r4, ip, r4
 8000742:	f109 30ff 	add.w	r0, r9, #4294967295
 8000746:	d248      	bcs.n	80007da <__udivmoddi4+0x2aa>
 8000748:	45a2      	cmp	sl, r4
 800074a:	d946      	bls.n	80007da <__udivmoddi4+0x2aa>
 800074c:	f1a9 0902 	sub.w	r9, r9, #2
 8000750:	4464      	add	r4, ip
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	fbb4 f0fe 	udiv	r0, r4, lr
 800075a:	fb0e 4410 	mls	r4, lr, r0, r4
 800075e:	fb00 fa08 	mul.w	sl, r0, r8
 8000762:	b2ad      	uxth	r5, r5
 8000764:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000768:	45a2      	cmp	sl, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x24e>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 35ff 	add.w	r5, r0, #4294967295
 8000774:	d22d      	bcs.n	80007d2 <__udivmoddi4+0x2a2>
 8000776:	45a2      	cmp	sl, r4
 8000778:	d92b      	bls.n	80007d2 <__udivmoddi4+0x2a2>
 800077a:	3802      	subs	r0, #2
 800077c:	4464      	add	r4, ip
 800077e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000782:	fba0 8902 	umull	r8, r9, r0, r2
 8000786:	eba4 040a 	sub.w	r4, r4, sl
 800078a:	454c      	cmp	r4, r9
 800078c:	46c6      	mov	lr, r8
 800078e:	464d      	mov	r5, r9
 8000790:	d319      	bcc.n	80007c6 <__udivmoddi4+0x296>
 8000792:	d016      	beq.n	80007c2 <__udivmoddi4+0x292>
 8000794:	b15e      	cbz	r6, 80007ae <__udivmoddi4+0x27e>
 8000796:	ebb3 020e 	subs.w	r2, r3, lr
 800079a:	eb64 0405 	sbc.w	r4, r4, r5
 800079e:	fa04 f707 	lsl.w	r7, r4, r7
 80007a2:	fa22 f301 	lsr.w	r3, r2, r1
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	e9c6 7400 	strd	r7, r4, [r6]
 80007ae:	2100      	movs	r1, #0
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	4631      	mov	r1, r6
 80007b6:	4630      	mov	r0, r6
 80007b8:	e70c      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007ba:	468c      	mov	ip, r1
 80007bc:	e6eb      	b.n	8000596 <__udivmoddi4+0x66>
 80007be:	4610      	mov	r0, r2
 80007c0:	e6ff      	b.n	80005c2 <__udivmoddi4+0x92>
 80007c2:	4543      	cmp	r3, r8
 80007c4:	d2e6      	bcs.n	8000794 <__udivmoddi4+0x264>
 80007c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80007ca:	eb69 050c 	sbc.w	r5, r9, ip
 80007ce:	3801      	subs	r0, #1
 80007d0:	e7e0      	b.n	8000794 <__udivmoddi4+0x264>
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7d3      	b.n	800077e <__udivmoddi4+0x24e>
 80007d6:	4611      	mov	r1, r2
 80007d8:	e78c      	b.n	80006f4 <__udivmoddi4+0x1c4>
 80007da:	4681      	mov	r9, r0
 80007dc:	e7b9      	b.n	8000752 <__udivmoddi4+0x222>
 80007de:	4608      	mov	r0, r1
 80007e0:	e773      	b.n	80006ca <__udivmoddi4+0x19a>
 80007e2:	4608      	mov	r0, r1
 80007e4:	e749      	b.n	800067a <__udivmoddi4+0x14a>
 80007e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80007ea:	443d      	add	r5, r7
 80007ec:	e713      	b.n	8000616 <__udivmoddi4+0xe6>
 80007ee:	3802      	subs	r0, #2
 80007f0:	443c      	add	r4, r7
 80007f2:	e724      	b.n	800063e <__udivmoddi4+0x10e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	3301      	adds	r3, #1
 800080a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800080e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d007      	beq.n	800082a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	79f9      	ldrb	r1, [r7, #7]
 8000822:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	2b00      	cmp	r3, #0
 8000854:	d013      	beq.n	800087e <Uart_isr+0x4a>
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00e      	beq.n	800087e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <Uart_isr+0xac>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffbe 	bl	80007f8 <store_char>
        return;
 800087c:	e02c      	b.n	80008d8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	2b00      	cmp	r3, #0
 8000886:	d027      	beq.n	80008d8 <Uart_isr+0xa4>
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <Uart_isr+0xb0>)
 8000894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <Uart_isr+0xb0>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	429a      	cmp	r2, r3
 800089c:	d108      	bne.n	80008b0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80008ae:	e012      	b.n	80008d6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <Uart_isr+0xb0>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <Uart_isr+0xb0>)
 80008b6:	5cd3      	ldrb	r3, [r2, r3]
 80008b8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <Uart_isr+0xb0>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	3301      	adds	r3, #1
 80008c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <Uart_isr+0xb0>)
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	7bba      	ldrb	r2, [r7, #14]
 80008d4:	605a      	str	r2, [r3, #4]
    	return;
 80008d6:	bf00      	nop
    }
}
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000350 	.word	0x20000350
 80008e4:	20000088 	.word	0x20000088

080008e8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <SELECT+0x18>)
 80008f2:	f002 fb35 	bl	8002f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f001 fbd8 	bl	80020ac <HAL_Delay>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020400 	.word	0x40020400

08000904 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <DESELECT+0x18>)
 800090e:	f002 fb27 	bl	8002f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f001 fbca 	bl	80020ac <HAL_Delay>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020400 	.word	0x40020400

08000920 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800092a:	bf00      	nop
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SPI_TxByte+0x30>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b02      	cmp	r3, #2
 8000938:	d1f8      	bne.n	800092c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800093a:	1df9      	adds	r1, r7, #7
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	2201      	movs	r2, #1
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <SPI_TxByte+0x30>)
 8000942:	f004 ff43 	bl	80057cc <HAL_SPI_Transmit>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000035c 	.word	0x2000035c

08000954 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000960:	bf00      	nop
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SPI_TxBuffer+0x30>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	2b02      	cmp	r3, #2
 800096e:	d1f8      	bne.n	8000962 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000970:	887a      	ldrh	r2, [r7, #2]
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <SPI_TxBuffer+0x30>)
 8000978:	f004 ff28 	bl	80057cc <HAL_SPI_Transmit>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000035c 	.word	0x2000035c

08000988 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000992:	bf00      	nop
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <SPI_RxByte+0x34>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d1f8      	bne.n	8000994 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009a2:	1dba      	adds	r2, r7, #6
 80009a4:	1df9      	adds	r1, r7, #7
 80009a6:	2364      	movs	r3, #100	; 0x64
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <SPI_RxByte+0x34>)
 80009ae:	f005 f849 	bl	8005a44 <HAL_SPI_TransmitReceive>

	return data;
 80009b2:	79bb      	ldrb	r3, [r7, #6]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000035c 	.word	0x2000035c

080009c0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009c8:	f7ff ffde 	bl	8000988 <SPI_RxByte>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	701a      	strb	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <SD_ReadyWait+0x30>)
 80009e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009e8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80009ea:	f7ff ffcd 	bl	8000988 <SPI_RxByte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2bff      	cmp	r3, #255	; 0xff
 80009f6:	d003      	beq.n	8000a00 <SD_ReadyWait+0x24>
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SD_ReadyWait+0x30>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f4      	bne.n	80009ea <SD_ReadyWait+0xe>

	return res;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000354 	.word	0x20000354

08000a10 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a16:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a1a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a1c:	f7ff ff72 	bl	8000904 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e005      	b.n	8000a32 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	f7ff ff7a 	bl	8000920 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	ddf6      	ble.n	8000a26 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a38:	f7ff ff56 	bl	80008e8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a50:	2395      	movs	r3, #149	; 0x95
 8000a52:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a54:	463b      	mov	r3, r7
 8000a56:	2106      	movs	r1, #6
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff7b 	bl	8000954 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a5e:	e002      	b.n	8000a66 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a66:	f7ff ff8f 	bl	8000988 <SPI_RxByte>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d002      	beq.n	8000a76 <SD_PowerOn+0x66>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f4      	bne.n	8000a60 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a76:	f7ff ff45 	bl	8000904 <DESELECT>
	SPI_TxByte(0XFF);
 8000a7a:	20ff      	movs	r0, #255	; 0xff
 8000a7c:	f7ff ff50 	bl	8000920 <SPI_TxByte>

	PowerFlag = 1;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <SD_PowerOn+0x80>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000d1 	.word	0x200000d1

08000a94 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <SD_PowerOff+0x14>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000d1 	.word	0x200000d1

08000aac <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <SD_CheckPower+0x10>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	200000d1 	.word	0x200000d1

08000ac0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <SD_RxDataBlock+0x58>)
 8000acc:	22c8      	movs	r2, #200	; 0xc8
 8000ace:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ad0:	f7ff ff5a 	bl	8000988 <SPI_RxByte>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d103      	bne.n	8000ae6 <SD_RxDataBlock+0x26>
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <SD_RxDataBlock+0x58>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f4      	bne.n	8000ad0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8000aea:	d001      	beq.n	8000af0 <SD_RxDataBlock+0x30>
 8000aec:	2300      	movs	r3, #0
 8000aee:	e00f      	b.n	8000b10 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff62 	bl	80009c0 <SPI_RxBytePtr>
	} while(len--);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	603a      	str	r2, [r7, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f4      	bne.n	8000af0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b06:	f7ff ff3f 	bl	8000988 <SPI_RxByte>
	SPI_RxByte();
 8000b0a:	f7ff ff3d 	bl	8000988 <SPI_RxByte>

	return TRUE;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000356 	.word	0x20000356

08000b1c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b2c:	f7ff ff56 	bl	80009dc <SD_ReadyWait>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d001      	beq.n	8000b3a <SD_TxDataBlock+0x1e>
 8000b36:	2300      	movs	r3, #0
 8000b38:	e02f      	b.n	8000b9a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff feef 	bl	8000920 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	2bfd      	cmp	r3, #253	; 0xfd
 8000b46:	d020      	beq.n	8000b8a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff01 	bl	8000954 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b52:	f7ff ff19 	bl	8000988 <SPI_RxByte>
		SPI_RxByte();
 8000b56:	f7ff ff17 	bl	8000988 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b5a:	e00b      	b.n	8000b74 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b5c:	f7ff ff14 	bl	8000988 <SPI_RxByte>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	f003 031f 	and.w	r3, r3, #31
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d006      	beq.n	8000b7c <SD_TxDataBlock+0x60>
			i++;
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	3301      	adds	r3, #1
 8000b72:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
 8000b76:	2b40      	cmp	r3, #64	; 0x40
 8000b78:	d9f0      	bls.n	8000b5c <SD_TxDataBlock+0x40>
 8000b7a:	e000      	b.n	8000b7e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b7c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b7e:	bf00      	nop
 8000b80:	f7ff ff02 	bl	8000988 <SPI_RxByte>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0fa      	beq.n	8000b80 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d101      	bne.n	8000b98 <SD_TxDataBlock+0x7c>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	6039      	str	r1, [r7, #0]
 8000bac:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bae:	f7ff ff15 	bl	80009dc <SD_ReadyWait>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d001      	beq.n	8000bbc <SD_SendCmd+0x1a>
 8000bb8:	23ff      	movs	r3, #255	; 0xff
 8000bba:	e042      	b.n	8000c42 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff feae 	bl	8000920 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	0e1b      	lsrs	r3, r3, #24
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fea8 	bl	8000920 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	0c1b      	lsrs	r3, r3, #16
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fea2 	bl	8000920 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fe9c 	bl	8000920 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe97 	bl	8000920 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b40      	cmp	r3, #64	; 0x40
 8000bf6:	d102      	bne.n	8000bfe <SD_SendCmd+0x5c>
 8000bf8:	2395      	movs	r3, #149	; 0x95
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e007      	b.n	8000c0e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b48      	cmp	r3, #72	; 0x48
 8000c02:	d102      	bne.n	8000c0a <SD_SendCmd+0x68>
 8000c04:	2387      	movs	r3, #135	; 0x87
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <SD_SendCmd+0x6c>
	else crc = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe85 	bl	8000920 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b4c      	cmp	r3, #76	; 0x4c
 8000c1a:	d101      	bne.n	8000c20 <SD_SendCmd+0x7e>
 8000c1c:	f7ff feb4 	bl	8000988 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c20:	230a      	movs	r3, #10
 8000c22:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c24:	f7ff feb0 	bl	8000988 <SPI_RxByte>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da05      	bge.n	8000c40 <SD_SendCmd+0x9e>
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	73bb      	strb	r3, [r7, #14]
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f1      	bne.n	8000c24 <SD_SendCmd+0x82>

	return res;
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SD_disk_initialize+0x14>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e0d1      	b.n	8000e04 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c60:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <SD_disk_initialize+0x1c0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <SD_disk_initialize+0x2a>
 8000c6e:	4b67      	ldr	r3, [pc, #412]	; (8000e0c <SD_disk_initialize+0x1c0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	e0c6      	b.n	8000e04 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c76:	f7ff fecb 	bl	8000a10 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c7a:	f7ff fe35 	bl	80008e8 <SELECT>

	/* check disk type */
	type = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c82:	2100      	movs	r1, #0
 8000c84:	2040      	movs	r0, #64	; 0x40
 8000c86:	f7ff ff8c 	bl	8000ba2 <SD_SendCmd>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	f040 80a1 	bne.w	8000dd4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c92:	4b5f      	ldr	r3, [pc, #380]	; (8000e10 <SD_disk_initialize+0x1c4>)
 8000c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c98:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c9a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c9e:	2048      	movs	r0, #72	; 0x48
 8000ca0:	f7ff ff7f 	bl	8000ba2 <SD_SendCmd>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d155      	bne.n	8000d56 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e00c      	b.n	8000cca <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cb0:	7bfc      	ldrb	r4, [r7, #15]
 8000cb2:	f7ff fe69 	bl	8000988 <SPI_RxByte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4423      	add	r3, r4
 8000cc0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9ef      	bls.n	8000cb0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000cd0:	7abb      	ldrb	r3, [r7, #10]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d17e      	bne.n	8000dd4 <SD_disk_initialize+0x188>
 8000cd6:	7afb      	ldrb	r3, [r7, #11]
 8000cd8:	2baa      	cmp	r3, #170	; 0xaa
 8000cda:	d17b      	bne.n	8000dd4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2077      	movs	r0, #119	; 0x77
 8000ce0:	f7ff ff5f 	bl	8000ba2 <SD_SendCmd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d807      	bhi.n	8000cfa <SD_disk_initialize+0xae>
 8000cea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000cee:	2069      	movs	r0, #105	; 0x69
 8000cf0:	f7ff ff57 	bl	8000ba2 <SD_SendCmd>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000cfa:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <SD_disk_initialize+0x1c4>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ec      	bne.n	8000cdc <SD_disk_initialize+0x90>
 8000d02:	e000      	b.n	8000d06 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d04:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d06:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <SD_disk_initialize+0x1c4>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d062      	beq.n	8000dd4 <SD_disk_initialize+0x188>
 8000d0e:	2100      	movs	r1, #0
 8000d10:	207a      	movs	r0, #122	; 0x7a
 8000d12:	f7ff ff46 	bl	8000ba2 <SD_SendCmd>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d15b      	bne.n	8000dd4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e00c      	b.n	8000d3c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d22:	7bfc      	ldrb	r4, [r7, #15]
 8000d24:	f7ff fe30 	bl	8000988 <SPI_RxByte>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4423      	add	r3, r4
 8000d32:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d9ef      	bls.n	8000d22 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d42:	7a3b      	ldrb	r3, [r7, #8]
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_disk_initialize+0x104>
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	e000      	b.n	8000d52 <SD_disk_initialize+0x106>
 8000d50:	2304      	movs	r3, #4
 8000d52:	73bb      	strb	r3, [r7, #14]
 8000d54:	e03e      	b.n	8000dd4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d56:	2100      	movs	r1, #0
 8000d58:	2077      	movs	r0, #119	; 0x77
 8000d5a:	f7ff ff22 	bl	8000ba2 <SD_SendCmd>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d808      	bhi.n	8000d76 <SD_disk_initialize+0x12a>
 8000d64:	2100      	movs	r1, #0
 8000d66:	2069      	movs	r0, #105	; 0x69
 8000d68:	f7ff ff1b 	bl	8000ba2 <SD_SendCmd>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d801      	bhi.n	8000d76 <SD_disk_initialize+0x12a>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e000      	b.n	8000d78 <SD_disk_initialize+0x12c>
 8000d76:	2301      	movs	r3, #1
 8000d78:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d10e      	bne.n	8000d9e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d80:	2100      	movs	r1, #0
 8000d82:	2077      	movs	r0, #119	; 0x77
 8000d84:	f7ff ff0d 	bl	8000ba2 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d80e      	bhi.n	8000dac <SD_disk_initialize+0x160>
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2069      	movs	r0, #105	; 0x69
 8000d92:	f7ff ff06 	bl	8000ba2 <SD_SendCmd>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d107      	bne.n	8000dac <SD_disk_initialize+0x160>
 8000d9c:	e00c      	b.n	8000db8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2041      	movs	r0, #65	; 0x41
 8000da2:	f7ff fefe 	bl	8000ba2 <SD_SendCmd>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <SD_disk_initialize+0x1c4>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1e2      	bne.n	8000d7a <SD_disk_initialize+0x12e>
 8000db4:	e000      	b.n	8000db8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000db6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <SD_disk_initialize+0x1c4>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <SD_disk_initialize+0x184>
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	2050      	movs	r0, #80	; 0x50
 8000dc6:	f7ff feec 	bl	8000ba2 <SD_SendCmd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SD_disk_initialize+0x188>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <SD_disk_initialize+0x1c8>)
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000dda:	f7ff fd93 	bl	8000904 <DESELECT>
	SPI_RxByte();
 8000dde:	f7ff fdd3 	bl	8000988 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d008      	beq.n	8000dfa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SD_disk_initialize+0x1c0>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SD_disk_initialize+0x1c0>)
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e001      	b.n	8000dfe <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000dfa:	f7ff fe4b 	bl	8000a94 <SD_PowerOff>
	}

	return Stat;
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <SD_disk_initialize+0x1c0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000356 	.word	0x20000356
 8000e14:	200000d0 	.word	0x200000d0

08000e18 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SD_disk_status+0x14>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e002      	b.n	8000e32 <SD_disk_status+0x1a>
	return Stat;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <SD_disk_status+0x24>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000000 	.word	0x20000000

08000e40 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <SD_disk_read+0x1c>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <SD_disk_read+0x20>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e051      	b.n	8000f04 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <SD_disk_read+0xcc>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SD_disk_read+0x32>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e048      	b.n	8000f04 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SD_disk_read+0xd0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <SD_disk_read+0x44>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e84:	f7ff fd30 	bl	80008e8 <SELECT>

	if (count == 1)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d111      	bne.n	8000eb2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2051      	movs	r0, #81	; 0x51
 8000e92:	f7ff fe86 	bl	8000ba2 <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d129      	bne.n	8000ef0 <SD_disk_read+0xb0>
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	68b8      	ldr	r0, [r7, #8]
 8000ea2:	f7ff fe0d 	bl	8000ac0 <SD_RxDataBlock>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d021      	beq.n	8000ef0 <SD_disk_read+0xb0>
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	e01e      	b.n	8000ef0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2052      	movs	r0, #82	; 0x52
 8000eb6:	f7ff fe74 	bl	8000ba2 <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d117      	bne.n	8000ef0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f7ff fdfb 	bl	8000ac0 <SD_RxDataBlock>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00a      	beq.n	8000ee6 <SD_disk_read+0xa6>
				buff += 512;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ed6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1ed      	bne.n	8000ec0 <SD_disk_read+0x80>
 8000ee4:	e000      	b.n	8000ee8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ee6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	204c      	movs	r0, #76	; 0x4c
 8000eec:	f7ff fe59 	bl	8000ba2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ef0:	f7ff fd08 	bl	8000904 <DESELECT>
	SPI_RxByte();
 8000ef4:	f7ff fd48 	bl	8000988 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	200000d0 	.word	0x200000d0

08000f14 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <SD_disk_write+0x1c>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <SD_disk_write+0x20>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e06b      	b.n	800100c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f34:	4b37      	ldr	r3, [pc, #220]	; (8001014 <SD_disk_write+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SD_disk_write+0x32>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e062      	b.n	800100c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <SD_disk_write+0x100>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SD_disk_write+0x44>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e059      	b.n	800100c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <SD_disk_write+0x104>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <SD_disk_write+0x56>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f6a:	f7ff fcbd 	bl	80008e8 <SELECT>

	if (count == 1)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d110      	bne.n	8000f96 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	2058      	movs	r0, #88	; 0x58
 8000f78:	f7ff fe13 	bl	8000ba2 <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d13a      	bne.n	8000ff8 <SD_disk_write+0xe4>
 8000f82:	21fe      	movs	r1, #254	; 0xfe
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f7ff fdc9 	bl	8000b1c <SD_TxDataBlock>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d033      	beq.n	8000ff8 <SD_disk_write+0xe4>
			count = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	e030      	b.n	8000ff8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <SD_disk_write+0x104>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2077      	movs	r0, #119	; 0x77
 8000fa6:	f7ff fdfc 	bl	8000ba2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	2057      	movs	r0, #87	; 0x57
 8000fae:	f7ff fdf8 	bl	8000ba2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2059      	movs	r0, #89	; 0x59
 8000fb6:	f7ff fdf4 	bl	8000ba2 <SD_SendCmd>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fc0:	21fc      	movs	r1, #252	; 0xfc
 8000fc2:	68b8      	ldr	r0, [r7, #8]
 8000fc4:	f7ff fdaa 	bl	8000b1c <SD_TxDataBlock>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00a      	beq.n	8000fe4 <SD_disk_write+0xd0>
				buff += 512;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fd4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1ee      	bne.n	8000fc0 <SD_disk_write+0xac>
 8000fe2:	e000      	b.n	8000fe6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fe4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000fe6:	21fd      	movs	r1, #253	; 0xfd
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fd97 	bl	8000b1c <SD_TxDataBlock>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ff8:	f7ff fc84 	bl	8000904 <DESELECT>
	SPI_RxByte();
 8000ffc:	f7ff fcc4 	bl	8000988 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	200000d0 	.word	0x200000d0

0800101c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	603a      	str	r2, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	460b      	mov	r3, r1
 800102a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SD_disk_ioctl+0x1e>
 8001036:	2304      	movs	r3, #4
 8001038:	e115      	b.n	8001266 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2b05      	cmp	r3, #5
 8001044:	d124      	bne.n	8001090 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d012      	beq.n	8001074 <SD_disk_ioctl+0x58>
 800104e:	2b02      	cmp	r3, #2
 8001050:	dc1a      	bgt.n	8001088 <SD_disk_ioctl+0x6c>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <SD_disk_ioctl+0x40>
 8001056:	2b01      	cmp	r3, #1
 8001058:	d006      	beq.n	8001068 <SD_disk_ioctl+0x4c>
 800105a:	e015      	b.n	8001088 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800105c:	f7ff fd1a 	bl	8000a94 <SD_PowerOff>
			res = RES_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001066:	e0fc      	b.n	8001262 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001068:	f7ff fcd2 	bl	8000a10 <SD_PowerOn>
			res = RES_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001072:	e0f6      	b.n	8001262 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	1c5c      	adds	r4, r3, #1
 8001078:	f7ff fd18 	bl	8000aac <SD_CheckPower>
 800107c:	4603      	mov	r3, r0
 800107e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001086:	e0ec      	b.n	8001262 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001088:	2304      	movs	r3, #4
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800108e:	e0e8      	b.n	8001262 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001090:	4b77      	ldr	r3, [pc, #476]	; (8001270 <SD_disk_ioctl+0x254>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_ioctl+0x86>
 800109e:	2303      	movs	r3, #3
 80010a0:	e0e1      	b.n	8001266 <SD_disk_ioctl+0x24a>

		SELECT();
 80010a2:	f7ff fc21 	bl	80008e8 <SELECT>

		switch (ctrl)
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	2b0d      	cmp	r3, #13
 80010aa:	f200 80cb 	bhi.w	8001244 <SD_disk_ioctl+0x228>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <SD_disk_ioctl+0x98>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080011af 	.word	0x080011af
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	0800119f 	.word	0x0800119f
 80010c0:	08001245 	.word	0x08001245
 80010c4:	08001245 	.word	0x08001245
 80010c8:	08001245 	.word	0x08001245
 80010cc:	08001245 	.word	0x08001245
 80010d0:	08001245 	.word	0x08001245
 80010d4:	08001245 	.word	0x08001245
 80010d8:	08001245 	.word	0x08001245
 80010dc:	08001245 	.word	0x08001245
 80010e0:	080011c1 	.word	0x080011c1
 80010e4:	080011e5 	.word	0x080011e5
 80010e8:	08001209 	.word	0x08001209
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010ec:	2100      	movs	r1, #0
 80010ee:	2049      	movs	r0, #73	; 0x49
 80010f0:	f7ff fd57 	bl	8000ba2 <SD_SendCmd>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80a8 	bne.w	800124c <SD_disk_ioctl+0x230>
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2110      	movs	r1, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fcdc 	bl	8000ac0 <SD_RxDataBlock>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 809e 	beq.w	800124c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10e      	bne.n	8001138 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800111a:	7d7b      	ldrb	r3, [r7, #21]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7d3b      	ldrb	r3, [r7, #20]
 8001120:	b29b      	uxth	r3, r3
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3301      	adds	r3, #1
 800112c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800112e:	8bfb      	ldrh	r3, [r7, #30]
 8001130:	029a      	lsls	r2, r3, #10
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e02e      	b.n	8001196 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001138:	7c7b      	ldrb	r3, [r7, #17]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	b2da      	uxtb	r2, r3
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	09db      	lsrs	r3, r3, #7
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4413      	add	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	7d7b      	ldrb	r3, [r7, #21]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0306 	and.w	r3, r3, #6
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3302      	adds	r3, #2
 800115c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001160:	7d3b      	ldrb	r3, [r7, #20]
 8001162:	099b      	lsrs	r3, r3, #6
 8001164:	b2db      	uxtb	r3, r3
 8001166:	b29a      	uxth	r2, r3
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	b29b      	uxth	r3, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b29b      	uxth	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b29a      	uxth	r2, r3
 8001174:	7cbb      	ldrb	r3, [r7, #18]
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	b29b      	uxth	r3, r3
 800117a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001188:	8bfa      	ldrh	r2, [r7, #30]
 800118a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800118e:	3b09      	subs	r3, #9
 8001190:	409a      	lsls	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800119c:	e056      	b.n	800124c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011ac:	e055      	b.n	800125a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011ae:	f7ff fc15 	bl	80009dc <SD_ReadyWait>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2bff      	cmp	r3, #255	; 0xff
 80011b6:	d14b      	bne.n	8001250 <SD_disk_ioctl+0x234>
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011be:	e047      	b.n	8001250 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011c0:	2100      	movs	r1, #0
 80011c2:	2049      	movs	r0, #73	; 0x49
 80011c4:	f7ff fced 	bl	8000ba2 <SD_SendCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d142      	bne.n	8001254 <SD_disk_ioctl+0x238>
 80011ce:	2110      	movs	r1, #16
 80011d0:	6a38      	ldr	r0, [r7, #32]
 80011d2:	f7ff fc75 	bl	8000ac0 <SD_RxDataBlock>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d03b      	beq.n	8001254 <SD_disk_ioctl+0x238>
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011e2:	e037      	b.n	8001254 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011e4:	2100      	movs	r1, #0
 80011e6:	204a      	movs	r0, #74	; 0x4a
 80011e8:	f7ff fcdb 	bl	8000ba2 <SD_SendCmd>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d132      	bne.n	8001258 <SD_disk_ioctl+0x23c>
 80011f2:	2110      	movs	r1, #16
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff fc63 	bl	8000ac0 <SD_RxDataBlock>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d02b      	beq.n	8001258 <SD_disk_ioctl+0x23c>
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001206:	e027      	b.n	8001258 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001208:	2100      	movs	r1, #0
 800120a:	207a      	movs	r0, #122	; 0x7a
 800120c:	f7ff fcc9 	bl	8000ba2 <SD_SendCmd>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d116      	bne.n	8001244 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800121c:	e00b      	b.n	8001236 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800121e:	6a3c      	ldr	r4, [r7, #32]
 8001220:	1c63      	adds	r3, r4, #1
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	f7ff fbb0 	bl	8000988 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123a:	2b03      	cmp	r3, #3
 800123c:	d9ef      	bls.n	800121e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001244:	2304      	movs	r3, #4
 8001246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124a:	e006      	b.n	800125a <SD_disk_ioctl+0x23e>
			break;
 800124c:	bf00      	nop
 800124e:	e004      	b.n	800125a <SD_disk_ioctl+0x23e>
			break;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <SD_disk_ioctl+0x23e>
			break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <SD_disk_ioctl+0x23e>
			break;
 8001258:	bf00      	nop
		}

		DESELECT();
 800125a:	f7ff fb53 	bl	8000904 <DESELECT>
		SPI_RxByte();
 800125e:	f7ff fb93 	bl	8000988 <SPI_RxByte>
	}

	return res;
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001266:	4618      	mov	r0, r3
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e01f      	b.n	80012c6 <selectMux+0x52>
		if (pin & (i << 1)) {
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005a      	lsls	r2, r3, #1
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <selectMux+0x64>)
 80012a4:	f001 fe5c 	bl	8002f60 <HAL_GPIO_WritePin>
 80012a8:	e00a      	b.n	80012c0 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <selectMux+0x64>)
 80012bc:	f001 fe50 	bl	8002f60 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dddc      	ble.n	8001286 <selectMux+0x12>
		}
	}
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020000 	.word	0x40020000

080012dc <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 fe36 	bl	8002f60 <HAL_GPIO_WritePin>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <disableMux>:

void disableMux(GPIO_TypeDef *type, int pin) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	2201      	movs	r2, #1
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fe26 	bl	8002f60 <HAL_GPIO_WritePin>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <ADC_Select_CH3>:

void logSDCard(char* print_statement) {
	// TODO
}

void ADC_Select_CH3(void) { // Used for 3V3
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_3;
 800132c:	2303      	movs	r3, #3
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <ADC_Select_CH3+0x38>)
 800133e:	f001 f945 	bl	80025cc <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <ADC_Select_CH3+0x30>
  {
	Error_Handler();
 8001348:	f000 fc0c 	bl	8001b64 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200014b0 	.word	0x200014b0

08001358 <ADC_Select_CH9>:

void ADC_Select_CH9(void) { // Used for sense mux
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_9;
 8001368:	2309      	movs	r3, #9
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <ADC_Select_CH9+0x38>)
 800137a:	f001 f927 	bl	80025cc <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <ADC_Select_CH9+0x30>
  {
	Error_Handler();
 8001384:	f000 fbee 	bl	8001b64 <Error_Handler>
  }
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200014b0 	.word	0x200014b0

08001394 <read3V3>:

float read3V3() {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  ADC_Select_CH3();
 800139a:	f7ff ffbf 	bl	800131c <ADC_Select_CH3>
  HAL_ADC_Start(&hadc);
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <read3V3+0x50>)
 80013a0:	f000 ffec 	bl	800237c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	480e      	ldr	r0, [pc, #56]	; (80013e4 <read3V3+0x50>)
 80013aa:	f001 f873 	bl	8002494 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc) * ADC_VOLTAGE_CONVERSION;
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <read3V3+0x50>)
 80013b0:	f001 f900 	bl	80025b4 <HAL_ADC_GetValue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f84a 	bl	8000450 <__aeabi_ui2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <read3V3+0x54>)
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7fe feda 	bl	800017c <__aeabi_fmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <read3V3+0x50>)
 80013ce:	f001 f835 	bl	800243c <HAL_ADC_Stop>
  HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 fe6a 	bl	80020ac <HAL_Delay>
  return data;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200014b0 	.word	0x200014b0
 80013e8:	3a533334 	.word	0x3a533334

080013ec <readPressure>:

int readPressure() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  ADC_Select_CH9();
 80013f2:	f7ff ffb1 	bl	8001358 <ADC_Select_CH9>
  HAL_ADC_Start(&hadc);
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <readPressure+0x34>)
 80013f8:	f000 ffc0 	bl	800237c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <readPressure+0x34>)
 8001402:	f001 f847 	bl	8002494 <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <readPressure+0x34>)
 8001408:	f001 f8d4 	bl	80025b4 <HAL_ADC_GetValue>
 800140c:	4603      	mov	r3, r0
 800140e:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <readPressure+0x34>)
 8001412:	f001 f813 	bl	800243c <HAL_ADC_Stop>
  return data;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200014b0 	.word	0x200014b0

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142e:	f000 fdce 	bl	8001fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001432:	f000 f991 	bl	8001758 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8001436:	4bba      	ldr	r3, [pc, #744]	; (8001720 <main+0x2fc>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 fad2 	bl	80019e4 <MX_GPIO_Init>
  MX_ADC_Init();
 8001440:	f000 f9da 	bl	80017f8 <MX_ADC_Init>
  MX_I2C1_Init();
 8001444:	f000 fa40 	bl	80018c8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001448:	f000 fa6c 	bl	8001924 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800144c:	f000 faa0 	bl	8001990 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001450:	f004 ff9a 	bl	8006388 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	48b2      	ldr	r0, [pc, #712]	; (8001724 <main+0x300>)
 800145a:	f001 fd81 	bl	8002f60 <HAL_GPIO_WritePin>
//  printf("Initialization complete \r\n");

  int init_cnt = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001464:	f102 021c 	add.w	r2, r2, #28
 8001468:	6013      	str	r3, [r2, #0]
  while (init_cnt < 4) {
 800146a:	e016      	b.n	800149a <main+0x76>
	  init_cnt++;
 800146c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001470:	f103 031c 	add.w	r3, r3, #28
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800147c:	f102 021c 	add.w	r2, r2, #28
 8001480:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	48a6      	ldr	r0, [pc, #664]	; (8001724 <main+0x300>)
 800148a:	f001 fd69 	bl	8002f60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001494:	48a3      	ldr	r0, [pc, #652]	; (8001724 <main+0x300>)
 8001496:	f001 fd63 	bl	8002f60 <HAL_GPIO_WritePin>
  while (init_cnt < 4) {
 800149a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800149e:	f103 031c 	add.w	r3, r3, #28
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	dde1      	ble.n	800146c <main+0x48>
  }

  ITM_Port32(31) = 2;
 80014a8:	4b9d      	ldr	r3, [pc, #628]	; (8001720 <main+0x2fc>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	601a      	str	r2, [r3, #0]

//  int voltage_thresh_count = 0;
  int pressure_data[NUM_NODES] = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	3b20      	subs	r3, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ba:	461a      	mov	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	f008 f9e9 	bl	8009894 <memset>
  int array_cnt = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014c8:	f102 0218 	add.w	r2, r2, #24
 80014cc:	6013      	str	r3, [r2, #0]

  HAL_Delay(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d2:	f000 fdeb 	bl	80020ac <HAL_Delay>
  f_mount(&fs, "", 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	4993      	ldr	r1, [pc, #588]	; (8001728 <main+0x304>)
 80014da:	4894      	ldr	r0, [pc, #592]	; (800172c <main+0x308>)
 80014dc:	f007 f98e 	bl	80087fc <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80014e0:	2213      	movs	r2, #19
 80014e2:	4993      	ldr	r1, [pc, #588]	; (8001730 <main+0x30c>)
 80014e4:	4893      	ldr	r0, [pc, #588]	; (8001734 <main+0x310>)
 80014e6:	f007 f9cf 	bl	8008888 <f_open>
  f_lseek(&fil, f_size(&fil));
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <main+0x310>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4890      	ldr	r0, [pc, #576]	; (8001734 <main+0x310>)
 80014f2:	f007 fdd1 	bl	8009098 <f_lseek>
  f_puts("Hello from Mattrics\n", &fil);
 80014f6:	498f      	ldr	r1, [pc, #572]	; (8001734 <main+0x310>)
 80014f8:	488f      	ldr	r0, [pc, #572]	; (8001738 <main+0x314>)
 80014fa:	f008 f867 	bl	80095cc <f_puts>
  f_close(&fil);
 80014fe:	488d      	ldr	r0, [pc, #564]	; (8001734 <main+0x310>)
 8001500:	f007 fda0 	bl	8009044 <f_close>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read3V3();
 8001504:	f7ff ff46 	bl	8001394 <read3V3>
//		  exit(EXIT_SUCCESS);
//	}

	// TODO: setup timer to read from SD card and send to database

	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8001508:	2300      	movs	r3, #0
 800150a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800150e:	f102 0214 	add.w	r2, r2, #20
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e0eb      	b.n	80016ee <main+0x2ca>
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001516:	4a89      	ldr	r2, [pc, #548]	; (800173c <main+0x318>)
 8001518:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800151c:	f103 0314 	add.w	r3, r3, #20
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001526:	4986      	ldr	r1, [pc, #536]	; (8001740 <main+0x31c>)
 8001528:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800152c:	f103 0314 	add.w	r3, r3, #20
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fecf 	bl	80012dc <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 800153e:	2300      	movs	r3, #0
 8001540:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001544:	f102 0210 	add.w	r2, r2, #16
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e0a9      	b.n	80016a0 <main+0x27c>
			selectMux(pwr_sel, pwrMuxSelect, 4);
 800154c:	2204      	movs	r2, #4
 800154e:	497d      	ldr	r1, [pc, #500]	; (8001744 <main+0x320>)
 8001550:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001554:	f103 0310 	add.w	r3, r3, #16
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f7ff fe8b 	bl	8001274 <selectMux>
			// TODO: Timer for 3v3 checking
//			if (belowVoltageThresh()) { // ADC channel for 3v3 sense
//				voltage_thresh_count++;
//			}

			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 800155e:	2300      	movs	r3, #0
 8001560:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001564:	f102 020c 	add.w	r2, r2, #12
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e086      	b.n	800167a <main+0x256>
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800156c:	4a76      	ldr	r2, [pc, #472]	; (8001748 <main+0x324>)
 800156e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001572:	f103 030c 	add.w	r3, r3, #12
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800157c:	4973      	ldr	r1, [pc, #460]	; (800174c <main+0x328>)
 800157e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001582:	f103 030c 	add.w	r3, r3, #12
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f7ff fea4 	bl	80012dc <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8001594:	2300      	movs	r3, #0
 8001596:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800159a:	f102 0208 	add.w	r2, r2, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e045      	b.n	800162e <main+0x20a>
					selectMux(sense_sel, senseMuxSelect, 8);
 80015a2:	2208      	movs	r2, #8
 80015a4:	496a      	ldr	r1, [pc, #424]	; (8001750 <main+0x32c>)
 80015a6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015aa:	f103 0308 	add.w	r3, r3, #8
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	f7ff fe60 	bl	8001274 <selectMux>

					// Read voltage sense
					int raw_ADC_pressure = readPressure(); // ADC channel for voltage
 80015b4:	f7ff ff1a 	bl	80013ec <readPressure>
 80015b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015bc:	f103 0304 	add.w	r3, r3, #4
 80015c0:	6018      	str	r0, [r3, #0]
					float test_voltage = raw_ADC_pressure * ADC_VOLTAGE_CONVERSION;
 80015c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015c6:	f103 0304 	add.w	r3, r3, #4
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f7fe ff44 	bl	8000458 <__aeabi_i2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a60      	ldr	r2, [pc, #384]	; (8001754 <main+0x330>)
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fdd0 	bl	800017c <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015e2:	6013      	str	r3, [r2, #0]
//					printf("raw pressure voltage: %d", raw_pressure_voltage);
					pressure_data[array_cnt] = raw_ADC_pressure;
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	3b20      	subs	r3, #32
 80015ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015ee:	f102 0218 	add.w	r2, r2, #24
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80015f8:	f101 0104 	add.w	r1, r1, #4
 80015fc:	6809      	ldr	r1, [r1, #0]
 80015fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					array_cnt++;
 8001602:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001606:	f103 0318 	add.w	r3, r3, #24
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001612:	f102 0218 	add.w	r2, r2, #24
 8001616:	6013      	str	r3, [r2, #0]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8001618:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800161c:	f103 0308 	add.w	r3, r3, #8
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001628:	f102 0208 	add.w	r2, r2, #8
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001632:	f103 0308 	add.w	r3, r3, #8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b07      	cmp	r3, #7
 800163a:	ddb2      	ble.n	80015a2 <main+0x17e>
					// TODO: write to SD card
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800163c:	4a42      	ldr	r2, [pc, #264]	; (8001748 <main+0x324>)
 800163e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001642:	f103 030c 	add.w	r3, r3, #12
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800164c:	493f      	ldr	r1, [pc, #252]	; (800174c <main+0x328>)
 800164e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001652:	f103 030c 	add.w	r3, r3, #12
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fe4c 	bl	80012fc <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8001664:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001668:	f103 030c 	add.w	r3, r3, #12
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001674:	f102 020c 	add.w	r2, r2, #12
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800167e:	f103 030c 	add.w	r3, r3, #12
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b07      	cmp	r3, #7
 8001686:	f77f af71 	ble.w	800156c <main+0x148>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 800168a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800168e:	f103 0310 	add.w	r3, r3, #16
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800169a:	f102 0210 	add.w	r2, r2, #16
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016a4:	f103 0310 	add.w	r3, r3, #16
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	f77f af4e 	ble.w	800154c <main+0x128>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <main+0x318>)
 80016b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016b6:	f103 0314 	add.w	r3, r3, #20
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c0:	491f      	ldr	r1, [pc, #124]	; (8001740 <main+0x31c>)
 80016c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016c6:	f103 0314 	add.w	r3, r3, #20
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fe12 	bl	80012fc <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 80016d8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016dc:	f103 0314 	add.w	r3, r3, #20
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016e8:	f102 0214 	add.w	r2, r2, #20
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016f2:	f103 0314 	add.w	r3, r3, #20
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	f77f af0c 	ble.w	8001516 <main+0xf2>
	 }
//	printf("array cnt: %d", array_cnt);
	array_cnt = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001704:	f102 0218 	add.w	r2, r2, #24
 8001708:	6013      	str	r3, [r2, #0]
	memset(pressure_data, 0, sizeof(pressure_data));
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	3b20      	subs	r3, #32
 8001710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f008 f8bc 	bl	8009894 <memset>
	read3V3();
 800171c:	e6f2      	b.n	8001504 <main+0xe0>
 800171e:	bf00      	nop
 8001720:	e000007c 	.word	0xe000007c
 8001724:	40020800 	.word	0x40020800
 8001728:	080098fc 	.word	0x080098fc
 800172c:	200003b4 	.word	0x200003b4
 8001730:	08009900 	.word	0x08009900
 8001734:	20001504 	.word	0x20001504
 8001738:	0800990c 	.word	0x0800990c
 800173c:	20000004 	.word	0x20000004
 8001740:	0800996c 	.word	0x0800996c
 8001744:	20000020 	.word	0x20000020
 8001748:	2000002c 	.word	0x2000002c
 800174c:	0800997c 	.word	0x0800997c
 8001750:	20000014 	.word	0x20000014
 8001754:	3a533334 	.word	0x3a533334

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b092      	sub	sp, #72	; 0x48
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2234      	movs	r2, #52	; 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f008 f894 	bl	8009894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <SystemClock_Config+0x9c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <SystemClock_Config+0x9c>)
 8001784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001788:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800178a:	2303      	movs	r3, #3
 800178c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800178e:	2301      	movs	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001792:	2301      	movs	r3, #1
 8001794:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001796:	2310      	movs	r3, #16
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80017a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 f9f2 	bl	8004b9c <HAL_RCC_OscConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80017be:	f000 f9d1 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2303      	movs	r3, #3
 80017c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fd0e 	bl	80051fc <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017e6:	f000 f9bd 	bl	8001b64 <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3748      	adds	r7, #72	; 0x48
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40007000 	.word	0x40007000

080017f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_ADC_Init+0xc8>)
 800180a:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <MX_ADC_Init+0xcc>)
 800180c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_ADC_Init+0xc8>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_ADC_Init+0xc8>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_ADC_Init+0xc8>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_ADC_Init+0xc8>)
 800184a:	2202      	movs	r2, #2
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001858:	2210      	movs	r2, #16
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_ADC_Init+0xc8>)
 800185e:	2200      	movs	r2, #0
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_ADC_Init+0xc8>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_ADC_Init+0xc8>)
 800186c:	f000 fc40 	bl	80020f0 <HAL_ADC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8001876:	f000 f975 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800187a:	2303      	movs	r3, #3
 800187c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800187e:	2301      	movs	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_ADC_Init+0xc8>)
 800188c:	f000 fe9e 	bl	80025cc <HAL_ADC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001896:	f000 f965 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800189e:	2302      	movs	r3, #2
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_ADC_Init+0xc8>)
 80018a8:	f000 fe90 	bl	80025cc <HAL_ADC_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80018b2:	f000 f957 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200014b0 	.word	0x200014b0
 80018c4:	40012400 	.word	0x40012400

080018c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <MX_I2C1_Init+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_I2C1_Init+0x50>)
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_I2C1_Init+0x58>)
 80018d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_I2C1_Init+0x50>)
 8001906:	f001 fb43 	bl	8002f90 <HAL_I2C_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001910:	f000 f928 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200013ec 	.word	0x200013ec
 800191c:	40005400 	.word	0x40005400
 8001920:	000186a0 	.word	0x000186a0

08001924 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_SPI2_Init+0x64>)
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <MX_SPI2_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_SPI2_Init+0x64>)
 8001930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_SPI2_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_SPI2_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_SPI2_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_SPI2_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_SPI2_Init+0x64>)
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_SPI2_Init+0x64>)
 8001958:	2210      	movs	r2, #16
 800195a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_SPI2_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_SPI2_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_SPI2_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_SPI2_Init+0x64>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_SPI2_Init+0x64>)
 8001976:	f003 fead 	bl	80056d4 <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001980:	f000 f8f0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000035c 	.word	0x2000035c
 800198c:	40003800 	.word	0x40003800

08001990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART3_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART3_UART_Init+0x4c>)
 80019c8:	f004 fbac 	bl	8006124 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f000 f8c7 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000308 	.word	0x20000308
 80019e0:	40004800 	.word	0x40004800

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <MX_GPIO_Init+0x16c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a18:	f043 0320 	orr.w	r3, r3, #32
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a42      	ldr	r2, [pc, #264]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <MX_GPIO_Init+0x16c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001a72:	2200      	movs	r2, #0
 8001a74:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001a78:	4836      	ldr	r0, [pc, #216]	; (8001b54 <MX_GPIO_Init+0x170>)
 8001a7a:	f001 fa71 	bl	8002f60 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001a84:	4834      	ldr	r0, [pc, #208]	; (8001b58 <MX_GPIO_Init+0x174>)
 8001a86:	f001 fa6b 	bl	8002f60 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001a90:	4832      	ldr	r0, [pc, #200]	; (8001b5c <MX_GPIO_Init+0x178>)
 8001a92:	f001 fa65 	bl	8002f60 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4831      	ldr	r0, [pc, #196]	; (8001b60 <MX_GPIO_Init+0x17c>)
 8001a9c:	f001 fa60 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001aa0:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001aa4:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4826      	ldr	r0, [pc, #152]	; (8001b54 <MX_GPIO_Init+0x170>)
 8001aba:	f001 f8d1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001abe:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001ac2:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4820      	ldr	r0, [pc, #128]	; (8001b58 <MX_GPIO_Init+0x174>)
 8001ad8:	f001 f8c2 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001adc:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001ae0:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4819      	ldr	r0, [pc, #100]	; (8001b5c <MX_GPIO_Init+0x178>)
 8001af6:	f001 f8b3 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4811      	ldr	r0, [pc, #68]	; (8001b54 <MX_GPIO_Init+0x170>)
 8001b0e:	f001 f8a7 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <MX_GPIO_Init+0x174>)
 8001b28:	f001 f89a 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_GPIO_Init+0x17c>)
 8001b44:	f001 f88c 	bl	8002c60 <HAL_GPIO_Init>

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	6253      	str	r3, [r2, #36]	; 0x24
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_MspInit+0x68>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_MspInit+0x68>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_MspInit+0x68>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6253      	str	r3, [r2, #36]	; 0x24
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x68>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	f000 ffc7 	bl	8002b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f000 ffe0 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <HAL_ADC_MspInit+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d153      	bne.n	8001ca6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_MspInit+0xd8>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <HAL_ADC_MspInit+0xdc>)
 8001c72:	f000 fff5 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_3V3_Pin;
 8001c76:	2308      	movs	r3, #8
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_3V3_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <HAL_ADC_MspInit+0xe0>)
 8001c8a:	f000 ffe9 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <HAL_ADC_MspInit+0xe4>)
 8001ca2:	f000 ffdd 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40012400 	.word	0x40012400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_I2C_MspInit+0x9c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d138      	bne.n	8001d58 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d10:	2304      	movs	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4813      	ldr	r0, [pc, #76]	; (8001d68 <HAL_I2C_MspInit+0xa4>)
 8001d1c:	f000 ffa0 	bl	8002c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2a:	6253      	str	r3, [r2, #36]	; 0x24
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_I2C_MspInit+0xa0>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	201f      	movs	r0, #31
 8001d3e:	f000 ff0a 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d42:	201f      	movs	r0, #31
 8001d44:	f000 ff23 	bl	8002b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2020      	movs	r0, #32
 8001d4e:	f000 ff02 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d52:	2020      	movs	r0, #32
 8001d54:	f000 ff1b 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d130      	bne.n	8001df0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6253      	str	r3, [r2, #36]	; 0x24
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dbe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <HAL_SPI_MspInit+0x94>)
 8001ddc:	f000 ff40 	bl	8002c60 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2024      	movs	r0, #36	; 0x24
 8001de6:	f000 feb6 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001dea:	2024      	movs	r0, #36	; 0x24
 8001dec:	f000 fecf 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40003800 	.word	0x40003800
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020400 	.word	0x40020400

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0x8c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d130      	bne.n	8001e88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6253      	str	r3, [r2, #36]	; 0x24
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4809      	ldr	r0, [pc, #36]	; (8001e98 <HAL_UART_MspInit+0x94>)
 8001e74:	f000 fef4 	bl	8002c60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2027      	movs	r0, #39	; 0x27
 8001e7e:	f000 fe6a 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e82:	2027      	movs	r0, #39	; 0x27
 8001e84:	f000 fe83 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40004800 	.word	0x40004800
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020800 	.word	0x40020800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <SysTick_Handler+0x34>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <SysTick_Handler+0x18>
		Timer1--;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <SysTick_Handler+0x34>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <SysTick_Handler+0x34>)
 8001ef6:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <SysTick_Handler+0x38>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <SysTick_Handler+0x2c>
		Timer2--;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Handler+0x38>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <SysTick_Handler+0x38>)
 8001f0a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0c:	f000 f8b2 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000356 	.word	0x20000356
 8001f18:	20000354 	.word	0x20000354

08001f1c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <I2C1_EV_IRQHandler+0x10>)
 8001f2e:	f001 f973 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200013ec 	.word	0x200013ec

08001f3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <I2C1_ER_IRQHandler+0x10>)
 8001f42:	f001 fada 	bl	80034fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200013ec 	.word	0x200013ec

08001f50 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <SPI2_IRQHandler+0x10>)
 8001f56:	f003 ff17 	bl	8005d88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000035c 	.word	0x2000035c

08001f64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART3_IRQHandler+0x10>)
 8001f6a:	f7fe fc63 	bl	8000834 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000308 	.word	0x20000308

08001f78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f86:	490d      	ldr	r1, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f9c:	4c0a      	ldr	r4, [pc, #40]	; (8001fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffe5 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f007 fc4d 	bl	800984c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7ff fa37 	bl	8001424 <main>
  bx lr
 8001fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fc0:	08009e10 	.word	0x08009e10
  ldr r2, =_sbss
 8001fc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fc8:	200045a8 	.word	0x200045a8

08001fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_IRQHandler>

08001fce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 fdb1 	bl	8002b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f000 f80e 	bl	8002000 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	e001      	b.n	8001ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff0:	f7ff fdbe 	bl	8001b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_InitTick+0x6c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fdbe 	bl	8002baa <HAL_SYSTICK_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d809      	bhi.n	800204e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f000 fd88 	bl	8002b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_InitTick+0x70>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e007      	b.n	800205e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e004      	b.n	800205e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000054 	.word	0x20000054
 800206c:	2000004c 	.word	0x2000004c
 8002070:	20000050 	.word	0x20000050

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x1c>)
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20002534 	.word	0x20002534
 8002094:	20000054 	.word	0x20000054

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20002534 	.word	0x20002534

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fff0 	bl	8002098 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d004      	beq.n	80020d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_Delay+0x40>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d0:	bf00      	nop
 80020d2:	f7ff ffe1 	bl	8002098 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d8f7      	bhi.n	80020d2 <HAL_Delay+0x26>
  {
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000054 	.word	0x20000054

080020f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08e      	sub	sp, #56	; 0x38
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e127      	b.n	8002360 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_ADC_Init+0x278>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a8d      	ldr	r2, [pc, #564]	; (8002368 <HAL_ADC_Init+0x278>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_ADC_Init+0x278>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fd49 	bl	8001bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80ff 	bne.w	8002356 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002160:	f023 0302 	bic.w	r3, r3, #2
 8002164:	f043 0202 	orr.w	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800216c:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_ADC_Init+0x27c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	497c      	ldr	r1, [pc, #496]	; (800236c <HAL_ADC_Init+0x27c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002186:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218e:	4619      	mov	r1, r3
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80021aa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	2302      	movs	r3, #2
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80021d2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80021d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d6:	4313      	orrs	r3, r2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d007      	beq.n	80021f2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021ea:	4313      	orrs	r3, r2
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	4313      	orrs	r3, r2
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d04f      	beq.n	80022a0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002206:	4313      	orrs	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002212:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6912      	ldr	r2, [r2, #16]
 8002218:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800221c:	d003      	beq.n	8002226 <HAL_ADC_Init+0x136>
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	2a01      	cmp	r2, #1
 8002224:	d102      	bne.n	800222c <HAL_ADC_Init+0x13c>
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	e000      	b.n	800222e <HAL_ADC_Init+0x13e>
 800222c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800222e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	4313      	orrs	r3, r2
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d125      	bne.n	800228c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	3b01      	subs	r3, #1
 8002250:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	617a      	str	r2, [r7, #20]
  return result;
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4093      	lsls	r3, r2
 8002268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	4313      	orrs	r3, r2
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	e00b      	b.n	800228c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_ADC_Init+0x280>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800229c:	430b      	orrs	r3, r1
 800229e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_ADC_Init+0x284>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d003      	beq.n	80022c6 <HAL_ADC_Init+0x1d6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80022da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	60fa      	str	r2, [r7, #12]
  return result;
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	fa03 f202 	lsl.w	r2, r3, r2
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_ADC_Init+0x288>)
 8002312:	4013      	ands	r3, r2
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	429a      	cmp	r2, r3
 8002318:	d10b      	bne.n	8002332 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	f023 0303 	bic.w	r3, r3, #3
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002330:	e014      	b.n	800235c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f023 0312 	bic.w	r3, r3, #18
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002354:	e002      	b.n	800235c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800235c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002360:	4618      	mov	r0, r3
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40012700 	.word	0x40012700
 8002370:	fcfc16ff 	.word	0xfcfc16ff
 8002374:	c0fff18d 	.word	0xc0fff18d
 8002378:	bf80fffe 	.word	0xbf80fffe

0800237c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Start+0x1a>
 8002392:	2302      	movs	r3, #2
 8002394:	e04e      	b.n	8002434 <HAL_ADC_Start+0xb8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa64 	bl	800286c <ADC_Enable>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d141      	bne.n	8002432 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f023 0206 	bic.w	r2, r3, #6
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
 80023fa:	e002      	b.n	8002402 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002412:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002430:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Stop+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e01a      	b.n	800248c <HAL_ADC_Stop+0x50>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa60 	bl	8002924 <ADC_ConversionStop_Disable>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d113      	bne.n	80024da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	d10b      	bne.n	80024da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e068      	b.n	80025ac <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024da:	f7ff fddd 	bl	8002098 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024e0:	e021      	b.n	8002526 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d01d      	beq.n	8002526 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_ADC_PollForConversion+0x6c>
 80024f0:	f7ff fdd2 	bl	8002098 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d212      	bcs.n	8002526 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e042      	b.n	80025ac <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0d6      	beq.n	80024e2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0212 	mvn.w	r2, #18
 8002544:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d124      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d111      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e134      	b.n	8002856 <HAL_ADC_ConfigChannel+0x28a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d81c      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4019      	ands	r1, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b05      	subs	r3, #5
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
 8002634:	e07e      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d81c      	bhi.n	8002678 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	; 0x23
 8002650:	221f      	movs	r2, #31
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	4019      	ands	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b23      	subs	r3, #35	; 0x23
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c
 8002676:	e05d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d81c      	bhi.n	80026ba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b41      	subs	r3, #65	; 0x41
 8002692:	221f      	movs	r2, #31
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	3b41      	subs	r3, #65	; 0x41
 80026ac:	fa00 f203 	lsl.w	r2, r0, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
 80026b8:	e03c      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d81c      	bhi.n	80026fc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b5f      	subs	r3, #95	; 0x5f
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	4019      	ands	r1, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b5f      	subs	r3, #95	; 0x5f
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34
 80026fa:	e01b      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b7d      	subs	r3, #125	; 0x7d
 800270e:	221f      	movs	r2, #31
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b7d      	subs	r3, #125	; 0x7d
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d81a      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	2207      	movs	r2, #7
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	4019      	ands	r1, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6898      	ldr	r0, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	e042      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b13      	cmp	r3, #19
 8002778:	d81c      	bhi.n	80027b4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	3b1e      	subs	r3, #30
 800278c:	2207      	movs	r2, #7
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	4019      	ands	r1, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	e021      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b1a      	cmp	r3, #26
 80027ba:	d81c      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b3c      	subs	r3, #60	; 0x3c
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	3b3c      	subs	r3, #60	; 0x3c
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027f6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d003      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002804:	2b11      	cmp	r3, #17
 8002806:	d121      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11b      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 800281a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800281e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b10      	cmp	r3, #16
 8002826:	d111      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_ADC_ConfigChannel+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_ADC_ConfigChannel+0x29c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9a      	lsrs	r2, r3, #18
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012700 	.word	0x40012700
 8002864:	2000004c 	.word	0x2000004c
 8002868:	431bde83 	.word	0x431bde83

0800286c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d043      	beq.n	8002912 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <ADC_Enable+0xb0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <ADC_Enable+0xb4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9a      	lsrs	r2, r3, #18
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028ae:	e002      	b.n	80028b6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80028bc:	f7ff fbec 	bl	8002098 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c2:	e01f      	b.n	8002904 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80028c4:	f7ff fbe8 	bl	8002098 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d918      	bls.n	8002904 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d011      	beq.n	8002904 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d1d8      	bne.n	80028c4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000004c 	.word	0x2000004c
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d12e      	bne.n	800299c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294e:	f7ff fba3 	bl	8002098 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002954:	e01b      	b.n	800298e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002956:	f7ff fb9f 	bl	8002098 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d914      	bls.n	800298e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d10d      	bne.n	800298e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d0dc      	beq.n	8002956 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60d3      	str	r3, [r2, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db0b      	blt.n	8002a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <__NVIC_EnableIRQ+0x34>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0c:	d301      	bcc.n	8002b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00f      	b.n	8002b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <SysTick_Config+0x40>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f7ff ff90 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <SysTick_Config+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SysTick_Config+0x40>)
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff2d 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b68:	f7ff ff42 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7ff ff90 	bl	8002a98 <NVIC_EncodePriority>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff5f 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff35 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffa2 	bl	8002afc <SysTick_Config>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e029      	b.n	8002c3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020e 	bic.w	r2, r2, #14
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 021c 	and.w	r2, r3, #28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
    }
  }
  return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c52:	b2db      	uxtb	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c76:	e154      	b.n	8002f22 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8146 	beq.w	8002f1c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a0 	beq.w	8002f1c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002df4:	4a53      	ldr	r2, [pc, #332]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d019      	beq.n	8002e54 <HAL_GPIO_Init+0x1f4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <HAL_GPIO_Init+0x2ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1f0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a49      	ldr	r2, [pc, #292]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_GPIO_Init+0x2f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e4>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e008      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e44:	2305      	movs	r3, #5
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f aea3 	bne.w	8002c78 <HAL_GPIO_Init+0x18>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fe84 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	; 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f002 fae6 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	; (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	; (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	; (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	; (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	; (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d003      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x38>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	f040 80c1 	bne.w	80033d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_I2C_EV_IRQHandler+0x6e>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003270:	d003      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x62>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003278:	d101      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x66>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x68>
 800327e:	2300      	movs	r3, #0
 8003280:	2b01      	cmp	r3, #1
 8003282:	f000 8132 	beq.w	80034ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00c      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x92>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f001 fc63 	bl	8004b68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fd6f 	bl	8003d86 <I2C_Master_SB>
 80032a8:	e092      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0xb2>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	0a5b      	lsrs	r3, r3, #9
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fde4 	bl	8003e90 <I2C_Master_ADD10>
 80032c8:	e082      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0xd2>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fdfd 	bl	8003ee2 <I2C_Master_ADDR>
 80032e8:	e072      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03b      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	f000 80f3 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	09db      	lsrs	r3, r3, #7
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f9e9 	bl	8003704 <I2C_MasterTransmit_TXE>
 8003332:	e04d      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80d6 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80cf 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	2b21      	cmp	r3, #33	; 0x21
 8003354:	d103      	bne.n	800335e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa70 	bl	800383c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335c:	e0c7      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	f040 80c4 	bne.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fade 	bl	8003928 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336c:	e0bf      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	f000 80b7 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00f      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fb53 	bl	8003a50 <I2C_MasterReceive_RXNE>
 80033aa:	e011      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 809a 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0a5b      	lsrs	r3, r3, #9
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8093 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbf2 	bl	8003bb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ce:	e08e      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d0:	e08d      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e007      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x20e>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0a5b      	lsrs	r3, r3, #9
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 ffab 	bl	800437a <I2C_Slave_ADDR>
 8003424:	e066      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0x22e>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 ffe6 	bl	8004410 <I2C_Slave_STOPF>
 8003444:	e056      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	2b21      	cmp	r3, #33	; 0x21
 800344a:	d002      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x23a>
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	2b29      	cmp	r3, #41	; 0x29
 8003450:	d125      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00f      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0a9b      	lsrs	r3, r3, #10
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fec3 	bl	8004202 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347c:	e039      	b.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d033      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0a5b      	lsrs	r3, r3, #9
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02d      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fef0 	bl	800427c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800349c:	e029      	b.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00f      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a9b      	lsrs	r3, r3, #10
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fefa 	bl	80042bc <I2C_SlaveReceive_RXNE>
 80034c8:	e014      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 ff28 	bl	8004338 <I2C_SlaveReceive_BTF>
 80034e8:	e004      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08a      	sub	sp, #40	; 0x28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x4e>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003546:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	0a5b      	lsrs	r3, r3, #9
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x78>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003570:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	0a9b      	lsrs	r3, r3, #10
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03f      	beq.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d039      	beq.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800358a:	7efb      	ldrb	r3, [r7, #27]
 800358c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035a4:	7ebb      	ldrb	r3, [r7, #26]
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d112      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10f      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b21      	cmp	r3, #33	; 0x21
 80035b4:	d008      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b29      	cmp	r3, #41	; 0x29
 80035ba:	d005      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xce>
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b28      	cmp	r3, #40	; 0x28
 80035c0:	d106      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d103      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 f851 	bl	8004670 <I2C_Slave_AF>
 80035ce:	e016      	b.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035e2:	7efb      	ldrb	r3, [r7, #27]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d002      	beq.n	80035ee <HAL_I2C_ER_IRQHandler+0xf4>
 80035e8:	7efb      	ldrb	r3, [r7, #27]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	0adb      	lsrs	r3, r3, #11
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <HAL_I2C_ER_IRQHandler+0x12e>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003626:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 f888 	bl	8004750 <I2C_ITError>
  }
}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
 800369c:	4613      	mov	r3, r2
 800369e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d150      	bne.n	80037cc <I2C_MasterTransmit_TXE+0xc8>
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	d14d      	bne.n	80037cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d01d      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d01a      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003742:	d016      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003752:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2211      	movs	r2, #17
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff6c 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003770:	e060      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003780:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d107      	bne.n	80037bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff81 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ba:	e03b      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff3f 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ca:	e033      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b21      	cmp	r3, #33	; 0x21
 80037d0:	d005      	beq.n	80037de <I2C_MasterTransmit_TXE+0xda>
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d12d      	bne.n	8003834 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b22      	cmp	r3, #34	; 0x22
 80037dc:	d12a      	bne.n	8003834 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037f8:	e01c      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d103      	bne.n	800380e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f88e 	bl	8003928 <I2C_MemoryTransmit_TXE_BTF>
}
 800380c:	e012      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003832:	e7ff      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d164      	bne.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003884:	e04c      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d01d      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b20      	cmp	r3, #32
 8003890:	d01a      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003898:	d016      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2211      	movs	r2, #17
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fec1 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
}
 80038c6:	e02b      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d107      	bne.n	8003912 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fed6 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
}
 8003910:	e006      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fe94 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11d      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10b      	bne.n	8003960 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	b2da      	uxtb	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800395e:	e073      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	b29b      	uxth	r3, r3
 8003966:	121b      	asrs	r3, r3, #8
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
}
 800397a:	e065      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10b      	bne.n	800399c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	b2da      	uxtb	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	651a      	str	r2, [r3, #80]	; 0x50
}
 800399a:	e055      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d151      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	d10d      	bne.n	80039c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c4:	e040      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b21      	cmp	r3, #33	; 0x21
 80039d4:	d112      	bne.n	80039fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039fa:	e025      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d120      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b21      	cmp	r3, #33	; 0x21
 8003a0a:	d11d      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fe3a 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b22      	cmp	r3, #34	; 0x22
 8003a62:	f040 80a2 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d921      	bls.n	8003ab8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	f040 8082 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003ab6:	e078      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d074      	beq.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d002      	beq.n	8003acc <I2C_MasterReceive_RXNE+0x7c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d16e      	bne.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f001 f819 	bl	8004b04 <I2C_WaitOnSTOPRequestThroughIT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d142      	bne.n	8003b5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d10a      	bne.n	8003b48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fdc4 	bl	80036ce <HAL_I2C_MemRxCpltCallback>
}
 8003b46:	e030      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2212      	movs	r2, #18
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fd7f 	bl	800365a <HAL_I2C_MasterRxCpltCallback>
}
 8003b5c:	e025      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fd9b 	bl	80036e0 <HAL_I2C_ErrorCallback>
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d11b      	bne.n	8003c02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c00:	e0bd      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d129      	bne.n	8003c60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00a      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d007      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c5e:	e08e      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d176      	bne.n	8003d58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <I2C_MasterReceive_BTF+0xc4>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d108      	bne.n	8003c88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e019      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d002      	beq.n	8003c94 <I2C_MasterReceive_BTF+0xe2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d108      	bne.n	8003ca6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e00a      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d007      	beq.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d10a      	bne.n	8003d42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fcc7 	bl	80036ce <HAL_I2C_MemRxCpltCallback>
}
 8003d40:	e01d      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2212      	movs	r2, #18
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fc82 	bl	800365a <HAL_I2C_MasterRxCpltCallback>
}
 8003d56:	e012      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d117      	bne.n	8003dca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003db4:	e067      	b.n	8003e86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
}
 8003dc8:	e05d      	b.n	8003e86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d133      	bne.n	8003e3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b21      	cmp	r3, #33	; 0x21
 8003dde:	d109      	bne.n	8003df4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	e008      	b.n	8003e06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <I2C_Master_SB+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d032      	beq.n	8003e86 <I2C_Master_SB+0x100>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02d      	beq.n	8003e86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
}
 8003e3a:	e024      	b.n	8003e86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10e      	bne.n	8003e62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	11db      	asrs	r3, r3, #7
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0306 	and.w	r3, r3, #6
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f063 030f 	orn	r3, r3, #15
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]
}
 8003e60:	e011      	b.n	8003e86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10d      	bne.n	8003e86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	11db      	asrs	r3, r3, #7
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0306 	and.w	r3, r3, #6
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f063 030e 	orn	r3, r3, #14
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	611a      	str	r2, [r3, #16]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <I2C_Master_ADD10+0x26>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d108      	bne.n	8003ec8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <I2C_Master_ADD10+0x48>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed6:	605a      	str	r2, [r3, #4]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b091      	sub	sp, #68	; 0x44
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	f040 8169 	bne.w	80041e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <I2C_Master_ADDR+0x54>
 8003f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10b      	bne.n	8003f36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	e160      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <I2C_Master_ADDR+0x98>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f46:	d118      	bne.n	8003f7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	651a      	str	r2, [r3, #80]	; 0x50
 8003f78:	e13e      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d113      	bne.n	8003fac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e115      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	f040 808a 	bne.w	80040cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fbe:	d137      	bne.n	8004030 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d113      	bne.n	8004008 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	e0e7      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e0d3      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b08      	cmp	r3, #8
 8004034:	d02e      	beq.n	8004094 <I2C_Master_ADDR+0x1b2>
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b20      	cmp	r3, #32
 800403a:	d02b      	beq.n	8004094 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800403c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403e:	2b12      	cmp	r3, #18
 8004040:	d102      	bne.n	8004048 <I2C_Master_ADDR+0x166>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b01      	cmp	r3, #1
 8004046:	d125      	bne.n	8004094 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b04      	cmp	r3, #4
 800404c:	d00e      	beq.n	800406c <I2C_Master_ADDR+0x18a>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b02      	cmp	r3, #2
 8004052:	d00b      	beq.n	800406c <I2C_Master_ADDR+0x18a>
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2b10      	cmp	r3, #16
 8004058:	d008      	beq.n	800406c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e007      	b.n	800407c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	e0a1      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e085      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d14d      	bne.n	8004172 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d016      	beq.n	800410a <I2C_Master_ADDR+0x228>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d013      	beq.n	800410a <I2C_Master_ADDR+0x228>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d010      	beq.n	800410a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e007      	b.n	800411a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d117      	bne.n	800415a <I2C_Master_ADDR+0x278>
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004130:	d00b      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b01      	cmp	r3, #1
 8004136:	d008      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b08      	cmp	r3, #8
 800413c:	d005      	beq.n	800414a <I2C_Master_ADDR+0x268>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b10      	cmp	r3, #16
 8004142:	d002      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2b20      	cmp	r3, #32
 8004148:	d107      	bne.n	800415a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004158:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e032      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004180:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004190:	d117      	bne.n	80041c2 <I2C_Master_ADDR+0x2e0>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004198:	d00b      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b01      	cmp	r3, #1
 800419e:	d008      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d005      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d002      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d107      	bne.n	80041c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041de:	e00b      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	e7ff      	b.n	80041f8 <I2C_Master_ADDR+0x316>
 80041f8:	bf00      	nop
 80041fa:	3744      	adds	r7, #68	; 0x44
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02b      	beq.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d114      	bne.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b29      	cmp	r3, #41	; 0x29
 800424e:	d111      	bne.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2221      	movs	r2, #33	; 0x21
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2228      	movs	r2, #40	; 0x28
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff f9fc 	bl	800366c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02c      	beq.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b2a      	cmp	r3, #42	; 0x2a
 800430a:	d111      	bne.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2222      	movs	r2, #34	; 0x22
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2228      	movs	r2, #40	; 0x28
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff f9a7 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004394:	2b28      	cmp	r3, #40	; 0x28
 8004396:	d127      	bne.n	80043e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	81bb      	strh	r3, [r7, #12]
 80043ca:	e002      	b.n	80043d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043da:	89ba      	ldrh	r2, [r7, #12]
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff f955 	bl	8003690 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043e6:	e00e      	b.n	8004406 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800442e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	d172      	bne.n	8004554 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d002      	beq.n	800447a <I2C_Slave_STOPF+0x6a>
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d135      	bne.n	80044e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0204 	orr.w	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fbc6 	bl	8002c44 <HAL_DMA_GetState>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d049      	beq.n	8004552 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4a69      	ldr	r2, [pc, #420]	; (8004668 <I2C_Slave_STOPF+0x258>)
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fb79 	bl	8002bc2 <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03d      	beq.n	8004552 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e0:	4610      	mov	r0, r2
 80044e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044e4:	e035      	b.n	8004552 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fb90 	bl	8002c44 <HAL_DMA_GetState>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d014      	beq.n	8004554 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <I2C_Slave_STOPF+0x258>)
 8004530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fb43 	bl	8002bc2 <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
 8004550:	e000      	b.n	8004554 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004552:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03e      	beq.n	80045dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d112      	bne.n	8004592 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d112      	bne.n	80045c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8b3 	bl	8004750 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045ea:	e039      	b.n	8004660 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b2a      	cmp	r3, #42	; 0x2a
 80045f0:	d109      	bne.n	8004606 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2228      	movs	r2, #40	; 0x28
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff f83c 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b28      	cmp	r3, #40	; 0x28
 8004610:	d111      	bne.n	8004636 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <I2C_Slave_STOPF+0x25c>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff f83b 	bl	80036aa <HAL_I2C_ListenCpltCallback>
}
 8004634:	e014      	b.n	8004660 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	d002      	beq.n	8004644 <I2C_Slave_STOPF+0x234>
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d10d      	bne.n	8004660 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff f80f 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	080049b5 	.word	0x080049b5
 800466c:	ffff0000 	.word	0xffff0000

08004670 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d002      	beq.n	8004692 <I2C_Slave_AF+0x22>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b20      	cmp	r3, #32
 8004690:	d129      	bne.n	80046e6 <I2C_Slave_AF+0x76>
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b28      	cmp	r3, #40	; 0x28
 8004696:	d126      	bne.n	80046e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <I2C_Slave_AF+0xdc>)
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fe ffe3 	bl	80036aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046e4:	e02e      	b.n	8004744 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b21      	cmp	r3, #33	; 0x21
 80046ea:	d126      	bne.n	800473a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <I2C_Slave_AF+0xdc>)
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004720:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe ff9a 	bl	800366c <HAL_I2C_SlaveTxCpltCallback>
}
 8004738:	e004      	b.n	8004744 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004742:	615a      	str	r2, [r3, #20]
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	ffff0000 	.word	0xffff0000

08004750 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004766:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	2b10      	cmp	r3, #16
 800476c:	d002      	beq.n	8004774 <I2C_ITError+0x24>
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d10a      	bne.n	800478a <I2C_ITError+0x3a>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	d107      	bne.n	800478a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004788:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004790:	2b28      	cmp	r3, #40	; 0x28
 8004792:	d107      	bne.n	80047a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2228      	movs	r2, #40	; 0x28
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047a2:	e015      	b.n	80047d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d00a      	beq.n	80047ca <I2C_ITError+0x7a>
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b60      	cmp	r3, #96	; 0x60
 80047b8:	d007      	beq.n	80047ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047de:	d162      	bne.n	80048a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d020      	beq.n	8004840 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <I2C_ITError+0x25c>)
 8004804:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f9d9 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8089 	beq.w	800492a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483a:	4610      	mov	r0, r2
 800483c:	4798      	blx	r3
 800483e:	e074      	b.n	800492a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	4a59      	ldr	r2, [pc, #356]	; (80049ac <I2C_ITError+0x25c>)
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe f9b8 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d068      	beq.n	800492a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d10b      	bne.n	800487e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
 80048a4:	e041      	b.n	800492a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b60      	cmp	r3, #96	; 0x60
 80048b0:	d125      	bne.n	80048fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d10b      	bne.n	80048e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fe fefb 	bl	80036f2 <HAL_I2C_AbortCpltCallback>
 80048fc:	e015      	b.n	800492a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10b      	bne.n	8004924 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fe fedb 	bl	80036e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10e      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d113      	bne.n	80049a4 <I2C_ITError+0x254>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b28      	cmp	r3, #40	; 0x28
 8004980:	d110      	bne.n	80049a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <I2C_ITError+0x260>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fe83 	bl	80036aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ce:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <I2C_DMAAbort+0x148>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <I2C_DMAAbort+0x14c>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a1a      	lsrs	r2, r3, #8
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049fa:	e00a      	b.n	8004a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a10:	d0ea      	beq.n	80049e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	2200      	movs	r2, #0
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	2200      	movs	r2, #0
 8004a66:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d10e      	bne.n	8004aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7fe fe29 	bl	80036f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aa0:	e027      	b.n	8004af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa8:	2b28      	cmp	r3, #40	; 0x28
 8004aaa:	d117      	bne.n	8004adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2228      	movs	r2, #40	; 0x28
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ada:	e007      	b.n	8004aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f7fe fdf7 	bl	80036e0 <HAL_I2C_ErrorCallback>
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2000004c 	.word	0x2000004c
 8004b00:	14f8b589 	.word	0x14f8b589

08004b04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	0a1a      	lsrs	r2, r3, #8
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e008      	b.n	8004b54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b50:	d0e9      	beq.n	8004b26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	2000004c 	.word	0x2000004c
 8004b64:	14f8b589 	.word	0x14f8b589

08004b68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b78:	d103      	bne.n	8004b82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b80:	e007      	b.n	8004b92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b8a:	d102      	bne.n	8004b92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e31d      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4b94      	ldr	r3, [pc, #592]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb8:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d07b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d006      	beq.n	8004be2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d10f      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d10b      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be2:	4b87      	ldr	r3, [pc, #540]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d06a      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x128>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d166      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e2f7      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d106      	bne.n	8004c10 <HAL_RCC_OscConfig+0x74>
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e02d      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCC_OscConfig+0x96>
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b76      	ldr	r3, [pc, #472]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a75      	ldr	r2, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0xb8>
 8004c3a:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c54:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a69      	ldr	r2, [pc, #420]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a66      	ldr	r2, [pc, #408]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fa10 	bl	8002098 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fd fa0c 	bl	8002098 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e2ad      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fd f9fc 	bl	8002098 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fd f9f8 	bl	8002098 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e299      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cb6:	4b52      	ldr	r3, [pc, #328]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x108>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d05a      	beq.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d119      	bne.n	8004d12 <HAL_RCC_OscConfig+0x176>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e276      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	493d      	ldr	r1, [pc, #244]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d10:	e03a      	b.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d020      	beq.n	8004d5c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCC_OscConfig+0x268>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd f9ba 	bl	8002098 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fd f9b6 	bl	8002098 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e257      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3a:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	492a      	ldr	r1, [pc, #168]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
 8004d5a:	e015      	b.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_OscConfig+0x268>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fd f999 	bl	8002098 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fd f995 	bl	8002098 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e236      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80b8 	beq.w	8004f06 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d170      	bne.n	8004e7e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x218>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e21a      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d921      	bls.n	8004e08 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fc23 	bl	8005614 <RCC_SetFlashLatencyFromMSIRange>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e208      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4906      	ldr	r1, [pc, #24]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	4901      	ldr	r1, [pc, #4]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
 8004dfe:	e020      	b.n	8004e42 <HAL_RCC_OscConfig+0x2a6>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e08:	4ba4      	ldr	r3, [pc, #656]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	49a1      	ldr	r1, [pc, #644]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e1a:	4ba0      	ldr	r3, [pc, #640]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	061b      	lsls	r3, r3, #24
 8004e28:	499c      	ldr	r1, [pc, #624]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fbee 	bl	8005614 <RCC_SetFlashLatencyFromMSIRange>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e1d3      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	0b5b      	lsrs	r3, r3, #13
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e52:	4a92      	ldr	r2, [pc, #584]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0912      	lsrs	r2, r2, #4
 8004e58:	f002 020f 	and.w	r2, r2, #15
 8004e5c:	4990      	ldr	r1, [pc, #576]	; (80050a0 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	5c8a      	ldrb	r2, [r1, r2]
 8004e60:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e62:	4a90      	ldr	r2, [pc, #576]	; (80050a4 <HAL_RCC_OscConfig+0x508>)
 8004e64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e66:	4b90      	ldr	r3, [pc, #576]	; (80050a8 <HAL_RCC_OscConfig+0x50c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd f8c8 	bl	8002000 <HAL_InitTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d045      	beq.n	8004f06 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	e1b5      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d029      	beq.n	8004eda <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e86:	4b89      	ldr	r3, [pc, #548]	; (80050ac <HAL_RCC_OscConfig+0x510>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd f904 	bl	8002098 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e94:	f7fd f900 	bl	8002098 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1a1      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ea6:	4b7d      	ldr	r3, [pc, #500]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	4977      	ldr	r1, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec4:	4b75      	ldr	r3, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004eda:	4b74      	ldr	r3, [pc, #464]	; (80050ac <HAL_RCC_OscConfig+0x510>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fd f8da 	bl	8002098 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ee8:	f7fd f8d6 	bl	8002098 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e177      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004efa:	4b68      	ldr	r3, [pc, #416]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d030      	beq.n	8004f74 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCC_OscConfig+0x514>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f20:	f7fd f8ba 	bl	8002098 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fd f8b6 	bl	8002098 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e157      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x38c>
 8004f46:	e015      	b.n	8004f74 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f48:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCC_OscConfig+0x514>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f8a3 	bl	8002098 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fd f89f 	bl	8002098 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e140      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b5 	beq.w	80050ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b45      	ldr	r3, [pc, #276]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4b42      	ldr	r3, [pc, #264]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	4a41      	ldr	r2, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6253      	str	r3, [r2, #36]	; 0x24
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d118      	bne.n	8004fec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd f867 	bl	8002098 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fce:	f7fd f863 	bl	8002098 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	; 0x64
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e104      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x466>
 8004ff4:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	6353      	str	r3, [r2, #52]	; 0x34
 8005000:	e02d      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x488>
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	4a23      	ldr	r2, [pc, #140]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005014:	6353      	str	r3, [r2, #52]	; 0x34
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800501c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005020:	6353      	str	r3, [r2, #52]	; 0x34
 8005022:	e01c      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b05      	cmp	r3, #5
 800502a:	d10c      	bne.n	8005046 <HAL_RCC_OscConfig+0x4aa>
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	4a1a      	ldr	r2, [pc, #104]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005036:	6353      	str	r3, [r2, #52]	; 0x34
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800503e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005042:	6353      	str	r3, [r2, #52]	; 0x34
 8005044:	e00b      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800504c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005050:	6353      	str	r3, [r2, #52]	; 0x34
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d015      	beq.n	8005092 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005066:	f7fd f817 	bl	8002098 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506c:	e00a      	b.n	8005084 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506e:	f7fd f813 	bl	8002098 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f241 3288 	movw	r2, #5000	; 0x1388
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e0b2      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ee      	beq.n	800506e <HAL_RCC_OscConfig+0x4d2>
 8005090:	e023      	b.n	80050da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fd f801 	bl	8002098 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005098:	e019      	b.n	80050ce <HAL_RCC_OscConfig+0x532>
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	080099a8 	.word	0x080099a8
 80050a4:	2000004c 	.word	0x2000004c
 80050a8:	20000050 	.word	0x20000050
 80050ac:	42470020 	.word	0x42470020
 80050b0:	42470680 	.word	0x42470680
 80050b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fc ffee 	bl	8002098 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e08d      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ee      	bne.n	80050b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e0:	4b44      	ldr	r3, [pc, #272]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	4a43      	ldr	r2, [pc, #268]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ea:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d079      	beq.n	80051e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d056      	beq.n	80051a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d13b      	bne.n	800517a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc ffc6 	bl	8002098 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc ffc2 	bl	8002098 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e063      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005122:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4319      	orrs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	430b      	orrs	r3, r1
 8005146:	492b      	ldr	r1, [pc, #172]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc ffa1 	bl	8002098 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fc ff9d 	bl	8002098 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03e      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x5be>
 8005178:	e036      	b.n	80051e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc ff8a 	bl	8002098 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005188:	f7fc ff86 	bl	8002098 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e027      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519a:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x5ec>
 80051a6:	e01f      	b.n	80051e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e01a      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d10d      	bne.n	80051e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470060 	.word	0x42470060

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e11a      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d919      	bls.n	8005252 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <HAL_RCC_ClockConfig+0x34>
 8005224:	4b8a      	ldr	r3, [pc, #552]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a89      	ldr	r2, [pc, #548]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	4b87      	ldr	r3, [pc, #540]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	4985      	ldr	r1, [pc, #532]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005240:	4b83      	ldr	r3, [pc, #524]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d001      	beq.n	8005252 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0f9      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	497a      	ldr	r1, [pc, #488]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 808e 	beq.w	800539a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005286:	4b73      	ldr	r3, [pc, #460]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d121      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0d7      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800529e:	4b6d      	ldr	r3, [pc, #436]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0cb      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0bf      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052c6:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0b7      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d6:	4b5f      	ldr	r3, [pc, #380]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	495c      	ldr	r1, [pc, #368]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fc fed6 	bl	8002098 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d112      	bne.n	800531c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fc fece 	bl	8002098 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e09b      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800530e:	4b51      	ldr	r3, [pc, #324]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b08      	cmp	r3, #8
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xfc>
 800531a:	e03e      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d112      	bne.n	800534a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005324:	e00a      	b.n	800533c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fc feb7 	bl	8002098 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e084      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d1ee      	bne.n	8005326 <HAL_RCC_ClockConfig+0x12a>
 8005348:	e027      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d11d      	bne.n	800538e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fc fea0 	bl	8002098 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e06d      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800536a:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_ClockConfig+0x158>
 8005376:	e010      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fc fe8e 	bl	8002098 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e05b      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800539a:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d219      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d105      	bne.n	80053ba <HAL_RCC_ClockConfig+0x1be>
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	4923      	ldr	r1, [pc, #140]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e034      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4917      	ldr	r1, [pc, #92]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	490f      	ldr	r1, [pc, #60]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800541a:	f000 f823 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800541e:	4602      	mov	r2, r0
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	490b      	ldr	r1, [pc, #44]	; (8005458 <HAL_RCC_ClockConfig+0x25c>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <HAL_RCC_ClockConfig+0x260>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_ClockConfig+0x264>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fc fde0 	bl	8002000 <HAL_InitTick>
 8005440:	4603      	mov	r3, r0
 8005442:	72fb      	strb	r3, [r7, #11]

  return status;
 8005444:	7afb      	ldrb	r3, [r7, #11]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00
 8005454:	40023800 	.word	0x40023800
 8005458:	080099a8 	.word	0x080099a8
 800545c:	2000004c 	.word	0x2000004c
 8005460:	20000050 	.word	0x20000050

08005464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800546a:	4b4d      	ldr	r3, [pc, #308]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d00c      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x30>
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d87c      	bhi.n	8005578 <HAL_RCC_GetSysClockFreq+0x114>
 800547e:	2b04      	cmp	r3, #4
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x24>
 8005482:	2b08      	cmp	r3, #8
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x2a>
 8005486:	e077      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800548a:	613b      	str	r3, [r7, #16]
      break;
 800548c:	e082      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005490:	613b      	str	r3, [r7, #16]
      break;
 8005492:	e07f      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	0c9b      	lsrs	r3, r3, #18
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	4a43      	ldr	r2, [pc, #268]	; (80055ac <HAL_RCC_GetSysClockFreq+0x148>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0d9b      	lsrs	r3, r3, #22
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	4939      	ldr	r1, [pc, #228]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054c4:	fb01 f003 	mul.w	r0, r1, r3
 80054c8:	2100      	movs	r1, #0
 80054ca:	fb01 f102 	mul.w	r1, r1, r2
 80054ce:	1844      	adds	r4, r0, r1
 80054d0:	4935      	ldr	r1, [pc, #212]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054d2:	fba2 0101 	umull	r0, r1, r2, r1
 80054d6:	1863      	adds	r3, r4, r1
 80054d8:	4619      	mov	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	f7fb f80d 	bl	8000500 <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4613      	mov	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e040      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	461c      	mov	r4, r3
 80054f4:	f04f 0500 	mov.w	r5, #0
 80054f8:	4620      	mov	r0, r4
 80054fa:	4629      	mov	r1, r5
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	014b      	lsls	r3, r1, #5
 8005506:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800550a:	0142      	lsls	r2, r0, #5
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	1b00      	subs	r0, r0, r4
 8005512:	eb61 0105 	sbc.w	r1, r1, r5
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	018b      	lsls	r3, r1, #6
 8005520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005524:	0182      	lsls	r2, r0, #6
 8005526:	1a12      	subs	r2, r2, r0
 8005528:	eb63 0301 	sbc.w	r3, r3, r1
 800552c:	f04f 0000 	mov.w	r0, #0
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	00d9      	lsls	r1, r3, #3
 8005536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800553a:	00d0      	lsls	r0, r2, #3
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	1912      	adds	r2, r2, r4
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f04f 0000 	mov.w	r0, #0
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	0299      	lsls	r1, r3, #10
 8005550:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005554:	0290      	lsls	r0, r2, #10
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	461a      	mov	r2, r3
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	f7fa ffcb 	bl	8000500 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4613      	mov	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	613b      	str	r3, [r7, #16]
      break;
 8005576:	e00d      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	0b5b      	lsrs	r3, r3, #13
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	613b      	str	r3, [r7, #16]
      break;
 8005592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005594:	693b      	ldr	r3, [r7, #16]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bdb0      	pop	{r4, r5, r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	01312d00 	.word	0x01312d00
 80055ac:	0800999c 	.word	0x0800999c

080055b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	2000004c 	.word	0x2000004c

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055c8:	f7ff fff2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	080099b8 	.word	0x080099b8

080055ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055f0:	f7ff ffde 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0adb      	lsrs	r3, r3, #11
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005602:	5ccb      	ldrb	r3, [r1, r3]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40023800 	.word	0x40023800
 8005610:	080099b8 	.word	0x080099b8

08005614 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d12c      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005638:	4b24      	ldr	r3, [pc, #144]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e016      	b.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6253      	str	r3, [r2, #36]	; 0x24
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005664:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005670:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005678:	d105      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005680:	d101      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005682:	2301      	movs	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d105      	bne.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	490b      	ldr	r1, [pc, #44]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	40007000 	.word	0x40007000
 80056d0:	40023c00 	.word	0x40023c00

080056d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e06e      	b.n	80057c4 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f6:	d009      	beq.n	800570c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
 80056fe:	e005      	b.n	800570c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc fb20 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	ea42 0103 	orr.w	r1, r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	0c1a      	lsrs	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f002 0204 	and.w	r2, r2, #4
 80057b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_SPI_Transmit+0x22>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e126      	b.n	8005a3c <HAL_SPI_Transmit+0x270>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f6:	f7fc fc4f 	bl	8002098 <HAL_GetTick>
 80057fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800580c:	2302      	movs	r3, #2
 800580e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005810:	e10b      	b.n	8005a2a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x52>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005822:	e102      	b.n	8005a2a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2203      	movs	r2, #3
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586a:	d10f      	bne.n	800588c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d007      	beq.n	80058aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b2:	d14b      	bne.n	800594c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Transmit+0xf6>
 80058bc:	8afb      	ldrh	r3, [r7, #22]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d13e      	bne.n	8005940 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058e6:	e02b      	b.n	8005940 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d112      	bne.n	800591c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	881a      	ldrh	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	86da      	strh	r2, [r3, #54]	; 0x36
 800591a:	e011      	b.n	8005940 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591c:	f7fc fbbc 	bl	8002098 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d803      	bhi.n	8005934 <HAL_SPI_Transmit+0x168>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d102      	bne.n	800593a <HAL_SPI_Transmit+0x16e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800593e:	e074      	b.n	8005a2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ce      	bne.n	80058e8 <HAL_SPI_Transmit+0x11c>
 800594a:	e04c      	b.n	80059e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Transmit+0x18e>
 8005954:	8afb      	ldrh	r3, [r7, #22]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d140      	bne.n	80059dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005980:	e02c      	b.n	80059dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d113      	bne.n	80059b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80059b6:	e011      	b.n	80059dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b8:	f7fc fb6e 	bl	8002098 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d803      	bhi.n	80059d0 <HAL_SPI_Transmit+0x204>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d102      	bne.n	80059d6 <HAL_SPI_Transmit+0x20a>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059da:	e026      	b.n	8005a2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cd      	bne.n	8005982 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fb58 	bl	80060a0 <SPI_EndRxTxTransaction>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e000      	b.n	8005a2a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a52:	2301      	movs	r3, #1
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x26>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e18a      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x33c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a72:	f7fc fb11 	bl	8002098 <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d00f      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x70>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9a:	d107      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x68>
 8005aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d003      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab2:	e15b      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x82>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x82>
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005acc:	e14e      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d003      	beq.n	8005ae2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2205      	movs	r2, #5
 8005ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	887a      	ldrh	r2, [r7, #2]
 8005b0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d007      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d178      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x10a>
 8005b48:	8b7b      	ldrh	r3, [r7, #26]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d166      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b72:	e053      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d11b      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x176>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x176>
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d113      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d119      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x1b8>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	b292      	uxth	r2, r2
 8005bde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	1c9a      	adds	r2, r3, #2
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bfc:	f7fc fa4c 	bl	8002098 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d807      	bhi.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d003      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c1a:	e0a7      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1a6      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x130>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1a1      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x130>
 8005c30:	e07c      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_TransmitReceive+0x1fc>
 8005c3a:	8b7b      	ldrh	r3, [r7, #26]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d16b      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c66:	e057      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d11c      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d114      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d119      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x2ae>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d014      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf2:	f7fc f9d1 	bl	8002098 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d803      	bhi.n	8005d0a <HAL_SPI_TransmitReceive+0x2c6>
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d102      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x2cc>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d16:	e029      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1a2      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x224>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d19d      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f9b5 	bl	80060a0 <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d48:	e010      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	e000      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10f      	bne.n	8005dcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
    return;
 8005dca:	e0be      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_SPI_IRQHandler+0x66>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	09db      	lsrs	r3, r3, #7
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
    return;
 8005dec:	e0ad      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_SPI_IRQHandler+0x80>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a1 	beq.w	8005f4a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 809a 	beq.w	8005f4a <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d023      	beq.n	8005e6a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d011      	beq.n	8005e52 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	f043 0204 	orr.w	r2, r3, #4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	e00b      	b.n	8005e6a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	693b      	ldr	r3, [r7, #16]
        return;
 8005e68:	e06f      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d014      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d04f      	beq.n	8005f48 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <HAL_SPI_IRQHandler+0x14c>
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d034      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0203 	bic.w	r2, r2, #3
 8005ee2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d011      	beq.n	8005f10 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef0:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <HAL_SPI_IRQHandler+0x1c8>)
 8005ef2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc fe62 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d016      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1c:	4a0c      	ldr	r2, [pc, #48]	; (8005f50 <HAL_SPI_IRQHandler+0x1c8>)
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fc fe4c 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f3c:	e003      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f808 	bl	8005f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f44:	e000      	b.n	8005f48 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005f46:	bf00      	nop
    return;
 8005f48:	bf00      	nop
  }
}
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08005f67 	.word	0x08005f67

08005f54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr

08005f66 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ffe7 	bl	8005f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fa0:	f7fc f87a 	bl	8002098 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4413      	add	r3, r2
 8005fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fb0:	f7fc f872 	bl	8002098 <HAL_GetTick>
 8005fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	0d1b      	lsrs	r3, r3, #20
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc6:	e054      	b.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d050      	beq.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd0:	f7fc f862 	bl	8002098 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d902      	bls.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d13d      	bne.n	8006062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffe:	d111      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d004      	beq.n	8006014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006012:	d107      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602c:	d10f      	bne.n	800604e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800604c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e017      	b.n	8006092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	3b01      	subs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	429a      	cmp	r2, r3
 800608e:	d19b      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000004c 	.word	0x2000004c

080060a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <SPI_EndRxTxTransaction+0x7c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <SPI_EndRxTxTransaction+0x80>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0d5b      	lsrs	r3, r3, #21
 80060b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060bc:	fb02 f303 	mul.w	r3, r2, r3
 80060c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ca:	d112      	bne.n	80060f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2180      	movs	r1, #128	; 0x80
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff ff5a 	bl	8005f90 <SPI_WaitFlagStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00f      	b.n	8006112 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d0f2      	beq.n	80060f2 <SPI_EndRxTxTransaction+0x52>
 800610c:	e000      	b.n	8006110 <SPI_EndRxTxTransaction+0x70>
        break;
 800610e:	bf00      	nop
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	2000004c 	.word	0x2000004c
 8006120:	165e9f81 	.word	0x165e9f81

08006124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e03f      	b.n	80061b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fb fe5a 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f829 	bl	80061c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800619c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006200:	f023 030c 	bic.w	r3, r3, #12
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	430b      	orrs	r3, r1
 800620c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a55      	ldr	r2, [pc, #340]	; (8006380 <UART_SetConfig+0x1c0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d103      	bne.n	8006236 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800622e:	f7ff f9dd 	bl	80055ec <HAL_RCC_GetPCLK2Freq>
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	e002      	b.n	800623c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006236:	f7ff f9c5 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 800623a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006244:	d14c      	bne.n	80062e0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009a      	lsls	r2, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	4a49      	ldr	r2, [pc, #292]	; (8006384 <UART_SetConfig+0x1c4>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	0119      	lsls	r1, r3, #4
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009a      	lsls	r2, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	fbb2 f2f3 	udiv	r2, r2, r3
 800627c:	4b41      	ldr	r3, [pc, #260]	; (8006384 <UART_SetConfig+0x1c4>)
 800627e:	fba3 0302 	umull	r0, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2064      	movs	r0, #100	; 0x64
 8006286:	fb00 f303 	mul.w	r3, r0, r3
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	3332      	adds	r3, #50	; 0x32
 8006290:	4a3c      	ldr	r2, [pc, #240]	; (8006384 <UART_SetConfig+0x1c4>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800629e:	4419      	add	r1, r3
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009a      	lsls	r2, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80062b6:	4b33      	ldr	r3, [pc, #204]	; (8006384 <UART_SetConfig+0x1c4>)
 80062b8:	fba3 0302 	umull	r0, r3, r3, r2
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	2064      	movs	r0, #100	; 0x64
 80062c0:	fb00 f303 	mul.w	r3, r0, r3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	3332      	adds	r3, #50	; 0x32
 80062ca:	4a2e      	ldr	r2, [pc, #184]	; (8006384 <UART_SetConfig+0x1c4>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	f003 0207 	and.w	r2, r3, #7
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	440a      	add	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062de:	e04a      	b.n	8006376 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009a      	lsls	r2, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f6:	4a23      	ldr	r2, [pc, #140]	; (8006384 <UART_SetConfig+0x1c4>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	0119      	lsls	r1, r3, #4
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009a      	lsls	r2, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	fbb2 f2f3 	udiv	r2, r2, r3
 8006316:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <UART_SetConfig+0x1c4>)
 8006318:	fba3 0302 	umull	r0, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2064      	movs	r0, #100	; 0x64
 8006320:	fb00 f303 	mul.w	r3, r0, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	3332      	adds	r3, #50	; 0x32
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <UART_SetConfig+0x1c4>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006336:	4419      	add	r1, r3
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009a      	lsls	r2, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	fbb2 f2f3 	udiv	r2, r2, r3
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <UART_SetConfig+0x1c4>)
 8006350:	fba3 0302 	umull	r0, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	2064      	movs	r0, #100	; 0x64
 8006358:	fb00 f303 	mul.w	r3, r0, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	3332      	adds	r3, #50	; 0x32
 8006362:	4a08      	ldr	r2, [pc, #32]	; (8006384 <UART_SetConfig+0x1c4>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	440a      	add	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40013800 	.word	0x40013800
 8006384:	51eb851f 	.word	0x51eb851f

08006388 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800638c:	4904      	ldr	r1, [pc, #16]	; (80063a0 <MX_FATFS_Init+0x18>)
 800638e:	4805      	ldr	r0, [pc, #20]	; (80063a4 <MX_FATFS_Init+0x1c>)
 8006390:	f003 f98a 	bl	80096a8 <FATFS_LinkDriver>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <MX_FATFS_Init+0x20>)
 800639a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800639c:	bf00      	nop
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20002538 	.word	0x20002538
 80063a4:	20000058 	.word	0x20000058
 80063a8:	2000253c 	.word	0x2000253c

080063ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80063b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	4603      	mov	r3, r0
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fa fc40 	bl	8000c4c <SD_disk_initialize>
 80063cc:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa fd18 	bl	8000e18 <SD_disk_status>
 80063e8:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006402:	7bf8      	ldrb	r0, [r7, #15]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	f7fa fd19 	bl	8000e40 <SD_disk_read>
 800640e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006428:	7bf8      	ldrb	r0, [r7, #15]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	f7fa fd70 	bl	8000f14 <SD_disk_write>
 8006434:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	603a      	str	r2, [r7, #0]
 8006448:	71fb      	strb	r3, [r7, #7]
 800644a:	460b      	mov	r3, r1
 800644c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800644e:	79b9      	ldrb	r1, [r7, #6]
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f7fa fde1 	bl	800101c <SD_disk_ioctl>
 800645a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	4a08      	ldr	r2, [pc, #32]	; (8006494 <disk_status+0x30>)
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	79fa      	ldrb	r2, [r7, #7]
 800647c:	4905      	ldr	r1, [pc, #20]	; (8006494 <disk_status+0x30>)
 800647e:	440a      	add	r2, r1
 8006480:	7a12      	ldrb	r2, [r2, #8]
 8006482:	4610      	mov	r0, r2
 8006484:	4798      	blx	r3
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
  return stat;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	200002fc 	.word	0x200002fc

08006498 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <disk_initialize+0x48>)
 80064aa:	5cd3      	ldrb	r3, [r2, r3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d111      	bne.n	80064d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <disk_initialize+0x48>)
 80064b4:	2101      	movs	r1, #1
 80064b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <disk_initialize+0x48>)
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	79fa      	ldrb	r2, [r7, #7]
 80064c6:	4906      	ldr	r1, [pc, #24]	; (80064e0 <disk_initialize+0x48>)
 80064c8:	440a      	add	r2, r1
 80064ca:	7a12      	ldrb	r2, [r2, #8]
 80064cc:	4610      	mov	r0, r2
 80064ce:	4798      	blx	r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	200002fc 	.word	0x200002fc

080064e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <disk_read+0x3c>)
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	689c      	ldr	r4, [r3, #8]
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <disk_read+0x3c>)
 8006504:	4413      	add	r3, r2
 8006506:	7a18      	ldrb	r0, [r3, #8]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	47a0      	blx	r4
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]
  return res;
 8006514:	7dfb      	ldrb	r3, [r7, #23]
}
 8006516:	4618      	mov	r0, r3
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}
 800651e:	bf00      	nop
 8006520:	200002fc 	.word	0x200002fc

08006524 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <disk_write+0x3c>)
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68dc      	ldr	r4, [r3, #12]
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	4a07      	ldr	r2, [pc, #28]	; (8006560 <disk_write+0x3c>)
 8006544:	4413      	add	r3, r2
 8006546:	7a18      	ldrb	r0, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	47a0      	blx	r4
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]
  return res;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}
 800655e:	bf00      	nop
 8006560:	200002fc 	.word	0x200002fc

08006564 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	603a      	str	r2, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
 8006570:	460b      	mov	r3, r1
 8006572:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <disk_ioctl+0x38>)
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	79fa      	ldrb	r2, [r7, #7]
 8006582:	4906      	ldr	r1, [pc, #24]	; (800659c <disk_ioctl+0x38>)
 8006584:	440a      	add	r2, r1
 8006586:	7a10      	ldrb	r0, [r2, #8]
 8006588:	79b9      	ldrb	r1, [r7, #6]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]
  return res;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200002fc 	.word	0x200002fc

080065a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3301      	adds	r3, #1
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80065b0:	89fb      	ldrh	r3, [r7, #14]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	b21a      	sxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b21b      	sxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b21b      	sxth	r3, r3
 80065c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065c2:	89fb      	ldrh	r3, [r7, #14]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3303      	adds	r3, #3
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	3202      	adds	r2, #2
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	3201      	adds	r2, #1
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
	return rv;
 8006606:	68fb      	ldr	r3, [r7, #12]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	887a      	ldrh	r2, [r7, #2]
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	887a      	ldrh	r2, [r7, #2]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	1c53      	adds	r3, r2, #1
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	6179      	str	r1, [r7, #20]
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f1      	bne.n	80066b6 <mem_cpy+0x1a>
	}
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	617a      	str	r2, [r7, #20]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f3      	bne.n	80066ec <mem_set+0x10>
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	; 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	61fa      	str	r2, [r7, #28]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	61ba      	str	r2, [r7, #24]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	1acb      	subs	r3, r1, r3
 800673c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <mem_cmp+0x40>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0eb      	beq.n	8006728 <mem_cmp+0x18>

	return r;
 8006750:	697b      	ldr	r3, [r7, #20]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3724      	adds	r7, #36	; 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006766:	e002      	b.n	800676e <chk_chr+0x12>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3301      	adds	r3, #1
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <chk_chr+0x26>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4293      	cmp	r3, r2
 8006780:	d1f2      	bne.n	8006768 <chk_chr+0xc>
	return *str;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	781b      	ldrb	r3, [r3, #0]
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e029      	b.n	80067f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80067a4:	4a26      	ldr	r2, [pc, #152]	; (8006840 <chk_lock+0xb0>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01d      	beq.n	80067ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067b2:	4a23      	ldr	r2, [pc, #140]	; (8006840 <chk_lock+0xb0>)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	4413      	add	r3, r2
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d116      	bne.n	80067f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80067c4:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <chk_lock+0xb0>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d10c      	bne.n	80067f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067d8:	4a19      	ldr	r2, [pc, #100]	; (8006840 <chk_lock+0xb0>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	4413      	add	r3, r2
 80067e0:	3308      	adds	r3, #8
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d102      	bne.n	80067f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067ec:	e007      	b.n	80067fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80067ee:	2301      	movs	r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d9d2      	bls.n	80067a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d109      	bne.n	8006818 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <chk_lock+0x80>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d101      	bne.n	8006814 <chk_lock+0x84>
 8006810:	2300      	movs	r3, #0
 8006812:	e010      	b.n	8006836 <chk_lock+0xa6>
 8006814:	2312      	movs	r3, #18
 8006816:	e00e      	b.n	8006836 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <chk_lock+0xa0>
 800681e:	4a08      	ldr	r2, [pc, #32]	; (8006840 <chk_lock+0xb0>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	330c      	adds	r3, #12
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682e:	d101      	bne.n	8006834 <chk_lock+0xa4>
 8006830:	2310      	movs	r3, #16
 8006832:	e000      	b.n	8006836 <chk_lock+0xa6>
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr
 8006840:	200000dc 	.word	0x200000dc

08006844 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	e002      	b.n	8006856 <enq_lock+0x12>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3301      	adds	r3, #1
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d806      	bhi.n	800686a <enq_lock+0x26>
 800685c:	4a08      	ldr	r2, [pc, #32]	; (8006880 <enq_lock+0x3c>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	4413      	add	r3, r2
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f2      	bne.n	8006850 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b02      	cmp	r3, #2
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	200000dc 	.word	0x200000dc

08006884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e01f      	b.n	80068d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006894:	4a41      	ldr	r2, [pc, #260]	; (800699c <inc_lock+0x118>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	4413      	add	r3, r2
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d113      	bne.n	80068ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80068a6:	4a3d      	ldr	r2, [pc, #244]	; (800699c <inc_lock+0x118>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d109      	bne.n	80068ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80068ba:	4a38      	ldr	r2, [pc, #224]	; (800699c <inc_lock+0x118>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	4413      	add	r3, r2
 80068c2:	3308      	adds	r3, #8
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d006      	beq.n	80068dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d9dc      	bls.n	8006894 <inc_lock+0x10>
 80068da:	e000      	b.n	80068de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80068dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d132      	bne.n	800694a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	e002      	b.n	80068f0 <inc_lock+0x6c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d806      	bhi.n	8006904 <inc_lock+0x80>
 80068f6:	4a29      	ldr	r2, [pc, #164]	; (800699c <inc_lock+0x118>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	4413      	add	r3, r2
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f2      	bne.n	80068ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d101      	bne.n	800690e <inc_lock+0x8a>
 800690a:	2300      	movs	r3, #0
 800690c:	e040      	b.n	8006990 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4922      	ldr	r1, [pc, #136]	; (800699c <inc_lock+0x118>)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	440b      	add	r3, r1
 800691a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	491e      	ldr	r1, [pc, #120]	; (800699c <inc_lock+0x118>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	440b      	add	r3, r1
 8006928:	3304      	adds	r3, #4
 800692a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	491a      	ldr	r1, [pc, #104]	; (800699c <inc_lock+0x118>)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	440b      	add	r3, r1
 8006938:	3308      	adds	r3, #8
 800693a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800693c:	4a17      	ldr	r2, [pc, #92]	; (800699c <inc_lock+0x118>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	330c      	adds	r3, #12
 8006946:	2200      	movs	r2, #0
 8006948:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <inc_lock+0xe0>
 8006950:	4a12      	ldr	r2, [pc, #72]	; (800699c <inc_lock+0x118>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4413      	add	r3, r2
 8006958:	330c      	adds	r3, #12
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <inc_lock+0xe0>
 8006960:	2300      	movs	r3, #0
 8006962:	e015      	b.n	8006990 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d108      	bne.n	800697c <inc_lock+0xf8>
 800696a:	4a0c      	ldr	r2, [pc, #48]	; (800699c <inc_lock+0x118>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4413      	add	r3, r2
 8006972:	330c      	adds	r3, #12
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	e001      	b.n	8006980 <inc_lock+0xfc>
 800697c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006980:	4906      	ldr	r1, [pc, #24]	; (800699c <inc_lock+0x118>)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	440b      	add	r3, r1
 8006988:	330c      	adds	r3, #12
 800698a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	200000dc 	.word	0x200000dc

080069a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d825      	bhi.n	8006a00 <dec_lock+0x60>
		n = Files[i].ctr;
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <dec_lock+0x70>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	330c      	adds	r3, #12
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80069c2:	89fb      	ldrh	r3, [r7, #14]
 80069c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c8:	d101      	bne.n	80069ce <dec_lock+0x2e>
 80069ca:	2300      	movs	r3, #0
 80069cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <dec_lock+0x3a>
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80069da:	4a0d      	ldr	r2, [pc, #52]	; (8006a10 <dec_lock+0x70>)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	4413      	add	r3, r2
 80069e2:	330c      	adds	r3, #12
 80069e4:	89fa      	ldrh	r2, [r7, #14]
 80069e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <dec_lock+0x5a>
 80069ee:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <dec_lock+0x70>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	4413      	add	r3, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	737b      	strb	r3, [r7, #13]
 80069fe:	e001      	b.n	8006a04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a00:	2302      	movs	r3, #2
 8006a02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a04:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	200000dc 	.word	0x200000dc

08006a14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e010      	b.n	8006a44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a22:	4a0d      	ldr	r2, [pc, #52]	; (8006a58 <clear_lock+0x44>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	4413      	add	r3, r2
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d105      	bne.n	8006a3e <clear_lock+0x2a>
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <clear_lock+0x44>)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	4413      	add	r3, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d9eb      	bls.n	8006a22 <clear_lock+0xe>
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	200000dc 	.word	0x200000dc

08006a5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	78db      	ldrb	r3, [r3, #3]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d034      	beq.n	8006ada <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7858      	ldrb	r0, [r3, #1]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a80:	2301      	movs	r3, #1
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	f7ff fd4e 	bl	8006524 <disk_write>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	e022      	b.n	8006ada <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d217      	bcs.n	8006ada <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	789b      	ldrb	r3, [r3, #2]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e010      	b.n	8006ad4 <sync_window+0x78>
					wsect += fs->fsize;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7858      	ldrb	r0, [r3, #1]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	f7ff fd2b 	bl	8006524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d8eb      	bhi.n	8006ab2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d01b      	beq.n	8006b34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ffad 	bl	8006a5c <sync_window>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7858      	ldrb	r0, [r3, #1]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b16:	2301      	movs	r3, #1
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	f7ff fce3 	bl	80064e4 <disk_read>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff87 	bl	8006a5c <sync_window>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d159      	bne.n	8006c0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d149      	bne.n	8006bf4 <sync_fs+0xb4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d145      	bne.n	8006bf4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	461a      	mov	r2, r3
 8006b74:	2100      	movs	r1, #0
 8006b76:	f7ff fdb1 	bl	80066dc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3338      	adds	r3, #56	; 0x38
 8006b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b82:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fd43 	bl	8006612 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3338      	adds	r3, #56	; 0x38
 8006b90:	4921      	ldr	r1, [pc, #132]	; (8006c18 <sync_fs+0xd8>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fd57 	bl	8006646 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3338      	adds	r3, #56	; 0x38
 8006b9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ba0:	491e      	ldr	r1, [pc, #120]	; (8006c1c <sync_fs+0xdc>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fd4f 	bl	8006646 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3338      	adds	r3, #56	; 0x38
 8006bac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f7ff fd45 	bl	8006646 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3338      	adds	r3, #56	; 0x38
 8006bc0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7ff fd3b 	bl	8006646 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7858      	ldrb	r0, [r3, #1]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	2301      	movs	r3, #1
 8006bea:	f7ff fc9b 	bl	8006524 <disk_write>
			fs->fsi_flag = 0;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fcb1 	bl	8006564 <disk_ioctl>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <sync_fs+0xcc>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	41615252 	.word	0x41615252
 8006c1c:	61417272 	.word	0x61417272

08006c20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	3b02      	subs	r3, #2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d301      	bcc.n	8006c40 <clust2sect+0x20>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e008      	b.n	8006c52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	895b      	ldrh	r3, [r3, #10]
 8006c44:	461a      	mov	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	fb03 f202 	mul.w	r2, r3, r2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	4413      	add	r3, r2
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d904      	bls.n	8006c7c <get_fat+0x20>
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d302      	bcc.n	8006c82 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	e0bb      	b.n	8006dfa <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	f000 8083 	beq.w	8006d98 <get_fat+0x13c>
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f300 80a7 	bgt.w	8006de6 <get_fat+0x18a>
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d002      	beq.n	8006ca2 <get_fat+0x46>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d056      	beq.n	8006d4e <get_fat+0xf2>
 8006ca0:	e0a1      	b.n	8006de6 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	899b      	ldrh	r3, [r3, #12]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f7ff ff0d 	bl	8006ae4 <move_window>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 808d 	bne.w	8006dec <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	60fa      	str	r2, [r7, #12]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	8992      	ldrh	r2, [r2, #12]
 8006cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce0:	fb02 f201 	mul.w	r2, r2, r1
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	899b      	ldrh	r3, [r3, #12]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d00:	4413      	add	r3, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	6938      	ldr	r0, [r7, #16]
 8006d06:	f7ff feed 	bl	8006ae4 <move_window>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d16f      	bne.n	8006df0 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	899b      	ldrh	r3, [r3, #12]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d1c:	fb02 f201 	mul.w	r2, r2, r1
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <get_fat+0xe8>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	091b      	lsrs	r3, r3, #4
 8006d42:	e002      	b.n	8006d4a <get_fat+0xee>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d4a:	617b      	str	r3, [r7, #20]
			break;
 8006d4c:	e055      	b.n	8006dfa <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	899b      	ldrh	r3, [r3, #12]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d62:	4413      	add	r3, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f7ff febc 	bl	8006ae4 <move_window>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d140      	bne.n	8006df4 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	8992      	ldrh	r2, [r2, #12]
 8006d80:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d84:	fb02 f200 	mul.w	r2, r2, r0
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fc07 	bl	80065a0 <ld_word>
 8006d92:	4603      	mov	r3, r0
 8006d94:	617b      	str	r3, [r7, #20]
			break;
 8006d96:	e030      	b.n	8006dfa <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	899b      	ldrh	r3, [r3, #12]
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4619      	mov	r1, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dac:	4413      	add	r3, r2
 8006dae:	4619      	mov	r1, r3
 8006db0:	6938      	ldr	r0, [r7, #16]
 8006db2:	f7ff fe97 	bl	8006ae4 <move_window>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11d      	bne.n	8006df8 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	8992      	ldrh	r2, [r2, #12]
 8006dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dce:	fb02 f200 	mul.w	r2, r2, r0
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff fbf9 	bl	80065ce <ld_dword>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006de2:	617b      	str	r3, [r7, #20]
			break;
 8006de4:	e009      	b.n	8006dfa <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006de6:	2301      	movs	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e006      	b.n	8006dfa <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dec:	bf00      	nop
 8006dee:	e004      	b.n	8006dfa <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006df8:	bf00      	nop
		}
	}

	return val;
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e10:	2302      	movs	r3, #2
 8006e12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	f240 8102 	bls.w	8007020 <put_fat+0x21c>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	f080 80fc 	bcs.w	8007020 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	f000 80b6 	beq.w	8006f9e <put_fat+0x19a>
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	f300 80fd 	bgt.w	8007032 <put_fat+0x22e>
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d003      	beq.n	8006e44 <put_fat+0x40>
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f000 8083 	beq.w	8006f48 <put_fat+0x144>
 8006e42:	e0f6      	b.n	8007032 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4413      	add	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	899b      	ldrh	r3, [r3, #12]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e62:	4413      	add	r3, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fe3c 	bl	8006ae4 <move_window>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80d6 	bne.w	8007024 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	61ba      	str	r2, [r7, #24]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	8992      	ldrh	r2, [r2, #12]
 8006e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e8c:	fb02 f200 	mul.w	r2, r2, r0
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	440b      	add	r3, r1
 8006e94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <put_fat+0xb8>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	b25a      	sxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e001      	b.n	8006ec0 <put_fat+0xbc>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	899b      	ldrh	r3, [r3, #12]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eda:	4413      	add	r3, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fe00 	bl	8006ae4 <move_window>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ee8:	7ffb      	ldrb	r3, [r7, #31]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 809c 	bne.w	8007028 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	899b      	ldrh	r3, [r3, #12]
 8006efa:	461a      	mov	r2, r3
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f02:	fb02 f200 	mul.w	r2, r2, r0
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	440b      	add	r3, r1
 8006f0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <put_fat+0x11a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	e00e      	b.n	8006f3c <put_fat+0x138>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	f023 030f 	bic.w	r3, r3, #15
 8006f28:	b25a      	sxtb	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	70da      	strb	r2, [r3, #3]
			break;
 8006f46:	e074      	b.n	8007032 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	899b      	ldrh	r3, [r3, #12]
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fdbf 	bl	8006ae4 <move_window>
 8006f66:	4603      	mov	r3, r0
 8006f68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f6a:	7ffb      	ldrb	r3, [r7, #31]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d15d      	bne.n	800702c <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	8992      	ldrh	r2, [r2, #12]
 8006f7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f82:	fb02 f200 	mul.w	r2, r2, r0
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	440b      	add	r3, r1
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fb3e 	bl	8006612 <st_word>
			fs->wflag = 1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	70da      	strb	r2, [r3, #3]
			break;
 8006f9c:	e049      	b.n	8007032 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	899b      	ldrh	r3, [r3, #12]
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4619      	mov	r1, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fb2:	4413      	add	r3, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fd94 	bl	8006ae4 <move_window>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d134      	bne.n	8007030 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	8992      	ldrh	r2, [r2, #12]
 8006fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fde:	fb02 f200 	mul.w	r2, r2, r0
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff faf1 	bl	80065ce <ld_dword>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ff2:	4323      	orrs	r3, r4
 8006ff4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	8992      	ldrh	r2, [r2, #12]
 8007004:	fbb3 f0f2 	udiv	r0, r3, r2
 8007008:	fb02 f200 	mul.w	r2, r2, r0
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	440b      	add	r3, r1
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fb17 	bl	8006646 <st_dword>
			fs->wflag = 1;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	70da      	strb	r2, [r3, #3]
			break;
 800701e:	e008      	b.n	8007032 <put_fat+0x22e>
		}
	}
 8007020:	bf00      	nop
 8007022:	e006      	b.n	8007032 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007024:	bf00      	nop
 8007026:	e004      	b.n	8007032 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007028:	bf00      	nop
 800702a:	e002      	b.n	8007032 <put_fat+0x22e>
			if (res != FR_OK) break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007030:	bf00      	nop
	return res;
 8007032:	7ffb      	ldrb	r3, [r7, #31]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3724      	adds	r7, #36	; 0x24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd90      	pop	{r4, r7, pc}

0800703c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d904      	bls.n	8007062 <remove_chain+0x26>
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d301      	bcc.n	8007066 <remove_chain+0x2a>
 8007062:	2302      	movs	r3, #2
 8007064:	e04b      	b.n	80070fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	69b8      	ldr	r0, [r7, #24]
 8007074:	f7ff fec6 	bl	8006e04 <put_fat>
 8007078:	4603      	mov	r3, r0
 800707a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800707c:	7ffb      	ldrb	r3, [r7, #31]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <remove_chain+0x4a>
 8007082:	7ffb      	ldrb	r3, [r7, #31]
 8007084:	e03b      	b.n	80070fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff fde7 	bl	8006c5c <get_fat>
 800708e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d031      	beq.n	80070fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <remove_chain+0x64>
 800709c:	2302      	movs	r3, #2
 800709e:	e02e      	b.n	80070fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d101      	bne.n	80070ac <remove_chain+0x70>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e028      	b.n	80070fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80070ac:	2200      	movs	r2, #0
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	69b8      	ldr	r0, [r7, #24]
 80070b2:	f7ff fea7 	bl	8006e04 <put_fat>
 80070b6:	4603      	mov	r3, r0
 80070b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80070ba:	7ffb      	ldrb	r3, [r7, #31]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <remove_chain+0x88>
 80070c0:	7ffb      	ldrb	r3, [r7, #31]
 80070c2:	e01c      	b.n	80070fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	3b02      	subs	r3, #2
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d20b      	bcs.n	80070ea <remove_chain+0xae>
			fs->free_clst++;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	791b      	ldrb	r3, [r3, #4]
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d3c6      	bcc.n	8007086 <remove_chain+0x4a>
 80070f8:	e000      	b.n	80070fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80070fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b088      	sub	sp, #32
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d004      	beq.n	8007132 <create_chain+0x2c>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	429a      	cmp	r2, r3
 8007130:	d31b      	bcc.n	800716a <create_chain+0x64>
 8007132:	2301      	movs	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e018      	b.n	800716a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fd8e 	bl	8006c5c <get_fat>
 8007140:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d801      	bhi.n	800714c <create_chain+0x46>
 8007148:	2301      	movs	r3, #1
 800714a:	e070      	b.n	800722e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d101      	bne.n	8007158 <create_chain+0x52>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e06a      	b.n	800722e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d201      	bcs.n	8007166 <create_chain+0x60>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e063      	b.n	800722e <create_chain+0x128>
		scl = clst;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	429a      	cmp	r2, r3
 800717c:	d307      	bcc.n	800718e <create_chain+0x88>
				ncl = 2;
 800717e:	2302      	movs	r3, #2
 8007180:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	429a      	cmp	r2, r3
 8007188:	d901      	bls.n	800718e <create_chain+0x88>
 800718a:	2300      	movs	r3, #0
 800718c:	e04f      	b.n	800722e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800718e:	69f9      	ldr	r1, [r7, #28]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fd63 	bl	8006c5c <get_fat>
 8007196:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00e      	beq.n	80071bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d003      	beq.n	80071ac <create_chain+0xa6>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d101      	bne.n	80071b0 <create_chain+0xaa>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e03e      	b.n	800722e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d1da      	bne.n	800716e <create_chain+0x68>
 80071b8:	2300      	movs	r3, #0
 80071ba:	e038      	b.n	800722e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80071bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80071be:	f04f 32ff 	mov.w	r2, #4294967295
 80071c2:	69f9      	ldr	r1, [r7, #28]
 80071c4:	6938      	ldr	r0, [r7, #16]
 80071c6:	f7ff fe1d 	bl	8006e04 <put_fat>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <create_chain+0xe2>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d006      	beq.n	80071e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6938      	ldr	r0, [r7, #16]
 80071e0:	f7ff fe10 	bl	8006e04 <put_fat>
 80071e4:	4603      	mov	r3, r0
 80071e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d116      	bne.n	800721c <create_chain+0x116>
		fs->last_clst = ncl;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	699a      	ldr	r2, [r3, #24]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	3b02      	subs	r3, #2
 80071fe:	429a      	cmp	r2, r3
 8007200:	d804      	bhi.n	800720c <create_chain+0x106>
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	1e5a      	subs	r2, r3, #1
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	b2da      	uxtb	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	711a      	strb	r2, [r3, #4]
 800721a:	e007      	b.n	800722c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d102      	bne.n	8007228 <create_chain+0x122>
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	e000      	b.n	800722a <create_chain+0x124>
 8007228:	2301      	movs	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007236:	b480      	push	{r7}
 8007238:	b087      	sub	sp, #28
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	3304      	adds	r3, #4
 800724c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	899b      	ldrh	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	fbb3 f3f2 	udiv	r3, r3, r2
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	8952      	ldrh	r2, [r2, #10]
 800725e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007262:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	613a      	str	r2, [r7, #16]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <clmt_clust+0x42>
 8007274:	2300      	movs	r3, #0
 8007276:	e010      	b.n	800729a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	429a      	cmp	r2, r3
 800727e:	d307      	bcc.n	8007290 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3304      	adds	r3, #4
 800728c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800728e:	e7e9      	b.n	8007264 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007290:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
}
 800729a:	4618      	mov	r0, r3
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ba:	d204      	bcs.n	80072c6 <dir_sdi+0x22>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e071      	b.n	80073ae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <dir_sdi+0x46>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d902      	bls.n	80072ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10c      	bne.n	800730a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	8912      	ldrh	r2, [r2, #8]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d301      	bcc.n	8007300 <dir_sdi+0x5c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e056      	b.n	80073ae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	61da      	str	r2, [r3, #28]
 8007308:	e02d      	b.n	8007366 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	895b      	ldrh	r3, [r3, #10]
 800730e:	461a      	mov	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	fb03 f302 	mul.w	r3, r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800731a:	e019      	b.n	8007350 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fc9b 	bl	8006c5c <get_fat>
 8007326:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d101      	bne.n	8007334 <dir_sdi+0x90>
 8007330:	2301      	movs	r3, #1
 8007332:	e03c      	b.n	80073ae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d904      	bls.n	8007344 <dir_sdi+0xa0>
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	d301      	bcc.n	8007348 <dir_sdi+0xa4>
 8007344:	2302      	movs	r3, #2
 8007346:	e032      	b.n	80073ae <dir_sdi+0x10a>
			ofs -= csz;
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d2e1      	bcs.n	800731c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	6938      	ldr	r0, [r7, #16]
 800735c:	f7ff fc60 	bl	8006c20 <clust2sect>
 8007360:	4602      	mov	r2, r0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <dir_sdi+0xd4>
 8007374:	2302      	movs	r3, #2
 8007376:	e01a      	b.n	80073ae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	899b      	ldrh	r3, [r3, #12]
 8007380:	4619      	mov	r1, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	fbb3 f3f1 	udiv	r3, r3, r1
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	899b      	ldrh	r3, [r3, #12]
 8007398:	461a      	mov	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a0:	fb02 f200 	mul.w	r2, r2, r0
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	18ca      	adds	r2, r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	3320      	adds	r3, #32
 80073cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <dir_next+0x28>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073dc:	d301      	bcc.n	80073e2 <dir_next+0x2c>
 80073de:	2304      	movs	r3, #4
 80073e0:	e0bb      	b.n	800755a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	899b      	ldrh	r3, [r3, #12]
 80073e6:	461a      	mov	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80073ee:	fb02 f201 	mul.w	r2, r2, r1
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 809d 	bne.w	8007534 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	8912      	ldrh	r2, [r2, #8]
 8007414:	4293      	cmp	r3, r2
 8007416:	f0c0 808d 	bcc.w	8007534 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	61da      	str	r2, [r3, #28]
 8007420:	2304      	movs	r3, #4
 8007422:	e09a      	b.n	800755a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	899b      	ldrh	r3, [r3, #12]
 8007428:	461a      	mov	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	8952      	ldrh	r2, [r2, #10]
 8007434:	3a01      	subs	r2, #1
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d17b      	bne.n	8007534 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fc09 	bl	8006c5c <get_fat>
 800744a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d801      	bhi.n	8007456 <dir_next+0xa0>
 8007452:	2302      	movs	r3, #2
 8007454:	e081      	b.n	800755a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d101      	bne.n	8007462 <dir_next+0xac>
 800745e:	2301      	movs	r3, #1
 8007460:	e07b      	b.n	800755a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	429a      	cmp	r2, r3
 800746a:	d359      	bcc.n	8007520 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	61da      	str	r2, [r3, #28]
 8007478:	2304      	movs	r3, #4
 800747a:	e06e      	b.n	800755a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7ff fe3e 	bl	8007106 <create_chain>
 800748a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <dir_next+0xe0>
 8007492:	2307      	movs	r3, #7
 8007494:	e061      	b.n	800755a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <dir_next+0xea>
 800749c:	2302      	movs	r3, #2
 800749e:	e05c      	b.n	800755a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d101      	bne.n	80074ac <dir_next+0xf6>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e056      	b.n	800755a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff fad5 	bl	8006a5c <sync_window>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <dir_next+0x106>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e04e      	b.n	800755a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	899b      	ldrh	r3, [r3, #12]
 80074c6:	461a      	mov	r2, r3
 80074c8:	2100      	movs	r1, #0
 80074ca:	f7ff f907 	bl	80066dc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074ce:	2300      	movs	r3, #0
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff fba3 	bl	8006c20 <clust2sect>
 80074da:	4602      	mov	r2, r0
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	635a      	str	r2, [r3, #52]	; 0x34
 80074e0:	e012      	b.n	8007508 <dir_next+0x152>
						fs->wflag = 1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fab7 	bl	8006a5c <sync_window>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <dir_next+0x142>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e030      	b.n	800755a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3301      	adds	r3, #1
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	635a      	str	r2, [r3, #52]	; 0x34
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	895b      	ldrh	r3, [r3, #10]
 800750c:	461a      	mov	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4293      	cmp	r3, r2
 8007512:	d3e6      	bcc.n	80074e2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fb79 	bl	8006c20 <clust2sect>
 800752e:	4602      	mov	r2, r0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	899b      	ldrh	r3, [r3, #12]
 8007544:	461a      	mov	r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	fbb3 f0f2 	udiv	r0, r3, r2
 800754c:	fb02 f200 	mul.w	r2, r2, r0
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	18ca      	adds	r2, r1, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fe95 	bl	80072a4 <dir_sdi>
 800757a:	4603      	mov	r3, r0
 800757c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d12b      	bne.n	80075dc <dir_alloc+0x7a>
		n = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	4619      	mov	r1, r3
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff faa8 	bl	8006ae4 <move_window>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d11d      	bne.n	80075da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2be5      	cmp	r3, #229	; 0xe5
 80075a6:	d004      	beq.n	80075b2 <dir_alloc+0x50>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d107      	bne.n	80075c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	3301      	adds	r3, #1
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d102      	bne.n	80075c6 <dir_alloc+0x64>
 80075c0:	e00c      	b.n	80075dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80075c6:	2101      	movs	r1, #1
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fef4 	bl	80073b6 <dir_next>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0d7      	beq.n	8007588 <dir_alloc+0x26>
 80075d8:	e000      	b.n	80075dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80075da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d101      	bne.n	80075e6 <dir_alloc+0x84>
 80075e2:	2307      	movs	r3, #7
 80075e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	331a      	adds	r3, #26
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe ffce 	bl	80065a0 <ld_word>
 8007604:	4603      	mov	r3, r0
 8007606:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d109      	bne.n	8007624 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe ffc3 	bl	80065a0 <ld_word>
 800761a:	4603      	mov	r3, r0
 800761c:	041b      	lsls	r3, r3, #16
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	331a      	adds	r3, #26
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	b292      	uxth	r2, r2
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe ffe4 	bl	8006612 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d109      	bne.n	8007666 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f103 0214 	add.w	r2, r3, #20
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	b29b      	uxth	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fe ffd6 	bl	8006612 <st_word>
	}
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	331a      	adds	r3, #26
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe ff8e 	bl	80065a0 <ld_word>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <cmp_lfn+0x1e>
 800768a:	2300      	movs	r3, #0
 800768c:	e059      	b.n	8007742 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007696:	1e5a      	subs	r2, r3, #1
 8007698:	4613      	mov	r3, r2
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80076a4:	2301      	movs	r3, #1
 80076a6:	81fb      	strh	r3, [r7, #14]
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e033      	b.n	8007716 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80076ae:	4a27      	ldr	r2, [pc, #156]	; (800774c <cmp_lfn+0xdc>)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	4413      	add	r3, r2
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4413      	add	r3, r2
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe ff6f 	bl	80065a0 <ld_word>
 80076c2:	4603      	mov	r3, r0
 80076c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80076c6:	89fb      	ldrh	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2bfe      	cmp	r3, #254	; 0xfe
 80076d0:	d812      	bhi.n	80076f8 <cmp_lfn+0x88>
 80076d2:	89bb      	ldrh	r3, [r7, #12]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 f831 	bl	800973c <ff_wtoupper>
 80076da:	4603      	mov	r3, r0
 80076dc:	461c      	mov	r4, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	617a      	str	r2, [r7, #20]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 f825 	bl	800973c <ff_wtoupper>
 80076f2:	4603      	mov	r3, r0
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d001      	beq.n	80076fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80076f8:	2300      	movs	r3, #0
 80076fa:	e022      	b.n	8007742 <cmp_lfn+0xd2>
			}
			wc = uc;
 80076fc:	89bb      	ldrh	r3, [r7, #12]
 80076fe:	81fb      	strh	r3, [r7, #14]
 8007700:	e006      	b.n	8007710 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007702:	89bb      	ldrh	r3, [r7, #12]
 8007704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007708:	4293      	cmp	r3, r2
 800770a:	d001      	beq.n	8007710 <cmp_lfn+0xa0>
 800770c:	2300      	movs	r3, #0
 800770e:	e018      	b.n	8007742 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	3301      	adds	r3, #1
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b0c      	cmp	r3, #12
 800771a:	d9c8      	bls.n	80076ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <cmp_lfn+0xd0>
 8007728:	89fb      	ldrh	r3, [r7, #14]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <cmp_lfn+0xd0>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <cmp_lfn+0xd0>
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007740:	2301      	movs	r3, #1
}
 8007742:	4618      	mov	r0, r3
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	bd90      	pop	{r4, r7, pc}
 800774a:	bf00      	nop
 800774c:	08009a40 	.word	0x08009a40

08007750 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	4611      	mov	r1, r2
 800775c:	461a      	mov	r2, r3
 800775e:	460b      	mov	r3, r1
 8007760:	71fb      	strb	r3, [r7, #7]
 8007762:	4613      	mov	r3, r2
 8007764:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	330d      	adds	r3, #13
 800776a:	79ba      	ldrb	r2, [r7, #6]
 800776c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	330b      	adds	r3, #11
 8007772:	220f      	movs	r2, #15
 8007774:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	330c      	adds	r3, #12
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	331a      	adds	r3, #26
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe ff44 	bl	8006612 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	1e5a      	subs	r2, r3, #1
 800778e:	4613      	mov	r3, r2
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	82fb      	strh	r3, [r7, #22]
 800779e:	2300      	movs	r3, #0
 80077a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80077a2:	8afb      	ldrh	r3, [r7, #22]
 80077a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d007      	beq.n	80077bc <put_lfn+0x6c>
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	61fa      	str	r2, [r7, #28]
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80077bc:	4a17      	ldr	r2, [pc, #92]	; (800781c <put_lfn+0xcc>)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	4413      	add	r3, r2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe ff1f 	bl	8006612 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80077d4:	8afb      	ldrh	r3, [r7, #22]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <put_lfn+0x90>
 80077da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	3301      	adds	r3, #1
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	d9da      	bls.n	80077a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80077ec:	8afb      	ldrh	r3, [r7, #22]
 80077ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d006      	beq.n	8007804 <put_lfn+0xb4>
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <put_lfn+0xbc>
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	79fa      	ldrb	r2, [r7, #7]
 8007810:	701a      	strb	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	08009a40 	.word	0x08009a40

08007820 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800782e:	220b      	movs	r2, #11
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7fe ff32 	bl	800669c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b05      	cmp	r3, #5
 800783c:	d92b      	bls.n	8007896 <gen_numname+0x76>
		sr = seq;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007842:	e022      	b.n	800788a <gen_numname+0x6a>
			wc = *lfn++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1c9a      	adds	r2, r3, #2
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800784e:	2300      	movs	r3, #0
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 8007852:	e017      	b.n	8007884 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	005a      	lsls	r2, r3, #1
 8007858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	4413      	add	r3, r2
 8007860:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007864:	085b      	lsrs	r3, r3, #1
 8007866:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <gen_numname+0x5e>
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007878:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800787c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	3301      	adds	r3, #1
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b0f      	cmp	r3, #15
 8007888:	d9e4      	bls.n	8007854 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1d8      	bne.n	8007844 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007896:	2307      	movs	r3, #7
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	3330      	adds	r3, #48	; 0x30
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80078aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078ae:	2b39      	cmp	r3, #57	; 0x39
 80078b0:	d904      	bls.n	80078bc <gen_numname+0x9c>
 80078b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078b6:	3307      	adds	r3, #7
 80078b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	1e5a      	subs	r2, r3, #1
 80078c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80078c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078c6:	4413      	add	r3, r2
 80078c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078cc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1de      	bne.n	800789a <gen_numname+0x7a>
	ns[i] = '~';
 80078dc:	f107 0214 	add.w	r2, r7, #20
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	4413      	add	r3, r2
 80078e4:	227e      	movs	r2, #126	; 0x7e
 80078e6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80078e8:	2300      	movs	r3, #0
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	e002      	b.n	80078f4 <gen_numname+0xd4>
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	3301      	adds	r3, #1
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
 80078f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d205      	bcs.n	8007908 <gen_numname+0xe8>
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	4413      	add	r3, r2
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b20      	cmp	r3, #32
 8007906:	d1f2      	bne.n	80078ee <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b07      	cmp	r3, #7
 800790c:	d808      	bhi.n	8007920 <gen_numname+0x100>
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	62ba      	str	r2, [r7, #40]	; 0x28
 8007914:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007918:	4413      	add	r3, r2
 800791a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800791e:	e000      	b.n	8007922 <gen_numname+0x102>
 8007920:	2120      	movs	r1, #32
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	627a      	str	r2, [r7, #36]	; 0x24
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	460a      	mov	r2, r1
 800792e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	2b07      	cmp	r3, #7
 8007934:	d9e8      	bls.n	8007908 <gen_numname+0xe8>
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	3730      	adds	r7, #48	; 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800794c:	230b      	movs	r3, #11
 800794e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	0852      	lsrs	r2, r2, #1
 8007956:	01db      	lsls	r3, r3, #7
 8007958:	4313      	orrs	r3, r2
 800795a:	b2da      	uxtb	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1c59      	adds	r1, r3, #1
 8007960:	6079      	str	r1, [r7, #4]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	4413      	add	r3, r2
 8007966:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3b01      	subs	r3, #1
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1ed      	bne.n	8007950 <sum_sfn+0x10>
	return sum;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800798e:	2100      	movs	r1, #0
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fc87 	bl	80072a4 <dir_sdi>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <dir_find+0x24>
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	e0a9      	b.n	8007af8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	753b      	strb	r3, [r7, #20]
 80079a8:	7d3b      	ldrb	r3, [r7, #20]
 80079aa:	757b      	strb	r3, [r7, #21]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f7ff f892 	bl	8006ae4 <move_window>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f040 8090 	bne.w	8007aec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80079d4:	7dbb      	ldrb	r3, [r7, #22]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <dir_find+0x60>
 80079da:	2304      	movs	r3, #4
 80079dc:	75fb      	strb	r3, [r7, #23]
 80079de:	e08a      	b.n	8007af6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	330b      	adds	r3, #11
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ec:	73fb      	strb	r3, [r7, #15]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80079f4:	7dbb      	ldrb	r3, [r7, #22]
 80079f6:	2be5      	cmp	r3, #229	; 0xe5
 80079f8:	d007      	beq.n	8007a0a <dir_find+0x8a>
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <dir_find+0x98>
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b0f      	cmp	r3, #15
 8007a08:	d006      	beq.n	8007a18 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a0a:	23ff      	movs	r3, #255	; 0xff
 8007a0c:	757b      	strb	r3, [r7, #21]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
 8007a16:	e05e      	b.n	8007ad6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b0f      	cmp	r3, #15
 8007a1c:	d136      	bne.n	8007a8c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d154      	bne.n	8007ad6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00d      	beq.n	8007a52 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	7b5b      	ldrb	r3, [r3, #13]
 8007a3c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007a3e:	7dbb      	ldrb	r3, [r7, #22]
 8007a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a44:	75bb      	strb	r3, [r7, #22]
 8007a46:	7dbb      	ldrb	r3, [r7, #22]
 8007a48:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007a52:	7dba      	ldrb	r2, [r7, #22]
 8007a54:	7d7b      	ldrb	r3, [r7, #21]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d115      	bne.n	8007a86 <dir_find+0x106>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	330d      	adds	r3, #13
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	7d3a      	ldrb	r2, [r7, #20]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d10e      	bne.n	8007a86 <dir_find+0x106>
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7ff fdfc 	bl	8007670 <cmp_lfn>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <dir_find+0x106>
 8007a7e:	7d7b      	ldrb	r3, [r7, #21]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	e000      	b.n	8007a88 <dir_find+0x108>
 8007a86:	23ff      	movs	r3, #255	; 0xff
 8007a88:	757b      	strb	r3, [r7, #21]
 8007a8a:	e024      	b.n	8007ad6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007a8c:	7d7b      	ldrb	r3, [r7, #21]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <dir_find+0x126>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff52 	bl	8007940 <sum_sfn>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	7d3b      	ldrb	r3, [r7, #20]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d024      	beq.n	8007af0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <dir_find+0x14a>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a18      	ldr	r0, [r3, #32]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	220b      	movs	r2, #11
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f7fe fe26 	bl	8006710 <mem_cmp>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007aca:	23ff      	movs	r3, #255	; 0xff
 8007acc:	757b      	strb	r3, [r7, #21]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fc6c 	bl	80073b6 <dir_next>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f43f af65 	beq.w	80079b4 <dir_find+0x34>
 8007aea:	e004      	b.n	8007af6 <dir_find+0x176>
		if (res != FR_OK) break;
 8007aec:	bf00      	nop
 8007aee:	e002      	b.n	8007af6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007af4:	bf00      	nop

	return res;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08c      	sub	sp, #48	; 0x30
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <dir_register+0x20>
 8007b1c:	2306      	movs	r3, #6
 8007b1e:	e0e0      	b.n	8007ce2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007b20:	2300      	movs	r3, #0
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	e002      	b.n	8007b2c <dir_register+0x2c>
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	3301      	adds	r3, #1
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f4      	bne.n	8007b26 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	220c      	movs	r2, #12
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fda7 	bl	800669c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d032      	beq.n	8007bbe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2240      	movs	r2, #64	; 0x40
 8007b5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007b60:	2301      	movs	r3, #1
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b64:	e016      	b.n	8007b94 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	f107 010c 	add.w	r1, r7, #12
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	f7ff fe53 	bl	8007820 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff ff00 	bl	8007980 <dir_find>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	3301      	adds	r3, #1
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	2b63      	cmp	r3, #99	; 0x63
 8007b98:	d9e5      	bls.n	8007b66 <dir_register+0x66>
 8007b9a:	e000      	b.n	8007b9e <dir_register+0x9e>
			if (res != FR_OK) break;
 8007b9c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2b64      	cmp	r3, #100	; 0x64
 8007ba2:	d101      	bne.n	8007ba8 <dir_register+0xa8>
 8007ba4:	2307      	movs	r3, #7
 8007ba6:	e09c      	b.n	8007ce2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d002      	beq.n	8007bb6 <dir_register+0xb6>
 8007bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bb4:	e095      	b.n	8007ce2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007bb6:	7dfa      	ldrb	r2, [r7, #23]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <dir_register+0xd8>
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	330c      	adds	r3, #12
 8007bcc:	4a47      	ldr	r2, [pc, #284]	; (8007cec <dir_register+0x1ec>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	089b      	lsrs	r3, r3, #2
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	e000      	b.n	8007bda <dir_register+0xda>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007bdc:	6a39      	ldr	r1, [r7, #32]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fcbf 	bl	8007562 <dir_alloc>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d148      	bne.n	8007c84 <dir_register+0x184>
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	623b      	str	r3, [r7, #32]
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d042      	beq.n	8007c84 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	015b      	lsls	r3, r3, #5
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fb4a 	bl	80072a4 <dir_sdi>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d132      	bne.n	8007c84 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3324      	adds	r3, #36	; 0x24
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fe8c 	bl	8007940 <sum_sfn>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	4619      	mov	r1, r3
 8007c32:	69f8      	ldr	r0, [r7, #28]
 8007c34:	f7fe ff56 	bl	8006ae4 <move_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11d      	bne.n	8007c82 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	6918      	ldr	r0, [r3, #16]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a19      	ldr	r1, [r3, #32]
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	7efb      	ldrb	r3, [r7, #27]
 8007c54:	f7ff fd7c 	bl	8007750 <put_lfn>
				fs->wflag = 1;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fba8 	bl	80073b6 <dir_next>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <dir_register+0x184>
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	623b      	str	r3, [r7, #32]
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1d5      	bne.n	8007c2c <dir_register+0x12c>
 8007c80:	e000      	b.n	8007c84 <dir_register+0x184>
				if (res != FR_OK) break;
 8007c82:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d128      	bne.n	8007cde <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	4619      	mov	r1, r3
 8007c92:	69f8      	ldr	r0, [r7, #28]
 8007c94:	f7fe ff26 	bl	8006ae4 <move_window>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d11b      	bne.n	8007cde <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	2220      	movs	r2, #32
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fd14 	bl	80066dc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a18      	ldr	r0, [r3, #32]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3324      	adds	r3, #36	; 0x24
 8007cbc:	220b      	movs	r2, #11
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	f7fe fcec 	bl	800669c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	f002 0218 	and.w	r2, r2, #24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3730      	adds	r7, #48	; 0x30
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	4ec4ec4f 	.word	0x4ec4ec4f

08007cf0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	61ba      	str	r2, [r7, #24]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d20:	2b1f      	cmp	r3, #31
 8007d22:	d940      	bls.n	8007da6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d26:	2b2f      	cmp	r3, #47	; 0x2f
 8007d28:	d006      	beq.n	8007d38 <create_name+0x48>
 8007d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d2c:	2b5c      	cmp	r3, #92	; 0x5c
 8007d2e:	d110      	bne.n	8007d52 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d30:	e002      	b.n	8007d38 <create_name+0x48>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b2f      	cmp	r3, #47	; 0x2f
 8007d42:	d0f6      	beq.n	8007d32 <create_name+0x42>
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	4413      	add	r3, r2
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8007d4e:	d0f0      	beq.n	8007d32 <create_name+0x42>
			break;
 8007d50:	e02a      	b.n	8007da8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2bfe      	cmp	r3, #254	; 0xfe
 8007d56:	d901      	bls.n	8007d5c <create_name+0x6c>
 8007d58:	2306      	movs	r3, #6
 8007d5a:	e177      	b.n	800804c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d64:	2101      	movs	r1, #1
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 fcae 	bl	80096c8 <ff_convert>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <create_name+0x8a>
 8007d76:	2306      	movs	r3, #6
 8007d78:	e168      	b.n	800804c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d7e:	d809      	bhi.n	8007d94 <create_name+0xa4>
 8007d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d82:	4619      	mov	r1, r3
 8007d84:	48b3      	ldr	r0, [pc, #716]	; (8008054 <create_name+0x364>)
 8007d86:	f7fe fce9 	bl	800675c <chk_chr>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <create_name+0xa4>
 8007d90:	2306      	movs	r3, #6
 8007d92:	e15b      	b.n	800804c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	617a      	str	r2, [r7, #20]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007da2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007da4:	e7b4      	b.n	8007d10 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007da6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	441a      	add	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db4:	2b1f      	cmp	r3, #31
 8007db6:	d801      	bhi.n	8007dbc <create_name+0xcc>
 8007db8:	2304      	movs	r3, #4
 8007dba:	e000      	b.n	8007dbe <create_name+0xce>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007dc2:	e011      	b.n	8007de8 <create_name+0xf8>
		w = lfn[di - 1];
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d002      	beq.n	8007de2 <create_name+0xf2>
 8007ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dde:	2b2e      	cmp	r3, #46	; 0x2e
 8007de0:	d106      	bne.n	8007df0 <create_name+0x100>
		di--;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1ea      	bne.n	8007dc4 <create_name+0xd4>
 8007dee:	e000      	b.n	8007df2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007df0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <create_name+0x118>
 8007e04:	2306      	movs	r3, #6
 8007e06:	e121      	b.n	800804c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	220b      	movs	r2, #11
 8007e0e:	2120      	movs	r1, #32
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fc63 	bl	80066dc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	e002      	b.n	8007e22 <create_name+0x132>
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d0f5      	beq.n	8007e1c <create_name+0x12c>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e3c:	d0ee      	beq.n	8007e1c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <create_name+0x168>
 8007e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e48:	f043 0303 	orr.w	r3, r3, #3
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007e50:	e002      	b.n	8007e58 <create_name+0x168>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <create_name+0x182>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	3b01      	subs	r3, #1
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e70:	d1ef      	bne.n	8007e52 <create_name+0x162>

	i = b = 0; ni = 8;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e78:	2300      	movs	r3, #0
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	61ba      	str	r2, [r7, #24]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8090 	beq.w	8007fb8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d006      	beq.n	8007eac <create_name+0x1bc>
 8007e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea2:	d10a      	bne.n	8007eba <create_name+0x1ca>
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d006      	beq.n	8007eba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	f043 0303 	orr.w	r3, r3, #3
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007eb8:	e07d      	b.n	8007fb6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007eba:	6a3a      	ldr	r2, [r7, #32]
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d203      	bcs.n	8007eca <create_name+0x1da>
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d123      	bne.n	8007f12 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	2b0b      	cmp	r3, #11
 8007ece:	d106      	bne.n	8007ede <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed4:	f043 0303 	orr.w	r3, r3, #3
 8007ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007edc:	e06f      	b.n	8007fbe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d005      	beq.n	8007ef2 <create_name+0x202>
 8007ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eea:	f043 0303 	orr.w	r3, r3, #3
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d860      	bhi.n	8007fbc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	2308      	movs	r3, #8
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	230b      	movs	r3, #11
 8007f04:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f10:	e051      	b.n	8007fb6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f14:	2b7f      	cmp	r3, #127	; 0x7f
 8007f16:	d914      	bls.n	8007f42 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fbd3 	bl	80096c8 <ff_convert>
 8007f22:	4603      	mov	r3, r0
 8007f24:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <create_name+0x246>
 8007f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f2e:	3b80      	subs	r3, #128	; 0x80
 8007f30:	4a49      	ldr	r2, [pc, #292]	; (8008058 <create_name+0x368>)
 8007f32:	5cd3      	ldrb	r3, [r2, r3]
 8007f34:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f3a:	f043 0302 	orr.w	r3, r3, #2
 8007f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <create_name+0x268>
 8007f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4843      	ldr	r0, [pc, #268]	; (800805c <create_name+0x36c>)
 8007f4e:	f7fe fc05 	bl	800675c <chk_chr>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f58:	235f      	movs	r3, #95	; 0x5f
 8007f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f60:	f043 0303 	orr.w	r3, r3, #3
 8007f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f68:	e01b      	b.n	8007fa2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d909      	bls.n	8007f84 <create_name+0x294>
 8007f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f72:	2b5a      	cmp	r3, #90	; 0x5a
 8007f74:	d806      	bhi.n	8007f84 <create_name+0x294>
					b |= 2;
 8007f76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f7a:	f043 0302 	orr.w	r3, r3, #2
 8007f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f82:	e00e      	b.n	8007fa2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f86:	2b60      	cmp	r3, #96	; 0x60
 8007f88:	d90b      	bls.n	8007fa2 <create_name+0x2b2>
 8007f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f8c:	2b7a      	cmp	r3, #122	; 0x7a
 8007f8e:	d808      	bhi.n	8007fa2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f94:	f043 0301 	orr.w	r3, r3, #1
 8007f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f9e:	3b20      	subs	r3, #32
 8007fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	623a      	str	r2, [r7, #32]
 8007fa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007faa:	b2d1      	uxtb	r1, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4413      	add	r3, r2
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007fb6:	e763      	b.n	8007e80 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007fb8:	bf00      	nop
 8007fba:	e000      	b.n	8007fbe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007fbc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fc4:	2be5      	cmp	r3, #229	; 0xe5
 8007fc6:	d103      	bne.n	8007fd0 <create_name+0x2e0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d104      	bne.n	8007fe0 <create_name+0x2f0>
 8007fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fe4:	f003 030c 	and.w	r3, r3, #12
 8007fe8:	2b0c      	cmp	r3, #12
 8007fea:	d005      	beq.n	8007ff8 <create_name+0x308>
 8007fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d105      	bne.n	8008004 <create_name+0x314>
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ffc:	f043 0302 	orr.w	r3, r3, #2
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d117      	bne.n	8008040 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d105      	bne.n	8008028 <create_name+0x338>
 800801c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008020:	f043 0310 	orr.w	r3, r3, #16
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800802c:	f003 030c 	and.w	r3, r3, #12
 8008030:	2b04      	cmp	r3, #4
 8008032:	d105      	bne.n	8008040 <create_name+0x350>
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008038:	f043 0308 	orr.w	r3, r3, #8
 800803c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008046:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800804a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800804c:	4618      	mov	r0, r3
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	08009924 	.word	0x08009924
 8008058:	080099c0 	.word	0x080099c0
 800805c:	08009930 	.word	0x08009930

08008060 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008074:	e002      	b.n	800807c <follow_path+0x1c>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b2f      	cmp	r3, #47	; 0x2f
 8008082:	d0f8      	beq.n	8008076 <follow_path+0x16>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b5c      	cmp	r3, #92	; 0x5c
 800808a:	d0f4      	beq.n	8008076 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2200      	movs	r2, #0
 8008090:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b1f      	cmp	r3, #31
 8008098:	d80a      	bhi.n	80080b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2280      	movs	r2, #128	; 0x80
 800809e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff f8fd 	bl	80072a4 <dir_sdi>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]
 80080ae:	e048      	b.n	8008142 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080b0:	463b      	mov	r3, r7
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff fe1b 	bl	8007cf0 <create_name>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d139      	bne.n	8008138 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fc5b 	bl	8007980 <dir_find>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d12c      	bne.n	800813c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d127      	bne.n	800813c <follow_path+0xdc>
 80080ec:	2305      	movs	r3, #5
 80080ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80080f0:	e024      	b.n	800813c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d121      	bne.n	8008140 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	799b      	ldrb	r3, [r3, #6]
 8008100:	f003 0310 	and.w	r3, r3, #16
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008108:	2305      	movs	r3, #5
 800810a:	75fb      	strb	r3, [r7, #23]
 800810c:	e019      	b.n	8008142 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	8992      	ldrh	r2, [r2, #12]
 800811c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008120:	fb02 f200 	mul.w	r2, r2, r0
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	440b      	add	r3, r1
 8008128:	4619      	mov	r1, r3
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff fa60 	bl	80075f0 <ld_clust>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008136:	e7bb      	b.n	80080b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008138:	bf00      	nop
 800813a:	e002      	b.n	8008142 <follow_path+0xe2>
				break;
 800813c:	bf00      	nop
 800813e:	e000      	b.n	8008142 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008140:	bf00      	nop
			}
		}
	}

	return res;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008154:	f04f 33ff 	mov.w	r3, #4294967295
 8008158:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d031      	beq.n	80081c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e002      	b.n	8008170 <get_ldnumber+0x24>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	3301      	adds	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b1f      	cmp	r3, #31
 8008176:	d903      	bls.n	8008180 <get_ldnumber+0x34>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b3a      	cmp	r3, #58	; 0x3a
 800817e:	d1f4      	bne.n	800816a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b3a      	cmp	r3, #58	; 0x3a
 8008186:	d11c      	bne.n	80081c2 <get_ldnumber+0x76>
			tp = *path;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	60fa      	str	r2, [r7, #12]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	3b30      	subs	r3, #48	; 0x30
 8008198:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b09      	cmp	r3, #9
 800819e:	d80e      	bhi.n	80081be <get_ldnumber+0x72>
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d10a      	bne.n	80081be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d107      	bne.n	80081be <get_ldnumber+0x72>
					vol = (int)i;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	3301      	adds	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	e002      	b.n	80081c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80081c2:	2300      	movs	r3, #0
 80081c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80081c6:	693b      	ldr	r3, [r7, #16]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
	...

080081d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	70da      	strb	r2, [r3, #3]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fe fc78 	bl	8006ae4 <move_window>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <check_fs+0x2a>
 80081fa:	2304      	movs	r3, #4
 80081fc:	e038      	b.n	8008270 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3338      	adds	r3, #56	; 0x38
 8008202:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe f9ca 	bl	80065a0 <ld_word>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008214:	429a      	cmp	r2, r3
 8008216:	d001      	beq.n	800821c <check_fs+0x48>
 8008218:	2303      	movs	r3, #3
 800821a:	e029      	b.n	8008270 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008222:	2be9      	cmp	r3, #233	; 0xe9
 8008224:	d009      	beq.n	800823a <check_fs+0x66>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800822c:	2beb      	cmp	r3, #235	; 0xeb
 800822e:	d11e      	bne.n	800826e <check_fs+0x9a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008236:	2b90      	cmp	r3, #144	; 0x90
 8008238:	d119      	bne.n	800826e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3338      	adds	r3, #56	; 0x38
 800823e:	3336      	adds	r3, #54	; 0x36
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe f9c4 	bl	80065ce <ld_dword>
 8008246:	4603      	mov	r3, r0
 8008248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800824c:	4a0a      	ldr	r2, [pc, #40]	; (8008278 <check_fs+0xa4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d101      	bne.n	8008256 <check_fs+0x82>
 8008252:	2300      	movs	r3, #0
 8008254:	e00c      	b.n	8008270 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3338      	adds	r3, #56	; 0x38
 800825a:	3352      	adds	r3, #82	; 0x52
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe f9b6 	bl	80065ce <ld_dword>
 8008262:	4603      	mov	r3, r0
 8008264:	4a05      	ldr	r2, [pc, #20]	; (800827c <check_fs+0xa8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d101      	bne.n	800826e <check_fs+0x9a>
 800826a:	2300      	movs	r3, #0
 800826c:	e000      	b.n	8008270 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800826e:	2302      	movs	r3, #2
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	00544146 	.word	0x00544146
 800827c:	33544146 	.word	0x33544146

08008280 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b096      	sub	sp, #88	; 0x58
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff ff59 	bl	800814c <get_ldnumber>
 800829a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da01      	bge.n	80082a6 <find_volume+0x26>
 80082a2:	230b      	movs	r3, #11
 80082a4:	e268      	b.n	8008778 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082a6:	4ab0      	ldr	r2, [pc, #704]	; (8008568 <find_volume+0x2e8>)
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <find_volume+0x3a>
 80082b6:	230c      	movs	r3, #12
 80082b8:	e25e      	b.n	8008778 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01a      	beq.n	8008306 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe f8c5 	bl	8006464 <disk_status>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80082e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <find_volume+0x82>
 80082f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80082fe:	230a      	movs	r3, #10
 8008300:	e23a      	b.n	8008778 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8008302:	2300      	movs	r3, #0
 8008304:	e238      	b.n	8008778 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830e:	b2da      	uxtb	r2, r3
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe f8bd 	bl	8006498 <disk_initialize>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008330:	2303      	movs	r3, #3
 8008332:	e221      	b.n	8008778 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <find_volume+0xca>
 800833a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008346:	230a      	movs	r3, #10
 8008348:	e216      	b.n	8008778 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	7858      	ldrb	r0, [r3, #1]
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	330c      	adds	r3, #12
 8008352:	461a      	mov	r2, r3
 8008354:	2102      	movs	r1, #2
 8008356:	f7fe f905 	bl	8006564 <disk_ioctl>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <find_volume+0xe4>
 8008360:	2301      	movs	r3, #1
 8008362:	e209      	b.n	8008778 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	899b      	ldrh	r3, [r3, #12]
 8008368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836c:	d80d      	bhi.n	800838a <find_volume+0x10a>
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	899b      	ldrh	r3, [r3, #12]
 8008372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008376:	d308      	bcc.n	800838a <find_volume+0x10a>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	899b      	ldrh	r3, [r3, #12]
 800837c:	461a      	mov	r2, r3
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	899b      	ldrh	r3, [r3, #12]
 8008382:	3b01      	subs	r3, #1
 8008384:	4013      	ands	r3, r2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <find_volume+0x10e>
 800838a:	2301      	movs	r3, #1
 800838c:	e1f4      	b.n	8008778 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008396:	f7ff ff1d 	bl	80081d4 <check_fs>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d14b      	bne.n	8008440 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083a8:	2300      	movs	r3, #0
 80083aa:	643b      	str	r3, [r7, #64]	; 0x40
 80083ac:	e01f      	b.n	80083ee <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80083bc:	4413      	add	r3, r2
 80083be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	3304      	adds	r3, #4
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d006      	beq.n	80083d8 <find_volume+0x158>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	3308      	adds	r3, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe f8fd 	bl	80065ce <ld_dword>
 80083d4:	4602      	mov	r2, r0
 80083d6:	e000      	b.n	80083da <find_volume+0x15a>
 80083d8:	2200      	movs	r2, #0
 80083da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80083e2:	440b      	add	r3, r1
 80083e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ea:	3301      	adds	r3, #1
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
 80083ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d9dc      	bls.n	80083ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80083f4:	2300      	movs	r3, #0
 80083f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80083f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <find_volume+0x184>
 80083fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008400:	3b01      	subs	r3, #1
 8008402:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800840c:	4413      	add	r3, r2
 800840e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008412:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <find_volume+0x1a6>
 800841a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800841c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800841e:	f7ff fed9 	bl	80081d4 <check_fs>
 8008422:	4603      	mov	r3, r0
 8008424:	e000      	b.n	8008428 <find_volume+0x1a8>
 8008426:	2303      	movs	r3, #3
 8008428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800842c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008430:	2b01      	cmp	r3, #1
 8008432:	d905      	bls.n	8008440 <find_volume+0x1c0>
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	3301      	adds	r3, #1
 8008438:	643b      	str	r3, [r7, #64]	; 0x40
 800843a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843c:	2b03      	cmp	r3, #3
 800843e:	d9e1      	bls.n	8008404 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008444:	2b04      	cmp	r3, #4
 8008446:	d101      	bne.n	800844c <find_volume+0x1cc>
 8008448:	2301      	movs	r3, #1
 800844a:	e195      	b.n	8008778 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800844c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008450:	2b01      	cmp	r3, #1
 8008452:	d901      	bls.n	8008458 <find_volume+0x1d8>
 8008454:	230d      	movs	r3, #13
 8008456:	e18f      	b.n	8008778 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	3338      	adds	r3, #56	; 0x38
 800845c:	330b      	adds	r3, #11
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe f89e 	bl	80065a0 <ld_word>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	899b      	ldrh	r3, [r3, #12]
 800846c:	429a      	cmp	r2, r3
 800846e:	d001      	beq.n	8008474 <find_volume+0x1f4>
 8008470:	230d      	movs	r3, #13
 8008472:	e181      	b.n	8008778 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	3338      	adds	r3, #56	; 0x38
 8008478:	3316      	adds	r3, #22
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe f890 	bl	80065a0 <ld_word>
 8008480:	4603      	mov	r3, r0
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d106      	bne.n	8008498 <find_volume+0x218>
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	3338      	adds	r3, #56	; 0x38
 800848e:	3324      	adds	r3, #36	; 0x24
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe f89c 	bl	80065ce <ld_dword>
 8008496:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800849c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d005      	beq.n	80084bc <find_volume+0x23c>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	789b      	ldrb	r3, [r3, #2]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d001      	beq.n	80084bc <find_volume+0x23c>
 80084b8:	230d      	movs	r3, #13
 80084ba:	e15d      	b.n	8008778 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
 80084c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <find_volume+0x270>
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	895b      	ldrh	r3, [r3, #10]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	895b      	ldrh	r3, [r3, #10]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <find_volume+0x274>
 80084f0:	230d      	movs	r3, #13
 80084f2:	e141      	b.n	8008778 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3338      	adds	r3, #56	; 0x38
 80084f8:	3311      	adds	r3, #17
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe f850 	bl	80065a0 <ld_word>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	891b      	ldrh	r3, [r3, #8]
 800850c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850e:	8992      	ldrh	r2, [r2, #12]
 8008510:	0952      	lsrs	r2, r2, #5
 8008512:	b292      	uxth	r2, r2
 8008514:	fbb3 f1f2 	udiv	r1, r3, r2
 8008518:	fb02 f201 	mul.w	r2, r2, r1
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <find_volume+0x2a8>
 8008524:	230d      	movs	r3, #13
 8008526:	e127      	b.n	8008778 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	3338      	adds	r3, #56	; 0x38
 800852c:	3313      	adds	r3, #19
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f836 	bl	80065a0 <ld_word>
 8008534:	4603      	mov	r3, r0
 8008536:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <find_volume+0x2cc>
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	3338      	adds	r3, #56	; 0x38
 8008542:	3320      	adds	r3, #32
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe f842 	bl	80065ce <ld_dword>
 800854a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	3338      	adds	r3, #56	; 0x38
 8008550:	330e      	adds	r3, #14
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe f824 	bl	80065a0 <ld_word>
 8008558:	4603      	mov	r3, r0
 800855a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800855c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <find_volume+0x2ec>
 8008562:	230d      	movs	r3, #13
 8008564:	e108      	b.n	8008778 <find_volume+0x4f8>
 8008566:	bf00      	nop
 8008568:	200000d4 	.word	0x200000d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800856c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800856e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008570:	4413      	add	r3, r2
 8008572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008574:	8911      	ldrh	r1, [r2, #8]
 8008576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008578:	8992      	ldrh	r2, [r2, #12]
 800857a:	0952      	lsrs	r2, r2, #5
 800857c:	b292      	uxth	r2, r2
 800857e:	fbb1 f2f2 	udiv	r2, r1, r2
 8008582:	b292      	uxth	r2, r2
 8008584:	4413      	add	r3, r2
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	429a      	cmp	r2, r3
 800858e:	d201      	bcs.n	8008594 <find_volume+0x314>
 8008590:	230d      	movs	r3, #13
 8008592:	e0f1      	b.n	8008778 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800859c:	8952      	ldrh	r2, [r2, #10]
 800859e:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <find_volume+0x32e>
 80085aa:	230d      	movs	r3, #13
 80085ac:	e0e4      	b.n	8008778 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80085ae:	2303      	movs	r3, #3
 80085b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d802      	bhi.n	80085c4 <find_volume+0x344>
 80085be:	2302      	movs	r3, #2
 80085c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d802      	bhi.n	80085d4 <find_volume+0x354>
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	1c9a      	adds	r2, r3, #2
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80085e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e6:	441a      	add	r2, r3
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80085ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	441a      	add	r2, r3
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80085f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d11e      	bne.n	800863c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3338      	adds	r3, #56	; 0x38
 8008602:	332a      	adds	r3, #42	; 0x2a
 8008604:	4618      	mov	r0, r3
 8008606:	f7fd ffcb 	bl	80065a0 <ld_word>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <find_volume+0x394>
 8008610:	230d      	movs	r3, #13
 8008612:	e0b1      	b.n	8008778 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	891b      	ldrh	r3, [r3, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <find_volume+0x3a0>
 800861c:	230d      	movs	r3, #13
 800861e:	e0ab      	b.n	8008778 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	3338      	adds	r3, #56	; 0x38
 8008624:	332c      	adds	r3, #44	; 0x2c
 8008626:	4618      	mov	r0, r3
 8008628:	f7fd ffd1 	bl	80065ce <ld_dword>
 800862c:	4602      	mov	r2, r0
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	647b      	str	r3, [r7, #68]	; 0x44
 800863a:	e01f      	b.n	800867c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	891b      	ldrh	r3, [r3, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <find_volume+0x3c8>
 8008644:	230d      	movs	r3, #13
 8008646:	e097      	b.n	8008778 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800864c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864e:	441a      	add	r2, r3
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008658:	2b02      	cmp	r3, #2
 800865a:	d103      	bne.n	8008664 <find_volume+0x3e4>
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	e00a      	b.n	800867a <find_volume+0x3fa>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	4613      	mov	r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	4413      	add	r3, r2
 800866e:	085a      	lsrs	r2, r3, #1
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	899b      	ldrh	r3, [r3, #12]
 8008684:	4619      	mov	r1, r3
 8008686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008688:	440b      	add	r3, r1
 800868a:	3b01      	subs	r3, #1
 800868c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800868e:	8989      	ldrh	r1, [r1, #12]
 8008690:	fbb3 f3f1 	udiv	r3, r3, r1
 8008694:	429a      	cmp	r2, r3
 8008696:	d201      	bcs.n	800869c <find_volume+0x41c>
 8008698:	230d      	movs	r3, #13
 800869a:	e06d      	b.n	8008778 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	619a      	str	r2, [r3, #24]
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	2280      	movs	r2, #128	; 0x80
 80086b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d149      	bne.n	800874e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	3338      	adds	r3, #56	; 0x38
 80086be:	3330      	adds	r3, #48	; 0x30
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fd ff6d 	bl	80065a0 <ld_word>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d140      	bne.n	800874e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ce:	3301      	adds	r3, #1
 80086d0:	4619      	mov	r1, r3
 80086d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086d4:	f7fe fa06 	bl	8006ae4 <move_window>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d137      	bne.n	800874e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	2200      	movs	r2, #0
 80086e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	3338      	adds	r3, #56	; 0x38
 80086e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd ff57 	bl	80065a0 <ld_word>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d127      	bne.n	800874e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	3338      	adds	r3, #56	; 0x38
 8008702:	4618      	mov	r0, r3
 8008704:	f7fd ff63 	bl	80065ce <ld_dword>
 8008708:	4603      	mov	r3, r0
 800870a:	4a1d      	ldr	r2, [pc, #116]	; (8008780 <find_volume+0x500>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d11e      	bne.n	800874e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	3338      	adds	r3, #56	; 0x38
 8008714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd ff58 	bl	80065ce <ld_dword>
 800871e:	4603      	mov	r3, r0
 8008720:	4a18      	ldr	r2, [pc, #96]	; (8008784 <find_volume+0x504>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d113      	bne.n	800874e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	3338      	adds	r3, #56	; 0x38
 800872a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800872e:	4618      	mov	r0, r3
 8008730:	f7fd ff4d 	bl	80065ce <ld_dword>
 8008734:	4602      	mov	r2, r0
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	3338      	adds	r3, #56	; 0x38
 800873e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008742:	4618      	mov	r0, r3
 8008744:	f7fd ff43 	bl	80065ce <ld_dword>
 8008748:	4602      	mov	r2, r0
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008754:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <find_volume+0x508>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <find_volume+0x508>)
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <find_volume+0x508>)
 8008764:	881a      	ldrh	r2, [r3, #0]
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	4a07      	ldr	r2, [pc, #28]	; (800878c <find_volume+0x50c>)
 800876e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008772:	f7fe f94f 	bl	8006a14 <clear_lock>
#endif
	return FR_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3758      	adds	r7, #88	; 0x58
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	41615252 	.word	0x41615252
 8008784:	61417272 	.word	0x61417272
 8008788:	200000d8 	.word	0x200000d8
 800878c:	200000fc 	.word	0x200000fc

08008790 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800879a:	2309      	movs	r3, #9
 800879c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01c      	beq.n	80087de <validate+0x4e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d018      	beq.n	80087de <validate+0x4e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d013      	beq.n	80087de <validate+0x4e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	889a      	ldrh	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	88db      	ldrh	r3, [r3, #6]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d10c      	bne.n	80087de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fd fe4a 	bl	8006464 <disk_status>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <validate+0x4e>
			res = FR_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <validate+0x5a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	e000      	b.n	80087ec <validate+0x5c>
 80087ea:	2300      	movs	r3, #0
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	6013      	str	r3, [r2, #0]
	return res;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fc9a 	bl	800814c <get_ldnumber>
 8008818:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da01      	bge.n	8008824 <f_mount+0x28>
 8008820:	230b      	movs	r3, #11
 8008822:	e02b      	b.n	800887c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008824:	4a17      	ldr	r2, [pc, #92]	; (8008884 <f_mount+0x88>)
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008834:	69b8      	ldr	r0, [r7, #24]
 8008836:	f7fe f8ed 	bl	8006a14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	490d      	ldr	r1, [pc, #52]	; (8008884 <f_mount+0x88>)
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <f_mount+0x66>
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d001      	beq.n	8008866 <f_mount+0x6a>
 8008862:	2300      	movs	r3, #0
 8008864:	e00a      	b.n	800887c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008866:	f107 010c 	add.w	r1, r7, #12
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	2200      	movs	r2, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fd05 	bl	8008280 <find_volume>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800887a:	7dfb      	ldrb	r3, [r7, #23]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200000d4 	.word	0x200000d4

08008888 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b09a      	sub	sp, #104	; 0x68
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <f_open+0x18>
 800889c:	2309      	movs	r3, #9
 800889e:	e1bb      	b.n	8008c18 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80088a8:	79fa      	ldrb	r2, [r7, #7]
 80088aa:	f107 0114 	add.w	r1, r7, #20
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fce4 	bl	8008280 <find_volume>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80088be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 819f 	bne.w	8008c06 <f_open+0x37e>
		dj.obj.fs = fs;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	f107 0318 	add.w	r3, r7, #24
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fbc3 	bl	8008060 <follow_path>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d11a      	bne.n	800891e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80088e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da03      	bge.n	80088fa <f_open+0x72>
				res = FR_INVALID_NAME;
 80088f2:	2306      	movs	r3, #6
 80088f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80088f8:	e011      	b.n	800891e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	bf14      	ite	ne
 8008904:	2301      	movne	r3, #1
 8008906:	2300      	moveq	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	f107 0318 	add.w	r3, r7, #24
 8008910:	4611      	mov	r1, r2
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd ff3c 	bl	8006790 <chk_lock>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f003 031c 	and.w	r3, r3, #28
 8008924:	2b00      	cmp	r3, #0
 8008926:	d07f      	beq.n	8008a28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800892c:	2b00      	cmp	r3, #0
 800892e:	d017      	beq.n	8008960 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008930:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008934:	2b04      	cmp	r3, #4
 8008936:	d10e      	bne.n	8008956 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008938:	f7fd ff84 	bl	8006844 <enq_lock>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d006      	beq.n	8008950 <f_open+0xc8>
 8008942:	f107 0318 	add.w	r3, r7, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff f8da 	bl	8007b00 <dir_register>
 800894c:	4603      	mov	r3, r0
 800894e:	e000      	b.n	8008952 <f_open+0xca>
 8008950:	2312      	movs	r3, #18
 8008952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	f043 0308 	orr.w	r3, r3, #8
 800895c:	71fb      	strb	r3, [r7, #7]
 800895e:	e010      	b.n	8008982 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008960:	7fbb      	ldrb	r3, [r7, #30]
 8008962:	f003 0311 	and.w	r3, r3, #17
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <f_open+0xea>
					res = FR_DENIED;
 800896a:	2307      	movs	r3, #7
 800896c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008970:	e007      	b.n	8008982 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <f_open+0xfa>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008986:	2b00      	cmp	r3, #0
 8008988:	d168      	bne.n	8008a5c <f_open+0x1d4>
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d063      	beq.n	8008a5c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008994:	f7fd fd0a 	bl	80063ac <get_fattime>
 8008998:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	330e      	adds	r3, #14
 800899e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fe50 	bl	8006646 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	3316      	adds	r3, #22
 80089aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fe4a 	bl	8006646 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	330b      	adds	r3, #11
 80089b6:	2220      	movs	r2, #32
 80089b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe15 	bl	80075f0 <ld_clust>
 80089c6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089cc:	2200      	movs	r2, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fe2d 	bl	800762e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	331c      	adds	r3, #28
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd fe33 	bl	8006646 <st_dword>
					fs->wflag = 1;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2201      	movs	r2, #1
 80089e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80089e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d037      	beq.n	8008a5c <f_open+0x1d4>
						dw = fs->winsect;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80089f2:	f107 0318 	add.w	r3, r7, #24
 80089f6:	2200      	movs	r2, #0
 80089f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fb1e 	bl	800703c <remove_chain>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008a06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d126      	bne.n	8008a5c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe f866 	bl	8006ae4 <move_window>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a22:	3a01      	subs	r2, #1
 8008a24:	615a      	str	r2, [r3, #20]
 8008a26:	e019      	b.n	8008a5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008a28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d115      	bne.n	8008a5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008a30:	7fbb      	ldrb	r3, [r7, #30]
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008a40:	e00c      	b.n	8008a5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <f_open+0x1d4>
 8008a4c:	7fbb      	ldrb	r3, [r7, #30]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <f_open+0x1d4>
						res = FR_DENIED;
 8008a56:	2307      	movs	r3, #7
 8008a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d128      	bne.n	8008ab6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	f023 0301 	bic.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	bf14      	ite	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	2300      	moveq	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fd fef1 	bl	8006884 <inc_lock>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <f_open+0x22e>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80a3 	bne.w	8008c06 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fd92 	bl	80075f0 <ld_clust>
 8008acc:	4602      	mov	r2, r0
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	331c      	adds	r3, #28
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fd fd79 	bl	80065ce <ld_dword>
 8008adc:	4602      	mov	r2, r0
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	88da      	ldrh	r2, [r3, #6]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	79fa      	ldrb	r2, [r7, #7]
 8008afa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fd fddf 	bl	80066dc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	f003 0320 	and.w	r3, r3, #32
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d06e      	beq.n	8008c06 <f_open+0x37e>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d06a      	beq.n	8008c06 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	895b      	ldrh	r3, [r3, #10]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	899b      	ldrh	r3, [r3, #12]
 8008b42:	fb03 f302 	mul.w	r3, r3, r2
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b54:	e016      	b.n	8008b84 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe f87e 	bl	8006c5c <get_fat>
 8008b60:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d802      	bhi.n	8008b6e <f_open+0x2e6>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d102      	bne.n	8008b7c <f_open+0x2f4>
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <f_open+0x30c>
 8008b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d8e0      	bhi.n	8008b56 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d131      	bne.n	8008c06 <f_open+0x37e>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	899b      	ldrh	r3, [r3, #12]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bae:	fb02 f201 	mul.w	r2, r2, r1
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d026      	beq.n	8008c06 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe f82f 	bl	8006c20 <clust2sect>
 8008bc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <f_open+0x34a>
						res = FR_INT_ERR;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008bd0:	e019      	b.n	8008c06 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	899b      	ldrh	r3, [r3, #12]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bda:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be0:	441a      	add	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	7858      	ldrb	r0, [r3, #1]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a1a      	ldr	r2, [r3, #32]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f7fd fc75 	bl	80064e4 <disk_read>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <f_open+0x37e>
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008c06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <f_open+0x38c>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3768      	adds	r7, #104	; 0x68
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08c      	sub	sp, #48	; 0x30
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f107 0210 	add.w	r2, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fda5 	bl	8008790 <validate>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d107      	bne.n	8008c64 <f_write+0x44>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	7d5b      	ldrb	r3, [r3, #21]
 8008c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <f_write+0x4a>
 8008c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c68:	e16a      	b.n	8008f40 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	7d1b      	ldrb	r3, [r3, #20]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <f_write+0x5a>
 8008c76:	2307      	movs	r3, #7
 8008c78:	e162      	b.n	8008f40 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	441a      	add	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f080 814c 	bcs.w	8008f24 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c94:	e146      	b.n	8008f24 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	8992      	ldrh	r2, [r2, #12]
 8008c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca2:	fb02 f201 	mul.w	r2, r2, r1
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f040 80f1 	bne.w	8008e90 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	8992      	ldrh	r2, [r2, #12]
 8008cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	8952      	ldrh	r2, [r2, #10]
 8008cbe:	3a01      	subs	r2, #1
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d143      	bne.n	8008d52 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10c      	bne.n	8008cec <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d11a      	bne.n	8008d14 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fa0f 	bl	8007106 <create_chain>
 8008ce8:	62b8      	str	r0, [r7, #40]	; 0x28
 8008cea:	e013      	b.n	8008d14 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7fe fa9b 	bl	8007236 <clmt_clust>
 8008d00:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d02:	e007      	b.n	8008d14 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7fe f9fa 	bl	8007106 <create_chain>
 8008d12:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8109 	beq.w	8008f2e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d104      	bne.n	8008d2c <f_write+0x10c>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2202      	movs	r2, #2
 8008d26:	755a      	strb	r2, [r3, #21]
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e109      	b.n	8008f40 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d104      	bne.n	8008d3e <f_write+0x11e>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	755a      	strb	r2, [r3, #21]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e100      	b.n	8008f40 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d42:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <f_write+0x132>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d50:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	7d1b      	ldrb	r3, [r3, #20]
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da18      	bge.n	8008d8e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	7858      	ldrb	r0, [r3, #1]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f7fd fbda 	bl	8006524 <disk_write>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <f_write+0x160>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	755a      	strb	r2, [r3, #21]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0df      	b.n	8008f40 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	7d1b      	ldrb	r3, [r3, #20]
 8008d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fd ff42 	bl	8006c20 <clust2sect>
 8008d9c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <f_write+0x18e>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	755a      	strb	r2, [r3, #21]
 8008daa:	2302      	movs	r3, #2
 8008dac:	e0c8      	b.n	8008f40 <f_write+0x320>
			sect += csect;
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	4413      	add	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	899b      	ldrh	r3, [r3, #12]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d043      	beq.n	8008e52 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	4413      	add	r3, r2
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	8952      	ldrh	r2, [r2, #10]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d905      	bls.n	8008de4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	895b      	ldrh	r3, [r3, #10]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	7858      	ldrb	r0, [r3, #1]
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	69f9      	ldr	r1, [r7, #28]
 8008dee:	f7fd fb99 	bl	8006524 <disk_write>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <f_write+0x1e2>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e09e      	b.n	8008f40 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a1a      	ldr	r2, [r3, #32]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d918      	bls.n	8008e42 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1a      	ldr	r2, [r3, #32]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	8992      	ldrh	r2, [r2, #12]
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	18d1      	adds	r1, r2, r3
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7fd fc34 	bl	800669c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	7d1b      	ldrb	r3, [r3, #20]
 8008e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	899b      	ldrh	r3, [r3, #12]
 8008e46:	461a      	mov	r2, r3
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008e50:	e04b      	b.n	8008eea <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d016      	beq.n	8008e8a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	699a      	ldr	r2, [r3, #24]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d210      	bcs.n	8008e8a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	7858      	ldrb	r0, [r3, #1]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e72:	2301      	movs	r3, #1
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	f7fd fb35 	bl	80064e4 <disk_read>
 8008e7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	755a      	strb	r2, [r3, #21]
 8008e86:	2301      	movs	r3, #1
 8008e88:	e05a      	b.n	8008f40 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	899b      	ldrh	r3, [r3, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	8992      	ldrh	r2, [r2, #12]
 8008e9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea2:	fb02 f201 	mul.w	r2, r2, r1
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	1ac3      	subs	r3, r0, r3
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d901      	bls.n	8008eb8 <f_write+0x298>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	8992      	ldrh	r2, [r2, #12]
 8008ec6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eca:	fb02 f200 	mul.w	r2, r2, r0
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fd fbe0 	bl	800669c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	7d1b      	ldrb	r3, [r3, #20]
 8008ee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	4413      	add	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	441a      	add	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	619a      	str	r2, [r3, #24]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	bf38      	it	cc
 8008f0a:	461a      	movcc	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	441a      	add	r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f47f aeb5 	bne.w	8008c96 <f_write+0x76>
 8008f2c:	e000      	b.n	8008f30 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f107 0208 	add.w	r2, r7, #8
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fc19 	bl	8008790 <validate>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d168      	bne.n	800903a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7d1b      	ldrb	r3, [r3, #20]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d062      	beq.n	800903a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7d1b      	ldrb	r3, [r3, #20]
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da15      	bge.n	8008faa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	7858      	ldrb	r0, [r3, #1]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1a      	ldr	r2, [r3, #32]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f7fd fac9 	bl	8006524 <disk_write>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <f_sync+0x54>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e04f      	b.n	800903c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	7d1b      	ldrb	r3, [r3, #20]
 8008fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008faa:	f7fd f9ff 	bl	80063ac <get_fattime>
 8008fae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7fd fd93 	bl	8006ae4 <move_window>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d138      	bne.n	800903a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	330b      	adds	r3, #11
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	330b      	adds	r3, #11
 8008fd8:	f042 0220 	orr.w	r2, r2, #32
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f7fe fb1f 	bl	800762e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f103 021c 	add.w	r2, r3, #28
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fd fb22 	bl	8006646 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3316      	adds	r3, #22
 8009006:	6939      	ldr	r1, [r7, #16]
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd fb1c 	bl	8006646 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3312      	adds	r3, #18
 8009012:	2100      	movs	r1, #0
 8009014:	4618      	mov	r0, r3
 8009016:	f7fd fafc 	bl	8006612 <st_word>
					fs->wflag = 1;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2201      	movs	r2, #1
 800901e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fd fd8c 	bl	8006b40 <sync_fs>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7d1b      	ldrb	r3, [r3, #20]
 8009030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009034:	b2da      	uxtb	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800903a:	7dfb      	ldrb	r3, [r7, #23]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff ff7b 	bl	8008f48 <f_sync>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d118      	bne.n	800908e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f107 0208 	add.w	r2, r7, #8
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff fb93 	bl	8008790 <validate>
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10c      	bne.n	800908e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	4618      	mov	r0, r3
 800907a:	f7fd fc91 	bl	80069a0 <dec_lock>
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b090      	sub	sp, #64	; 0x40
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f107 0208 	add.w	r2, r7, #8
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fb70 	bl	8008790 <validate>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80090b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <f_lseek+0x2e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7d5b      	ldrb	r3, [r3, #21]
 80090c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80090c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <f_lseek+0x3c>
 80090ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090d2:	e201      	b.n	80094d8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80d9 	beq.w	8009290 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d15a      	bne.n	800919c <f_lseek+0x104>
			tbl = fp->cltbl;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	627a      	str	r2, [r7, #36]	; 0x24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	2302      	movs	r3, #2
 80090f8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2b00      	cmp	r3, #0
 8009104:	d03a      	beq.n	800917c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	613b      	str	r3, [r7, #16]
 800910a:	2300      	movs	r3, #0
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	3302      	adds	r3, #2
 8009112:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	3301      	adds	r3, #1
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd fd9a 	bl	8006c5c <get_fat>
 8009128:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b01      	cmp	r3, #1
 800912e:	d804      	bhi.n	800913a <f_lseek+0xa2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	755a      	strb	r2, [r3, #21]
 8009136:	2302      	movs	r3, #2
 8009138:	e1ce      	b.n	80094d8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d104      	bne.n	800914c <f_lseek+0xb4>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	755a      	strb	r2, [r3, #21]
 8009148:	2301      	movs	r3, #1
 800914a:	e1c5      	b.n	80094d8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009152:	429a      	cmp	r2, r3
 8009154:	d0de      	beq.n	8009114 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	429a      	cmp	r2, r3
 800915c:	d809      	bhi.n	8009172 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	627a      	str	r2, [r7, #36]	; 0x24
 8009164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	1d1a      	adds	r2, r3, #4
 800916c:	627a      	str	r2, [r7, #36]	; 0x24
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009178:	429a      	cmp	r2, r3
 800917a:	d3c4      	bcc.n	8009106 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009182:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d803      	bhi.n	8009194 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e19f      	b.n	80094d4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009194:	2311      	movs	r3, #17
 8009196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800919a:	e19b      	b.n	80094d4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d902      	bls.n	80091ac <f_lseek+0x114>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 818d 	beq.w	80094d4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fe f838 	bl	8007236 <clmt_clust>
 80091c6:	4602      	mov	r2, r0
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f7fd fd23 	bl	8006c20 <clust2sect>
 80091da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d104      	bne.n	80091ec <f_lseek+0x154>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	755a      	strb	r2, [r3, #21]
 80091e8:	2302      	movs	r3, #2
 80091ea:	e175      	b.n	80094d8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	8992      	ldrh	r2, [r2, #12]
 80091f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	8952      	ldrh	r2, [r2, #10]
 80091fc:	3a01      	subs	r2, #1
 80091fe:	4013      	ands	r3, r2
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	4413      	add	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	8992      	ldrh	r2, [r2, #12]
 800920e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009212:	fb02 f201 	mul.w	r2, r2, r1
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 815b 	beq.w	80094d4 <f_lseek+0x43c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	f000 8155 	beq.w	80094d4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7d1b      	ldrb	r3, [r3, #20]
 800922e:	b25b      	sxtb	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	da18      	bge.n	8009266 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	7858      	ldrb	r0, [r3, #1]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1a      	ldr	r2, [r3, #32]
 8009242:	2301      	movs	r3, #1
 8009244:	f7fd f96e 	bl	8006524 <disk_write>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <f_lseek+0x1c0>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	755a      	strb	r2, [r3, #21]
 8009254:	2301      	movs	r3, #1
 8009256:	e13f      	b.n	80094d8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7d1b      	ldrb	r3, [r3, #20]
 800925c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009260:	b2da      	uxtb	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	7858      	ldrb	r0, [r3, #1]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009270:	2301      	movs	r3, #1
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	f7fd f936 	bl	80064e4 <disk_read>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <f_lseek+0x1f0>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	755a      	strb	r2, [r3, #21]
 8009284:	2301      	movs	r3, #1
 8009286:	e127      	b.n	80094d8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	621a      	str	r2, [r3, #32]
 800928e:	e121      	b.n	80094d4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d908      	bls.n	80092ac <f_lseek+0x214>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7d1b      	ldrb	r3, [r3, #20]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ba:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 80b5 	beq.w	800942e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	895b      	ldrh	r3, [r3, #10]
 80092c8:	461a      	mov	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	899b      	ldrh	r3, [r3, #12]
 80092ce:	fb03 f302 	mul.w	r3, r3, r2
 80092d2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d01b      	beq.n	8009312 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	1e5a      	subs	r2, r3, #1
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	1e59      	subs	r1, r3, #1
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d30f      	bcc.n	8009312 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	1e5a      	subs	r2, r3, #1
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	425b      	negs	r3, r3
 80092fa:	401a      	ands	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009310:	e022      	b.n	8009358 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d119      	bne.n	8009352 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd feef 	bl	8007106 <create_chain>
 8009328:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	2b01      	cmp	r3, #1
 800932e:	d104      	bne.n	800933a <f_lseek+0x2a2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	755a      	strb	r2, [r3, #21]
 8009336:	2302      	movs	r3, #2
 8009338:	e0ce      	b.n	80094d8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009340:	d104      	bne.n	800934c <f_lseek+0x2b4>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	755a      	strb	r2, [r3, #21]
 8009348:	2301      	movs	r3, #1
 800934a:	e0c5      	b.n	80094d8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009350:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009356:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d067      	beq.n	800942e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800935e:	e03a      	b.n	80093d6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	441a      	add	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	7d1b      	ldrb	r3, [r3, #20]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd febe 	bl	8007106 <create_chain>
 800938a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	2b00      	cmp	r3, #0
 8009390:	d108      	bne.n	80093a4 <f_lseek+0x30c>
							ofs = 0; break;
 8009392:	2300      	movs	r3, #0
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	e022      	b.n	80093de <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800939c:	4618      	mov	r0, r3
 800939e:	f7fd fc5d 	bl	8006c5c <get_fat>
 80093a2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d104      	bne.n	80093b6 <f_lseek+0x31e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	755a      	strb	r2, [r3, #21]
 80093b2:	2301      	movs	r3, #1
 80093b4:	e090      	b.n	80094d8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d904      	bls.n	80093c6 <f_lseek+0x32e>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d304      	bcc.n	80093d0 <f_lseek+0x338>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2202      	movs	r2, #2
 80093ca:	755a      	strb	r2, [r3, #21]
 80093cc:	2302      	movs	r3, #2
 80093ce:	e083      	b.n	80094d8 <f_lseek+0x440>
					fp->clust = clst;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d8c0      	bhi.n	8009360 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	441a      	add	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	899b      	ldrh	r3, [r3, #12]
 80093ee:	461a      	mov	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80093f6:	fb02 f201 	mul.w	r2, r2, r1
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d016      	beq.n	800942e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009404:	4618      	mov	r0, r3
 8009406:	f7fd fc0b 	bl	8006c20 <clust2sect>
 800940a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	2b00      	cmp	r3, #0
 8009410:	d104      	bne.n	800941c <f_lseek+0x384>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	755a      	strb	r2, [r3, #21]
 8009418:	2302      	movs	r3, #2
 800941a:	e05d      	b.n	80094d8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	899b      	ldrh	r3, [r3, #12]
 8009420:	461a      	mov	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	fbb3 f3f2 	udiv	r3, r3, r2
 8009428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942a:	4413      	add	r3, r2
 800942c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	429a      	cmp	r2, r3
 8009438:	d90a      	bls.n	8009450 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	8992      	ldrh	r2, [r2, #12]
 8009458:	fbb3 f1f2 	udiv	r1, r3, r2
 800945c:	fb02 f201 	mul.w	r2, r2, r1
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d036      	beq.n	80094d4 <f_lseek+0x43c>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800946c:	429a      	cmp	r2, r3
 800946e:	d031      	beq.n	80094d4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7d1b      	ldrb	r3, [r3, #20]
 8009474:	b25b      	sxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	da18      	bge.n	80094ac <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	7858      	ldrb	r0, [r3, #1]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1a      	ldr	r2, [r3, #32]
 8009488:	2301      	movs	r3, #1
 800948a:	f7fd f84b 	bl	8006524 <disk_write>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <f_lseek+0x406>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	755a      	strb	r2, [r3, #21]
 800949a:	2301      	movs	r3, #1
 800949c:	e01c      	b.n	80094d8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
 80094a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	7858      	ldrb	r0, [r3, #1]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094b6:	2301      	movs	r3, #1
 80094b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ba:	f7fd f813 	bl	80064e4 <disk_read>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <f_lseek+0x436>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	755a      	strb	r2, [r3, #21]
 80094ca:	2301      	movs	r3, #1
 80094cc:	e004      	b.n	80094d8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80094d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3740      	adds	r7, #64	; 0x40
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	2b0a      	cmp	r3, #10
 80094f0:	d103      	bne.n	80094fa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80094f2:	210d      	movs	r1, #13
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fff3 	bl	80094e0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	db25      	blt.n	8009552 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	60fa      	str	r2, [r7, #12]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b3c      	cmp	r3, #60	; 0x3c
 8009518:	dd12      	ble.n	8009540 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f103 010c 	add.w	r1, r3, #12
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f107 0308 	add.w	r3, r7, #8
 800952a:	f7ff fb79 	bl	8008c20 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d101      	bne.n	800953a <putc_bfd+0x5a>
 8009536:	2300      	movs	r3, #0
 8009538:	e001      	b.n	800953e <putc_bfd+0x5e>
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	609a      	str	r2, [r3, #8]
 8009550:	e000      	b.n	8009554 <putc_bfd+0x74>
	if (i < 0) return;
 8009552:	bf00      	nop
}
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	db16      	blt.n	8009598 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f103 010c 	add.w	r1, r3, #12
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	461a      	mov	r2, r3
 800957a:	f107 030c 	add.w	r3, r7, #12
 800957e:	f7ff fb4f 	bl	8008c20 <f_write>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d107      	bne.n	8009598 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4293      	cmp	r3, r2
 8009590:	d102      	bne.n	8009598 <putc_flush+0x3e>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	e001      	b.n	800959c <putc_flush+0x42>
	return EOF;
 8009598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	609a      	str	r2, [r3, #8]
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr

080095cc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b096      	sub	sp, #88	; 0x58
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80095d6:	f107 030c 	add.w	r3, r7, #12
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ffe1 	bl	80095a4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80095e2:	e009      	b.n	80095f8 <f_puts+0x2c>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ff74 	bl	80094e0 <putc_bfd>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f1      	bne.n	80095e4 <f_puts+0x18>
	return putc_flush(&pb);
 8009600:	f107 030c 	add.w	r3, r7, #12
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ffa8 	bl	800955a <putc_flush>
 800960a:	4603      	mov	r3, r0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3758      	adds	r7, #88	; 0x58
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	4613      	mov	r3, r2
 8009620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800962a:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 800962c:	7a5b      	ldrb	r3, [r3, #9]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d131      	bne.n	8009698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009634:	4b1b      	ldr	r3, [pc, #108]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 8009636:	7a5b      	ldrb	r3, [r3, #9]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	461a      	mov	r2, r3
 800963c:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 800963e:	2100      	movs	r1, #0
 8009640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009642:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 8009644:	7a5b      	ldrb	r3, [r3, #9]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	4a16      	ldr	r2, [pc, #88]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 8009654:	7a5b      	ldrb	r3, [r3, #9]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	461a      	mov	r2, r3
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 800965c:	4413      	add	r3, r2
 800965e:	79fa      	ldrb	r2, [r7, #7]
 8009660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009662:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 8009664:	7a5b      	ldrb	r3, [r3, #9]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	b2d1      	uxtb	r1, r2
 800966c:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <FATFS_LinkDriverEx+0x90>)
 800966e:	7251      	strb	r1, [r2, #9]
 8009670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009672:	7dbb      	ldrb	r3, [r7, #22]
 8009674:	3330      	adds	r3, #48	; 0x30
 8009676:	b2da      	uxtb	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3301      	adds	r3, #1
 8009680:	223a      	movs	r2, #58	; 0x3a
 8009682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	3302      	adds	r3, #2
 8009688:	222f      	movs	r2, #47	; 0x2f
 800968a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3303      	adds	r3, #3
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
}
 800969a:	4618      	mov	r0, r3
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bc80      	pop	{r7}
 80096a2:	4770      	bx	lr
 80096a4:	200002fc 	.word	0x200002fc

080096a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096b2:	2200      	movs	r2, #0
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ffac 	bl	8009614 <FATFS_LinkDriverEx>
 80096bc:	4603      	mov	r3, r0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	6039      	str	r1, [r7, #0]
 80096d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	2b7f      	cmp	r3, #127	; 0x7f
 80096d8:	d802      	bhi.n	80096e0 <ff_convert+0x18>
		c = chr;
 80096da:	88fb      	ldrh	r3, [r7, #6]
 80096dc:	81fb      	strh	r3, [r7, #14]
 80096de:	e025      	b.n	800972c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00b      	beq.n	80096fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	2bff      	cmp	r3, #255	; 0xff
 80096ea:	d805      	bhi.n	80096f8 <ff_convert+0x30>
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	3b80      	subs	r3, #128	; 0x80
 80096f0:	4a11      	ldr	r2, [pc, #68]	; (8009738 <ff_convert+0x70>)
 80096f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f6:	e000      	b.n	80096fa <ff_convert+0x32>
 80096f8:	2300      	movs	r3, #0
 80096fa:	81fb      	strh	r3, [r7, #14]
 80096fc:	e016      	b.n	800972c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80096fe:	2300      	movs	r3, #0
 8009700:	81fb      	strh	r3, [r7, #14]
 8009702:	e009      	b.n	8009718 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009704:	89fb      	ldrh	r3, [r7, #14]
 8009706:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <ff_convert+0x70>)
 8009708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800970c:	88fa      	ldrh	r2, [r7, #6]
 800970e:	429a      	cmp	r2, r3
 8009710:	d006      	beq.n	8009720 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009712:	89fb      	ldrh	r3, [r7, #14]
 8009714:	3301      	adds	r3, #1
 8009716:	81fb      	strh	r3, [r7, #14]
 8009718:	89fb      	ldrh	r3, [r7, #14]
 800971a:	2b7f      	cmp	r3, #127	; 0x7f
 800971c:	d9f2      	bls.n	8009704 <ff_convert+0x3c>
 800971e:	e000      	b.n	8009722 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009720:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009722:	89fb      	ldrh	r3, [r7, #14]
 8009724:	3380      	adds	r3, #128	; 0x80
 8009726:	b29b      	uxth	r3, r3
 8009728:	b2db      	uxtb	r3, r3
 800972a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800972c:	89fb      	ldrh	r3, [r7, #14]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr
 8009738:	08009a50 	.word	0x08009a50

0800973c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974c:	d201      	bcs.n	8009752 <ff_wtoupper+0x16>
 800974e:	4b3d      	ldr	r3, [pc, #244]	; (8009844 <ff_wtoupper+0x108>)
 8009750:	e000      	b.n	8009754 <ff_wtoupper+0x18>
 8009752:	4b3d      	ldr	r3, [pc, #244]	; (8009848 <ff_wtoupper+0x10c>)
 8009754:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	617a      	str	r2, [r7, #20]
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009760:	8a7b      	ldrh	r3, [r7, #18]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d068      	beq.n	8009838 <ff_wtoupper+0xfc>
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	8a7b      	ldrh	r3, [r7, #18]
 800976a:	429a      	cmp	r2, r3
 800976c:	d364      	bcc.n	8009838 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	1c9a      	adds	r2, r3, #2
 8009772:	617a      	str	r2, [r7, #20]
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	823b      	strh	r3, [r7, #16]
 8009778:	8a3b      	ldrh	r3, [r7, #16]
 800977a:	0a1b      	lsrs	r3, r3, #8
 800977c:	81fb      	strh	r3, [r7, #14]
 800977e:	8a3b      	ldrh	r3, [r7, #16]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	8a79      	ldrh	r1, [r7, #18]
 8009788:	8a3b      	ldrh	r3, [r7, #16]
 800978a:	440b      	add	r3, r1
 800978c:	429a      	cmp	r2, r3
 800978e:	da49      	bge.n	8009824 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009790:	89fb      	ldrh	r3, [r7, #14]
 8009792:	2b08      	cmp	r3, #8
 8009794:	d84f      	bhi.n	8009836 <ff_wtoupper+0xfa>
 8009796:	a201      	add	r2, pc, #4	; (adr r2, 800979c <ff_wtoupper+0x60>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097d3 	.word	0x080097d3
 80097a4:	080097e9 	.word	0x080097e9
 80097a8:	080097f1 	.word	0x080097f1
 80097ac:	080097f9 	.word	0x080097f9
 80097b0:	08009801 	.word	0x08009801
 80097b4:	08009809 	.word	0x08009809
 80097b8:	08009811 	.word	0x08009811
 80097bc:	08009819 	.word	0x08009819
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	8a7b      	ldrh	r3, [r7, #18]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	4413      	add	r3, r2
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	80fb      	strh	r3, [r7, #6]
 80097d0:	e027      	b.n	8009822 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	8a7b      	ldrh	r3, [r7, #18]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	b29b      	uxth	r3, r3
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	80fb      	strh	r3, [r7, #6]
 80097e6:	e01c      	b.n	8009822 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	3b10      	subs	r3, #16
 80097ec:	80fb      	strh	r3, [r7, #6]
 80097ee:	e018      	b.n	8009822 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	3b20      	subs	r3, #32
 80097f4:	80fb      	strh	r3, [r7, #6]
 80097f6:	e014      	b.n	8009822 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	3b30      	subs	r3, #48	; 0x30
 80097fc:	80fb      	strh	r3, [r7, #6]
 80097fe:	e010      	b.n	8009822 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	3b1a      	subs	r3, #26
 8009804:	80fb      	strh	r3, [r7, #6]
 8009806:	e00c      	b.n	8009822 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	3308      	adds	r3, #8
 800980c:	80fb      	strh	r3, [r7, #6]
 800980e:	e008      	b.n	8009822 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009810:	88fb      	ldrh	r3, [r7, #6]
 8009812:	3b50      	subs	r3, #80	; 0x50
 8009814:	80fb      	strh	r3, [r7, #6]
 8009816:	e004      	b.n	8009822 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800981e:	80fb      	strh	r3, [r7, #6]
 8009820:	bf00      	nop
			}
			break;
 8009822:	e008      	b.n	8009836 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d195      	bne.n	8009756 <ff_wtoupper+0x1a>
 800982a:	8a3b      	ldrh	r3, [r7, #16]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009834:	e78f      	b.n	8009756 <ff_wtoupper+0x1a>
			break;
 8009836:	bf00      	nop
	}

	return chr;
 8009838:	88fb      	ldrh	r3, [r7, #6]
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr
 8009844:	08009b50 	.word	0x08009b50
 8009848:	08009d44 	.word	0x08009d44

0800984c <__libc_init_array>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	2600      	movs	r6, #0
 8009850:	4d0c      	ldr	r5, [pc, #48]	; (8009884 <__libc_init_array+0x38>)
 8009852:	4c0d      	ldr	r4, [pc, #52]	; (8009888 <__libc_init_array+0x3c>)
 8009854:	1b64      	subs	r4, r4, r5
 8009856:	10a4      	asrs	r4, r4, #2
 8009858:	42a6      	cmp	r6, r4
 800985a:	d109      	bne.n	8009870 <__libc_init_array+0x24>
 800985c:	f000 f822 	bl	80098a4 <_init>
 8009860:	2600      	movs	r6, #0
 8009862:	4d0a      	ldr	r5, [pc, #40]	; (800988c <__libc_init_array+0x40>)
 8009864:	4c0a      	ldr	r4, [pc, #40]	; (8009890 <__libc_init_array+0x44>)
 8009866:	1b64      	subs	r4, r4, r5
 8009868:	10a4      	asrs	r4, r4, #2
 800986a:	42a6      	cmp	r6, r4
 800986c:	d105      	bne.n	800987a <__libc_init_array+0x2e>
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	f855 3b04 	ldr.w	r3, [r5], #4
 8009874:	4798      	blx	r3
 8009876:	3601      	adds	r6, #1
 8009878:	e7ee      	b.n	8009858 <__libc_init_array+0xc>
 800987a:	f855 3b04 	ldr.w	r3, [r5], #4
 800987e:	4798      	blx	r3
 8009880:	3601      	adds	r6, #1
 8009882:	e7f2      	b.n	800986a <__libc_init_array+0x1e>
 8009884:	08009e08 	.word	0x08009e08
 8009888:	08009e08 	.word	0x08009e08
 800988c:	08009e08 	.word	0x08009e08
 8009890:	08009e0c 	.word	0x08009e0c

08009894 <memset>:
 8009894:	4603      	mov	r3, r0
 8009896:	4402      	add	r2, r0
 8009898:	4293      	cmp	r3, r2
 800989a:	d100      	bne.n	800989e <memset+0xa>
 800989c:	4770      	bx	lr
 800989e:	f803 1b01 	strb.w	r1, [r3], #1
 80098a2:	e7f9      	b.n	8009898 <memset+0x4>

080098a4 <_init>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	bf00      	nop
 80098a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098aa:	bc08      	pop	{r3}
 80098ac:	469e      	mov	lr, r3
 80098ae:	4770      	bx	lr

080098b0 <_fini>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	bf00      	nop
 80098b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b6:	bc08      	pop	{r3}
 80098b8:	469e      	mov	lr, r3
 80098ba:	4770      	bx	lr
