
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000b8  08005764  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005764  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e542  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212c  00000000  00000000  0002e623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cf1  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7bc  00000000  00000000  00034e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082bac  00000000  00000000  0004360d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c61b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  000c620c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800562c 	.word	0x0800562c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	0800562c 	.word	0x0800562c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_uldivmod>:
 8000484:	b953      	cbnz	r3, 800049c <__aeabi_uldivmod+0x18>
 8000486:	b94a      	cbnz	r2, 800049c <__aeabi_uldivmod+0x18>
 8000488:	2900      	cmp	r1, #0
 800048a:	bf08      	it	eq
 800048c:	2800      	cmpeq	r0, #0
 800048e:	bf1c      	itt	ne
 8000490:	f04f 31ff 	movne.w	r1, #4294967295
 8000494:	f04f 30ff 	movne.w	r0, #4294967295
 8000498:	f000 b96e 	b.w	8000778 <__aeabi_idiv0>
 800049c:	f1ad 0c08 	sub.w	ip, sp, #8
 80004a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a4:	f000 f806 	bl	80004b4 <__udivmoddi4>
 80004a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004b0:	b004      	add	sp, #16
 80004b2:	4770      	bx	lr

080004b4 <__udivmoddi4>:
 80004b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b8:	9e08      	ldr	r6, [sp, #32]
 80004ba:	460d      	mov	r5, r1
 80004bc:	4604      	mov	r4, r0
 80004be:	468e      	mov	lr, r1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	f040 8083 	bne.w	80005cc <__udivmoddi4+0x118>
 80004c6:	428a      	cmp	r2, r1
 80004c8:	4617      	mov	r7, r2
 80004ca:	d947      	bls.n	800055c <__udivmoddi4+0xa8>
 80004cc:	fab2 f382 	clz	r3, r2
 80004d0:	b14b      	cbz	r3, 80004e6 <__udivmoddi4+0x32>
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa05 fe03 	lsl.w	lr, r5, r3
 80004da:	fa20 f101 	lsr.w	r1, r0, r1
 80004de:	409f      	lsls	r7, r3
 80004e0:	ea41 0e0e 	orr.w	lr, r1, lr
 80004e4:	409c      	lsls	r4, r3
 80004e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004ea:	fbbe fcf8 	udiv	ip, lr, r8
 80004ee:	fa1f f987 	uxth.w	r9, r7
 80004f2:	fb08 e21c 	mls	r2, r8, ip, lr
 80004f6:	fb0c f009 	mul.w	r0, ip, r9
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000500:	4290      	cmp	r0, r2
 8000502:	d90a      	bls.n	800051a <__udivmoddi4+0x66>
 8000504:	18ba      	adds	r2, r7, r2
 8000506:	f10c 31ff 	add.w	r1, ip, #4294967295
 800050a:	f080 8118 	bcs.w	800073e <__udivmoddi4+0x28a>
 800050e:	4290      	cmp	r0, r2
 8000510:	f240 8115 	bls.w	800073e <__udivmoddi4+0x28a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443a      	add	r2, r7
 800051a:	1a12      	subs	r2, r2, r0
 800051c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000520:	fb08 2210 	mls	r2, r8, r0, r2
 8000524:	fb00 f109 	mul.w	r1, r0, r9
 8000528:	b2a4      	uxth	r4, r4
 800052a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800052e:	42a1      	cmp	r1, r4
 8000530:	d909      	bls.n	8000546 <__udivmoddi4+0x92>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f100 32ff 	add.w	r2, r0, #4294967295
 8000538:	f080 8103 	bcs.w	8000742 <__udivmoddi4+0x28e>
 800053c:	42a1      	cmp	r1, r4
 800053e:	f240 8100 	bls.w	8000742 <__udivmoddi4+0x28e>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	1a64      	subs	r4, r4, r1
 8000548:	2100      	movs	r1, #0
 800054a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800054e:	b11e      	cbz	r6, 8000558 <__udivmoddi4+0xa4>
 8000550:	2200      	movs	r2, #0
 8000552:	40dc      	lsrs	r4, r3
 8000554:	e9c6 4200 	strd	r4, r2, [r6]
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	b902      	cbnz	r2, 8000560 <__udivmoddi4+0xac>
 800055e:	deff      	udf	#255	; 0xff
 8000560:	fab2 f382 	clz	r3, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	d14f      	bne.n	8000608 <__udivmoddi4+0x154>
 8000568:	1a8d      	subs	r5, r1, r2
 800056a:	2101      	movs	r1, #1
 800056c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000570:	fa1f f882 	uxth.w	r8, r2
 8000574:	fbb5 fcfe 	udiv	ip, r5, lr
 8000578:	fb0e 551c 	mls	r5, lr, ip, r5
 800057c:	fb08 f00c 	mul.w	r0, r8, ip
 8000580:	0c22      	lsrs	r2, r4, #16
 8000582:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000586:	42a8      	cmp	r0, r5
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0xe6>
 800058a:	197d      	adds	r5, r7, r5
 800058c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0xe4>
 8000592:	42a8      	cmp	r0, r5
 8000594:	f200 80e9 	bhi.w	800076a <__udivmoddi4+0x2b6>
 8000598:	4694      	mov	ip, r2
 800059a:	1a2d      	subs	r5, r5, r0
 800059c:	fbb5 f0fe 	udiv	r0, r5, lr
 80005a0:	fb0e 5510 	mls	r5, lr, r0, r5
 80005a4:	fb08 f800 	mul.w	r8, r8, r0
 80005a8:	b2a4      	uxth	r4, r4
 80005aa:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005ae:	45a0      	cmp	r8, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x10e>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b8:	d202      	bcs.n	80005c0 <__udivmoddi4+0x10c>
 80005ba:	45a0      	cmp	r8, r4
 80005bc:	f200 80d9 	bhi.w	8000772 <__udivmoddi4+0x2be>
 80005c0:	4610      	mov	r0, r2
 80005c2:	eba4 0408 	sub.w	r4, r4, r8
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	e7c0      	b.n	800054e <__udivmoddi4+0x9a>
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x12e>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	f000 80b1 	beq.w	8000738 <__udivmoddi4+0x284>
 80005d6:	2100      	movs	r1, #0
 80005d8:	e9c6 0500 	strd	r0, r5, [r6]
 80005dc:	4608      	mov	r0, r1
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	fab3 f183 	clz	r1, r3
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d14b      	bne.n	8000682 <__udivmoddi4+0x1ce>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d302      	bcc.n	80005f4 <__udivmoddi4+0x140>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f200 80b9 	bhi.w	8000766 <__udivmoddi4+0x2b2>
 80005f4:	1a84      	subs	r4, r0, r2
 80005f6:	eb65 0303 	sbc.w	r3, r5, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	469e      	mov	lr, r3
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d0aa      	beq.n	8000558 <__udivmoddi4+0xa4>
 8000602:	e9c6 4e00 	strd	r4, lr, [r6]
 8000606:	e7a7      	b.n	8000558 <__udivmoddi4+0xa4>
 8000608:	409f      	lsls	r7, r3
 800060a:	f1c3 0220 	rsb	r2, r3, #32
 800060e:	40d1      	lsrs	r1, r2
 8000610:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000614:	fbb1 f0fe 	udiv	r0, r1, lr
 8000618:	fa1f f887 	uxth.w	r8, r7
 800061c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000620:	fa24 f202 	lsr.w	r2, r4, r2
 8000624:	409d      	lsls	r5, r3
 8000626:	fb00 fc08 	mul.w	ip, r0, r8
 800062a:	432a      	orrs	r2, r5
 800062c:	0c15      	lsrs	r5, r2, #16
 800062e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000632:	45ac      	cmp	ip, r5
 8000634:	fa04 f403 	lsl.w	r4, r4, r3
 8000638:	d909      	bls.n	800064e <__udivmoddi4+0x19a>
 800063a:	197d      	adds	r5, r7, r5
 800063c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000640:	f080 808f 	bcs.w	8000762 <__udivmoddi4+0x2ae>
 8000644:	45ac      	cmp	ip, r5
 8000646:	f240 808c 	bls.w	8000762 <__udivmoddi4+0x2ae>
 800064a:	3802      	subs	r0, #2
 800064c:	443d      	add	r5, r7
 800064e:	eba5 050c 	sub.w	r5, r5, ip
 8000652:	fbb5 f1fe 	udiv	r1, r5, lr
 8000656:	fb0e 5c11 	mls	ip, lr, r1, r5
 800065a:	fb01 f908 	mul.w	r9, r1, r8
 800065e:	b295      	uxth	r5, r2
 8000660:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000664:	45a9      	cmp	r9, r5
 8000666:	d907      	bls.n	8000678 <__udivmoddi4+0x1c4>
 8000668:	197d      	adds	r5, r7, r5
 800066a:	f101 32ff 	add.w	r2, r1, #4294967295
 800066e:	d274      	bcs.n	800075a <__udivmoddi4+0x2a6>
 8000670:	45a9      	cmp	r9, r5
 8000672:	d972      	bls.n	800075a <__udivmoddi4+0x2a6>
 8000674:	3902      	subs	r1, #2
 8000676:	443d      	add	r5, r7
 8000678:	eba5 0509 	sub.w	r5, r5, r9
 800067c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000680:	e778      	b.n	8000574 <__udivmoddi4+0xc0>
 8000682:	f1c1 0720 	rsb	r7, r1, #32
 8000686:	408b      	lsls	r3, r1
 8000688:	fa22 fc07 	lsr.w	ip, r2, r7
 800068c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000690:	fa25 f407 	lsr.w	r4, r5, r7
 8000694:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000698:	fbb4 f9fe 	udiv	r9, r4, lr
 800069c:	fa1f f88c 	uxth.w	r8, ip
 80006a0:	fb0e 4419 	mls	r4, lr, r9, r4
 80006a4:	fa20 f307 	lsr.w	r3, r0, r7
 80006a8:	fb09 fa08 	mul.w	sl, r9, r8
 80006ac:	408d      	lsls	r5, r1
 80006ae:	431d      	orrs	r5, r3
 80006b0:	0c2b      	lsrs	r3, r5, #16
 80006b2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006b6:	45a2      	cmp	sl, r4
 80006b8:	fa02 f201 	lsl.w	r2, r2, r1
 80006bc:	fa00 f301 	lsl.w	r3, r0, r1
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0x222>
 80006c2:	eb1c 0404 	adds.w	r4, ip, r4
 80006c6:	f109 30ff 	add.w	r0, r9, #4294967295
 80006ca:	d248      	bcs.n	800075e <__udivmoddi4+0x2aa>
 80006cc:	45a2      	cmp	sl, r4
 80006ce:	d946      	bls.n	800075e <__udivmoddi4+0x2aa>
 80006d0:	f1a9 0902 	sub.w	r9, r9, #2
 80006d4:	4464      	add	r4, ip
 80006d6:	eba4 040a 	sub.w	r4, r4, sl
 80006da:	fbb4 f0fe 	udiv	r0, r4, lr
 80006de:	fb0e 4410 	mls	r4, lr, r0, r4
 80006e2:	fb00 fa08 	mul.w	sl, r0, r8
 80006e6:	b2ad      	uxth	r5, r5
 80006e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006ec:	45a2      	cmp	sl, r4
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x24e>
 80006f0:	eb1c 0404 	adds.w	r4, ip, r4
 80006f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80006f8:	d22d      	bcs.n	8000756 <__udivmoddi4+0x2a2>
 80006fa:	45a2      	cmp	sl, r4
 80006fc:	d92b      	bls.n	8000756 <__udivmoddi4+0x2a2>
 80006fe:	3802      	subs	r0, #2
 8000700:	4464      	add	r4, ip
 8000702:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000706:	fba0 8902 	umull	r8, r9, r0, r2
 800070a:	eba4 040a 	sub.w	r4, r4, sl
 800070e:	454c      	cmp	r4, r9
 8000710:	46c6      	mov	lr, r8
 8000712:	464d      	mov	r5, r9
 8000714:	d319      	bcc.n	800074a <__udivmoddi4+0x296>
 8000716:	d016      	beq.n	8000746 <__udivmoddi4+0x292>
 8000718:	b15e      	cbz	r6, 8000732 <__udivmoddi4+0x27e>
 800071a:	ebb3 020e 	subs.w	r2, r3, lr
 800071e:	eb64 0405 	sbc.w	r4, r4, r5
 8000722:	fa04 f707 	lsl.w	r7, r4, r7
 8000726:	fa22 f301 	lsr.w	r3, r2, r1
 800072a:	431f      	orrs	r7, r3
 800072c:	40cc      	lsrs	r4, r1
 800072e:	e9c6 7400 	strd	r7, r4, [r6]
 8000732:	2100      	movs	r1, #0
 8000734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000738:	4631      	mov	r1, r6
 800073a:	4630      	mov	r0, r6
 800073c:	e70c      	b.n	8000558 <__udivmoddi4+0xa4>
 800073e:	468c      	mov	ip, r1
 8000740:	e6eb      	b.n	800051a <__udivmoddi4+0x66>
 8000742:	4610      	mov	r0, r2
 8000744:	e6ff      	b.n	8000546 <__udivmoddi4+0x92>
 8000746:	4543      	cmp	r3, r8
 8000748:	d2e6      	bcs.n	8000718 <__udivmoddi4+0x264>
 800074a:	ebb8 0e02 	subs.w	lr, r8, r2
 800074e:	eb69 050c 	sbc.w	r5, r9, ip
 8000752:	3801      	subs	r0, #1
 8000754:	e7e0      	b.n	8000718 <__udivmoddi4+0x264>
 8000756:	4628      	mov	r0, r5
 8000758:	e7d3      	b.n	8000702 <__udivmoddi4+0x24e>
 800075a:	4611      	mov	r1, r2
 800075c:	e78c      	b.n	8000678 <__udivmoddi4+0x1c4>
 800075e:	4681      	mov	r9, r0
 8000760:	e7b9      	b.n	80006d6 <__udivmoddi4+0x222>
 8000762:	4608      	mov	r0, r1
 8000764:	e773      	b.n	800064e <__udivmoddi4+0x19a>
 8000766:	4608      	mov	r0, r1
 8000768:	e749      	b.n	80005fe <__udivmoddi4+0x14a>
 800076a:	f1ac 0c02 	sub.w	ip, ip, #2
 800076e:	443d      	add	r5, r7
 8000770:	e713      	b.n	800059a <__udivmoddi4+0xe6>
 8000772:	3802      	subs	r0, #2
 8000774:	443c      	add	r4, r7
 8000776:	e724      	b.n	80005c2 <__udivmoddi4+0x10e>

08000778 <__aeabi_idiv0>:
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	e01f      	b.n	80007ce <selectMux+0x52>
		if (pin & (i << 1)) {
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	005a      	lsls	r2, r3, #1
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d00b      	beq.n	80007b2 <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <selectMux+0x64>)
 80007ac:	f001 fd6e 	bl	800228c <HAL_GPIO_WritePin>
 80007b0:	e00a      	b.n	80007c8 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <selectMux+0x64>)
 80007c4:	f001 fd62 	bl	800228c <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	dddc      	ble.n	800078e <selectMux+0x12>
		}
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000

080007e4 <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f001 fd48 	bl	800228c <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <ADC_Select_CH0>:




void ADC_Select_CH0 (void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_9;
 8000814:	2309      	movs	r3, #9
 8000816:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2301      	movs	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <ADC_Select_CH0+0x38>)
 8000826:	f001 f82b 	bl	8001880 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <ADC_Select_CH0+0x30>
	{
		Error_Handler();
 8000830:	f000 fb12 	bl	8000e58 <Error_Handler>
	}
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200001c4 	.word	0x200001c4

08000840 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8000850:	2303      	movs	r3, #3
 8000852:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <ADC_Select_CH1+0x34>)
 800085e:	f001 f80f 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <ADC_Select_CH1+0x2c>
	{
		Error_Handler();
 8000868:	f000 faf6 	bl	8000e58 <Error_Handler>
	}
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001c4 	.word	0x200001c4

08000878 <readPressure>:

float readPressure() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  ADC_Select_CH0();
 800087e:	f7ff ffc1 	bl	8000804 <ADC_Select_CH0>
  HAL_ADC_Start(&hadc);
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <readPressure+0x3c>)
 8000884:	f000 fed4 	bl	8001630 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 8000888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <readPressure+0x3c>)
 800088e:	f000 ff5b 	bl	8001748 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc);
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <readPressure+0x3c>)
 8000894:	f000 ffe8 	bl	8001868 <HAL_ADC_GetValue>
 8000898:	4603      	mov	r3, r0
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd24 	bl	80002e8 <__aeabi_ui2f>
 80008a0:	4603      	mov	r3, r0
 80008a2:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <readPressure+0x3c>)
 80008a6:	f000 ff23 	bl	80016f0 <HAL_ADC_Stop>
  return data;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001c4 	.word	0x200001c4

080008b8 <read3V3>:

float read3V3() {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  ADC_Select_CH1();
 80008be:	f7ff ffbf 	bl	8000840 <ADC_Select_CH1>
  HAL_ADC_Start(&hadc);
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <read3V3+0x3c>)
 80008c4:	f000 feb4 	bl	8001630 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 80008c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <read3V3+0x3c>)
 80008ce:	f000 ff3b 	bl	8001748 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc);
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <read3V3+0x3c>)
 80008d4:	f000 ffc8 	bl	8001868 <HAL_ADC_GetValue>
 80008d8:	4603      	mov	r3, r0
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd04 	bl	80002e8 <__aeabi_ui2f>
 80008e0:	4603      	mov	r3, r0
 80008e2:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <read3V3+0x3c>)
 80008e6:	f000 ff03 	bl	80016f0 <HAL_ADC_Stop>
  return data;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001c4 	.word	0x200001c4

080008f8 <belowVoltageThresh>:

bool belowVoltageThresh() {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	float voltage_value = read3V3();
 80008fe:	f7ff ffdb 	bl	80008b8 <read3V3>
 8000902:	6078      	str	r0, [r7, #4]
	if (voltage_value < VOLTAGE_THRESH) {
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <belowVoltageThresh+0x38>)
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fd93 	bl	8000434 <__aeabi_fcmplt>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d007      	beq.n	8000924 <belowVoltageThresh+0x2c>
		// Turn on red LED
	    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <belowVoltageThresh+0x3c>)
 800091c:	f001 fcb6 	bl	800228c <HAL_GPIO_WritePin>

		// Log error to SD card
//	    logSDCard("ERROR Voltage too low");
	    return true;
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <belowVoltageThresh+0x2e>
	} else {
		return false;
 8000924:	2300      	movs	r3, #0
	}
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40400000 	.word	0x40400000
 8000934:	40020800 	.word	0x40020800

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fcc2 	bl	80012c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f87d 	bl	8000a40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <main+0xe8>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f9c4 	bl	8000cd8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000950:	f000 f8c2 	bl	8000ad8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000954:	f000 f932 	bl	8000bbc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000958:	f000 f95e 	bl	8000c18 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800095c:	f000 f992 	bl	8000c84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2101      	movs	r1, #1
 8000964:	482f      	ldr	r0, [pc, #188]	; (8000a24 <main+0xec>)
 8000966:	f001 fc91 	bl	800228c <HAL_GPIO_WritePin>

  int voltage_thresh_count = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Check 3.3V threshold
	if (voltage_thresh_count > VOLTAGE_THRESH_CNT) {
 800096e:	2205      	movs	r2, #5
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	4293      	cmp	r3, r2
 8000974:	dd02      	ble.n	800097c <main+0x44>
		  // TODO: Voltage too low, exiting
		  exit(EXIT_SUCCESS);
 8000976:	2000      	movs	r0, #0
 8000978:	f004 fe18 	bl	80055ac <exit>
	  }

	  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	e04a      	b.n	8000a18 <main+0xe0>
		  enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <main+0xf0>)
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098a:	4928      	ldr	r1, [pc, #160]	; (8000a2c <main+0xf4>)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f7ff ff25 	bl	80007e4 <enableMux>
		  for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e035      	b.n	8000a0c <main+0xd4>
			  selectMux(pwr_sel, pwrMuxSelect, 4);
 80009a0:	2204      	movs	r2, #4
 80009a2:	4923      	ldr	r1, [pc, #140]	; (8000a30 <main+0xf8>)
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff fee9 	bl	800077c <selectMux>

			  if (belowVoltageThresh()) { // ADC channel for 3v3 sense
 80009aa:	f7ff ffa5 	bl	80008f8 <belowVoltageThresh>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <main+0x82>
				  voltage_thresh_count++;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
			  }

			  for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	e01f      	b.n	8000a00 <main+0xc8>
				  enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <main+0xfc>)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c8:	491b      	ldr	r1, [pc, #108]	; (8000a38 <main+0x100>)
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4610      	mov	r0, r2
 80009d4:	f7ff ff06 	bl	80007e4 <enableMux>
				  for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	e00a      	b.n	80009f4 <main+0xbc>
					  selectMux(sense_sel, senseMuxSelect, 8);
 80009de:	2208      	movs	r2, #8
 80009e0:	4916      	ldr	r1, [pc, #88]	; (8000a3c <main+0x104>)
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff feca 	bl	800077c <selectMux>

					  // Read voltage sense
					  float raw_pressure_voltage = readPressure(); // ADC channel for voltage
 80009e8:	f7ff ff46 	bl	8000878 <readPressure>
 80009ec:	6038      	str	r0, [r7, #0]
				  for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	ddf1      	ble.n	80009de <main+0xa6>
			  for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	dddc      	ble.n	80009c0 <main+0x88>
		  for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	ddc6      	ble.n	80009a0 <main+0x68>
	  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	3301      	adds	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	ddb1      	ble.n	8000982 <main+0x4a>
	if (voltage_thresh_count > VOLTAGE_THRESH_CNT) {
 8000a1e:	e7a6      	b.n	800096e <main+0x36>
 8000a20:	e000007c 	.word	0xe000007c
 8000a24:	40020800 	.word	0x40020800
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	08005644 	.word	0x08005644
 8000a30:	2000001c 	.word	0x2000001c
 8000a34:	20000028 	.word	0x20000028
 8000a38:	08005654 	.word	0x08005654
 8000a3c:	20000010 	.word	0x20000010

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b092      	sub	sp, #72	; 0x48
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fde4 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <SystemClock_Config+0x94>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <SystemClock_Config+0x94>)
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a70:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a72:	2312      	movs	r3, #18
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a86:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fa17 	bl	8003ec8 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000aa0:	f000 f9da 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fd33 	bl	8004528 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f9c6 	bl	8000e58 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3748      	adds	r7, #72	; 0x48
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000aea:	4a33      	ldr	r2, [pc, #204]	; (8000bb8 <MX_ADC_Init+0xe0>)
 8000aec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 3;
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b4a:	f000 fc2b 	bl	80013a4 <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000b54:	f000 f980 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b58:	2309      	movs	r3, #9
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b6a:	f000 fe89 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000b74:	f000 f970 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b86:	f000 fe7b 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000b90:	f000 f962 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b94:	2303      	movs	r3, #3
 8000b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_ADC_Init+0xdc>)
 8000b9e:	f000 fe6f 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC_Init+0xd4>
  {
    Error_Handler();
 8000ba8:	f000 f956 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200001c4 	.word	0x200001c4
 8000bb8:	40012400 	.word	0x40012400

08000bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <MX_I2C1_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x58>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bfa:	f001 fb5f 	bl	80022bc <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f928 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000170 	.word	0x20000170
 8000c10:	40005400 	.word	0x40005400
 8000c14:	000186a0 	.word	0x000186a0

08000c18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <MX_SPI2_Init+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_SPI2_Init+0x64>)
 8000c6a:	f003 fec9 	bl	8004a00 <HAL_SPI_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c74:	f000 f8f0 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000d4 	.word	0x200000d4
 8000c80:	40003800 	.word	0x40003800

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART3_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cbc:	f004 f81f 	bl	8004cfe <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f8c7 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000012c 	.word	0x2000012c
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a54      	ldr	r2, [pc, #336]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a4e      	ldr	r2, [pc, #312]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a42      	ldr	r2, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a3c      	ldr	r2, [pc, #240]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <MX_GPIO_Init+0x16c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000d66:	2200      	movs	r2, #0
 8000d68:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8000d6c:	4836      	ldr	r0, [pc, #216]	; (8000e48 <MX_GPIO_Init+0x170>)
 8000d6e:	f001 fa8d 	bl	800228c <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000d72:	2200      	movs	r2, #0
 8000d74:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8000d78:	4834      	ldr	r0, [pc, #208]	; (8000e4c <MX_GPIO_Init+0x174>)
 8000d7a:	f001 fa87 	bl	800228c <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f641 416d 	movw	r1, #7277	; 0x1c6d
 8000d84:	4832      	ldr	r0, [pc, #200]	; (8000e50 <MX_GPIO_Init+0x178>)
 8000d86:	f001 fa81 	bl	800228c <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4831      	ldr	r0, [pc, #196]	; (8000e54 <MX_GPIO_Init+0x17c>)
 8000d90:	f001 fa7c 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000d94:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8000d98:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <MX_GPIO_Init+0x170>)
 8000dae:	f001 f8ed 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000db2:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8000db6:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_GPIO_Init+0x174>)
 8000dcc:	f001 f8de 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin MCU_PB3_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000dd0:	f641 436d 	movw	r3, #7277	; 0x1c6d
 8000dd4:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4819      	ldr	r0, [pc, #100]	; (8000e50 <MX_GPIO_Init+0x178>)
 8000dea:	f001 f8cf 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_GPIO_Init+0x170>)
 8000e02:	f001 f8c3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_GPIO_Init+0x174>)
 8000e1c:	f001 f8b6 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000e20:	2304      	movs	r3, #4
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_GPIO_Init+0x17c>)
 8000e38:	f001 f8a8 	bl	8001f8c <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_MspInit+0x68>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_MspInit+0x68>)
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	6253      	str	r3, [r2, #36]	; 0x24
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_MspInit+0x68>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_MspInit+0x68>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_MspInit+0x68>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x68>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x68>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_MspInit+0x68>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x68>)
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f000 ffa7 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 ffc0 	bl	8001e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <HAL_ADC_MspInit+0xd4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d153      	bne.n	8000f9a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_ADC_MspInit+0xd8>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8000f52:	2304      	movs	r3, #4
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <HAL_ADC_MspInit+0xdc>)
 8000f66:	f001 f811 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_SENSE_Pin;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VOLTAGE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000f7e:	f001 f805 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <HAL_ADC_MspInit+0xe4>)
 8000f96:	f000 fff9 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012400 	.word	0x40012400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_I2C_MspInit+0x9c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d138      	bne.n	800104c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001004:	2304      	movs	r3, #4
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <HAL_I2C_MspInit+0xa4>)
 8001010:	f000 ffbc 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101e:	6253      	str	r3, [r2, #36]	; 0x24
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_I2C_MspInit+0xa0>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201f      	movs	r0, #31
 8001032:	f000 feea 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001036:	201f      	movs	r0, #31
 8001038:	f000 ff03 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2020      	movs	r0, #32
 8001042:	f000 fee2 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001046:	2020      	movs	r0, #32
 8001048:	f000 fefb 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <HAL_SPI_MspInit+0x8c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d130      	bne.n	80010e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6253      	str	r3, [r2, #36]	; 0x24
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c4:	2305      	movs	r3, #5
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_SPI_MspInit+0x94>)
 80010d0:	f000 ff5c 	bl	8001f8c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2024      	movs	r0, #36	; 0x24
 80010da:	f000 fe96 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010de:	2024      	movs	r0, #36	; 0x24
 80010e0:	f000 feaf 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_UART_MspInit+0x8c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d130      	bne.n	800117c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0x90>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6253      	str	r3, [r2, #36]	; 0x24
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_UART_MspInit+0x90>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800115c:	2307      	movs	r3, #7
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_UART_MspInit+0x94>)
 8001168:	f000 ff10 	bl	8001f8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2027      	movs	r0, #39	; 0x27
 8001172:	f000 fe4a 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001176:	2027      	movs	r0, #39	; 0x27
 8001178:	f000 fe63 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40004800 	.word	0x40004800
 8001188:	40023800 	.word	0x40023800
 800118c:	40020800 	.word	0x40020800

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 f8c9 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}

080011de <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <I2C1_EV_IRQHandler+0x10>)
 80011f2:	f001 f9a7 	bl	8002544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000170 	.word	0x20000170

08001200 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <I2C1_ER_IRQHandler+0x10>)
 8001206:	f001 fb0e 	bl	8002826 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000170 	.word	0x20000170

08001214 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <SPI2_IRQHandler+0x10>)
 800121a:	f003 fc6d 	bl	8004af8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000d4 	.word	0x200000d4

08001228 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <USART3_IRQHandler+0x10>)
 800122e:	f003 fdb3 	bl	8004d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000012c 	.word	0x2000012c

0800123c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001246:	f004 f9ab 	bl	80055a0 <__errno>
 800124a:	4603      	mov	r3, r0
 800124c:	2216      	movs	r2, #22
 800124e:	601a      	str	r2, [r3, #0]
	return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe7 	bl	800123c <_kill>
	while (1) {}		/* Make sure we hang here */
 800126e:	e7fe      	b.n	800126e <_exit+0x12>

08001270 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a2:	f7ff ffe5 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f004 f995 	bl	80055d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fb45 	bl	8000938 <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80012b8:	080056ac 	.word	0x080056ac
  ldr r2, =_sbss
 80012bc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80012c0:	2000021c 	.word	0x2000021c

080012c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_IRQHandler>

080012c6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 fd8f 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 f80e 	bl	80012f8 <HAL_InitTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	e001      	b.n	80012ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e8:	f7ff fdbc 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_InitTick+0x68>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d022      	beq.n	8001352 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_InitTick+0x6c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_InitTick+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001318:	fbb1 f3f3 	udiv	r3, r1, r3
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fd9c 	bl	8001e5e <HAL_SYSTICK_Config>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d809      	bhi.n	8001346 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001332:	2200      	movs	r2, #0
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	f04f 30ff 	mov.w	r0, #4294967295
 800133a:	f000 fd66 	bl	8001e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_InitTick+0x70>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e007      	b.n	8001356 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e004      	b.n	8001356 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000050 	.word	0x20000050
 8001364:	20000048 	.word	0x20000048
 8001368:	2000004c 	.word	0x2000004c

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x1c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x20>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_IncTick+0x1c>)
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000218 	.word	0x20000218
 800138c:	20000050 	.word	0x20000050

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000218 	.word	0x20000218

080013a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e127      	b.n	8001614 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b8e      	ldr	r3, [pc, #568]	; (800161c <HAL_ADC_Init+0x278>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a8d      	ldr	r2, [pc, #564]	; (800161c <HAL_ADC_Init+0x278>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	4b8b      	ldr	r3, [pc, #556]	; (800161c <HAL_ADC_Init+0x278>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fd69 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80ff 	bne.w	800160a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001414:	f023 0302 	bic.w	r3, r3, #2
 8001418:	f043 0202 	orr.w	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001420:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_ADC_Init+0x27c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	497c      	ldr	r1, [pc, #496]	; (8001620 <HAL_ADC_Init+0x27c>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800143a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	4619      	mov	r1, r3
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800145e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001464:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001486:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148a:	4313      	orrs	r3, r2
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	2b10      	cmp	r3, #16
 8001494:	d007      	beq.n	80014a6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800149e:	4313      	orrs	r3, r2
 80014a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a2:	4313      	orrs	r3, r2
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b40      	cmp	r3, #64	; 0x40
 80014b2:	d04f      	beq.n	8001554 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ba:	4313      	orrs	r3, r2
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014c6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6912      	ldr	r2, [r2, #16]
 80014cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80014d0:	d003      	beq.n	80014da <HAL_ADC_Init+0x136>
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6912      	ldr	r2, [r2, #16]
 80014d6:	2a01      	cmp	r2, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_ADC_Init+0x13c>
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	e000      	b.n	80014e2 <HAL_ADC_Init+0x13e>
 80014e0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80014e2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e6:	4313      	orrs	r3, r2
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d125      	bne.n	8001540 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d114      	bne.n	8001528 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	3b01      	subs	r3, #1
 8001504:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	fa92 f2a2 	rbit	r2, r2
 8001510:	617a      	str	r2, [r7, #20]
  return result;
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	4093      	lsls	r3, r2
 800151c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001522:	4313      	orrs	r3, r2
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
 8001526:	e00b      	b.n	8001540 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_ADC_Init+0x280>)
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001550:	430b      	orrs	r3, r1
 8001552:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_ADC_Init+0x284>)
 800155c:	4013      	ands	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001570:	d003      	beq.n	800157a <HAL_ADC_Init+0x1d6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d119      	bne.n	80015ae <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800158e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	fa92 f2a2 	rbit	r2, r2
 8001596:	60fa      	str	r2, [r7, #12]
  return result;
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	fab2 f282 	clz	r2, r2
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	fa03 f202 	lsl.w	r2, r3, r2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_ADC_Init+0x288>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d10b      	bne.n	80015e6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e4:	e014      	b.n	8001610 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f023 0312 	bic.w	r3, r3, #18
 80015ee:	f043 0210 	orr.w	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001608:	e002      	b.n	8001610 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001614:	4618      	mov	r0, r3
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40012700 	.word	0x40012700
 8001624:	fcfc16ff 	.word	0xfcfc16ff
 8001628:	c0fff18d 	.word	0xc0fff18d
 800162c:	bf80fffe 	.word	0xbf80fffe

08001630 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_ADC_Start+0x1a>
 8001646:	2302      	movs	r3, #2
 8001648:	e04e      	b.n	80016e8 <HAL_ADC_Start+0xb8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fa64 	bl	8001b20 <ADC_Enable>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d141      	bne.n	80016e6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800168c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a6:	f023 0206 	bic.w	r2, r3, #6
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	651a      	str	r2, [r3, #80]	; 0x50
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016c6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_Stop+0x1a>
 8001706:	2302      	movs	r3, #2
 8001708:	e01a      	b.n	8001740 <HAL_ADC_Stop+0x50>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fa60 	bl	8001bd8 <ADC_ConversionStop_Disable>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f043 0201 	orr.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d113      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001774:	d10b      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e068      	b.n	8001860 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800178e:	f7ff fdff 	bl	8001390 <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001794:	e021      	b.n	80017da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d01d      	beq.n	80017da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x6c>
 80017a4:	f7ff fdf4 	bl	8001390 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d212      	bcs.n	80017da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e042      	b.n	8001860 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0d6      	beq.n	8001796 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0212 	mvn.w	r2, #18
 80017f8:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d124      	bne.n	800185e <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11f      	bne.n	800185e <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001836:	2b00      	cmp	r3, #0
 8001838:	d111      	bne.n	800185e <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x20>
 800189c:	2302      	movs	r3, #2
 800189e:	e134      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x28a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d81c      	bhi.n	80018ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b05      	subs	r3, #5
 80018c2:	221f      	movs	r2, #31
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4019      	ands	r1, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b05      	subs	r3, #5
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
 80018e8:	e07e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d81c      	bhi.n	800192c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b23      	subs	r3, #35	; 0x23
 8001904:	221f      	movs	r2, #31
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	4019      	ands	r1, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b23      	subs	r3, #35	; 0x23
 800191e:	fa00 f203 	lsl.w	r2, r0, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c
 800192a:	e05d      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b12      	cmp	r3, #18
 8001932:	d81c      	bhi.n	800196e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	3b41      	subs	r3, #65	; 0x41
 8001946:	221f      	movs	r2, #31
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b41      	subs	r3, #65	; 0x41
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
 800196c:	e03c      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b18      	cmp	r3, #24
 8001974:	d81c      	bhi.n	80019b0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b5f      	subs	r3, #95	; 0x5f
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b5f      	subs	r3, #95	; 0x5f
 80019a2:	fa00 f203 	lsl.w	r2, r0, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
 80019ae:	e01b      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b7d      	subs	r3, #125	; 0x7d
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4019      	ands	r1, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b7d      	subs	r3, #125	; 0x7d
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d81a      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6959      	ldr	r1, [r3, #20]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	2207      	movs	r2, #7
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4019      	ands	r1, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6898      	ldr	r0, [r3, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	e042      	b.n	8001aac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b13      	cmp	r3, #19
 8001a2c:	d81c      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6919      	ldr	r1, [r3, #16]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b1e      	subs	r3, #30
 8001a40:	2207      	movs	r2, #7
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4019      	ands	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6898      	ldr	r0, [r3, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	3b1e      	subs	r3, #30
 8001a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e021      	b.n	8001aac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b1a      	cmp	r3, #26
 8001a6e:	d81c      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b3c      	subs	r3, #60	; 0x3c
 8001a82:	2207      	movs	r2, #7
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6898      	ldr	r0, [r3, #8]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b3c      	subs	r3, #60	; 0x3c
 8001a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001aaa:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d003      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab8:	2b11      	cmp	r3, #17
 8001aba:	d121      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_ADC_ConfigChannel+0x294>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11b      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_ADC_ConfigChannel+0x294>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_ADC_ConfigChannel+0x294>)
 8001ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d111      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_ADC_ConfigChannel+0x298>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_ADC_ConfigChannel+0x29c>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9a      	lsrs	r2, r3, #18
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001af2:	e002      	b.n	8001afa <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40012700 	.word	0x40012700
 8001b18:	20000048 	.word	0x20000048
 8001b1c:	431bde83 	.word	0x431bde83

08001b20 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	d043      	beq.n	8001bc6 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <ADC_Enable+0xb0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <ADC_Enable+0xb4>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	0c9a      	lsrs	r2, r3, #18
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001b62:	e002      	b.n	8001b6a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001b70:	f7ff fc0e 	bl	8001390 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b76:	e01f      	b.n	8001bb8 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001b78:	f7ff fc0a 	bl	8001390 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d918      	bls.n	8001bb8 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d011      	beq.n	8001bb8 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e007      	b.n	8001bc8 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d1d8      	bne.n	8001b78 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000048 	.word	0x20000048
 8001bd4:	431bde83 	.word	0x431bde83

08001bd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d12e      	bne.n	8001c50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c02:	f7ff fbc5 	bl	8001390 <HAL_GetTick>
 8001c06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c08:	e01b      	b.n	8001c42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001c0a:	f7ff fbc1 	bl	8001390 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d914      	bls.n	8001c42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d10d      	bne.n	8001c42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e007      	b.n	8001c52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d0dc      	beq.n	8001c0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <__NVIC_EnableIRQ+0x34>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff90 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff2d 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff42 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff90 	bl	8001d4c <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5f 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff35 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e022      	b.n	8001ee6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 021c 	and.w	r2, r3, #28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d005      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e029      	b.n	8001f68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020e 	bic.w	r2, r2, #14
 8001f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 021c 	and.w	r2, r3, #28
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
    }
  }
  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f80:	b2db      	uxtb	r3, r3
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fa2:	e154      	b.n	800224e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8146 	beq.w	8002248 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d005      	beq.n	8001fd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d130      	bne.n	8002036 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800200a:	2201      	movs	r2, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 0201 	and.w	r2, r3, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b03      	cmp	r3, #3
 8002040:	d017      	beq.n	8002072 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d123      	bne.n	80020c6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	6939      	ldr	r1, [r7, #16]
 80020c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0203 	and.w	r2, r3, #3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80a0 	beq.w	8002248 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002108:	4b58      	ldr	r3, [pc, #352]	; (800226c <HAL_GPIO_Init+0x2e0>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_GPIO_Init+0x2e0>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <HAL_GPIO_Init+0x2e0>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002120:	4a53      	ldr	r2, [pc, #332]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d019      	beq.n	8002180 <HAL_GPIO_Init+0x1f4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a4a      	ldr	r2, [pc, #296]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_GPIO_Init+0x1f0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00d      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_GPIO_Init+0x1e4>
 800216c:	2304      	movs	r3, #4
 800216e:	e008      	b.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002170:	2305      	movs	r3, #5
 8002172:	e006      	b.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002174:	2303      	movs	r3, #3
 8002176:	e004      	b.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002178:	2302      	movs	r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x1f6>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002180:	2300      	movs	r3, #0
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	f002 0203 	and.w	r2, r2, #3
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	4093      	lsls	r3, r2
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002192:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a0:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021c4:	4a30      	ldr	r2, [pc, #192]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ee:	4a26      	ldr	r2, [pc, #152]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f aea3 	bne.w	8001fa4 <HAL_GPIO_Init+0x18>
  }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40010000 	.word	0x40010000
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e12b      	b.n	8002526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fe68 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002320:	f002 fae6 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a81      	ldr	r2, [pc, #516]	; (8002530 <HAL_I2C_Init+0x274>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d807      	bhi.n	8002340 <HAL_I2C_Init+0x84>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_I2C_Init+0x278>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e006      	b.n	800234e <HAL_I2C_Init+0x92>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a7d      	ldr	r2, [pc, #500]	; (8002538 <HAL_I2C_Init+0x27c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	bf94      	ite	ls
 8002348:	2301      	movls	r3, #1
 800234a:	2300      	movhi	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0e7      	b.n	8002526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a78      	ldr	r2, [pc, #480]	; (800253c <HAL_I2C_Init+0x280>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a6a      	ldr	r2, [pc, #424]	; (8002530 <HAL_I2C_Init+0x274>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d802      	bhi.n	8002390 <HAL_I2C_Init+0xd4>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3301      	adds	r3, #1
 800238e:	e009      	b.n	80023a4 <HAL_I2C_Init+0xe8>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_I2C_Init+0x284>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	3301      	adds	r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	495c      	ldr	r1, [pc, #368]	; (8002530 <HAL_I2C_Init+0x274>)
 80023c0:	428b      	cmp	r3, r1
 80023c2:	d819      	bhi.n	80023f8 <HAL_I2C_Init+0x13c>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e59      	subs	r1, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d8:	400b      	ands	r3, r1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_I2C_Init+0x138>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e59      	subs	r1, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f2:	e051      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e04f      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d111      	bne.n	8002424 <HAL_I2C_Init+0x168>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e012      	b.n	800244a <HAL_I2C_Init+0x18e>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e58      	subs	r0, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Init+0x196>
 800244e:	2301      	movs	r3, #1
 8002450:	e022      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10e      	bne.n	8002478 <HAL_I2C_Init+0x1bc>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e58      	subs	r0, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	440b      	add	r3, r1
 8002468:	fbb0 f3f3 	udiv	r3, r0, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002476:	e00f      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	0099      	lsls	r1, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6911      	ldr	r1, [r2, #16]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	000186a0 	.word	0x000186a0
 8002534:	001e847f 	.word	0x001e847f
 8002538:	003d08ff 	.word	0x003d08ff
 800253c:	431bde83 	.word	0x431bde83
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002564:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d003      	beq.n	800257c <HAL_I2C_EV_IRQHandler+0x38>
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	f040 80c1 	bne.w	80026fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800259c:	d003      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x62>
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_EV_IRQHandler+0x66>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_I2C_EV_IRQHandler+0x68>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f000 8132 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00c      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0x92>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 fc63 	bl	8003e94 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fd6f 	bl	80030b2 <I2C_Master_SB>
 80025d4:	e092      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fde4 	bl	80031bc <I2C_Master_ADD10>
 80025f4:	e082      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xd2>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	0a5b      	lsrs	r3, r3, #9
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fdfd 	bl	800320e <I2C_Master_ADDR>
 8002614:	e072      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03b      	beq.n	800269a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	f000 80f3 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	09db      	lsrs	r3, r3, #7
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00f      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x11c>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	0a9b      	lsrs	r3, r3, #10
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x11c>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f9e9 	bl	8002a30 <I2C_MasterTransmit_TXE>
 800265e:	e04d      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80d6 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80cf 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	2b21      	cmp	r3, #33	; 0x21
 8002680:	d103      	bne.n	800268a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa70 	bl	8002b68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002688:	e0c7      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	f040 80c4 	bne.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fade 	bl	8002c54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002698:	e0bf      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a8:	f000 80b7 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00f      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x194>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x194>
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fb53 	bl	8002d7c <I2C_MasterReceive_RXNE>
 80026d6:	e011      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 809a 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	0a5b      	lsrs	r3, r3, #9
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8093 	beq.w	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fbf2 	bl	8002ede <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fa:	e08e      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
 80026fc:	e08d      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e007      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x20e>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	0a5b      	lsrs	r3, r3, #9
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 ffab 	bl	80036a6 <I2C_Slave_ADDR>
 8002750:	e066      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x22e>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	0a5b      	lsrs	r3, r3, #9
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 ffe6 	bl	800373c <I2C_Slave_STOPF>
 8002770:	e056      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	2b21      	cmp	r3, #33	; 0x21
 8002776:	d002      	beq.n	800277e <HAL_I2C_EV_IRQHandler+0x23a>
 8002778:	7bbb      	ldrb	r3, [r7, #14]
 800277a:	2b29      	cmp	r3, #41	; 0x29
 800277c:	d125      	bne.n	80027ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	09db      	lsrs	r3, r3, #7
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00f      	beq.n	80027aa <HAL_I2C_EV_IRQHandler+0x266>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	0a9b      	lsrs	r3, r3, #10
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_I2C_EV_IRQHandler+0x266>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fec3 	bl	800352e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a8:	e039      	b.n	800281e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d033      	beq.n	800281e <HAL_I2C_EV_IRQHandler+0x2da>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	0a5b      	lsrs	r3, r3, #9
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02d      	beq.n	800281e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fef0 	bl	80035a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c8:	e029      	b.n	800281e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00f      	beq.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	0a9b      	lsrs	r3, r3, #10
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fefa 	bl	80035e8 <I2C_SlaveReceive_RXNE>
 80027f4:	e014      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	0a5b      	lsrs	r3, r3, #9
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 ff28 	bl	8003664 <I2C_SlaveReceive_BTF>
 8002814:	e004      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800281e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08a      	sub	sp, #40	; 0x28
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002848:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x4e>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002872:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <HAL_I2C_ER_IRQHandler+0x78>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800289c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	0a9b      	lsrs	r3, r3, #10
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03f      	beq.n	800292a <HAL_I2C_ER_IRQHandler+0x104>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d039      	beq.n	800292a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80028b6:	7efb      	ldrb	r3, [r7, #27]
 80028b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028d0:	7ebb      	ldrb	r3, [r7, #26]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d112      	bne.n	80028fc <HAL_I2C_ER_IRQHandler+0xd6>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <HAL_I2C_ER_IRQHandler+0xd6>
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b21      	cmp	r3, #33	; 0x21
 80028e0:	d008      	beq.n	80028f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b29      	cmp	r3, #41	; 0x29
 80028e6:	d005      	beq.n	80028f4 <HAL_I2C_ER_IRQHandler+0xce>
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b28      	cmp	r3, #40	; 0x28
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b21      	cmp	r3, #33	; 0x21
 80028f2:	d103      	bne.n	80028fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 f851 	bl	800399c <I2C_Slave_AF>
 80028fa:	e016      	b.n	800292a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002904:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800290e:	7efb      	ldrb	r3, [r7, #27]
 8002910:	2b10      	cmp	r3, #16
 8002912:	d002      	beq.n	800291a <HAL_I2C_ER_IRQHandler+0xf4>
 8002914:	7efb      	ldrb	r3, [r7, #27]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d107      	bne.n	800292a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	0adb      	lsrs	r3, r3, #11
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <HAL_I2C_ER_IRQHandler+0x12e>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002952:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f001 f888 	bl	8003a7c <I2C_ITError>
  }
}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
 80029c8:	4613      	mov	r3, r2
 80029ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d150      	bne.n	8002af8 <I2C_MasterTransmit_TXE+0xc8>
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b21      	cmp	r3, #33	; 0x21
 8002a5a:	d14d      	bne.n	8002af8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d01d      	beq.n	8002a9e <I2C_MasterTransmit_TXE+0x6e>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d01a      	beq.n	8002a9e <I2C_MasterTransmit_TXE+0x6e>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a6e:	d016      	beq.n	8002a9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2211      	movs	r2, #17
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff6c 	bl	8002974 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a9c:	e060      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d107      	bne.n	8002ae8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff81 	bl	80029e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ae6:	e03b      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff3f 	bl	8002974 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002af6:	e033      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b21      	cmp	r3, #33	; 0x21
 8002afc:	d005      	beq.n	8002b0a <I2C_MasterTransmit_TXE+0xda>
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d12d      	bne.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b22      	cmp	r3, #34	; 0x22
 8002b08:	d12a      	bne.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b24:	e01c      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d103      	bne.n	8002b3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f88e 	bl	8002c54 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b38:	e012      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b5e:	e7ff      	b.n	8002b60 <I2C_MasterTransmit_TXE+0x130>
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b21      	cmp	r3, #33	; 0x21
 8002b80:	d164      	bne.n	8002c4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bb0:	e04c      	b.n	8002c4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d01d      	beq.n	8002bf4 <I2C_MasterTransmit_BTF+0x8c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d01a      	beq.n	8002bf4 <I2C_MasterTransmit_BTF+0x8c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc4:	d016      	beq.n	8002bf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2211      	movs	r2, #17
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fec1 	bl	8002974 <HAL_I2C_MasterTxCpltCallback>
}
 8002bf2:	e02b      	b.n	8002c4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d107      	bne.n	8002c3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fed6 	bl	80029e8 <HAL_I2C_MemTxCpltCallback>
}
 8002c3c:	e006      	b.n	8002c4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fe94 	bl	8002974 <HAL_I2C_MasterTxCpltCallback>
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11d      	bne.n	8002ca8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10b      	bne.n	8002c8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c8a:	e073      	b.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	121b      	asrs	r3, r3, #8
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ca6:	e065      	b.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10b      	bne.n	8002cc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cc6:	e055      	b.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d151      	bne.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b22      	cmp	r3, #34	; 0x22
 8002cd4:	d10d      	bne.n	8002cf2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cf0:	e040      	b.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b21      	cmp	r3, #33	; 0x21
 8002d00:	d112      	bne.n	8002d28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d26:	e025      	b.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d120      	bne.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b21      	cmp	r3, #33	; 0x21
 8002d36:	d11d      	bne.n	8002d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fe3a 	bl	80029e8 <HAL_I2C_MemTxCpltCallback>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b22      	cmp	r3, #34	; 0x22
 8002d8e:	f040 80a2 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d921      	bls.n	8002de4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	f040 8082 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002de2:	e078      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d074      	beq.n	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d002      	beq.n	8002df8 <I2C_MasterReceive_RXNE+0x7c>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d16e      	bne.n	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f001 f819 	bl	8003e30 <I2C_WaitOnSTOPRequestThroughIT>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d142      	bne.n	8002e8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d10a      	bne.n	8002e74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fdc4 	bl	80029fa <HAL_I2C_MemRxCpltCallback>
}
 8002e72:	e030      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2212      	movs	r2, #18
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fd7f 	bl	8002986 <HAL_I2C_MasterRxCpltCallback>
}
 8002e88:	e025      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fd9b 	bl	8002a0c <HAL_I2C_ErrorCallback>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d11b      	bne.n	8002f2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f2c:	e0bd      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d129      	bne.n	8002f8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00a      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d007      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f8a:	e08e      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d176      	bne.n	8003084 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <I2C_MasterReceive_BTF+0xc4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e019      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d002      	beq.n	8002fc0 <I2C_MasterReceive_BTF+0xe2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d108      	bne.n	8002fd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e00a      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d007      	beq.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d10a      	bne.n	800306e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fcc7 	bl	80029fa <HAL_I2C_MemRxCpltCallback>
}
 800306c:	e01d      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2212      	movs	r2, #18
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fc82 	bl	8002986 <HAL_I2C_MasterRxCpltCallback>
}
 8003082:	e012      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d117      	bne.n	80030f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030e0:	e067      	b.n	80031b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
}
 80030f4:	e05d      	b.n	80031b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d133      	bne.n	8003168 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b21      	cmp	r3, #33	; 0x21
 800310a:	d109      	bne.n	8003120 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e008      	b.n	8003132 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <I2C_Master_SB+0x92>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <I2C_Master_SB+0x100>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02d      	beq.n	80031b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]
}
 8003166:	e024      	b.n	80031b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	b29b      	uxth	r3, r3
 8003176:	11db      	asrs	r3, r3, #7
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f003 0306 	and.w	r3, r3, #6
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f063 030f 	orn	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
}
 800318c:	e011      	b.n	80031b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10d      	bne.n	80031b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	b29b      	uxth	r3, r3
 800319c:	11db      	asrs	r3, r3, #7
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0306 	and.w	r3, r3, #6
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f063 030e 	orn	r3, r3, #14
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <I2C_Master_ADD10+0x26>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <I2C_Master_ADD10+0x48>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	605a      	str	r2, [r3, #4]
  }
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800320e:	b480      	push	{r7}
 8003210:	b091      	sub	sp, #68	; 0x44
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b22      	cmp	r3, #34	; 0x22
 8003236:	f040 8169 	bne.w	800350c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <I2C_Master_ADDR+0x54>
 8003242:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d10b      	bne.n	8003262 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	e160      	b.n	8003524 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <I2C_Master_ADDR+0x98>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003272:	d118      	bne.n	80032a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50
 80032a4:	e13e      	b.n	8003524 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e115      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 808a 	bne.w	80033f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ea:	d137      	bne.n	800335c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d113      	bne.n	8003334 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	e0e7      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e0d3      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	2b08      	cmp	r3, #8
 8003360:	d02e      	beq.n	80033c0 <I2C_Master_ADDR+0x1b2>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b20      	cmp	r3, #32
 8003366:	d02b      	beq.n	80033c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	2b12      	cmp	r3, #18
 800336c:	d102      	bne.n	8003374 <I2C_Master_ADDR+0x166>
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2b01      	cmp	r3, #1
 8003372:	d125      	bne.n	80033c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00e      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b02      	cmp	r3, #2
 800337e:	d00b      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	2b10      	cmp	r3, #16
 8003384:	d008      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	e0a1      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e085      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d14d      	bne.n	800349e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2b04      	cmp	r3, #4
 8003406:	d016      	beq.n	8003436 <I2C_Master_ADDR+0x228>
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b02      	cmp	r3, #2
 800340c:	d013      	beq.n	8003436 <I2C_Master_ADDR+0x228>
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b10      	cmp	r3, #16
 8003412:	d010      	beq.n	8003436 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e007      	b.n	8003446 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003454:	d117      	bne.n	8003486 <I2C_Master_ADDR+0x278>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800345c:	d00b      	beq.n	8003476 <I2C_Master_ADDR+0x268>
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2b01      	cmp	r3, #1
 8003462:	d008      	beq.n	8003476 <I2C_Master_ADDR+0x268>
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2b08      	cmp	r3, #8
 8003468:	d005      	beq.n	8003476 <I2C_Master_ADDR+0x268>
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	2b10      	cmp	r3, #16
 800346e:	d002      	beq.n	8003476 <I2C_Master_ADDR+0x268>
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	2b20      	cmp	r3, #32
 8003474:	d107      	bne.n	8003486 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003484:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	e032      	b.n	8003504 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034bc:	d117      	bne.n	80034ee <I2C_Master_ADDR+0x2e0>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c4:	d00b      	beq.n	80034de <I2C_Master_ADDR+0x2d0>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d008      	beq.n	80034de <I2C_Master_ADDR+0x2d0>
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d005      	beq.n	80034de <I2C_Master_ADDR+0x2d0>
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d002      	beq.n	80034de <I2C_Master_ADDR+0x2d0>
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d107      	bne.n	80034ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800350a:	e00b      	b.n	8003524 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	e7ff      	b.n	8003524 <I2C_Master_ADDR+0x316>
 8003524:	bf00      	nop
 8003526:	3744      	adds	r7, #68	; 0x44
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d02b      	beq.n	80035a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d114      	bne.n	80035a0 <I2C_SlaveTransmit_TXE+0x72>
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b29      	cmp	r3, #41	; 0x29
 800357a:	d111      	bne.n	80035a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2221      	movs	r2, #33	; 0x21
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2228      	movs	r2, #40	; 0x28
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff f9fc 	bl	8002998 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d011      	beq.n	80035de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02c      	beq.n	800365c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d114      	bne.n	800365c <I2C_SlaveReceive_RXNE+0x74>
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b2a      	cmp	r3, #42	; 0x2a
 8003636:	d111      	bne.n	800365c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2222      	movs	r2, #34	; 0x22
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2228      	movs	r2, #40	; 0x28
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff f9a7 	bl	80029aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c0:	2b28      	cmp	r3, #40	; 0x28
 80036c2:	d127      	bne.n	8003714 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	09db      	lsrs	r3, r3, #7
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	81bb      	strh	r3, [r7, #12]
 80036f6:	e002      	b.n	80036fe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003706:	89ba      	ldrh	r2, [r7, #12]
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff f955 	bl	80029bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003712:	e00e      	b.n	8003732 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003798:	d172      	bne.n	8003880 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b22      	cmp	r3, #34	; 0x22
 800379e:	d002      	beq.n	80037a6 <I2C_Slave_STOPF+0x6a>
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b2a      	cmp	r3, #42	; 0x2a
 80037a4:	d135      	bne.n	8003812 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fbc7 	bl	8001f72 <HAL_DMA_GetState>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d049      	beq.n	800387e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4a69      	ldr	r2, [pc, #420]	; (8003994 <I2C_Slave_STOPF+0x258>)
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fb7a 	bl	8001ef0 <HAL_DMA_Abort_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03d      	beq.n	800387e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800380c:	4610      	mov	r0, r2
 800380e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003810:	e035      	b.n	800387e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0204 	orr.w	r2, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003844:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fb91 	bl	8001f72 <HAL_DMA_GetState>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d014      	beq.n	8003880 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	4a4e      	ldr	r2, [pc, #312]	; (8003994 <I2C_Slave_STOPF+0x258>)
 800385c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fb44 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
 800387c:	e000      	b.n	8003880 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800387e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03e      	beq.n	8003908 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d112      	bne.n	80038be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d112      	bne.n	80038f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8b3 	bl	8003a7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003916:	e039      	b.n	800398c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b2a      	cmp	r3, #42	; 0x2a
 800391c:	d109      	bne.n	8003932 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2228      	movs	r2, #40	; 0x28
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff f83c 	bl	80029aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b28      	cmp	r3, #40	; 0x28
 800393c:	d111      	bne.n	8003962 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <I2C_Slave_STOPF+0x25c>)
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff f83b 	bl	80029d6 <HAL_I2C_ListenCpltCallback>
}
 8003960:	e014      	b.n	800398c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	2b22      	cmp	r3, #34	; 0x22
 8003968:	d002      	beq.n	8003970 <I2C_Slave_STOPF+0x234>
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b22      	cmp	r3, #34	; 0x22
 800396e:	d10d      	bne.n	800398c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff f80f 	bl	80029aa <HAL_I2C_SlaveRxCpltCallback>
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	08003ce1 	.word	0x08003ce1
 8003998:	ffff0000 	.word	0xffff0000

0800399c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d002      	beq.n	80039be <I2C_Slave_AF+0x22>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d129      	bne.n	8003a12 <I2C_Slave_AF+0x76>
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b28      	cmp	r3, #40	; 0x28
 80039c2:	d126      	bne.n	8003a12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <I2C_Slave_AF+0xdc>)
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe ffe3 	bl	80029d6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a10:	e02e      	b.n	8003a70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b21      	cmp	r3, #33	; 0x21
 8003a16:	d126      	bne.n	8003a66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <I2C_Slave_AF+0xdc>)
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fe ff9a 	bl	8002998 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a64:	e004      	b.n	8003a70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6e:	615a      	str	r2, [r3, #20]
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a94:	7bbb      	ldrb	r3, [r7, #14]
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d002      	beq.n	8003aa0 <I2C_ITError+0x24>
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d10a      	bne.n	8003ab6 <I2C_ITError+0x3a>
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b22      	cmp	r3, #34	; 0x22
 8003aa4:	d107      	bne.n	8003ab6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003abc:	2b28      	cmp	r3, #40	; 0x28
 8003abe:	d107      	bne.n	8003ad0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2228      	movs	r2, #40	; 0x28
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ace:	e015      	b.n	8003afc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ade:	d00a      	beq.n	8003af6 <I2C_ITError+0x7a>
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	d007      	beq.n	8003af6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d162      	bne.n	8003bd2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d020      	beq.n	8003b6c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	4a6a      	ldr	r2, [pc, #424]	; (8003cd8 <I2C_ITError+0x25c>)
 8003b30:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f9da 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8089 	beq.w	8003c56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b66:	4610      	mov	r0, r2
 8003b68:	4798      	blx	r3
 8003b6a:	e074      	b.n	8003c56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4a59      	ldr	r2, [pc, #356]	; (8003cd8 <I2C_ITError+0x25c>)
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe f9b9 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d068      	beq.n	8003c56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d10b      	bne.n	8003baa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
 8003bd0:	e041      	b.n	8003c56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b60      	cmp	r3, #96	; 0x60
 8003bdc:	d125      	bne.n	8003c2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d10b      	bne.n	8003c12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fefb 	bl	8002a1e <HAL_I2C_AbortCpltCallback>
 8003c28:	e015      	b.n	8003c56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d10b      	bne.n	8003c50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fe fedb 	bl	8002a0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10e      	bne.n	8003c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d113      	bne.n	8003cd0 <I2C_ITError+0x254>
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b28      	cmp	r3, #40	; 0x28
 8003cac:	d110      	bne.n	8003cd0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <I2C_ITError+0x260>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fe83 	bl	80029d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08003ce1 	.word	0x08003ce1
 8003cdc:	ffff0000 	.word	0xffff0000

08003ce0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <I2C_DMAAbort+0x148>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	08db      	lsrs	r3, r3, #3
 8003d00:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <I2C_DMAAbort+0x14c>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a1a      	lsrs	r2, r3, #8
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00da      	lsls	r2, r3, #3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d26:	e00a      	b.n	8003d3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d0ea      	beq.n	8003d14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	2200      	movs	r2, #0
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d10e      	bne.n	8003dce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7fe fe29 	bl	8002a1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dcc:	e027      	b.n	8003e1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dd4:	2b28      	cmp	r3, #40	; 0x28
 8003dd6:	d117      	bne.n	8003e08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2228      	movs	r2, #40	; 0x28
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e06:	e007      	b.n	8003e18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7fe fdf7 	bl	8002a0c <HAL_I2C_ErrorCallback>
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000048 	.word	0x20000048
 8003e2c:	14f8b589 	.word	0x14f8b589

08003e30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	0a1a      	lsrs	r2, r3, #8
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e008      	b.n	8003e80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d0e9      	beq.n	8003e52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000048 	.word	0x20000048
 8003e90:	14f8b589 	.word	0x14f8b589

08003e94 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ea4:	d103      	bne.n	8003eae <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003eac:	e007      	b.n	8003ebe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eb6:	d102      	bne.n	8003ebe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e31d      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eda:	4b94      	ldr	r3, [pc, #592]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee4:	4b91      	ldr	r3, [pc, #580]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d07b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d006      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0e:	4b87      	ldr	r3, [pc, #540]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06a      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x128>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d166      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e2f7      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e02d      	b.n	8003f98 <HAL_RCC_OscConfig+0xd0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCC_OscConfig+0x96>
 8003f44:	4b79      	ldr	r3, [pc, #484]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a78      	ldr	r2, [pc, #480]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a75      	ldr	r2, [pc, #468]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCC_OscConfig+0xd0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0xb8>
 8003f66:	4b71      	ldr	r3, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6d      	ldr	r2, [pc, #436]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0xd0>
 8003f80:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a69      	ldr	r2, [pc, #420]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a66      	ldr	r2, [pc, #408]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f9f6 	bl	8001390 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f9f2 	bl	8001390 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e2ad      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fba:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd f9e2 	bl	8001390 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd f9de 	bl	8001390 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e299      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d05a      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d005      	beq.n	8004010 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d119      	bne.n	800403e <HAL_RCC_OscConfig+0x176>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004010:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_OscConfig+0x160>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e276      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x264>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	493d      	ldr	r1, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403c:	e03a      	b.n	80040b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d020      	beq.n	8004088 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004046:	4b3a      	ldr	r3, [pc, #232]	; (8004130 <HAL_RCC_OscConfig+0x268>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd f9a0 	bl	8001390 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004054:	f7fd f99c 	bl	8001390 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e257      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	492a      	ldr	r1, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
 8004086:	e015      	b.n	80040b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCC_OscConfig+0x268>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fd f97f 	bl	8001390 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004096:	f7fd f97b 	bl	8001390 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e236      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040a8:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCC_OscConfig+0x264>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80b8 	beq.w	8004232 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d170      	bne.n	80041aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x264>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_OscConfig+0x218>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e21a      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x264>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d921      	bls.n	8004134 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fc23 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e208      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4906      	ldr	r1, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	4901      	ldr	r1, [pc, #4]	; (800412c <HAL_RCC_OscConfig+0x264>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	e020      	b.n	800416e <HAL_RCC_OscConfig+0x2a6>
 800412c:	40023800 	.word	0x40023800
 8004130:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004134:	4ba4      	ldr	r3, [pc, #656]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	49a1      	ldr	r1, [pc, #644]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004146:	4ba0      	ldr	r3, [pc, #640]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	499c      	ldr	r1, [pc, #624]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fbee 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1d3      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	3301      	adds	r3, #1
 8004176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800417e:	4a92      	ldr	r2, [pc, #584]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	0912      	lsrs	r2, r2, #4
 8004184:	f002 020f 	and.w	r2, r2, #15
 8004188:	4990      	ldr	r1, [pc, #576]	; (80043cc <HAL_RCC_OscConfig+0x504>)
 800418a:	5c8a      	ldrb	r2, [r1, r2]
 800418c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800418e:	4a90      	ldr	r2, [pc, #576]	; (80043d0 <HAL_RCC_OscConfig+0x508>)
 8004190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004192:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_OscConfig+0x50c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd f8ae 	bl	80012f8 <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
 800419e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d045      	beq.n	8004232 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	e1b5      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d029      	beq.n	8004206 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041b2:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <HAL_RCC_OscConfig+0x510>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd f8ea 	bl	8001390 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c0:	f7fd f8e6 	bl	8001390 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1a1      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041d2:	4b7d      	ldr	r3, [pc, #500]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041de:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4977      	ldr	r1, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f0:	4b75      	ldr	r3, [pc, #468]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	4972      	ldr	r1, [pc, #456]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
 8004204:	e015      	b.n	8004232 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004206:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x510>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fd f8c0 	bl	8001390 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004214:	f7fd f8bc 	bl	8001390 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e177      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004226:	4b68      	ldr	r3, [pc, #416]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d030      	beq.n	80042a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004246:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_RCC_OscConfig+0x514>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424c:	f7fd f8a0 	bl	8001390 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004254:	f7fd f89c 	bl	8001390 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e157      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004266:	4b58      	ldr	r3, [pc, #352]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x38c>
 8004272:	e015      	b.n	80042a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_OscConfig+0x514>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fd f889 	bl	8001390 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004282:	f7fd f885 	bl	8001390 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e140      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004294:	4b4c      	ldr	r3, [pc, #304]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80b5 	beq.w	8004418 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	4a41      	ldr	r2, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6253      	str	r3, [r2, #36]	; 0x24
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <HAL_RCC_OscConfig+0x518>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCC_OscConfig+0x518>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <HAL_RCC_OscConfig+0x518>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd f84d 	bl	8001390 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd f849 	bl	8001390 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e104      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x518>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x466>
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	6353      	str	r3, [r2, #52]	; 0x34
 800432c:	e02d      	b.n	800438a <HAL_RCC_OscConfig+0x4c2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x488>
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	6353      	str	r3, [r2, #52]	; 0x34
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434c:	6353      	str	r3, [r2, #52]	; 0x34
 800434e:	e01c      	b.n	800438a <HAL_RCC_OscConfig+0x4c2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x4aa>
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 800435e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004362:	6353      	str	r3, [r2, #52]	; 0x34
 8004364:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6353      	str	r3, [r2, #52]	; 0x34
 8004370:	e00b      	b.n	800438a <HAL_RCC_OscConfig+0x4c2>
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437c:	6353      	str	r3, [r2, #52]	; 0x34
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 8004384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004388:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d015      	beq.n	80043be <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fc fffd 	bl	8001390 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fc fff9 	bl	8001390 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0b2      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCC_OscConfig+0x4d2>
 80043bc:	e023      	b.n	8004406 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7fc ffe7 	bl	8001390 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043c4:	e019      	b.n	80043fa <HAL_RCC_OscConfig+0x532>
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08005680 	.word	0x08005680
 80043d0:	20000048 	.word	0x20000048
 80043d4:	2000004c 	.word	0x2000004c
 80043d8:	42470020 	.word	0x42470020
 80043dc:	42470680 	.word	0x42470680
 80043e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fc ffd4 	bl	8001390 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e08d      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ee      	bne.n	80043e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004406:	7ffb      	ldrb	r3, [r7, #31]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d079      	beq.n	8004514 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d056      	beq.n	80044d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b02      	cmp	r3, #2
 800442c:	d13b      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_OscConfig+0x65c>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fc ffac 	bl	8001390 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc ffa8 	bl	8001390 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e063      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444e:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4319      	orrs	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	430b      	orrs	r3, r1
 8004472:	492b      	ldr	r1, [pc, #172]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x65c>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fc ff87 	bl	8001390 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fc ff83 	bl	8001390 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e03e      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x5be>
 80044a4:	e036      	b.n	8004514 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_OscConfig+0x65c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc ff70 	bl	8001390 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fc ff6c 	bl	8001390 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e027      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x5ec>
 80044d2:	e01f      	b.n	8004514 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e01a      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_RCC_OscConfig+0x658>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d10d      	bne.n	8004510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	42470060 	.word	0x42470060

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e11a      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b8f      	ldr	r3, [pc, #572]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d919      	bls.n	800457e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_RCC_ClockConfig+0x34>
 8004550:	4b8a      	ldr	r3, [pc, #552]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a89      	ldr	r2, [pc, #548]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b87      	ldr	r3, [pc, #540]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 0201 	bic.w	r2, r3, #1
 8004564:	4985      	ldr	r1, [pc, #532]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456c:	4b83      	ldr	r3, [pc, #524]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d001      	beq.n	800457e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0f9      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800458a:	4b7d      	ldr	r3, [pc, #500]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	497a      	ldr	r1, [pc, #488]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 808e 	beq.w	80046c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045b2:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d121      	bne.n	8004602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0d7      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0cb      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e2:	4b67      	ldr	r3, [pc, #412]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0bf      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045f2:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0b7      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	495c      	ldr	r1, [pc, #368]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fc febc 	bl	8001390 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d112      	bne.n	8004648 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fc feb4 	bl	8001390 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e09b      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800463a:	4b51      	ldr	r3, [pc, #324]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b08      	cmp	r3, #8
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_ClockConfig+0xfc>
 8004646:	e03e      	b.n	80046c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d112      	bne.n	8004676 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004652:	f7fc fe9d 	bl	8001390 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e084      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004668:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d1ee      	bne.n	8004652 <HAL_RCC_ClockConfig+0x12a>
 8004674:	e027      	b.n	80046c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d11d      	bne.n	80046ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fc fe86 	bl	8001390 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e06d      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004696:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_ClockConfig+0x158>
 80046a2:	e010      	b.n	80046c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fc fe74 	bl	8001390 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e05b      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ee      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c6:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d219      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_RCC_ClockConfig+0x1be>
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a27      	ldr	r2, [pc, #156]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	4923      	ldr	r1, [pc, #140]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCC_ClockConfig+0x254>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e034      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4917      	ldr	r1, [pc, #92]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490f      	ldr	r1, [pc, #60]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f823 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_RCC_ClockConfig+0x258>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490b      	ldr	r1, [pc, #44]	; (8004784 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x260>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x264>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fdc6 	bl	80012f8 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004770:	7afb      	ldrb	r3, [r7, #11]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00
 8004780:	40023800 	.word	0x40023800
 8004784:	08005680 	.word	0x08005680
 8004788:	20000048 	.word	0x20000048
 800478c:	2000004c 	.word	0x2000004c

08004790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004796:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d00c      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x30>
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d87c      	bhi.n	80048a4 <HAL_RCC_GetSysClockFreq+0x114>
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x24>
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x2a>
 80047b2:	e077      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x140>)
 80047b6:	613b      	str	r3, [r7, #16]
      break;
 80047b8:	e082      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80047bc:	613b      	str	r3, [r7, #16]
      break;
 80047be:	e07f      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	4a43      	ldr	r2, [pc, #268]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x148>)
 80047ca:	5cd3      	ldrb	r3, [r2, r3]
 80047cc:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0d9b      	lsrs	r3, r3, #22
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_GetSysClockFreq+0x13c>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01a      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	4939      	ldr	r1, [pc, #228]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80047f0:	fb01 f003 	mul.w	r0, r1, r3
 80047f4:	2100      	movs	r1, #0
 80047f6:	fb01 f102 	mul.w	r1, r1, r2
 80047fa:	1844      	adds	r4, r0, r1
 80047fc:	4935      	ldr	r1, [pc, #212]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80047fe:	fba2 0101 	umull	r0, r1, r2, r1
 8004802:	1863      	adds	r3, r4, r1
 8004804:	4619      	mov	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f7fb fe39 	bl	8000484 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4613      	mov	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e040      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	461c      	mov	r4, r3
 8004820:	f04f 0500 	mov.w	r5, #0
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	014b      	lsls	r3, r1, #5
 8004832:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004836:	0142      	lsls	r2, r0, #5
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	1b00      	subs	r0, r0, r4
 800483e:	eb61 0105 	sbc.w	r1, r1, r5
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	018b      	lsls	r3, r1, #6
 800484c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004850:	0182      	lsls	r2, r0, #6
 8004852:	1a12      	subs	r2, r2, r0
 8004854:	eb63 0301 	sbc.w	r3, r3, r1
 8004858:	f04f 0000 	mov.w	r0, #0
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	00d9      	lsls	r1, r3, #3
 8004862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004866:	00d0      	lsls	r0, r2, #3
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	1912      	adds	r2, r2, r4
 800486e:	eb45 0303 	adc.w	r3, r5, r3
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	0299      	lsls	r1, r3, #10
 800487c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004880:	0290      	lsls	r0, r2, #10
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	461a      	mov	r2, r3
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	f7fb fdf7 	bl	8000484 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4613      	mov	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	613b      	str	r3, [r7, #16]
      break;
 80048a2:	e00d      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_GetSysClockFreq+0x13c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0b5b      	lsrs	r3, r3, #13
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	613b      	str	r3, [r7, #16]
      break;
 80048be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c0:	693b      	ldr	r3, [r7, #16]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bdb0      	pop	{r4, r5, r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	016e3600 	.word	0x016e3600
 80048d8:	08005674 	.word	0x08005674

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e0:	4b02      	ldr	r3, [pc, #8]	; (80048ec <HAL_RCC_GetHCLKFreq+0x10>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	20000048 	.word	0x20000048

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f4:	f7ff fff2 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4903      	ldr	r1, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40023800 	.word	0x40023800
 8004914:	08005690 	.word	0x08005690

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800491c:	f7ff ffde 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0adb      	lsrs	r3, r3, #11
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	08005690 	.word	0x08005690

08004940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800494c:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d12c      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e016      	b.n	800499e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6253      	str	r3, [r2, #36]	; 0x24
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004990:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049a4:	d105      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049ac:	d101      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80049ae:	2301      	movs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0f      	ldr	r2, [pc, #60]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049be:	f043 0304 	orr.w	r3, r3, #4
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 0201 	bic.w	r2, r3, #1
 80049cc:	490b      	ldr	r1, [pc, #44]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d001      	beq.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	40023c00 	.word	0x40023c00

08004a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e06e      	b.n	8004af0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d009      	beq.n	8004a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
 8004a2a:	e005      	b.n	8004a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc fb04 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1a      	lsrs	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f002 0204 	and.w	r2, r2, #4
 8004ade:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10f      	bne.n	8004b3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
    return;
 8004b3a:	e0be      	b.n	8004cba <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_SPI_IRQHandler+0x66>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	09db      	lsrs	r3, r3, #7
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
    return;
 8004b5c:	e0ad      	b.n	8004cba <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_SPI_IRQHandler+0x80>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a1 	beq.w	8004cba <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 809a 	beq.w	8004cba <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d023      	beq.n	8004bda <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d011      	beq.n	8004bc2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	e00b      	b.n	8004bda <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
        return;
 8004bd8:	e06f      	b.n	8004cba <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d014      	beq.n	8004c10 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d04f      	beq.n	8004cb8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_SPI_IRQHandler+0x14c>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d034      	beq.n	8004cae <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0203 	bic.w	r2, r2, #3
 8004c52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d011      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <HAL_SPI_IRQHandler+0x1c8>)
 8004c62:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd f941 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <HAL_SPI_IRQHandler+0x1c8>)
 8004c8e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd f92b 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cac:	e003      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f808 	bl	8004cc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cb4:	e000      	b.n	8004cb8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004cb6:	bf00      	nop
    return;
 8004cb8:	bf00      	nop
  }
}
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08004cd7 	.word	0x08004cd7

08004cc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ffe7 	bl	8004cc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e03f      	b.n	8004d90 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fc f9e7 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2224      	movs	r2, #36	; 0x24
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fb48 	bl	80053d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10d      	bne.n	8004dea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_UART_IRQHandler+0x52>
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa4f 	bl	8005286 <UART_Receive_IT>
      return;
 8004de8:	e17b      	b.n	80050e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80b1 	beq.w	8004f54 <HAL_UART_IRQHandler+0x1bc>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <HAL_UART_IRQHandler+0x70>
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a6 	beq.w	8004f54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_UART_IRQHandler+0x90>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_UART_IRQHandler+0xb0>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0202 	orr.w	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_UART_IRQHandler+0xd0>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0204 	orr.w	r2, r3, #4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00f      	beq.n	8004e92 <HAL_UART_IRQHandler+0xfa>
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <HAL_UART_IRQHandler+0xee>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0208 	orr.w	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 811e 	beq.w	80050d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x11e>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9e8 	bl	8005286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_UART_IRQHandler+0x146>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d031      	beq.n	8004f42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f92a 	bl	8005138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d123      	bne.n	8004f3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d013      	beq.n	8004f32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4a76      	ldr	r2, [pc, #472]	; (80050e8 <HAL_UART_IRQHandler+0x350>)
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc ffea 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	e00e      	b.n	8004f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8ec 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	e00a      	b.n	8004f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8e8 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	e006      	b.n	8004f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8e4 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f4e:	e0c3      	b.n	80050d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	bf00      	nop
    return;
 8004f52:	e0c1      	b.n	80050d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 80a1 	bne.w	80050a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 809b 	beq.w	80050a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8095 	beq.w	80050a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d14e      	bne.n	8005038 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004fa4:	8a3b      	ldrh	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8098 	beq.w	80050dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fb0:	8a3a      	ldrh	r2, [r7, #16]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f080 8092 	bcs.w	80050dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8a3a      	ldrh	r2, [r7, #16]
 8004fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d02b      	beq.n	8005020 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0210 	bic.w	r2, r2, #16
 8005014:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc ff2b 	bl	8001e76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005028:	b29b      	uxth	r3, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	b29b      	uxth	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f876 	bl	8005122 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005036:	e051      	b.n	80050dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005040:	b29b      	uxth	r3, r3
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d047      	beq.n	80050e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005050:	8a7b      	ldrh	r3, [r7, #18]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d044      	beq.n	80050e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005064:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0210 	bic.w	r2, r2, #16
 8005092:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005094:	8a7b      	ldrh	r3, [r7, #18]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f842 	bl	8005122 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800509e:	e01f      	b.n	80050e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_UART_IRQHandler+0x324>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f87f 	bl	80051b8 <UART_Transmit_IT>
    return;
 80050ba:	e012      	b.n	80050e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <HAL_UART_IRQHandler+0x34a>
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8c0 	bl	8005256 <UART_EndTransmit_IT>
    return;
 80050d6:	e004      	b.n	80050e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80050d8:	bf00      	nop
 80050da:	e002      	b.n	80050e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80050e0:	bf00      	nop
  }
}
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08005191 	.word	0x08005191

080050ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800514e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	2b01      	cmp	r3, #1
 8005166:	d107      	bne.n	8005178 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0210 	bic.w	r2, r2, #16
 8005176:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff ffb0 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b21      	cmp	r3, #33	; 0x21
 80051ca:	d13e      	bne.n	800524a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d114      	bne.n	8005200 <UART_Transmit_IT+0x48>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d110      	bne.n	8005200 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	1c9a      	adds	r2, r3, #2
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]
 80051fe:	e008      	b.n	8005212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6211      	str	r1, [r2, #32]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29b      	uxth	r3, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ff38 	bl	80050ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b22      	cmp	r3, #34	; 0x22
 8005298:	f040 8099 	bne.w	80053ce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a4:	d117      	bne.n	80052d6 <UART_Receive_IT+0x50>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d113      	bne.n	80052d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
 80052d4:	e026      	b.n	8005324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d007      	beq.n	80052fa <UART_Receive_IT+0x74>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <UART_Receive_IT+0x82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e008      	b.n	800531a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29b      	uxth	r3, r3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4619      	mov	r1, r3
 8005332:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005334:	2b00      	cmp	r3, #0
 8005336:	d148      	bne.n	80053ca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0220 	bic.w	r2, r2, #32
 8005346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d123      	bne.n	80053c0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0210 	bic.w	r2, r2, #16
 800538c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d10a      	bne.n	80053b2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff feb2 	bl	8005122 <HAL_UARTEx_RxEventCallback>
 80053be:	e002      	b.n	80053c6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fe9c 	bl	80050fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e002      	b.n	80053d0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e000      	b.n	80053d0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
  }
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4313      	orrs	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005418:	f023 030c 	bic.w	r3, r3, #12
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	430b      	orrs	r3, r1
 8005424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a55      	ldr	r2, [pc, #340]	; (8005598 <UART_SetConfig+0x1c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d103      	bne.n	800544e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005446:	f7ff fa67 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	e002      	b.n	8005454 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544e:	f7ff fa4f 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005452:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545c:	d14c      	bne.n	80054f8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009a      	lsls	r2, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	4a49      	ldr	r2, [pc, #292]	; (800559c <UART_SetConfig+0x1c4>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	0119      	lsls	r1, r3, #4
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fbb2 f2f3 	udiv	r2, r2, r3
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <UART_SetConfig+0x1c4>)
 8005496:	fba3 0302 	umull	r0, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2064      	movs	r0, #100	; 0x64
 800549e:	fb00 f303 	mul.w	r3, r0, r3
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	3332      	adds	r3, #50	; 0x32
 80054a8:	4a3c      	ldr	r2, [pc, #240]	; (800559c <UART_SetConfig+0x1c4>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054b6:	4419      	add	r1, r3
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009a      	lsls	r2, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <UART_SetConfig+0x1c4>)
 80054d0:	fba3 0302 	umull	r0, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2064      	movs	r0, #100	; 0x64
 80054d8:	fb00 f303 	mul.w	r3, r0, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a2e      	ldr	r2, [pc, #184]	; (800559c <UART_SetConfig+0x1c4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 0207 	and.w	r2, r3, #7
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	440a      	add	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f6:	e04a      	b.n	800558e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009a      	lsls	r2, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	4a23      	ldr	r2, [pc, #140]	; (800559c <UART_SetConfig+0x1c4>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	0119      	lsls	r1, r3, #4
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009a      	lsls	r2, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	fbb2 f2f3 	udiv	r2, r2, r3
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <UART_SetConfig+0x1c4>)
 8005530:	fba3 0302 	umull	r0, r3, r3, r2
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	2064      	movs	r0, #100	; 0x64
 8005538:	fb00 f303 	mul.w	r3, r0, r3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	3332      	adds	r3, #50	; 0x32
 8005542:	4a16      	ldr	r2, [pc, #88]	; (800559c <UART_SetConfig+0x1c4>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800554e:	4419      	add	r1, r3
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009a      	lsls	r2, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	fbb2 f2f3 	udiv	r2, r2, r3
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <UART_SetConfig+0x1c4>)
 8005568:	fba3 0302 	umull	r0, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2064      	movs	r0, #100	; 0x64
 8005570:	fb00 f303 	mul.w	r3, r0, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <UART_SetConfig+0x1c4>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 020f 	and.w	r2, r3, #15
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	440a      	add	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40013800 	.word	0x40013800
 800559c:	51eb851f 	.word	0x51eb851f

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	; (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000054 	.word	0x20000054

080055ac <exit>:
 80055ac:	b508      	push	{r3, lr}
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <exit+0x20>)
 80055b0:	4604      	mov	r4, r0
 80055b2:	b113      	cbz	r3, 80055ba <exit+0xe>
 80055b4:	2100      	movs	r1, #0
 80055b6:	f3af 8000 	nop.w
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <exit+0x24>)
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055c0:	b103      	cbz	r3, 80055c4 <exit+0x18>
 80055c2:	4798      	blx	r3
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7fb fe49 	bl	800125c <_exit>
 80055ca:	bf00      	nop
 80055cc:	00000000 	.word	0x00000000
 80055d0:	08005698 	.word	0x08005698

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	2600      	movs	r6, #0
 80055d8:	4d0c      	ldr	r5, [pc, #48]	; (800560c <__libc_init_array+0x38>)
 80055da:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <__libc_init_array+0x3c>)
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	f000 f822 	bl	800562c <_init>
 80055e8:	2600      	movs	r6, #0
 80055ea:	4d0a      	ldr	r5, [pc, #40]	; (8005614 <__libc_init_array+0x40>)
 80055ec:	4c0a      	ldr	r4, [pc, #40]	; (8005618 <__libc_init_array+0x44>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	f855 3b04 	ldr.w	r3, [r5], #4
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	080056a4 	.word	0x080056a4
 8005610:	080056a4 	.word	0x080056a4
 8005614:	080056a4 	.word	0x080056a4
 8005618:	080056a8 	.word	0x080056a8

0800561c <memset>:
 800561c:	4603      	mov	r3, r0
 800561e:	4402      	add	r2, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <_init>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr

08005638 <_fini>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr
