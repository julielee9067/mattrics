
STM32L152RBT6A_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ac  0800b5ac  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b4  0800b5b4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800b5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004598  200000d0  0800b68c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20004668  0800b68c  00024668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8be  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a20  00000000  00000000  0003a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b91  00000000  00000000  00040a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e75  00000000  00000000  000585c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088667  00000000  00000000  0007243e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000faaa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f4  00000000  00000000  000faaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000d0 	.word	0x200000d0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b034 	.word	0x0800b034

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d4 	.word	0x200000d4
 8000178:	0800b034 	.word	0x0800b034

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000484:	3301      	adds	r3, #1
 8000486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800048a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	429a      	cmp	r2, r3
 8000494:	d007      	beq.n	80004a6 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	79f9      	ldrb	r1, [r7, #7]
 800049e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d013      	beq.n	80004fa <Uart_isr+0x4a>
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00e      	beq.n	80004fa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <Uart_isr+0xac>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ffbe 	bl	8000474 <store_char>
        return;
 80004f8:	e02c      	b.n	8000554 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	d027      	beq.n	8000554 <Uart_isr+0xa4>
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d022      	beq.n	8000554 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <Uart_isr+0xb0>)
 8000510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <Uart_isr+0xb0>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000516:	429a      	cmp	r2, r3
 8000518:	d108      	bne.n	800052c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000528:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800052a:	e012      	b.n	8000552 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <Uart_isr+0xb0>)
 800052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <Uart_isr+0xb0>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <Uart_isr+0xb0>)
 8000538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053a:	3301      	adds	r3, #1
 800053c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <Uart_isr+0xb0>)
 8000542:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	7bba      	ldrb	r2, [r7, #14]
 8000550:	605a      	str	r2, [r3, #4]
    	return;
 8000552:	bf00      	nop
    }
}
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200003c0 	.word	0x200003c0
 8000560:	200000ec 	.word	0x200000ec

08000564 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <SELECT+0x18>)
 800056e:	f002 fcf7 	bl	8002f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f001 fd9a 	bl	80020ac <HAL_Delay>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020400 	.word	0x40020400

08000580 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <DESELECT+0x18>)
 800058a:	f002 fce9 	bl	8002f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f001 fd8c 	bl	80020ac <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a6:	bf00      	nop
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <SPI_TxByte+0x30>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d1f8      	bne.n	80005a8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005b6:	1df9      	adds	r1, r7, #7
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <SPI_TxByte+0x30>)
 80005be:	f005 fe91 	bl	80062e4 <HAL_SPI_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003cc 	.word	0x200003cc

080005d0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005dc:	bf00      	nop
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SPI_TxBuffer+0x30>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d1f8      	bne.n	80005de <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <SPI_TxBuffer+0x30>)
 80005f4:	f005 fe76 	bl	80062e4 <HAL_SPI_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003cc 	.word	0x200003cc

08000604 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800060a:	23ff      	movs	r3, #255	; 0xff
 800060c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800060e:	bf00      	nop
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <SPI_RxByte+0x34>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	2b02      	cmp	r3, #2
 800061c:	d1f8      	bne.n	8000610 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800061e:	1dba      	adds	r2, r7, #6
 8000620:	1df9      	adds	r1, r7, #7
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <SPI_RxByte+0x34>)
 800062a:	f005 ff97 	bl	800655c <HAL_SPI_TransmitReceive>

	return data;
 800062e:	79bb      	ldrb	r3, [r7, #6]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200003cc 	.word	0x200003cc

0800063c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000644:	f7ff ffde 	bl	8000604 <SPI_RxByte>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SD_ReadyWait+0x30>)
 8000660:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000664:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000666:	f7ff ffcd 	bl	8000604 <SPI_RxByte>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d003      	beq.n	800067c <SD_ReadyWait+0x24>
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <SD_ReadyWait+0x30>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f4      	bne.n	8000666 <SD_ReadyWait+0xe>

	return res;
 800067c:	79fb      	ldrb	r3, [r7, #7]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200003c4 	.word	0x200003c4

0800068c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000692:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000696:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000698:	f7ff ff72 	bl	8000580 <DESELECT>
	for(int i = 0; i < 10; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	e005      	b.n	80006ae <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	f7ff ff7a 	bl	800059c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b09      	cmp	r3, #9
 80006b2:	ddf6      	ble.n	80006a2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006b4:	f7ff ff56 	bl	8000564 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006cc:	2395      	movs	r3, #149	; 0x95
 80006ce:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006d0:	463b      	mov	r3, r7
 80006d2:	2106      	movs	r1, #6
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff7b 	bl	80005d0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006da:	e002      	b.n	80006e2 <SD_PowerOn+0x56>
	{
		cnt--;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3b01      	subs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006e2:	f7ff ff8f 	bl	8000604 <SPI_RxByte>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d002      	beq.n	80006f2 <SD_PowerOn+0x66>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f4      	bne.n	80006dc <SD_PowerOn+0x50>
	}

	DESELECT();
 80006f2:	f7ff ff45 	bl	8000580 <DESELECT>
	SPI_TxByte(0XFF);
 80006f6:	20ff      	movs	r0, #255	; 0xff
 80006f8:	f7ff ff50 	bl	800059c <SPI_TxByte>

	PowerFlag = 1;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <SD_PowerOn+0x80>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000135 	.word	0x20000135

08000710 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <SD_PowerOff+0x14>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000135 	.word	0x20000135

08000728 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <SD_CheckPower+0x10>)
 800072e:	781b      	ldrb	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000135 	.word	0x20000135

0800073c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SD_RxDataBlock+0x58>)
 8000748:	22c8      	movs	r2, #200	; 0xc8
 800074a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800074c:	f7ff ff5a 	bl	8000604 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d103      	bne.n	8000762 <SD_RxDataBlock+0x26>
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <SD_RxDataBlock+0x58>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f4      	bne.n	800074c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2bfe      	cmp	r3, #254	; 0xfe
 8000766:	d001      	beq.n	800076c <SD_RxDataBlock+0x30>
 8000768:	2300      	movs	r3, #0
 800076a:	e00f      	b.n	800078c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff62 	bl	800063c <SPI_RxBytePtr>
	} while(len--);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	603a      	str	r2, [r7, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f4      	bne.n	800076c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000782:	f7ff ff3f 	bl	8000604 <SPI_RxByte>
	SPI_RxByte();
 8000786:	f7ff ff3d 	bl	8000604 <SPI_RxByte>

	return TRUE;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200003c6 	.word	0x200003c6

08000798 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007a8:	f7ff ff56 	bl	8000658 <SD_ReadyWait>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	d001      	beq.n	80007b6 <SD_TxDataBlock+0x1e>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e02f      	b.n	8000816 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff feef 	bl	800059c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2bfd      	cmp	r3, #253	; 0xfd
 80007c2:	d020      	beq.n	8000806 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff01 	bl	80005d0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ce:	f7ff ff19 	bl	8000604 <SPI_RxByte>
		SPI_RxByte();
 80007d2:	f7ff ff17 	bl	8000604 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007d6:	e00b      	b.n	80007f0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007d8:	f7ff ff14 	bl	8000604 <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f003 031f 	and.w	r3, r3, #31
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	d006      	beq.n	80007f8 <SD_TxDataBlock+0x60>
			i++;
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	3301      	adds	r3, #1
 80007ee:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	2b40      	cmp	r3, #64	; 0x40
 80007f4:	d9f0      	bls.n	80007d8 <SD_TxDataBlock+0x40>
 80007f6:	e000      	b.n	80007fa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007fa:	bf00      	nop
 80007fc:	f7ff ff02 	bl	8000604 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0fa      	beq.n	80007fc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b05      	cmp	r3, #5
 800080e:	d101      	bne.n	8000814 <SD_TxDataBlock+0x7c>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	6039      	str	r1, [r7, #0]
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800082a:	f7ff ff15 	bl	8000658 <SD_ReadyWait>
 800082e:	4603      	mov	r3, r0
 8000830:	2bff      	cmp	r3, #255	; 0xff
 8000832:	d001      	beq.n	8000838 <SD_SendCmd+0x1a>
 8000834:	23ff      	movs	r3, #255	; 0xff
 8000836:	e042      	b.n	80008be <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff feae 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0e1b      	lsrs	r3, r3, #24
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fea8 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fea2 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe9c 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe97 	bl	800059c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b40      	cmp	r3, #64	; 0x40
 8000872:	d102      	bne.n	800087a <SD_SendCmd+0x5c>
 8000874:	2395      	movs	r3, #149	; 0x95
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e007      	b.n	800088a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b48      	cmp	r3, #72	; 0x48
 800087e:	d102      	bne.n	8000886 <SD_SendCmd+0x68>
 8000880:	2387      	movs	r3, #135	; 0x87
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e001      	b.n	800088a <SD_SendCmd+0x6c>
	else crc = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe85 	bl	800059c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b4c      	cmp	r3, #76	; 0x4c
 8000896:	d101      	bne.n	800089c <SD_SendCmd+0x7e>
 8000898:	f7ff feb4 	bl	8000604 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800089c:	230a      	movs	r3, #10
 800089e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008a0:	f7ff feb0 	bl	8000604 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	da05      	bge.n	80008bc <SD_SendCmd+0x9e>
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	73bb      	strb	r3, [r7, #14]
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f1      	bne.n	80008a0 <SD_SendCmd+0x82>

	return res;
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x14>
 80008d8:	2301      	movs	r3, #1
 80008da:	e0d1      	b.n	8000a80 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <SD_disk_initialize+0x1c0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <SD_disk_initialize+0x2a>
 80008ea:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <SD_disk_initialize+0x1c0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	e0c6      	b.n	8000a80 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008f2:	f7ff fecb 	bl	800068c <SD_PowerOn>

	/* slave select */
	SELECT();
 80008f6:	f7ff fe35 	bl	8000564 <SELECT>

	/* check disk type */
	type = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008fe:	2100      	movs	r1, #0
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	f7ff ff8c 	bl	800081e <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	f040 80a1 	bne.w	8000a50 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000914:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000916:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800091a:	2048      	movs	r0, #72	; 0x48
 800091c:	f7ff ff7f 	bl	800081e <SD_SendCmd>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d155      	bne.n	80009d2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
 800092a:	e00c      	b.n	8000946 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800092c:	7bfc      	ldrb	r4, [r7, #15]
 800092e:	f7ff fe69 	bl	8000604 <SPI_RxByte>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4423      	add	r3, r4
 800093c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3301      	adds	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d9ef      	bls.n	800092c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800094c:	7abb      	ldrb	r3, [r7, #10]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d17e      	bne.n	8000a50 <SD_disk_initialize+0x188>
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	2baa      	cmp	r3, #170	; 0xaa
 8000956:	d17b      	bne.n	8000a50 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000958:	2100      	movs	r1, #0
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	f7ff ff5f 	bl	800081e <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d807      	bhi.n	8000976 <SD_disk_initialize+0xae>
 8000966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800096a:	2069      	movs	r0, #105	; 0x69
 800096c:	f7ff ff57 	bl	800081e <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ec      	bne.n	8000958 <SD_disk_initialize+0x90>
 800097e:	e000      	b.n	8000982 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000980:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d062      	beq.n	8000a50 <SD_disk_initialize+0x188>
 800098a:	2100      	movs	r1, #0
 800098c:	207a      	movs	r0, #122	; 0x7a
 800098e:	f7ff ff46 	bl	800081e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d15b      	bne.n	8000a50 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e00c      	b.n	80009b8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800099e:	7bfc      	ldrb	r4, [r7, #15]
 80009a0:	f7ff fe30 	bl	8000604 <SPI_RxByte>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4423      	add	r3, r4
 80009ae:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	3301      	adds	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d9ef      	bls.n	800099e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009be:	7a3b      	ldrb	r3, [r7, #8]
 80009c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SD_disk_initialize+0x104>
 80009c8:	230c      	movs	r3, #12
 80009ca:	e000      	b.n	80009ce <SD_disk_initialize+0x106>
 80009cc:	2304      	movs	r3, #4
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e03e      	b.n	8000a50 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009d2:	2100      	movs	r1, #0
 80009d4:	2077      	movs	r0, #119	; 0x77
 80009d6:	f7ff ff22 	bl	800081e <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d808      	bhi.n	80009f2 <SD_disk_initialize+0x12a>
 80009e0:	2100      	movs	r1, #0
 80009e2:	2069      	movs	r0, #105	; 0x69
 80009e4:	f7ff ff1b 	bl	800081e <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d801      	bhi.n	80009f2 <SD_disk_initialize+0x12a>
 80009ee:	2302      	movs	r3, #2
 80009f0:	e000      	b.n	80009f4 <SD_disk_initialize+0x12c>
 80009f2:	2301      	movs	r3, #1
 80009f4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d10e      	bne.n	8000a1a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009fc:	2100      	movs	r1, #0
 80009fe:	2077      	movs	r0, #119	; 0x77
 8000a00:	f7ff ff0d 	bl	800081e <SD_SendCmd>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d80e      	bhi.n	8000a28 <SD_disk_initialize+0x160>
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2069      	movs	r0, #105	; 0x69
 8000a0e:	f7ff ff06 	bl	800081e <SD_SendCmd>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d107      	bne.n	8000a28 <SD_disk_initialize+0x160>
 8000a18:	e00c      	b.n	8000a34 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2041      	movs	r0, #65	; 0x41
 8000a1e:	f7ff fefe 	bl	800081e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d004      	beq.n	8000a32 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1e2      	bne.n	80009f6 <SD_disk_initialize+0x12e>
 8000a30:	e000      	b.n	8000a34 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <SD_disk_initialize+0x184>
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	2050      	movs	r0, #80	; 0x50
 8000a42:	f7ff feec 	bl	800081e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SD_disk_initialize+0x188>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <SD_disk_initialize+0x1c8>)
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a56:	f7ff fd93 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000a5a:	f7ff fdd3 	bl	8000604 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e001      	b.n	8000a7a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a76:	f7ff fe4b 	bl	8000710 <SD_PowerOff>
	}

	return Stat;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	200003c6 	.word	0x200003c6
 8000a90:	20000134 	.word	0x20000134

08000a94 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SD_disk_status+0x14>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e002      	b.n	8000aae <SD_disk_status+0x1a>
	return Stat;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SD_disk_status+0x24>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000000 	.word	0x20000000

08000abc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <SD_disk_read+0x1c>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <SD_disk_read+0x20>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e051      	b.n	8000b80 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SD_disk_read+0xcc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SD_disk_read+0x32>
 8000aea:	2303      	movs	r3, #3
 8000aec:	e048      	b.n	8000b80 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <SD_disk_read+0xd0>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <SD_disk_read+0x44>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	025b      	lsls	r3, r3, #9
 8000afe:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b00:	f7ff fd30 	bl	8000564 <SELECT>

	if (count == 1)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d111      	bne.n	8000b2e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2051      	movs	r0, #81	; 0x51
 8000b0e:	f7ff fe86 	bl	800081e <SD_SendCmd>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d129      	bne.n	8000b6c <SD_disk_read+0xb0>
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	68b8      	ldr	r0, [r7, #8]
 8000b1e:	f7ff fe0d 	bl	800073c <SD_RxDataBlock>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d021      	beq.n	8000b6c <SD_disk_read+0xb0>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	e01e      	b.n	8000b6c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2052      	movs	r0, #82	; 0x52
 8000b32:	f7ff fe74 	bl	800081e <SD_SendCmd>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d117      	bne.n	8000b6c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fdfb 	bl	800073c <SD_RxDataBlock>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00a      	beq.n	8000b62 <SD_disk_read+0xa6>
				buff += 512;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ed      	bne.n	8000b3c <SD_disk_read+0x80>
 8000b60:	e000      	b.n	8000b64 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b62:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f7ff fe59 	bl	800081e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b6c:	f7ff fd08 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000b70:	f7ff fd48 	bl	8000604 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000134 	.word	0x20000134

08000b90 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <SD_disk_write+0x1c>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <SD_disk_write+0x20>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e06b      	b.n	8000c88 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <SD_disk_write+0x100>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SD_disk_write+0x32>
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e062      	b.n	8000c88 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <SD_disk_write+0x100>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SD_disk_write+0x44>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e059      	b.n	8000c88 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <SD_disk_write+0x104>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <SD_disk_write+0x56>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000be6:	f7ff fcbd 	bl	8000564 <SELECT>

	if (count == 1)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d110      	bne.n	8000c12 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	2058      	movs	r0, #88	; 0x58
 8000bf4:	f7ff fe13 	bl	800081e <SD_SendCmd>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d13a      	bne.n	8000c74 <SD_disk_write+0xe4>
 8000bfe:	21fe      	movs	r1, #254	; 0xfe
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f7ff fdc9 	bl	8000798 <SD_TxDataBlock>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d033      	beq.n	8000c74 <SD_disk_write+0xe4>
			count = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	e030      	b.n	8000c74 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <SD_disk_write+0x104>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2077      	movs	r0, #119	; 0x77
 8000c22:	f7ff fdfc 	bl	800081e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	2057      	movs	r0, #87	; 0x57
 8000c2a:	f7ff fdf8 	bl	800081e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2059      	movs	r0, #89	; 0x59
 8000c32:	f7ff fdf4 	bl	800081e <SD_SendCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11b      	bne.n	8000c74 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c3c:	21fc      	movs	r1, #252	; 0xfc
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f7ff fdaa 	bl	8000798 <SD_TxDataBlock>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00a      	beq.n	8000c60 <SD_disk_write+0xd0>
				buff += 512;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1ee      	bne.n	8000c3c <SD_disk_write+0xac>
 8000c5e:	e000      	b.n	8000c62 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c60:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c62:	21fd      	movs	r1, #253	; 0xfd
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd97 	bl	8000798 <SD_TxDataBlock>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c74:	f7ff fc84 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000c78:	f7ff fcc4 	bl	8000604 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000134 	.word	0x20000134

08000c98 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	603a      	str	r2, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SD_disk_ioctl+0x1e>
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	e115      	b.n	8000ee2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d124      	bne.n	8000d0c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d012      	beq.n	8000cf0 <SD_disk_ioctl+0x58>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	dc1a      	bgt.n	8000d04 <SD_disk_ioctl+0x6c>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <SD_disk_ioctl+0x40>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d006      	beq.n	8000ce4 <SD_disk_ioctl+0x4c>
 8000cd6:	e015      	b.n	8000d04 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cd8:	f7ff fd1a 	bl	8000710 <SD_PowerOff>
			res = RES_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ce2:	e0fc      	b.n	8000ede <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ce4:	f7ff fcd2 	bl	800068c <SD_PowerOn>
			res = RES_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cee:	e0f6      	b.n	8000ede <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	1c5c      	adds	r4, r3, #1
 8000cf4:	f7ff fd18 	bl	8000728 <SD_CheckPower>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d02:	e0ec      	b.n	8000ede <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d04:	2304      	movs	r3, #4
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d0a:	e0e8      	b.n	8000ede <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d0c:	4b77      	ldr	r3, [pc, #476]	; (8000eec <SD_disk_ioctl+0x254>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SD_disk_ioctl+0x86>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e0e1      	b.n	8000ee2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d1e:	f7ff fc21 	bl	8000564 <SELECT>

		switch (ctrl)
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	2b0d      	cmp	r3, #13
 8000d26:	f200 80cb 	bhi.w	8000ec0 <SD_disk_ioctl+0x228>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <SD_disk_ioctl+0x98>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000e2b 	.word	0x08000e2b
 8000d34:	08000d69 	.word	0x08000d69
 8000d38:	08000e1b 	.word	0x08000e1b
 8000d3c:	08000ec1 	.word	0x08000ec1
 8000d40:	08000ec1 	.word	0x08000ec1
 8000d44:	08000ec1 	.word	0x08000ec1
 8000d48:	08000ec1 	.word	0x08000ec1
 8000d4c:	08000ec1 	.word	0x08000ec1
 8000d50:	08000ec1 	.word	0x08000ec1
 8000d54:	08000ec1 	.word	0x08000ec1
 8000d58:	08000ec1 	.word	0x08000ec1
 8000d5c:	08000e3d 	.word	0x08000e3d
 8000d60:	08000e61 	.word	0x08000e61
 8000d64:	08000e85 	.word	0x08000e85
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2049      	movs	r0, #73	; 0x49
 8000d6c:	f7ff fd57 	bl	800081e <SD_SendCmd>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 80a8 	bne.w	8000ec8 <SD_disk_ioctl+0x230>
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fcdc 	bl	800073c <SD_RxDataBlock>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 809e 	beq.w	8000ec8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d8c:	7b3b      	ldrb	r3, [r7, #12]
 8000d8e:	099b      	lsrs	r3, r3, #6
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d10e      	bne.n	8000db4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	7d3b      	ldrb	r3, [r7, #20]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000daa:	8bfb      	ldrh	r3, [r7, #30]
 8000dac:	029a      	lsls	r2, r3, #10
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e02e      	b.n	8000e12 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000db4:	7c7b      	ldrb	r3, [r7, #17]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	7dbb      	ldrb	r3, [r7, #22]
 8000dbe:	09db      	lsrs	r3, r3, #7
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	7d7b      	ldrb	r3, [r7, #21]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f003 0306 	and.w	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ddc:	7d3b      	ldrb	r3, [r7, #20]
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7cbb      	ldrb	r3, [r7, #18]
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e04:	8bfa      	ldrh	r2, [r7, #30]
 8000e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e0a:	3b09      	subs	r3, #9
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e18:	e056      	b.n	8000ec8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e28:	e055      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e2a:	f7ff fc15 	bl	8000658 <SD_ReadyWait>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d14b      	bne.n	8000ecc <SD_disk_ioctl+0x234>
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e3a:	e047      	b.n	8000ecc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2049      	movs	r0, #73	; 0x49
 8000e40:	f7ff fced 	bl	800081e <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d142      	bne.n	8000ed0 <SD_disk_ioctl+0x238>
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	6a38      	ldr	r0, [r7, #32]
 8000e4e:	f7ff fc75 	bl	800073c <SD_RxDataBlock>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d03b      	beq.n	8000ed0 <SD_disk_ioctl+0x238>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e5e:	e037      	b.n	8000ed0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e60:	2100      	movs	r1, #0
 8000e62:	204a      	movs	r0, #74	; 0x4a
 8000e64:	f7ff fcdb 	bl	800081e <SD_SendCmd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d132      	bne.n	8000ed4 <SD_disk_ioctl+0x23c>
 8000e6e:	2110      	movs	r1, #16
 8000e70:	6a38      	ldr	r0, [r7, #32]
 8000e72:	f7ff fc63 	bl	800073c <SD_RxDataBlock>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d02b      	beq.n	8000ed4 <SD_disk_ioctl+0x23c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e82:	e027      	b.n	8000ed4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e84:	2100      	movs	r1, #0
 8000e86:	207a      	movs	r0, #122	; 0x7a
 8000e88:	f7ff fcc9 	bl	800081e <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e98:	e00b      	b.n	8000eb2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e9a:	6a3c      	ldr	r4, [r7, #32]
 8000e9c:	1c63      	adds	r3, r4, #1
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	f7ff fbb0 	bl	8000604 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eac:	3301      	adds	r3, #1
 8000eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d9ef      	bls.n	8000e9a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ec6:	e006      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ec8:	bf00      	nop
 8000eca:	e004      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ecc:	bf00      	nop
 8000ece:	e002      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ed4:	bf00      	nop
		}

		DESELECT();
 8000ed6:	f7ff fb53 	bl	8000580 <DESELECT>
		SPI_RxByte();
 8000eda:	f7ff fb93 	bl	8000604 <SPI_RxByte>
	}

	return res;
 8000ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	372c      	adds	r7, #44	; 0x2c
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 5d64 	sub.w	sp, sp, #14592	; 0x3900
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 f868 	bl	8001fce <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f86d 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    // ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fa3f 	bl	8001384 <MX_GPIO_Init>
  MX_ADC_Init();
 8000f06:	f000 f8cf 	bl	80010a8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000f0a:	f000 f925 	bl	8001158 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f0e:	f000 f9d9 	bl	80012c4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000f12:	f000 fa0d 	bl	8001330 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000f16:	f005 ffc3 	bl	8006ea0 <MX_FATFS_Init>
  MX_RTC_Init();
 8000f1a:	f000 f94b 	bl	80011b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
    // TODO: Initialize Wifi + database
    //  wifi_init();

    muxInit();
 8000f1e:	f000 fb69 	bl	80015f4 <muxInit>
    // ITM_Port32(31) = 2;

    // int voltage_thresh_count = 0;
    int pressure_data[NUM_NODES] = {0};
 8000f22:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8000f26:	4618      	mov	r0, r3
 8000f28:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f009 fc4c 	bl	800a7cc <memset>
    int pressure_data_offsets[NUM_NODES] = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	4618      	mov	r0, r3
 8000f38:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f009 fc44 	bl	800a7cc <memset>

    HAL_Delay(500);
 8000f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f48:	f001 f8b0 	bl	80020ac <HAL_Delay>

    HAL_RTC_GetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <main+0xd4>)
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <main+0xd8>)
 8000f52:	f004 fef5 	bl	8005d40 <HAL_RTC_GetDate>

    /* Mount the SD card */
    f_mount(&fs, "", 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	491c      	ldr	r1, [pc, #112]	; (8000fcc <main+0xdc>)
 8000f5a:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <main+0xe0>)
 8000f5c:	f008 f9da 	bl	8009314 <f_mount>

    sprintf(date, "%02u-%02u-%02u.csv", nDate.Month, nDate.Date, nDate.Year);
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <main+0xd4>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <main+0xd4>)
 8000f68:	789b      	ldrb	r3, [r3, #2]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <main+0xd4>)
 8000f6e:	78db      	ldrb	r3, [r3, #3]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	460b      	mov	r3, r1
 8000f74:	4917      	ldr	r1, [pc, #92]	; (8000fd4 <main+0xe4>)
 8000f76:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <main+0xe8>)
 8000f78:	f009 fc30 	bl	800a7dc <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Calibrate the nodes */
    calibrate(pressure_data_offsets, sizeof(pressure_data_offsets)/sizeof(*pressure_data_offsets));
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fd48 	bl	8001a18 <calibrate>

    HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f001 f88e 	bl	80020ac <HAL_Delay>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
      /* Reset the pressure data array */
      memcpy(pressure_data, pressure_data_offsets, sizeof(pressure_data));
 8000f90:	f507 52e4 	add.w	r2, r7, #7296	; 0x1c80
 8000f94:	463b      	mov	r3, r7
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f009 fc06 	bl	800a7b0 <memcpy>

      /* Sample all nodes on mat */
      sampleMat(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8000fa4:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8000fa8:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc97 	bl	80018e0 <sampleMat>

      /* Write to SD card */
      logData2SDCard(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8000fb2:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8000fb6:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fad2 	bl	8001564 <logData2SDCard>
      memcpy(pressure_data, pressure_data_offsets, sizeof(pressure_data));
 8000fc0:	e7e6      	b.n	8000f90 <main+0xa0>
 8000fc2:	bf00      	nop
 8000fc4:	200014b0 	.word	0x200014b0
 8000fc8:	2000151c 	.word	0x2000151c
 8000fcc:	0800b04c 	.word	0x0800b04c
 8000fd0:	20000424 	.word	0x20000424
 8000fd4:	0800b050 	.word	0x0800b050
 8000fd8:	2000154c 	.word	0x2000154c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	2234      	movs	r2, #52	; 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f009 fbee 	bl	800a7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <SystemClock_Config+0xc8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <SystemClock_Config+0xc8>)
 8001014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001018:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800101a:	230b      	movs	r3, #11
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101e:	2301      	movs	r3, #1
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001026:	2310      	movs	r3, #16
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001038:	2300      	movs	r3, #0
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800103c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fda8 	bl	8004b9c <HAL_RCC_OscConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001052:	f000 fd2b 	bl	8001aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
 8001058:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105a:	2303      	movs	r3, #3
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2101      	movs	r1, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f004 f8c3 	bl	80051fc <HAL_RCC_ClockConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800107c:	f000 fd16 	bl	8001aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fb21 	bl	80056d4 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001098:	f000 fd08 	bl	8001aac <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3758      	adds	r7, #88	; 0x58
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_ADC_Init+0xa8>)
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <MX_ADC_Init+0xac>)
 80010bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_ADC_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_ADC_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_ADC_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_ADC_Init+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_ADC_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_ADC_Init+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_ADC_Init+0xa8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC_Init+0xa8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_ADC_Init+0xa8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_ADC_Init+0xa8>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC_Init+0xa8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_ADC_Init+0xa8>)
 8001106:	2210      	movs	r2, #16
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_ADC_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_ADC_Init+0xa8>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_ADC_Init+0xa8>)
 800111a:	f000 ffe9 	bl	80020f0 <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001124:	f000 fcc2 	bl	8001aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001128:	2309      	movs	r3, #9
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001130:	2304      	movs	r3, #4
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_ADC_Init+0xa8>)
 800113a:	f001 fa47 	bl	80025cc <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001144:	f000 fcb2 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20001560 	.word	0x20001560
 8001154:	40012400 	.word	0x40012400

08001158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MX_I2C1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x58>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001196:	f001 fefb 	bl	8002f90 <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 fc84 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000145c 	.word	0x2000145c
 80011ac:	40005400 	.word	0x40005400
 80011b0:	000186a0 	.word	0x000186a0

080011b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <MX_RTC_Init+0x108>)
 80011de:	4a38      	ldr	r2, [pc, #224]	; (80012c0 <MX_RTC_Init+0x10c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <MX_RTC_Init+0x108>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <MX_RTC_Init+0x108>)
 80011ea:	227f      	movs	r2, #127	; 0x7f
 80011ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <MX_RTC_Init+0x108>)
 80011f0:	22ff      	movs	r2, #255	; 0xff
 80011f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <MX_RTC_Init+0x108>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MX_RTC_Init+0x108>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <MX_RTC_Init+0x108>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001206:	482d      	ldr	r0, [pc, #180]	; (80012bc <MX_RTC_Init+0x108>)
 8001208:	f004 fb6e 	bl	80058e8 <HAL_RTC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001212:	f000 fc4b 	bl	8001aac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 8001216:	2316      	movs	r3, #22
 8001218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	4820      	ldr	r0, [pc, #128]	; (80012bc <MX_RTC_Init+0x108>)
 800123a:	f004 fbdf 	bl	80059fc <HAL_RTC_SetTime>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001244:	f000 fc32 	bl	8001aac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001248:	2305      	movs	r3, #5
 800124a:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 800124e:	2303      	movs	r3, #3
 8001250:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 8001254:	230b      	movs	r3, #11
 8001256:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 800125a:	2316      	movs	r3, #22
 800125c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_RTC_Init+0x108>)
 800126a:	f004 fccb 	bl	8005c04 <HAL_RTC_SetDate>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001274:	f000 fc1a 	bl	8001aac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 8001278:	2306      	movs	r3, #6
 800127a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_RTC_Init+0x108>)
 80012a6:	f004 fd99 	bl	8005ddc <HAL_RTC_SetAlarm_IT>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80012b0:	f000 fbfc 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000151c 	.word	0x2000151c
 80012c0:	40002800 	.word	0x40002800

080012c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI2_Init+0x64>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <MX_SPI2_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_SPI2_Init+0x64>)
 80012d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI2_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI2_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_SPI2_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI2_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_SPI2_Init+0x64>)
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI2_Init+0x64>)
 80012f8:	2210      	movs	r2, #16
 80012fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI2_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI2_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI2_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI2_Init+0x64>)
 8001310:	220a      	movs	r2, #10
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI2_Init+0x64>)
 8001316:	f004 ff69 	bl	80061ec <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001320:	f000 fbc4 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003cc 	.word	0x200003cc
 800132c:	40003800 	.word	0x40003800

08001330 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_USART3_UART_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_USART3_UART_Init+0x4c>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USART3_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART3_UART_Init+0x4c>)
 8001368:	f005 fc68 	bl	8006c3c <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 fb9b 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000378 	.word	0x20000378
 8001380:	40004800 	.word	0x40004800

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <MX_GPIO_Init+0x16c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a4e      	ldr	r2, [pc, #312]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MX_GPIO_Init+0x16c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <MX_GPIO_Init+0x16c>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_GPIO_Init+0x16c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001412:	2200      	movs	r2, #0
 8001414:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001418:	4836      	ldr	r0, [pc, #216]	; (80014f4 <MX_GPIO_Init+0x170>)
 800141a:	f001 fda1 	bl	8002f60 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 800141e:	2200      	movs	r2, #0
 8001420:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001424:	4834      	ldr	r0, [pc, #208]	; (80014f8 <MX_GPIO_Init+0x174>)
 8001426:	f001 fd9b 	bl	8002f60 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800142a:	2200      	movs	r2, #0
 800142c:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001430:	4832      	ldr	r0, [pc, #200]	; (80014fc <MX_GPIO_Init+0x178>)
 8001432:	f001 fd95 	bl	8002f60 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2104      	movs	r1, #4
 800143a:	4831      	ldr	r0, [pc, #196]	; (8001500 <MX_GPIO_Init+0x17c>)
 800143c:	f001 fd90 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001440:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001444:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	; (80014f4 <MX_GPIO_Init+0x170>)
 800145a:	f001 fc01 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 800145e:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001462:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <MX_GPIO_Init+0x174>)
 8001478:	f001 fbf2 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800147c:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001480:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <MX_GPIO_Init+0x178>)
 8001496:	f001 fbe3 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_GPIO_Init+0x170>)
 80014ae:	f001 fbd7 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0x174>)
 80014c8:	f001 fbca 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80014cc:	2304      	movs	r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_GPIO_Init+0x17c>)
 80014e4:	f001 fbbc 	bl	8002c60 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020c00 	.word	0x40020c00

08001504 <writeCurrentTime>:
    * @brief
    * @param  :
    * @retval :
    */
void writeCurrentTime(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
    char time[10];

    HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 800150a:	2200      	movs	r2, #0
 800150c:	4910      	ldr	r1, [pc, #64]	; (8001550 <writeCurrentTime+0x4c>)
 800150e:	4811      	ldr	r0, [pc, #68]	; (8001554 <writeCurrentTime+0x50>)
 8001510:	f004 fb28 	bl	8005b64 <HAL_RTC_GetTime>
    sprintf(time, "%02u:%02u:%02u,", nTime.Hours, nTime.Minutes, nTime.Seconds);
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <writeCurrentTime+0x4c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <writeCurrentTime+0x4c>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <writeCurrentTime+0x4c>)
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	1d38      	adds	r0, r7, #4
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	460b      	mov	r3, r1
 800152a:	490b      	ldr	r1, [pc, #44]	; (8001558 <writeCurrentTime+0x54>)
 800152c:	f009 f956 	bl	800a7dc <siprintf>
    f_lseek(&fil, f_size(&fil));
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <writeCurrentTime+0x58>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4619      	mov	r1, r3
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <writeCurrentTime+0x58>)
 8001538:	f008 fb3a 	bl	8009bb0 <f_lseek>
    f_printf( &fil, "%s", time);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	461a      	mov	r2, r3
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <writeCurrentTime+0x5c>)
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <writeCurrentTime+0x58>)
 8001544:	f008 fdce 	bl	800a0e4 <f_printf>
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000153c 	.word	0x2000153c
 8001554:	2000151c 	.word	0x2000151c
 8001558:	0800b064 	.word	0x0800b064
 800155c:	200015b4 	.word	0x200015b4
 8001560:	0800b074 	.word	0x0800b074

08001564 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int data[], int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    f_open(&fil, date, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800156e:	2213      	movs	r2, #19
 8001570:	491c      	ldr	r1, [pc, #112]	; (80015e4 <logData2SDCard+0x80>)
 8001572:	481d      	ldr	r0, [pc, #116]	; (80015e8 <logData2SDCard+0x84>)
 8001574:	f007 ff14 	bl	80093a0 <f_open>

    /* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 8001578:	f242 31a9 	movw	r1, #9129	; 0x23a9
 800157c:	481a      	ldr	r0, [pc, #104]	; (80015e8 <logData2SDCard+0x84>)
 800157e:	f008 fb17 	bl	8009bb0 <f_lseek>
    f_lseek(&fil, f_size(&fil));
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <logData2SDCard+0x84>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4619      	mov	r1, r3
 8001588:	4817      	ldr	r0, [pc, #92]	; (80015e8 <logData2SDCard+0x84>)
 800158a:	f008 fb11 	bl	8009bb0 <f_lseek>

    writeCurrentTime();
 800158e:	f7ff ffb9 	bl	8001504 <writeCurrentTime>

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; ++node)
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e00c      	b.n	80015b2 <logData2SDCard+0x4e>
    {
        f_printf(&fil, "%d,", data[node]);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4911      	ldr	r1, [pc, #68]	; (80015ec <logData2SDCard+0x88>)
 80015a6:	4810      	ldr	r0, [pc, #64]	; (80015e8 <logData2SDCard+0x84>)
 80015a8:	f008 fd9c 	bl	800a0e4 <f_printf>
    for(int node = 0; node < len - 1; ++node)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbed      	blt.n	8001598 <logData2SDCard+0x34>
    }

    f_printf(&fil, "%d\n", data[len - 1]);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015c2:	3b01      	subs	r3, #1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <logData2SDCard+0x8c>)
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <logData2SDCard+0x84>)
 80015d2:	f008 fd87 	bl	800a0e4 <f_printf>
    f_close(&fil);
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <logData2SDCard+0x84>)
 80015d8:	f008 fac0 	bl	8009b5c <f_close>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000154c 	.word	0x2000154c
 80015e8:	200015b4 	.word	0x200015b4
 80015ec:	0800b078 	.word	0x0800b078
 80015f0:	0800b07c 	.word	0x0800b07c

080015f4 <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <muxInit+0x70>)
 8001600:	f001 fcae 	bl	8002f60 <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	e00e      	b.n	8001628 <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <muxInit+0x74>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001612:	4916      	ldr	r1, [pc, #88]	; (800166c <muxInit+0x78>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f000 f935 	bl	800188c <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b03      	cmp	r3, #3
 800162c:	dded      	ble.n	800160a <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	e00e      	b.n	8001652 <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <muxInit+0x7c>)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800163c:	490d      	ldr	r1, [pc, #52]	; (8001674 <muxInit+0x80>)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f000 f920 	bl	800188c <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b07      	cmp	r3, #7
 8001656:	dded      	ble.n	8001634 <muxInit+0x40>
	}
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020800 	.word	0x40020800
 8001668:	20000004 	.word	0x20000004
 800166c:	0800b0e4 	.word	0x0800b0e4
 8001670:	20000014 	.word	0x20000014
 8001674:	0800b0f4 	.word	0x0800b0f4

08001678 <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b07      	cmp	r3, #7
 8001686:	f200 80eb 	bhi.w	8001860 <selectChannel+0x1e8>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <selectChannel+0x18>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016e7 	.word	0x080016e7
 8001698:	0800171d 	.word	0x0800171d
 800169c:	08001753 	.word	0x08001753
 80016a0:	08001789 	.word	0x08001789
 80016a4:	080017bf 	.word	0x080017bf
 80016a8:	080017f5 	.word	0x080017f5
 80016ac:	0800182b 	.word	0x0800182b
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	486b      	ldr	r0, [pc, #428]	; (8001868 <selectChannel+0x1f0>)
 80016bc:	f001 fc50 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4866      	ldr	r0, [pc, #408]	; (8001868 <selectChannel+0x1f0>)
 80016ce:	f001 fc47 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3308      	adds	r3, #8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4862      	ldr	r0, [pc, #392]	; (8001868 <selectChannel+0x1f0>)
 80016e0:	f001 fc3e 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 80016e4:	e0bc      	b.n	8001860 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	485d      	ldr	r0, [pc, #372]	; (8001868 <selectChannel+0x1f0>)
 80016f2:	f001 fc35 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	4619      	mov	r1, r3
 8001702:	4859      	ldr	r0, [pc, #356]	; (8001868 <selectChannel+0x1f0>)
 8001704:	f001 fc2c 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3308      	adds	r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4854      	ldr	r0, [pc, #336]	; (8001868 <selectChannel+0x1f0>)
 8001716:	f001 fc23 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 800171a:	e0a1      	b.n	8001860 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	4850      	ldr	r0, [pc, #320]	; (8001868 <selectChannel+0x1f0>)
 8001728:	f001 fc1a 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	484b      	ldr	r0, [pc, #300]	; (8001868 <selectChannel+0x1f0>)
 800173a:	f001 fc11 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3308      	adds	r3, #8
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4847      	ldr	r0, [pc, #284]	; (8001868 <selectChannel+0x1f0>)
 800174c:	f001 fc08 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 8001750:	e086      	b.n	8001860 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2201      	movs	r2, #1
 800175a:	4619      	mov	r1, r3
 800175c:	4842      	ldr	r0, [pc, #264]	; (8001868 <selectChannel+0x1f0>)
 800175e:	f001 fbff 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	3304      	adds	r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	483e      	ldr	r0, [pc, #248]	; (8001868 <selectChannel+0x1f0>)
 8001770:	f001 fbf6 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3308      	adds	r3, #8
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	4839      	ldr	r0, [pc, #228]	; (8001868 <selectChannel+0x1f0>)
 8001782:	f001 fbed 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 8001786:	e06b      	b.n	8001860 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	4835      	ldr	r0, [pc, #212]	; (8001868 <selectChannel+0x1f0>)
 8001794:	f001 fbe4 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3304      	adds	r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4830      	ldr	r0, [pc, #192]	; (8001868 <selectChannel+0x1f0>)
 80017a6:	f001 fbdb 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3308      	adds	r3, #8
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	482c      	ldr	r0, [pc, #176]	; (8001868 <selectChannel+0x1f0>)
 80017b8:	f001 fbd2 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 80017bc:	e050      	b.n	8001860 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	4619      	mov	r1, r3
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <selectChannel+0x1f0>)
 80017ca:	f001 fbc9 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	4823      	ldr	r0, [pc, #140]	; (8001868 <selectChannel+0x1f0>)
 80017dc:	f001 fbc0 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3308      	adds	r3, #8
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2201      	movs	r2, #1
 80017ea:	4619      	mov	r1, r3
 80017ec:	481e      	ldr	r0, [pc, #120]	; (8001868 <selectChannel+0x1f0>)
 80017ee:	f001 fbb7 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 80017f2:	e035      	b.n	8001860 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <selectChannel+0x1f0>)
 8001800:	f001 fbae 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	2201      	movs	r2, #1
 800180e:	4619      	mov	r1, r3
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <selectChannel+0x1f0>)
 8001812:	f001 fba5 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3308      	adds	r3, #8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	2201      	movs	r2, #1
 8001820:	4619      	mov	r1, r3
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <selectChannel+0x1f0>)
 8001824:	f001 fb9c 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 8001828:	e01a      	b.n	8001860 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <selectChannel+0x1f0>)
 8001836:	f001 fb93 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	2201      	movs	r2, #1
 8001844:	4619      	mov	r1, r3
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <selectChannel+0x1f0>)
 8001848:	f001 fb8a 	bl	8002f60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3308      	adds	r3, #8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	2201      	movs	r2, #1
 8001856:	4619      	mov	r1, r3
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <selectChannel+0x1f0>)
 800185a:	f001 fb81 	bl	8002f60 <HAL_GPIO_WritePin>
			break;
 800185e:	bf00      	nop
	}
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020000 	.word	0x40020000

0800186c <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 fb6e 	bl	8002f60 <HAL_GPIO_WritePin>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	2201      	movs	r2, #1
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 fb5e 	bl	8002f60 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
    // ADCSelectCH9();
    HAL_ADC_Start(&hadc);
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <readPressure+0x30>)
 80018b4:	f000 fd62 	bl	800237c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <readPressure+0x30>)
 80018be:	f000 fde9 	bl	8002494 <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <readPressure+0x30>)
 80018c4:	f000 fe76 	bl	80025b4 <HAL_ADC_GetValue>
 80018c8:	4603      	mov	r3, r0
 80018ca:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <readPressure+0x30>)
 80018ce:	f000 fdb5 	bl	800243c <HAL_ADC_Stop>
    return data;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20001560 	.word	0x20001560

080018e0 <sampleMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void sampleMat(int* data, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    int array_cnt = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]

    if (len != NUM_NODES) 
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80018f4:	d17f      	bne.n	80019f6 <sampleMat+0x116>
    {
        /* Wrongly sized array */ 
        return;
    }

    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	e078      	b.n	80019ee <sampleMat+0x10e>
    {
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80018fc:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <sampleMat+0x120>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001904:	493f      	ldr	r1, [pc, #252]	; (8001a04 <sampleMat+0x124>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f7ff ffac 	bl	800186c <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e057      	b.n	80019ca <sampleMat+0xea>
        {
			selectChannel(pwr_sel, pwrMuxSelect);
 800191a:	493b      	ldr	r1, [pc, #236]	; (8001a08 <sampleMat+0x128>)
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f7ff feab 	bl	8001678 <selectChannel>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e04a      	b.n	80019be <sampleMat+0xde>
            {
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <sampleMat+0x12c>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001930:	4937      	ldr	r1, [pc, #220]	; (8001a10 <sampleMat+0x130>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f7ff ff96 	bl	800186c <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e027      	b.n	8001996 <sampleMat+0xb6>
                {
				    if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <sampleMat+0x78>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d026      	beq.n	80019a0 <sampleMat+0xc0>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d023      	beq.n	80019a0 <sampleMat+0xc0>
				    {
				       break;
				    }

				    if ((sense_mux == 7) && (sense_sel > 2))
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b07      	cmp	r3, #7
 800195c:	d102      	bne.n	8001964 <sampleMat+0x84>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b02      	cmp	r3, #2
 8001962:	dc1c      	bgt.n	800199e <sampleMat+0xbe>
				    {
				       break;
				    }

					selectChannel(sense_sel, senseMuxSelect);
 8001964:	492b      	ldr	r1, [pc, #172]	; (8001a14 <sampleMat+0x134>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f7ff fe86 	bl	8001678 <selectChannel>

					/* Read voltage */
					int raw_ADC_pressure = readPressure(); 
 800196c:	f7ff ff9e 	bl	80018ac <readPressure>
 8001970:	60b8      	str	r0, [r7, #8]
					data[array_cnt] += raw_ADC_pressure;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	440a      	add	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
					array_cnt++;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b07      	cmp	r3, #7
 800199a:	ddd4      	ble.n	8001946 <sampleMat+0x66>
 800199c:	e000      	b.n	80019a0 <sampleMat+0xc0>
				       break;
 800199e:	bf00      	nop
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80019a0:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <sampleMat+0x12c>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a8:	4919      	ldr	r1, [pc, #100]	; (8001a10 <sampleMat+0x130>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff ff6a 	bl	800188c <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3301      	adds	r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	ddb1      	ble.n	8001928 <sampleMat+0x48>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	dda4      	ble.n	800191a <sampleMat+0x3a>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <sampleMat+0x120>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d8:	490a      	ldr	r1, [pc, #40]	; (8001a04 <sampleMat+0x124>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f7ff ff52 	bl	800188c <disableMux>
    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	dd83      	ble.n	80018fc <sampleMat+0x1c>
 80019f4:	e000      	b.n	80019f8 <sampleMat+0x118>
        return;
 80019f6:	bf00      	nop
	}
}
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000004 	.word	0x20000004
 8001a04:	0800b0e4 	.word	0x0800b0e4
 8001a08:	20000040 	.word	0x20000040
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	0800b0f4 	.word	0x0800b0f4
 8001a14:	20000034 	.word	0x20000034

08001a18 <calibrate>:
    * @brief  :
    * @param  :
    * @retval :
    */
void calibrate(int* data, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	/* Calibrate over 100 mat readings */
    /* Don't use time based calibration in case of overflow */
    HAL_GPIO_WritePin(GPIOA, MCU_PA12_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a28:	481f      	ldr	r0, [pc, #124]	; (8001aa8 <calibrate+0x90>)
 8001a2a:	f001 fa99 	bl	8002f60 <HAL_GPIO_WritePin>
    int rounds = 100;
 8001a2e:	2364      	movs	r3, #100	; 0x64
 8001a30:	60fb      	str	r3, [r7, #12]
    for(int round = 0; round < rounds; ++round)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e006      	b.n	8001a46 <calibrate+0x2e>
    {
        sampleMat(data, len);
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff50 	bl	80018e0 <sampleMat>
    for(int round = 0; round < rounds; ++round)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf4      	blt.n	8001a38 <calibrate+0x20>
    }

    for(int node = 0; node < len; ++node)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e01a      	b.n	8001a8a <calibrate+0x72>
    {
        data[node] *= -1;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	440b      	add	r3, r1
 8001a66:	4252      	negs	r2, r2
 8001a68:	601a      	str	r2, [r3, #0]
        data[node] /= rounds;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	fb91 f2f2 	sdiv	r2, r1, r2
 8001a82:	601a      	str	r2, [r3, #0]
    for(int node = 0; node < len; ++node)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	3301      	adds	r3, #1
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbe0      	blt.n	8001a54 <calibrate+0x3c>
    }
    HAL_GPIO_WritePin(GPIOA, MCU_PA12_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <calibrate+0x90>)
 8001a9a:	f001 fa61 	bl	8002f60 <HAL_GPIO_WritePin>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020000 	.word	0x40020000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_MspInit+0x68>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_MspInit+0x68>)
 8001ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ac8:	6253      	str	r3, [r2, #36]	; 0x24
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x68>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x68>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_MspInit+0x68>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x68>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x68>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_MspInit+0x68>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6253      	str	r3, [r2, #36]	; 0x24
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_MspInit+0x68>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	f001 f823 	bl	8002b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b10:	2005      	movs	r0, #5
 8001b12:	f001 f83c 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_ADC_MspInit+0xd4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d153      	bne.n	8001bee <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001bba:	f001 f851 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <HAL_ADC_MspInit+0xe0>)
 8001bd2:	f001 f845 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <HAL_ADC_MspInit+0xe4>)
 8001bea:	f001 f839 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	; 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40012400 	.word	0x40012400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_I2C_MspInit+0x9c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d138      	bne.n	8001ca0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <HAL_I2C_MspInit+0xa4>)
 8001c64:	f000 fffc 	bl	8002c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c72:	6253      	str	r3, [r2, #36]	; 0x24
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	201f      	movs	r0, #31
 8001c86:	f000 ff66 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c8a:	201f      	movs	r0, #31
 8001c8c:	f000 ff7f 	bl	8002b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2020      	movs	r0, #32
 8001c96:	f000 ff5e 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c9a:	2020      	movs	r0, #32
 8001c9c:	f000 ff77 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_RTC_MspInit+0x30>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10a      	bne.n	8001cdc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_RTC_MspInit+0x34>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2029      	movs	r0, #41	; 0x29
 8001cd2:	f000 ff40 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cd6:	2029      	movs	r0, #41	; 0x29
 8001cd8:	f000 ff59 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40002800 	.word	0x40002800
 8001ce8:	424706d8 	.word	0x424706d8

08001cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_SPI_MspInit+0x8c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d130      	bne.n	8001d70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6253      	str	r3, [r2, #36]	; 0x24
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_SPI_MspInit+0x90>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d50:	2305      	movs	r3, #5
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <HAL_SPI_MspInit+0x94>)
 8001d5c:	f000 ff80 	bl	8002c60 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2024      	movs	r0, #36	; 0x24
 8001d66:	f000 fef6 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d6a:	2024      	movs	r0, #36	; 0x24
 8001d6c:	f000 ff0f 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40003800 	.word	0x40003800
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020400 	.word	0x40020400

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x8c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d130      	bne.n	8001e08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6253      	str	r3, [r2, #36]	; 0x24
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_UART_MspInit+0x90>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001dd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001de8:	2307      	movs	r3, #7
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <HAL_UART_MspInit+0x94>)
 8001df4:	f000 ff34 	bl	8002c60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2027      	movs	r0, #39	; 0x27
 8001dfe:	f000 feaa 	bl	8002b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e02:	2027      	movs	r0, #39	; 0x27
 8001e04:	f000 fec3 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40004800 	.word	0x40004800
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020800 	.word	0x40020800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <NMI_Handler+0x4>

08001e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <MemManage_Handler+0x4>

08001e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <SysTick_Handler+0x34>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <SysTick_Handler+0x18>
		Timer1--;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <SysTick_Handler+0x34>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <SysTick_Handler+0x34>)
 8001e76:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <SysTick_Handler+0x38>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <SysTick_Handler+0x2c>
		Timer2--;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Handler+0x38>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <SysTick_Handler+0x38>)
 8001e8a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8c:	f000 f8f2 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200003c6 	.word	0x200003c6
 8001e98:	200003c4 	.word	0x200003c4

08001e9c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <I2C1_EV_IRQHandler+0x10>)
 8001eae:	f001 f9b3 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000145c 	.word	0x2000145c

08001ebc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <I2C1_ER_IRQHandler+0x10>)
 8001ec2:	f001 fb1a 	bl	80034fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000145c 	.word	0x2000145c

08001ed0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <SPI2_IRQHandler+0x10>)
 8001ed6:	f004 fce3 	bl	80068a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003cc 	.word	0x200003cc

08001ee4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  Uart_isr(&huart3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART3_IRQHandler+0x10>)
 8001eea:	f7fe fae1 	bl	80004b0 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000378 	.word	0x20000378

08001ef8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <RTC_Alarm_IRQHandler+0x10>)
 8001efe:	f004 f893 	bl	8006028 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000151c 	.word	0x2000151c

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f008 fc0e 	bl	800a75c <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20008000 	.word	0x20008000
 8001f6c:	00000800 	.word	0x00000800
 8001f70:	20000138 	.word	0x20000138
 8001f74:	20004668 	.word	0x20004668

08001f78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f86:	490d      	ldr	r1, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f9c:	4c0a      	ldr	r4, [pc, #40]	; (8001fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffe5 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f008 fbdb 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7fe ff9d 	bl	8000ef0 <main>
  bx lr
 8001fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fbc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001fc0:	0800b5bc 	.word	0x0800b5bc
  ldr r2, =_sbss
 8001fc4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001fc8:	20004668 	.word	0x20004668

08001fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_IRQHandler>

08001fce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 fdb1 	bl	8002b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f000 f80e 	bl	8002000 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	e001      	b.n	8001ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff0:	f7ff fd62 	bl	8001ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_InitTick+0x6c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fdbe 	bl	8002baa <HAL_SYSTICK_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d809      	bhi.n	800204e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f000 fd88 	bl	8002b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_InitTick+0x70>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e007      	b.n	800205e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e004      	b.n	800205e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000054 	.word	0x20000054
 800206c:	2000004c 	.word	0x2000004c
 8002070:	20000050 	.word	0x20000050

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x1c>)
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200025e4 	.word	0x200025e4
 8002094:	20000054 	.word	0x20000054

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	200025e4 	.word	0x200025e4

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fff0 	bl	8002098 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d004      	beq.n	80020d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_Delay+0x40>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d0:	bf00      	nop
 80020d2:	f7ff ffe1 	bl	8002098 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d8f7      	bhi.n	80020d2 <HAL_Delay+0x26>
  {
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000054 	.word	0x20000054

080020f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08e      	sub	sp, #56	; 0x38
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e127      	b.n	8002360 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_ADC_Init+0x278>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a8d      	ldr	r2, [pc, #564]	; (8002368 <HAL_ADC_Init+0x278>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_ADC_Init+0x278>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fced 	bl	8001b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80ff 	bne.w	8002356 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002160:	f023 0302 	bic.w	r3, r3, #2
 8002164:	f043 0202 	orr.w	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800216c:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_ADC_Init+0x27c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	497c      	ldr	r1, [pc, #496]	; (800236c <HAL_ADC_Init+0x27c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002186:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218e:	4619      	mov	r1, r3
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80021aa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	2302      	movs	r3, #2
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80021d2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80021d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d6:	4313      	orrs	r3, r2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d007      	beq.n	80021f2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80021ea:	4313      	orrs	r3, r2
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	4313      	orrs	r3, r2
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d04f      	beq.n	80022a0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002206:	4313      	orrs	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002212:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6912      	ldr	r2, [r2, #16]
 8002218:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800221c:	d003      	beq.n	8002226 <HAL_ADC_Init+0x136>
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	2a01      	cmp	r2, #1
 8002224:	d102      	bne.n	800222c <HAL_ADC_Init+0x13c>
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	e000      	b.n	800222e <HAL_ADC_Init+0x13e>
 800222c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800222e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	4313      	orrs	r3, r2
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d125      	bne.n	800228c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	3b01      	subs	r3, #1
 8002250:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	617a      	str	r2, [r7, #20]
  return result;
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4093      	lsls	r3, r2
 8002268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	4313      	orrs	r3, r2
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	e00b      	b.n	800228c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_ADC_Init+0x280>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800229c:	430b      	orrs	r3, r1
 800229e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_ADC_Init+0x284>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d003      	beq.n	80022c6 <HAL_ADC_Init+0x1d6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80022da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	60fa      	str	r2, [r7, #12]
  return result;
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	fa03 f202 	lsl.w	r2, r3, r2
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_ADC_Init+0x288>)
 8002312:	4013      	ands	r3, r2
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	429a      	cmp	r2, r3
 8002318:	d10b      	bne.n	8002332 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	f023 0303 	bic.w	r3, r3, #3
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002330:	e014      	b.n	800235c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f023 0312 	bic.w	r3, r3, #18
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002354:	e002      	b.n	800235c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800235c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002360:	4618      	mov	r0, r3
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40012700 	.word	0x40012700
 8002370:	fcfc16ff 	.word	0xfcfc16ff
 8002374:	c0fff18d 	.word	0xc0fff18d
 8002378:	bf80fffe 	.word	0xbf80fffe

0800237c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Start+0x1a>
 8002392:	2302      	movs	r3, #2
 8002394:	e04e      	b.n	8002434 <HAL_ADC_Start+0xb8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa64 	bl	800286c <ADC_Enable>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d141      	bne.n	8002432 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f023 0206 	bic.w	r2, r3, #6
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
 80023fa:	e002      	b.n	8002402 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002412:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002430:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Stop+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e01a      	b.n	800248c <HAL_ADC_Stop+0x50>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa60 	bl	8002924 <ADC_ConversionStop_Disable>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d113      	bne.n	80024da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	d10b      	bne.n	80024da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e068      	b.n	80025ac <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024da:	f7ff fddd 	bl	8002098 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024e0:	e021      	b.n	8002526 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d01d      	beq.n	8002526 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_ADC_PollForConversion+0x6c>
 80024f0:	f7ff fdd2 	bl	8002098 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d212      	bcs.n	8002526 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e042      	b.n	80025ac <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0d6      	beq.n	80024e2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0212 	mvn.w	r2, #18
 8002544:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d124      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d111      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e134      	b.n	8002856 <HAL_ADC_ConfigChannel+0x28a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d81c      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4019      	ands	r1, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b05      	subs	r3, #5
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
 8002634:	e07e      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d81c      	bhi.n	8002678 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	; 0x23
 8002650:	221f      	movs	r2, #31
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	4019      	ands	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b23      	subs	r3, #35	; 0x23
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c
 8002676:	e05d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d81c      	bhi.n	80026ba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b41      	subs	r3, #65	; 0x41
 8002692:	221f      	movs	r2, #31
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	3b41      	subs	r3, #65	; 0x41
 80026ac:	fa00 f203 	lsl.w	r2, r0, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
 80026b8:	e03c      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d81c      	bhi.n	80026fc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b5f      	subs	r3, #95	; 0x5f
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	4019      	ands	r1, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b5f      	subs	r3, #95	; 0x5f
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34
 80026fa:	e01b      	b.n	8002734 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b7d      	subs	r3, #125	; 0x7d
 800270e:	221f      	movs	r2, #31
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b7d      	subs	r3, #125	; 0x7d
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d81a      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	2207      	movs	r2, #7
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	4019      	ands	r1, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6898      	ldr	r0, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	e042      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b13      	cmp	r3, #19
 8002778:	d81c      	bhi.n	80027b4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	3b1e      	subs	r3, #30
 800278c:	2207      	movs	r2, #7
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	4019      	ands	r1, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	e021      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b1a      	cmp	r3, #26
 80027ba:	d81c      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b3c      	subs	r3, #60	; 0x3c
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	3b3c      	subs	r3, #60	; 0x3c
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027f6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d003      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002804:	2b11      	cmp	r3, #17
 8002806:	d121      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11b      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_ADC_ConfigChannel+0x294>)
 800281a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800281e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b10      	cmp	r3, #16
 8002826:	d111      	bne.n	800284c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_ADC_ConfigChannel+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_ADC_ConfigChannel+0x29c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9a      	lsrs	r2, r3, #18
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012700 	.word	0x40012700
 8002864:	2000004c 	.word	0x2000004c
 8002868:	431bde83 	.word	0x431bde83

0800286c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d043      	beq.n	8002912 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <ADC_Enable+0xb0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <ADC_Enable+0xb4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9a      	lsrs	r2, r3, #18
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028ae:	e002      	b.n	80028b6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80028bc:	f7ff fbec 	bl	8002098 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c2:	e01f      	b.n	8002904 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80028c4:	f7ff fbe8 	bl	8002098 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d918      	bls.n	8002904 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d011      	beq.n	8002904 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d1d8      	bne.n	80028c4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000004c 	.word	0x2000004c
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d12e      	bne.n	800299c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294e:	f7ff fba3 	bl	8002098 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002954:	e01b      	b.n	800298e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002956:	f7ff fb9f 	bl	8002098 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d914      	bls.n	800298e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d10d      	bne.n	800298e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d0dc      	beq.n	8002956 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60d3      	str	r3, [r2, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db0b      	blt.n	8002a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <__NVIC_EnableIRQ+0x34>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0c:	d301      	bcc.n	8002b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00f      	b.n	8002b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <SysTick_Config+0x40>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f7ff ff90 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <SysTick_Config+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SysTick_Config+0x40>)
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff2d 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b68:	f7ff ff42 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7ff ff90 	bl	8002a98 <NVIC_EncodePriority>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff5f 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff35 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffa2 	bl	8002afc <SysTick_Config>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e029      	b.n	8002c3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020e 	bic.w	r2, r2, #14
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 021c 	and.w	r2, r3, #28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
    }
  }
  return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c52:	b2db      	uxtb	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c76:	e154      	b.n	8002f22 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8146 	beq.w	8002f1c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a0 	beq.w	8002f1c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002df4:	4a53      	ldr	r2, [pc, #332]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d019      	beq.n	8002e54 <HAL_GPIO_Init+0x1f4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <HAL_GPIO_Init+0x2ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1f0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a49      	ldr	r2, [pc, #292]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_GPIO_Init+0x2f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e4>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e008      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e44:	2305      	movs	r3, #5
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f aea3 	bne.w	8002c78 <HAL_GPIO_Init+0x18>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fe28 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	; 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f002 fae6 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	; (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	; (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	; (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	; (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	; (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d003      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x38>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	f040 80c1 	bne.w	80033d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_I2C_EV_IRQHandler+0x6e>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003270:	d003      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x62>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003278:	d101      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x66>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x68>
 800327e:	2300      	movs	r3, #0
 8003280:	2b01      	cmp	r3, #1
 8003282:	f000 8132 	beq.w	80034ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00c      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x92>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f001 fc63 	bl	8004b68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fd6f 	bl	8003d86 <I2C_Master_SB>
 80032a8:	e092      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0xb2>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	0a5b      	lsrs	r3, r3, #9
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fde4 	bl	8003e90 <I2C_Master_ADD10>
 80032c8:	e082      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0xd2>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fdfd 	bl	8003ee2 <I2C_Master_ADDR>
 80032e8:	e072      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03b      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	f000 80f3 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	09db      	lsrs	r3, r3, #7
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f9e9 	bl	8003704 <I2C_MasterTransmit_TXE>
 8003332:	e04d      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80d6 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80cf 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	2b21      	cmp	r3, #33	; 0x21
 8003354:	d103      	bne.n	800335e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa70 	bl	800383c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335c:	e0c7      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	f040 80c4 	bne.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fade 	bl	8003928 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336c:	e0bf      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	f000 80b7 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00f      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fb53 	bl	8003a50 <I2C_MasterReceive_RXNE>
 80033aa:	e011      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 809a 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0a5b      	lsrs	r3, r3, #9
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8093 	beq.w	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbf2 	bl	8003bb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ce:	e08e      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d0:	e08d      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e007      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x20e>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0a5b      	lsrs	r3, r3, #9
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 ffab 	bl	800437a <I2C_Slave_ADDR>
 8003424:	e066      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0x22e>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 ffe6 	bl	8004410 <I2C_Slave_STOPF>
 8003444:	e056      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	2b21      	cmp	r3, #33	; 0x21
 800344a:	d002      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x23a>
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	2b29      	cmp	r3, #41	; 0x29
 8003450:	d125      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00f      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0a9b      	lsrs	r3, r3, #10
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fec3 	bl	8004202 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347c:	e039      	b.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d033      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0a5b      	lsrs	r3, r3, #9
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02d      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fef0 	bl	800427c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800349c:	e029      	b.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00f      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a9b      	lsrs	r3, r3, #10
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fefa 	bl	80042bc <I2C_SlaveReceive_RXNE>
 80034c8:	e014      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 ff28 	bl	8004338 <I2C_SlaveReceive_BTF>
 80034e8:	e004      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08a      	sub	sp, #40	; 0x28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x4e>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003546:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	0a5b      	lsrs	r3, r3, #9
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x78>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003570:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	0a9b      	lsrs	r3, r3, #10
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03f      	beq.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d039      	beq.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800358a:	7efb      	ldrb	r3, [r7, #27]
 800358c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035a4:	7ebb      	ldrb	r3, [r7, #26]
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d112      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10f      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b21      	cmp	r3, #33	; 0x21
 80035b4:	d008      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b29      	cmp	r3, #41	; 0x29
 80035ba:	d005      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xce>
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b28      	cmp	r3, #40	; 0x28
 80035c0:	d106      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d103      	bne.n	80035d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 f851 	bl	8004670 <I2C_Slave_AF>
 80035ce:	e016      	b.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035e2:	7efb      	ldrb	r3, [r7, #27]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d002      	beq.n	80035ee <HAL_I2C_ER_IRQHandler+0xf4>
 80035e8:	7efb      	ldrb	r3, [r7, #27]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	0adb      	lsrs	r3, r3, #11
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <HAL_I2C_ER_IRQHandler+0x12e>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003626:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 f888 	bl	8004750 <I2C_ITError>
  }
}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
 800369c:	4613      	mov	r3, r2
 800369e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d150      	bne.n	80037cc <I2C_MasterTransmit_TXE+0xc8>
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	d14d      	bne.n	80037cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d01d      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d01a      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003742:	d016      	beq.n	8003772 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003752:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2211      	movs	r2, #17
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff6c 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003770:	e060      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003780:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d107      	bne.n	80037bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff81 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ba:	e03b      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff3f 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ca:	e033      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b21      	cmp	r3, #33	; 0x21
 80037d0:	d005      	beq.n	80037de <I2C_MasterTransmit_TXE+0xda>
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d12d      	bne.n	8003834 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b22      	cmp	r3, #34	; 0x22
 80037dc:	d12a      	bne.n	8003834 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037f8:	e01c      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d103      	bne.n	800380e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f88e 	bl	8003928 <I2C_MemoryTransmit_TXE_BTF>
}
 800380c:	e012      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003832:	e7ff      	b.n	8003834 <I2C_MasterTransmit_TXE+0x130>
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d164      	bne.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003884:	e04c      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d01d      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b20      	cmp	r3, #32
 8003890:	d01a      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003898:	d016      	beq.n	80038c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2211      	movs	r2, #17
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fec1 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
}
 80038c6:	e02b      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d107      	bne.n	8003912 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fed6 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
}
 8003910:	e006      	b.n	8003920 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fe94 	bl	8003648 <HAL_I2C_MasterTxCpltCallback>
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11d      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10b      	bne.n	8003960 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	b2da      	uxtb	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800395e:	e073      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	b29b      	uxth	r3, r3
 8003966:	121b      	asrs	r3, r3, #8
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
}
 800397a:	e065      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10b      	bne.n	800399c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	b2da      	uxtb	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	651a      	str	r2, [r3, #80]	; 0x50
}
 800399a:	e055      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d151      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	d10d      	bne.n	80039c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c4:	e040      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b21      	cmp	r3, #33	; 0x21
 80039d4:	d112      	bne.n	80039fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039fa:	e025      	b.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d120      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b21      	cmp	r3, #33	; 0x21
 8003a0a:	d11d      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fe3a 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b22      	cmp	r3, #34	; 0x22
 8003a62:	f040 80a2 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d921      	bls.n	8003ab8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	f040 8082 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003ab6:	e078      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d074      	beq.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d002      	beq.n	8003acc <I2C_MasterReceive_RXNE+0x7c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d16e      	bne.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f001 f819 	bl	8004b04 <I2C_WaitOnSTOPRequestThroughIT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d142      	bne.n	8003b5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d10a      	bne.n	8003b48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fdc4 	bl	80036ce <HAL_I2C_MemRxCpltCallback>
}
 8003b46:	e030      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2212      	movs	r2, #18
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fd7f 	bl	800365a <HAL_I2C_MasterRxCpltCallback>
}
 8003b5c:	e025      	b.n	8003baa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fd9b 	bl	80036e0 <HAL_I2C_ErrorCallback>
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d11b      	bne.n	8003c02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c00:	e0bd      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d129      	bne.n	8003c60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00a      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d007      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c5e:	e08e      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d176      	bne.n	8003d58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <I2C_MasterReceive_BTF+0xc4>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d108      	bne.n	8003c88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e019      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d002      	beq.n	8003c94 <I2C_MasterReceive_BTF+0xe2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d108      	bne.n	8003ca6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e00a      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d007      	beq.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d10a      	bne.n	8003d42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fcc7 	bl	80036ce <HAL_I2C_MemRxCpltCallback>
}
 8003d40:	e01d      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2212      	movs	r2, #18
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fc82 	bl	800365a <HAL_I2C_MasterRxCpltCallback>
}
 8003d56:	e012      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d117      	bne.n	8003dca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003db4:	e067      	b.n	8003e86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
}
 8003dc8:	e05d      	b.n	8003e86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d133      	bne.n	8003e3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b21      	cmp	r3, #33	; 0x21
 8003dde:	d109      	bne.n	8003df4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	e008      	b.n	8003e06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <I2C_Master_SB+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d032      	beq.n	8003e86 <I2C_Master_SB+0x100>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02d      	beq.n	8003e86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
}
 8003e3a:	e024      	b.n	8003e86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10e      	bne.n	8003e62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	11db      	asrs	r3, r3, #7
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0306 	and.w	r3, r3, #6
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f063 030f 	orn	r3, r3, #15
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]
}
 8003e60:	e011      	b.n	8003e86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10d      	bne.n	8003e86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	11db      	asrs	r3, r3, #7
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0306 	and.w	r3, r3, #6
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f063 030e 	orn	r3, r3, #14
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	611a      	str	r2, [r3, #16]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <I2C_Master_ADD10+0x26>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d108      	bne.n	8003ec8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <I2C_Master_ADD10+0x48>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed6:	605a      	str	r2, [r3, #4]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b091      	sub	sp, #68	; 0x44
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	f040 8169 	bne.w	80041e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <I2C_Master_ADDR+0x54>
 8003f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10b      	bne.n	8003f36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	e160      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <I2C_Master_ADDR+0x98>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f46:	d118      	bne.n	8003f7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	651a      	str	r2, [r3, #80]	; 0x50
 8003f78:	e13e      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d113      	bne.n	8003fac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e115      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	f040 808a 	bne.w	80040cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fbe:	d137      	bne.n	8004030 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d113      	bne.n	8004008 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	e0e7      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e0d3      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b08      	cmp	r3, #8
 8004034:	d02e      	beq.n	8004094 <I2C_Master_ADDR+0x1b2>
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b20      	cmp	r3, #32
 800403a:	d02b      	beq.n	8004094 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800403c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403e:	2b12      	cmp	r3, #18
 8004040:	d102      	bne.n	8004048 <I2C_Master_ADDR+0x166>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b01      	cmp	r3, #1
 8004046:	d125      	bne.n	8004094 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b04      	cmp	r3, #4
 800404c:	d00e      	beq.n	800406c <I2C_Master_ADDR+0x18a>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b02      	cmp	r3, #2
 8004052:	d00b      	beq.n	800406c <I2C_Master_ADDR+0x18a>
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2b10      	cmp	r3, #16
 8004058:	d008      	beq.n	800406c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e007      	b.n	800407c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	e0a1      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e085      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d14d      	bne.n	8004172 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d016      	beq.n	800410a <I2C_Master_ADDR+0x228>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d013      	beq.n	800410a <I2C_Master_ADDR+0x228>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d010      	beq.n	800410a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e007      	b.n	800411a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d117      	bne.n	800415a <I2C_Master_ADDR+0x278>
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004130:	d00b      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b01      	cmp	r3, #1
 8004136:	d008      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b08      	cmp	r3, #8
 800413c:	d005      	beq.n	800414a <I2C_Master_ADDR+0x268>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b10      	cmp	r3, #16
 8004142:	d002      	beq.n	800414a <I2C_Master_ADDR+0x268>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2b20      	cmp	r3, #32
 8004148:	d107      	bne.n	800415a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004158:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e032      	b.n	80041d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004180:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004190:	d117      	bne.n	80041c2 <I2C_Master_ADDR+0x2e0>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004198:	d00b      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b01      	cmp	r3, #1
 800419e:	d008      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d005      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d002      	beq.n	80041b2 <I2C_Master_ADDR+0x2d0>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d107      	bne.n	80041c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041de:	e00b      	b.n	80041f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	e7ff      	b.n	80041f8 <I2C_Master_ADDR+0x316>
 80041f8:	bf00      	nop
 80041fa:	3744      	adds	r7, #68	; 0x44
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02b      	beq.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d114      	bne.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b29      	cmp	r3, #41	; 0x29
 800424e:	d111      	bne.n	8004274 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2221      	movs	r2, #33	; 0x21
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2228      	movs	r2, #40	; 0x28
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff f9fc 	bl	800366c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02c      	beq.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b2a      	cmp	r3, #42	; 0x2a
 800430a:	d111      	bne.n	8004330 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2222      	movs	r2, #34	; 0x22
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2228      	movs	r2, #40	; 0x28
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff f9a7 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004394:	2b28      	cmp	r3, #40	; 0x28
 8004396:	d127      	bne.n	80043e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	81bb      	strh	r3, [r7, #12]
 80043ca:	e002      	b.n	80043d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043da:	89ba      	ldrh	r2, [r7, #12]
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff f955 	bl	8003690 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043e6:	e00e      	b.n	8004406 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800442e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	d172      	bne.n	8004554 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d002      	beq.n	800447a <I2C_Slave_STOPF+0x6a>
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d135      	bne.n	80044e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0204 	orr.w	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fbc6 	bl	8002c44 <HAL_DMA_GetState>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d049      	beq.n	8004552 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4a69      	ldr	r2, [pc, #420]	; (8004668 <I2C_Slave_STOPF+0x258>)
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fb79 	bl	8002bc2 <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03d      	beq.n	8004552 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e0:	4610      	mov	r0, r2
 80044e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044e4:	e035      	b.n	8004552 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fb90 	bl	8002c44 <HAL_DMA_GetState>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d014      	beq.n	8004554 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <I2C_Slave_STOPF+0x258>)
 8004530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fb43 	bl	8002bc2 <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
 8004550:	e000      	b.n	8004554 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004552:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03e      	beq.n	80045dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d112      	bne.n	8004592 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d112      	bne.n	80045c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8b3 	bl	8004750 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045ea:	e039      	b.n	8004660 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b2a      	cmp	r3, #42	; 0x2a
 80045f0:	d109      	bne.n	8004606 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2228      	movs	r2, #40	; 0x28
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff f83c 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b28      	cmp	r3, #40	; 0x28
 8004610:	d111      	bne.n	8004636 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <I2C_Slave_STOPF+0x25c>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff f83b 	bl	80036aa <HAL_I2C_ListenCpltCallback>
}
 8004634:	e014      	b.n	8004660 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	d002      	beq.n	8004644 <I2C_Slave_STOPF+0x234>
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d10d      	bne.n	8004660 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff f80f 	bl	800367e <HAL_I2C_SlaveRxCpltCallback>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	080049b5 	.word	0x080049b5
 800466c:	ffff0000 	.word	0xffff0000

08004670 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d002      	beq.n	8004692 <I2C_Slave_AF+0x22>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b20      	cmp	r3, #32
 8004690:	d129      	bne.n	80046e6 <I2C_Slave_AF+0x76>
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b28      	cmp	r3, #40	; 0x28
 8004696:	d126      	bne.n	80046e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <I2C_Slave_AF+0xdc>)
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fe ffe3 	bl	80036aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046e4:	e02e      	b.n	8004744 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b21      	cmp	r3, #33	; 0x21
 80046ea:	d126      	bne.n	800473a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <I2C_Slave_AF+0xdc>)
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004720:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe ff9a 	bl	800366c <HAL_I2C_SlaveTxCpltCallback>
}
 8004738:	e004      	b.n	8004744 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004742:	615a      	str	r2, [r3, #20]
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	ffff0000 	.word	0xffff0000

08004750 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004766:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	2b10      	cmp	r3, #16
 800476c:	d002      	beq.n	8004774 <I2C_ITError+0x24>
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d10a      	bne.n	800478a <I2C_ITError+0x3a>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	d107      	bne.n	800478a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004788:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004790:	2b28      	cmp	r3, #40	; 0x28
 8004792:	d107      	bne.n	80047a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2228      	movs	r2, #40	; 0x28
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047a2:	e015      	b.n	80047d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d00a      	beq.n	80047ca <I2C_ITError+0x7a>
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b60      	cmp	r3, #96	; 0x60
 80047b8:	d007      	beq.n	80047ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047de:	d162      	bne.n	80048a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d020      	beq.n	8004840 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <I2C_ITError+0x25c>)
 8004804:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f9d9 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8089 	beq.w	800492a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483a:	4610      	mov	r0, r2
 800483c:	4798      	blx	r3
 800483e:	e074      	b.n	800492a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	4a59      	ldr	r2, [pc, #356]	; (80049ac <I2C_ITError+0x25c>)
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe f9b8 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d068      	beq.n	800492a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d10b      	bne.n	800487e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
 80048a4:	e041      	b.n	800492a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b60      	cmp	r3, #96	; 0x60
 80048b0:	d125      	bne.n	80048fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d10b      	bne.n	80048e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fe fefb 	bl	80036f2 <HAL_I2C_AbortCpltCallback>
 80048fc:	e015      	b.n	800492a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10b      	bne.n	8004924 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fe fedb 	bl	80036e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10e      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d113      	bne.n	80049a4 <I2C_ITError+0x254>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b28      	cmp	r3, #40	; 0x28
 8004980:	d110      	bne.n	80049a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <I2C_ITError+0x260>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fe83 	bl	80036aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ce:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <I2C_DMAAbort+0x148>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <I2C_DMAAbort+0x14c>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a1a      	lsrs	r2, r3, #8
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049fa:	e00a      	b.n	8004a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a10:	d0ea      	beq.n	80049e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	2200      	movs	r2, #0
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	2200      	movs	r2, #0
 8004a66:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d10e      	bne.n	8004aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7fe fe29 	bl	80036f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aa0:	e027      	b.n	8004af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa8:	2b28      	cmp	r3, #40	; 0x28
 8004aaa:	d117      	bne.n	8004adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2228      	movs	r2, #40	; 0x28
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ada:	e007      	b.n	8004aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f7fe fdf7 	bl	80036e0 <HAL_I2C_ErrorCallback>
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2000004c 	.word	0x2000004c
 8004b00:	14f8b589 	.word	0x14f8b589

08004b04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	0a1a      	lsrs	r2, r3, #8
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e008      	b.n	8004b54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b50:	d0e9      	beq.n	8004b26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	2000004c 	.word	0x2000004c
 8004b64:	14f8b589 	.word	0x14f8b589

08004b68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b78:	d103      	bne.n	8004b82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b80:	e007      	b.n	8004b92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b8a:	d102      	bne.n	8004b92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e31d      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4b94      	ldr	r3, [pc, #592]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb8:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d07b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d006      	beq.n	8004be2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d10f      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d10b      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be2:	4b87      	ldr	r3, [pc, #540]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d06a      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x128>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d166      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e2f7      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d106      	bne.n	8004c10 <HAL_RCC_OscConfig+0x74>
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e02d      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCC_OscConfig+0x96>
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b76      	ldr	r3, [pc, #472]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a75      	ldr	r2, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0xb8>
 8004c3a:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xd0>
 8004c54:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a69      	ldr	r2, [pc, #420]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a66      	ldr	r2, [pc, #408]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fa10 	bl	8002098 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fd fa0c 	bl	8002098 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e2ad      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fd f9fc 	bl	8002098 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fd f9f8 	bl	8002098 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e299      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cb6:	4b52      	ldr	r3, [pc, #328]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x108>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d05a      	beq.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d119      	bne.n	8004d12 <HAL_RCC_OscConfig+0x176>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e276      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	493d      	ldr	r1, [pc, #244]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d10:	e03a      	b.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d020      	beq.n	8004d5c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCC_OscConfig+0x268>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd f9ba 	bl	8002098 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fd f9b6 	bl	8002098 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e257      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3a:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	492a      	ldr	r1, [pc, #168]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
 8004d5a:	e015      	b.n	8004d88 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_OscConfig+0x268>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fd f999 	bl	8002098 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fd f995 	bl	8002098 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e236      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80b8 	beq.w	8004f06 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d170      	bne.n	8004e7e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x218>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e21a      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d921      	bls.n	8004e08 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fc23 	bl	8005614 <RCC_SetFlashLatencyFromMSIRange>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e208      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4906      	ldr	r1, [pc, #24]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	4901      	ldr	r1, [pc, #4]	; (8004e00 <HAL_RCC_OscConfig+0x264>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
 8004dfe:	e020      	b.n	8004e42 <HAL_RCC_OscConfig+0x2a6>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e08:	4ba4      	ldr	r3, [pc, #656]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	49a1      	ldr	r1, [pc, #644]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e1a:	4ba0      	ldr	r3, [pc, #640]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	061b      	lsls	r3, r3, #24
 8004e28:	499c      	ldr	r1, [pc, #624]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fbee 	bl	8005614 <RCC_SetFlashLatencyFromMSIRange>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e1d3      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	0b5b      	lsrs	r3, r3, #13
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e52:	4a92      	ldr	r2, [pc, #584]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0912      	lsrs	r2, r2, #4
 8004e58:	f002 020f 	and.w	r2, r2, #15
 8004e5c:	4990      	ldr	r1, [pc, #576]	; (80050a0 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	5c8a      	ldrb	r2, [r1, r2]
 8004e60:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e62:	4a90      	ldr	r2, [pc, #576]	; (80050a4 <HAL_RCC_OscConfig+0x508>)
 8004e64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e66:	4b90      	ldr	r3, [pc, #576]	; (80050a8 <HAL_RCC_OscConfig+0x50c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd f8c8 	bl	8002000 <HAL_InitTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d045      	beq.n	8004f06 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	e1b5      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d029      	beq.n	8004eda <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e86:	4b89      	ldr	r3, [pc, #548]	; (80050ac <HAL_RCC_OscConfig+0x510>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd f904 	bl	8002098 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e94:	f7fd f900 	bl	8002098 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1a1      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ea6:	4b7d      	ldr	r3, [pc, #500]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	4977      	ldr	r1, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec4:	4b75      	ldr	r3, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004eda:	4b74      	ldr	r3, [pc, #464]	; (80050ac <HAL_RCC_OscConfig+0x510>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fd f8da 	bl	8002098 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ee8:	f7fd f8d6 	bl	8002098 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e177      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004efa:	4b68      	ldr	r3, [pc, #416]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d030      	beq.n	8004f74 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCC_OscConfig+0x514>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f20:	f7fd f8ba 	bl	8002098 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fd f8b6 	bl	8002098 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e157      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x38c>
 8004f46:	e015      	b.n	8004f74 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f48:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCC_OscConfig+0x514>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f8a3 	bl	8002098 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fd f89f 	bl	8002098 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e140      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b5 	beq.w	80050ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b45      	ldr	r3, [pc, #276]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4b42      	ldr	r3, [pc, #264]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	4a41      	ldr	r2, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6253      	str	r3, [r2, #36]	; 0x24
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d118      	bne.n	8004fec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd f867 	bl	8002098 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fce:	f7fd f863 	bl	8002098 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	; 0x64
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e104      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x518>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x466>
 8004ff4:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	6353      	str	r3, [r2, #52]	; 0x34
 8005000:	e02d      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x488>
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	4a23      	ldr	r2, [pc, #140]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005014:	6353      	str	r3, [r2, #52]	; 0x34
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800501c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005020:	6353      	str	r3, [r2, #52]	; 0x34
 8005022:	e01c      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b05      	cmp	r3, #5
 800502a:	d10c      	bne.n	8005046 <HAL_RCC_OscConfig+0x4aa>
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	4a1a      	ldr	r2, [pc, #104]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005036:	6353      	str	r3, [r2, #52]	; 0x34
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800503e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005042:	6353      	str	r3, [r2, #52]	; 0x34
 8005044:	e00b      	b.n	800505e <HAL_RCC_OscConfig+0x4c2>
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_RCC_OscConfig+0x500>)
 800504c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005050:	6353      	str	r3, [r2, #52]	; 0x34
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d015      	beq.n	8005092 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005066:	f7fd f817 	bl	8002098 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506c:	e00a      	b.n	8005084 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506e:	f7fd f813 	bl	8002098 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f241 3288 	movw	r2, #5000	; 0x1388
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e0b2      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_OscConfig+0x500>)
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ee      	beq.n	800506e <HAL_RCC_OscConfig+0x4d2>
 8005090:	e023      	b.n	80050da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fd f801 	bl	8002098 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005098:	e019      	b.n	80050ce <HAL_RCC_OscConfig+0x532>
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800b120 	.word	0x0800b120
 80050a4:	2000004c 	.word	0x2000004c
 80050a8:	20000050 	.word	0x20000050
 80050ac:	42470020 	.word	0x42470020
 80050b0:	42470680 	.word	0x42470680
 80050b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fc ffee 	bl	8002098 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e08d      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ee      	bne.n	80050b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e0:	4b44      	ldr	r3, [pc, #272]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	4a43      	ldr	r2, [pc, #268]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ea:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d079      	beq.n	80051e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d056      	beq.n	80051a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d13b      	bne.n	800517a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc ffc6 	bl	8002098 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc ffc2 	bl	8002098 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e063      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005122:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4319      	orrs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	430b      	orrs	r3, r1
 8005146:	492b      	ldr	r1, [pc, #172]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc ffa1 	bl	8002098 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fc ff9d 	bl	8002098 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03e      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x5be>
 8005178:	e036      	b.n	80051e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCC_OscConfig+0x65c>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc ff8a 	bl	8002098 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005188:	f7fc ff86 	bl	8002098 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e027      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519a:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x5ec>
 80051a6:	e01f      	b.n	80051e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e01a      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <HAL_RCC_OscConfig+0x658>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d10d      	bne.n	80051e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470060 	.word	0x42470060

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e11a      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d919      	bls.n	8005252 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <HAL_RCC_ClockConfig+0x34>
 8005224:	4b8a      	ldr	r3, [pc, #552]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a89      	ldr	r2, [pc, #548]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	4b87      	ldr	r3, [pc, #540]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	4985      	ldr	r1, [pc, #532]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005240:	4b83      	ldr	r3, [pc, #524]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d001      	beq.n	8005252 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0f9      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	497a      	ldr	r1, [pc, #488]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 808e 	beq.w	800539a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005286:	4b73      	ldr	r3, [pc, #460]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d121      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0d7      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800529e:	4b6d      	ldr	r3, [pc, #436]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0cb      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0bf      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052c6:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0b7      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d6:	4b5f      	ldr	r3, [pc, #380]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	495c      	ldr	r1, [pc, #368]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fc fed6 	bl	8002098 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d112      	bne.n	800531c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fc fece 	bl	8002098 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e09b      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800530e:	4b51      	ldr	r3, [pc, #324]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b08      	cmp	r3, #8
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xfc>
 800531a:	e03e      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d112      	bne.n	800534a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005324:	e00a      	b.n	800533c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fc feb7 	bl	8002098 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e084      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d1ee      	bne.n	8005326 <HAL_RCC_ClockConfig+0x12a>
 8005348:	e027      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d11d      	bne.n	800538e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fc fea0 	bl	8002098 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e06d      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800536a:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_ClockConfig+0x158>
 8005376:	e010      	b.n	800539a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fc fe8e 	bl	8002098 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e05b      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800539a:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d219      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d105      	bne.n	80053ba <HAL_RCC_ClockConfig+0x1be>
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	4923      	ldr	r1, [pc, #140]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <HAL_RCC_ClockConfig+0x254>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e034      	b.n	8005446 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4917      	ldr	r1, [pc, #92]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	490f      	ldr	r1, [pc, #60]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800541a:	f000 f823 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800541e:	4602      	mov	r2, r0
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCC_ClockConfig+0x258>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	490b      	ldr	r1, [pc, #44]	; (8005458 <HAL_RCC_ClockConfig+0x25c>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <HAL_RCC_ClockConfig+0x260>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_ClockConfig+0x264>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fc fde0 	bl	8002000 <HAL_InitTick>
 8005440:	4603      	mov	r3, r0
 8005442:	72fb      	strb	r3, [r7, #11]

  return status;
 8005444:	7afb      	ldrb	r3, [r7, #11]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00
 8005454:	40023800 	.word	0x40023800
 8005458:	0800b120 	.word	0x0800b120
 800545c:	2000004c 	.word	0x2000004c
 8005460:	20000050 	.word	0x20000050

08005464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800546a:	4b4d      	ldr	r3, [pc, #308]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d00c      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x30>
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d87c      	bhi.n	8005578 <HAL_RCC_GetSysClockFreq+0x114>
 800547e:	2b04      	cmp	r3, #4
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x24>
 8005482:	2b08      	cmp	r3, #8
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x2a>
 8005486:	e077      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800548a:	613b      	str	r3, [r7, #16]
      break;
 800548c:	e082      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005490:	613b      	str	r3, [r7, #16]
      break;
 8005492:	e07f      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	0c9b      	lsrs	r3, r3, #18
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	4a43      	ldr	r2, [pc, #268]	; (80055ac <HAL_RCC_GetSysClockFreq+0x148>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0d9b      	lsrs	r3, r3, #22
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	4939      	ldr	r1, [pc, #228]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054c4:	fb01 f003 	mul.w	r0, r1, r3
 80054c8:	2100      	movs	r1, #0
 80054ca:	fb01 f102 	mul.w	r1, r1, r2
 80054ce:	1844      	adds	r4, r0, r1
 80054d0:	4935      	ldr	r1, [pc, #212]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054d2:	fba2 0101 	umull	r0, r1, r2, r1
 80054d6:	1863      	adds	r3, r4, r1
 80054d8:	4619      	mov	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	f7fa fe4b 	bl	800017c <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4613      	mov	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e040      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	461c      	mov	r4, r3
 80054f4:	f04f 0500 	mov.w	r5, #0
 80054f8:	4620      	mov	r0, r4
 80054fa:	4629      	mov	r1, r5
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	014b      	lsls	r3, r1, #5
 8005506:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800550a:	0142      	lsls	r2, r0, #5
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	1b00      	subs	r0, r0, r4
 8005512:	eb61 0105 	sbc.w	r1, r1, r5
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	018b      	lsls	r3, r1, #6
 8005520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005524:	0182      	lsls	r2, r0, #6
 8005526:	1a12      	subs	r2, r2, r0
 8005528:	eb63 0301 	sbc.w	r3, r3, r1
 800552c:	f04f 0000 	mov.w	r0, #0
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	00d9      	lsls	r1, r3, #3
 8005536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800553a:	00d0      	lsls	r0, r2, #3
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	1912      	adds	r2, r2, r4
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f04f 0000 	mov.w	r0, #0
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	0299      	lsls	r1, r3, #10
 8005550:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005554:	0290      	lsls	r0, r2, #10
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	461a      	mov	r2, r3
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	f7fa fe09 	bl	800017c <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4613      	mov	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	613b      	str	r3, [r7, #16]
      break;
 8005576:	e00d      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	0b5b      	lsrs	r3, r3, #13
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	613b      	str	r3, [r7, #16]
      break;
 8005592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005594:	693b      	ldr	r3, [r7, #16]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bdb0      	pop	{r4, r5, r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	01312d00 	.word	0x01312d00
 80055ac:	0800b114 	.word	0x0800b114

080055b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	2000004c 	.word	0x2000004c

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055c8:	f7ff fff2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	0800b130 	.word	0x0800b130

080055ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055f0:	f7ff ffde 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0adb      	lsrs	r3, r3, #11
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005602:	5ccb      	ldrb	r3, [r1, r3]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40023800 	.word	0x40023800
 8005610:	0800b130 	.word	0x0800b130

08005614 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d12c      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005638:	4b24      	ldr	r3, [pc, #144]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e016      	b.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6253      	str	r3, [r2, #36]	; 0x24
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005664:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005670:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005678:	d105      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005680:	d101      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005682:	2301      	movs	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d105      	bne.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	490b      	ldr	r1, [pc, #44]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	40007000 	.word	0x40007000
 80056d0:	40023c00 	.word	0x40023c00

080056d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80ed 	beq.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b78      	ldr	r3, [pc, #480]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	4b75      	ldr	r3, [pc, #468]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	4a74      	ldr	r2, [pc, #464]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6253      	str	r3, [r2, #36]	; 0x24
 8005712:	4b72      	ldr	r3, [pc, #456]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b6f      	ldr	r3, [pc, #444]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b6c      	ldr	r3, [pc, #432]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6b      	ldr	r2, [pc, #428]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fc fcad 	bl	8002098 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fc fca9 	bl	8002098 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b64      	cmp	r3, #100	; 0x64
 800574e:	d901      	bls.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0be      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b62      	ldr	r3, [pc, #392]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005760:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005768:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d106      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	429a      	cmp	r2, r3
 8005784:	d00f      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800578e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005792:	d108      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005794:	4b51      	ldr	r3, [pc, #324]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a0:	d101      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e095      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80057a6:	4b4d      	ldr	r3, [pc, #308]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057ae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d041      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d005      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10c      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d02d      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d027      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80057ea:	4b3c      	ldr	r3, [pc, #240]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80057f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f4:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fa:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005800:	4a36      	ldr	r2, [pc, #216]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d014      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fc fc42 	bl	8002098 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005816:	e00a      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fc fc3e 	bl	8002098 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e051      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ee      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800584e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005852:	d10a      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005854:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005864:	491d      	ldr	r1, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
 800586a:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800586c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005876:	4919      	ldr	r1, [pc, #100]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005878:	4313      	orrs	r3, r2
 800587a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005890:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005894:	d10a      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80058a6:	490d      	ldr	r1, [pc, #52]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058b8:	4908      	ldr	r1, [pc, #32]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	4a04      	ldr	r2, [pc, #16]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40007000 	.word	0x40007000
 80058e4:	424706dc 	.word	0x424706dc

080058e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07c      	b.n	80059f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7f5b      	ldrb	r3, [r3, #29]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc f9d2 	bl	8001cb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	22ca      	movs	r2, #202	; 0xca
 800591c:	625a      	str	r2, [r3, #36]	; 0x24
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2253      	movs	r2, #83	; 0x53
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fbf3 	bl	8006112 <RTC_EnterInitMode>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2204      	movs	r2, #4
 800593e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e057      	b.n	80059f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005956:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6899      	ldr	r1, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68d2      	ldr	r2, [r2, #12]
 800597e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6919      	ldr	r1, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	041a      	lsls	r2, r3, #16
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a2:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb8e 	bl	80060c6 <HAL_RTC_WaitForSynchro>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2204      	movs	r2, #4
 80059bc:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e018      	b.n	80059f4 <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	22ff      	movs	r2, #255	; 0xff
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
  }
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	7f1b      	ldrb	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_RTC_SetTime+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0a3      	b.n	8005b5c <HAL_RTC_SetTime+0x160>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d126      	bne.n	8005a74 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fb91 	bl	8006166 <RTC_ByteToBcd2>
 8005a44:	4603      	mov	r3, r0
 8005a46:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fb8a 	bl	8006166 <RTC_ByteToBcd2>
 8005a52:	4603      	mov	r3, r0
 8005a54:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a56:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	789b      	ldrb	r3, [r3, #2]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fb82 	bl	8006166 <RTC_ByteToBcd2>
 8005a62:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a64:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e018      	b.n	8005aa6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a94:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a9a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	78db      	ldrb	r3, [r3, #3]
 8005aa0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	22ca      	movs	r2, #202	; 0xca
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2253      	movs	r2, #83	; 0x53
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fb2b 	bl	8006112 <RTC_EnterInitMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2204      	movs	r2, #4
 8005ace:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e040      	b.n	8005b5c <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005af8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b20:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 facf 	bl	80060c6 <HAL_RTC_WaitForSynchro>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e00a      	b.n	8005b5c <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}

08005b64 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0c1b      	lsrs	r3, r3, #16
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11a      	bne.n	8005bfa <HAL_RTC_GetTime+0x96>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 faeb 	bl	80061a4 <RTC_Bcd2ToByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fae2 	bl	80061a4 <RTC_Bcd2ToByte>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	789b      	ldrb	r3, [r3, #2]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fad9 	bl	80061a4 <RTC_Bcd2ToByte>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	7f1b      	ldrb	r3, [r3, #28]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_RTC_SetDate+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e08d      	b.n	8005d38 <HAL_RTC_SetDate+0x134>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2202      	movs	r2, #2
 8005c26:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10e      	bne.n	8005c4c <HAL_RTC_SetDate+0x48>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	330a      	adds	r3, #10
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11c      	bne.n	8005c8c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	78db      	ldrb	r3, [r3, #3]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa85 	bl	8006166 <RTC_ByteToBcd2>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fa7e 	bl	8006166 <RTC_ByteToBcd2>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c6e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fa76 	bl	8006166 <RTC_ByteToBcd2>
 8005c7a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c7c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e00e      	b.n	8005caa <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c98:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	22ca      	movs	r2, #202	; 0xca
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2253      	movs	r2, #83	; 0x53
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa29 	bl	8006112 <RTC_EnterInitMode>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	22ff      	movs	r2, #255	; 0xff
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e02c      	b.n	8005d38 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cfc:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f9e1 	bl	80060c6 <HAL_RTC_WaitForSynchro>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2204      	movs	r2, #4
 8005d16:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00a      	b.n	8005d38 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}

08005d40 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	0b5b      	lsrs	r3, r3, #13
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11a      	bne.n	8005dd0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	78db      	ldrb	r3, [r3, #3]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fa00 	bl	80061a4 <RTC_Bcd2ToByte>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f9f7 	bl	80061a4 <RTC_Bcd2ToByte>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	789b      	ldrb	r3, [r3, #2]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f9ee 	bl	80061a4 <RTC_Bcd2ToByte>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	7f1b      	ldrb	r3, [r3, #28]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_RTC_SetAlarm_IT+0x20>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e10f      	b.n	800601c <HAL_RTC_SetAlarm_IT+0x240>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2202      	movs	r2, #2
 8005e06:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d136      	bne.n	8005e7c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f99d 	bl	8006166 <RTC_ByteToBcd2>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f996 	bl	8006166 <RTC_ByteToBcd2>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e3e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f98e 	bl	8006166 <RTC_ByteToBcd2>
 8005e4a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e4c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	78db      	ldrb	r3, [r3, #3]
 8005e54:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e56:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	7d1b      	ldrb	r3, [r3, #20]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f981 	bl	8006166 <RTC_ByteToBcd2>
 8005e64:	4603      	mov	r3, r0
 8005e66:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e68:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e022      	b.n	8005ec2 <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e9c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ea2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005eaa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	7d1b      	ldrb	r3, [r3, #20]
 8005eb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005eb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	22ca      	movs	r2, #202	; 0xca
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2253      	movs	r2, #83	; 0x53
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eda:	d144      	bne.n	8005f66 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005efc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005efe:	f7fc f8cb 	bl	8002098 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f04:	e013      	b.n	8005f2e <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f06:	f7fc f8c7 	bl	8002098 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f14:	d90b      	bls.n	8005f2e <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	22ff      	movs	r2, #255	; 0xff
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2203      	movs	r2, #3
 8005f22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e076      	b.n	800601c <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0e4      	beq.n	8005f06 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f52:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	e043      	b.n	8005fee <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f74:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005f86:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f88:	f7fc f886 	bl	8002098 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f8e:	e013      	b.n	8005fb8 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f90:	f7fc f882 	bl	8002098 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9e:	d90b      	bls.n	8005fb8 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2203      	movs	r2, #3
 8005fac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e031      	b.n	800601c <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0e4      	beq.n	8005f90 <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fec:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <HAL_RTC_SetAlarm_IT+0x248>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	; (8006024 <HAL_RTC_SetAlarm_IT+0x248>)
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff8:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <HAL_RTC_SetAlarm_IT+0x248>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4a09      	ldr	r2, [pc, #36]	; (8006024 <HAL_RTC_SetAlarm_IT+0x248>)
 8006000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006004:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	40010400 	.word	0x40010400

08006028 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f831 	bl	80060b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006062:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d012      	beq.n	8006098 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8aa 	bl	80061da <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006096:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800609a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800609e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	775a      	strb	r2, [r3, #29]
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40010400 	.word	0x40010400

080060b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060de:	f7fb ffdb 	bl	8002098 <HAL_GetTick>
 80060e2:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060e4:	e009      	b.n	80060fa <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80060e6:	f7fb ffd7 	bl	8002098 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060f4:	d901      	bls.n	80060fa <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e007      	b.n	800610a <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ee      	beq.n	80060e6 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d119      	bne.n	800615c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006132:	f7fb ffb1 	bl	8002098 <HAL_GetTick>
 8006136:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006138:	e009      	b.n	800614e <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800613a:	f7fb ffad 	bl	8002098 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d901      	bls.n	800614e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e007      	b.n	800615e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0ee      	beq.n	800613a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	4603      	mov	r3, r0
 800616e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006178:	e005      	b.n	8006186 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006180:	7afb      	ldrb	r3, [r7, #11]
 8006182:	3b0a      	subs	r3, #10
 8006184:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	2b09      	cmp	r3, #9
 800618a:	d8f6      	bhi.n	800617a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	b2da      	uxtb	r2, r3
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	4313      	orrs	r3, r2
 8006198:	b2db      	uxtb	r3, r3
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	b2db      	uxtb	r3, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr

080061da <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e06e      	b.n	80062dc <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620e:	d009      	beq.n	8006224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	61da      	str	r2, [r3, #28]
 8006216:	e005      	b.n	8006224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fb fd54 	bl	8001cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	ea42 0103 	orr.w	r1, r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	0c1a      	lsrs	r2, r3, #16
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f002 0204 	and.w	r2, r2, #4
 80062ca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_SPI_Transmit+0x22>
 8006302:	2302      	movs	r3, #2
 8006304:	e126      	b.n	8006554 <HAL_SPI_Transmit+0x270>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800630e:	f7fb fec3 	bl	8002098 <HAL_GetTick>
 8006312:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d002      	beq.n	800632a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006324:	2302      	movs	r3, #2
 8006326:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006328:	e10b      	b.n	8006542 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Transmit+0x52>
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	77fb      	strb	r3, [r7, #31]
    goto error;
 800633a:	e102      	b.n	8006542 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2203      	movs	r2, #3
 8006340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006382:	d10f      	bne.n	80063a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006392:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d007      	beq.n	80063c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ca:	d14b      	bne.n	8006464 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Transmit+0xf6>
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d13e      	bne.n	8006458 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063fe:	e02b      	b.n	8006458 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d112      	bne.n	8006434 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	86da      	strh	r2, [r3, #54]	; 0x36
 8006432:	e011      	b.n	8006458 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006434:	f7fb fe30 	bl	8002098 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d803      	bhi.n	800644c <HAL_SPI_Transmit+0x168>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d102      	bne.n	8006452 <HAL_SPI_Transmit+0x16e>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006456:	e074      	b.n	8006542 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ce      	bne.n	8006400 <HAL_SPI_Transmit+0x11c>
 8006462:	e04c      	b.n	80064fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_SPI_Transmit+0x18e>
 800646c:	8afb      	ldrh	r3, [r7, #22]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d140      	bne.n	80064f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006498:	e02c      	b.n	80064f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d113      	bne.n	80064d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	7812      	ldrb	r2, [r2, #0]
 80064b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80064ce:	e011      	b.n	80064f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d0:	f7fb fde2 	bl	8002098 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d803      	bhi.n	80064e8 <HAL_SPI_Transmit+0x204>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d102      	bne.n	80064ee <HAL_SPI_Transmit+0x20a>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064f2:	e026      	b.n	8006542 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1cd      	bne.n	800649a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fb58 	bl	8006bb8 <SPI_EndRxTxTransaction>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e000      	b.n	8006542 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006552:	7ffb      	ldrb	r3, [r7, #31]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800656a:	2301      	movs	r3, #1
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x26>
 800657e:	2302      	movs	r3, #2
 8006580:	e18a      	b.n	8006898 <HAL_SPI_TransmitReceive+0x33c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800658a:	f7fb fd85 	bl	8002098 <HAL_GetTick>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065a0:	887b      	ldrh	r3, [r7, #2]
 80065a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d00f      	beq.n	80065cc <HAL_SPI_TransmitReceive+0x70>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b2:	d107      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x68>
 80065bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d003      	beq.n	80065cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065ca:	e15b      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_SPI_TransmitReceive+0x82>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_SPI_TransmitReceive+0x82>
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e4:	e14e      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d003      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2205      	movs	r2, #5
 80065f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	887a      	ldrh	r2, [r7, #2]
 800660a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	887a      	ldrh	r2, [r7, #2]
 8006610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d007      	beq.n	800664e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006656:	d178      	bne.n	800674a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x10a>
 8006660:	8b7b      	ldrh	r3, [r7, #26]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d166      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668a:	e053      	b.n	8006734 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d11b      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x176>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x176>
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d113      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d119      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x1b8>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	b292      	uxth	r2, r2
 80066f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006710:	2301      	movs	r3, #1
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006714:	f7fb fcc0 	bl	8002098 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006720:	429a      	cmp	r2, r3
 8006722:	d807      	bhi.n	8006734 <HAL_SPI_TransmitReceive+0x1d8>
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d003      	beq.n	8006734 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006732:	e0a7      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1a6      	bne.n	800668c <HAL_SPI_TransmitReceive+0x130>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1a1      	bne.n	800668c <HAL_SPI_TransmitReceive+0x130>
 8006748:	e07c      	b.n	8006844 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_SPI_TransmitReceive+0x1fc>
 8006752:	8b7b      	ldrh	r3, [r7, #26]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d16b      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677e:	e057      	b.n	8006830 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d11c      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x26c>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d017      	beq.n	80067c8 <HAL_SPI_TransmitReceive+0x26c>
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d114      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d119      	bne.n	800680a <HAL_SPI_TransmitReceive+0x2ae>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d014      	beq.n	800680a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006806:	2301      	movs	r3, #1
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800680a:	f7fb fc45 	bl	8002098 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006816:	429a      	cmp	r2, r3
 8006818:	d803      	bhi.n	8006822 <HAL_SPI_TransmitReceive+0x2c6>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d102      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x2cc>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d103      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800682e:	e029      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1a2      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x224>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d19d      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f9b5 	bl	8006bb8 <SPI_EndRxTxTransaction>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006860:	e010      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	e000      	b.n	8006884 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006898:	4618      	mov	r0, r3
 800689a:	3730      	adds	r7, #48	; 0x30
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	099b      	lsrs	r3, r3, #6
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10f      	bne.n	80068e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    return;
 80068e2:	e0be      	b.n	8006a62 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <HAL_SPI_IRQHandler+0x66>
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
    return;
 8006904:	e0ad      	b.n	8006a62 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_SPI_IRQHandler+0x80>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80a1 	beq.w	8006a62 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 809a 	beq.w	8006a62 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d023      	beq.n	8006982 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b03      	cmp	r3, #3
 8006944:	d011      	beq.n	800696a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	e00b      	b.n	8006982 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	693b      	ldr	r3, [r7, #16]
        return;
 8006980:	e06f      	b.n	8006a62 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d014      	beq.n	80069b8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d04f      	beq.n	8006a60 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <HAL_SPI_IRQHandler+0x14c>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d034      	beq.n	8006a56 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0203 	bic.w	r2, r2, #3
 80069fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <HAL_SPI_IRQHandler+0x1c8>)
 8006a0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fc f8d6 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <HAL_SPI_IRQHandler+0x1c8>)
 8006a36:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fc f8c0 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a54:	e003      	b.n	8006a5e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f808 	bl	8006a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a5c:	e000      	b.n	8006a60 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006a5e:	bf00      	nop
    return;
 8006a60:	bf00      	nop
  }
}
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	08006a7f 	.word	0x08006a7f

08006a6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff ffe7 	bl	8006a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ab8:	f7fb faee 	bl	8002098 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ac8:	f7fb fae6 	bl	8002098 <HAL_GetTick>
 8006acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ace:	4b39      	ldr	r3, [pc, #228]	; (8006bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	015b      	lsls	r3, r3, #5
 8006ad4:	0d1b      	lsrs	r3, r3, #20
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ade:	e054      	b.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d050      	beq.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ae8:	f7fb fad6 	bl	8002098 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d902      	bls.n	8006afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d13d      	bne.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b16:	d111      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b20:	d004      	beq.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2a:	d107      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b44:	d10f      	bne.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e017      	b.n	8006baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d19b      	bne.n	8006ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	2000004c 	.word	0x2000004c

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bc4:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <SPI_EndRxTxTransaction+0x7c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <SPI_EndRxTxTransaction+0x80>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	0d5b      	lsrs	r3, r3, #21
 8006bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006be2:	d112      	bne.n	8006c0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff ff5a 	bl	8006aa8 <SPI_WaitFlagStateUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e00f      	b.n	8006c2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d0f2      	beq.n	8006c0a <SPI_EndRxTxTransaction+0x52>
 8006c24:	e000      	b.n	8006c28 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c26:	bf00      	nop
  }

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	2000004c 	.word	0x2000004c
 8006c38:	165e9f81 	.word	0x165e9f81

08006c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e03f      	b.n	8006cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb f88e 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f829 	bl	8006cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d18:	f023 030c 	bic.w	r3, r3, #12
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	430b      	orrs	r3, r1
 8006d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a55      	ldr	r2, [pc, #340]	; (8006e98 <UART_SetConfig+0x1c0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d103      	bne.n	8006d4e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d46:	f7fe fc51 	bl	80055ec <HAL_RCC_GetPCLK2Freq>
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	e002      	b.n	8006d54 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7fe fc39 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8006d52:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5c:	d14c      	bne.n	8006df8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009a      	lsls	r2, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	4a49      	ldr	r2, [pc, #292]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	0119      	lsls	r1, r3, #4
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009a      	lsls	r2, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d94:	4b41      	ldr	r3, [pc, #260]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006d96:	fba3 0302 	umull	r0, r3, r3, r2
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2064      	movs	r0, #100	; 0x64
 8006d9e:	fb00 f303 	mul.w	r3, r0, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	3332      	adds	r3, #50	; 0x32
 8006da8:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db6:	4419      	add	r1, r3
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009a      	lsls	r2, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dce:	4b33      	ldr	r3, [pc, #204]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006dd0:	fba3 0302 	umull	r0, r3, r3, r2
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	2064      	movs	r0, #100	; 0x64
 8006dd8:	fb00 f303 	mul.w	r3, r0, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	3332      	adds	r3, #50	; 0x32
 8006de2:	4a2e      	ldr	r2, [pc, #184]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f003 0207 	and.w	r2, r3, #7
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	440a      	add	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006df6:	e04a      	b.n	8006e8e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009a      	lsls	r2, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006e10:	fba2 2303 	umull	r2, r3, r2, r3
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	0119      	lsls	r1, r3, #4
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2e:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006e30:	fba3 0302 	umull	r0, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	2064      	movs	r0, #100	; 0x64
 8006e38:	fb00 f303 	mul.w	r3, r0, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	3332      	adds	r3, #50	; 0x32
 8006e42:	4a16      	ldr	r2, [pc, #88]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e4e:	4419      	add	r1, r3
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009a      	lsls	r2, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006e68:	fba3 0302 	umull	r0, r3, r3, r2
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	2064      	movs	r0, #100	; 0x64
 8006e70:	fb00 f303 	mul.w	r3, r0, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	3332      	adds	r3, #50	; 0x32
 8006e7a:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <UART_SetConfig+0x1c4>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f003 020f 	and.w	r2, r3, #15
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40013800 	.word	0x40013800
 8006e9c:	51eb851f 	.word	0x51eb851f

08006ea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ea4:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <MX_FATFS_Init+0x18>)
 8006ea6:	4805      	ldr	r0, [pc, #20]	; (8006ebc <MX_FATFS_Init+0x1c>)
 8006ea8:	f003 fb86 	bl	800a5b8 <FATFS_LinkDriver>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <MX_FATFS_Init+0x20>)
 8006eb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006eb4:	bf00      	nop
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200025e8 	.word	0x200025e8
 8006ebc:	20000058 	.word	0x20000058
 8006ec0:	200025ec 	.word	0x200025ec

08006ec4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ec8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	4603      	mov	r3, r0
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 fcf2 	bl	80008c8 <SD_disk_initialize>
 8006ee4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7f9 fdca 	bl	8000a94 <SD_disk_status>
 8006f00:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006f1a:	7bf8      	ldrb	r0, [r7, #15]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	f7f9 fdcb 	bl	8000abc <SD_disk_read>
 8006f26:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006f40:	7bf8      	ldrb	r0, [r7, #15]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	f7f9 fe22 	bl	8000b90 <SD_disk_write>
 8006f4c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	603a      	str	r2, [r7, #0]
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	460b      	mov	r3, r1
 8006f64:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006f66:	79b9      	ldrb	r1, [r7, #6]
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 fe93 	bl	8000c98 <SD_disk_ioctl>
 8006f72:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	4a08      	ldr	r2, [pc, #32]	; (8006fac <disk_status+0x30>)
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	79fa      	ldrb	r2, [r7, #7]
 8006f94:	4905      	ldr	r1, [pc, #20]	; (8006fac <disk_status+0x30>)
 8006f96:	440a      	add	r2, r1
 8006f98:	7a12      	ldrb	r2, [r2, #8]
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000364 	.word	0x20000364

08006fb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <disk_initialize+0x48>)
 8006fc2:	5cd3      	ldrb	r3, [r2, r3]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d111      	bne.n	8006fec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <disk_initialize+0x48>)
 8006fcc:	2101      	movs	r1, #1
 8006fce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <disk_initialize+0x48>)
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	79fa      	ldrb	r2, [r7, #7]
 8006fde:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <disk_initialize+0x48>)
 8006fe0:	440a      	add	r2, r1
 8006fe2:	7a12      	ldrb	r2, [r2, #8]
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000364 	.word	0x20000364

08006ffc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <disk_read+0x3c>)
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	689c      	ldr	r4, [r3, #8]
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	4a07      	ldr	r2, [pc, #28]	; (8007038 <disk_read+0x3c>)
 800701c:	4413      	add	r3, r2
 800701e:	7a18      	ldrb	r0, [r3, #8]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	47a0      	blx	r4
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
  return res;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}
 8007036:	bf00      	nop
 8007038:	20000364 	.word	0x20000364

0800703c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <disk_write+0x3c>)
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68dc      	ldr	r4, [r3, #12]
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4a07      	ldr	r2, [pc, #28]	; (8007078 <disk_write+0x3c>)
 800705c:	4413      	add	r3, r2
 800705e:	7a18      	ldrb	r0, [r3, #8]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	47a0      	blx	r4
 8007068:	4603      	mov	r3, r0
 800706a:	75fb      	strb	r3, [r7, #23]
  return res;
 800706c:	7dfb      	ldrb	r3, [r7, #23]
}
 800706e:	4618      	mov	r0, r3
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd90      	pop	{r4, r7, pc}
 8007076:	bf00      	nop
 8007078:	20000364 	.word	0x20000364

0800707c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	603a      	str	r2, [r7, #0]
 8007086:	71fb      	strb	r3, [r7, #7]
 8007088:	460b      	mov	r3, r1
 800708a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <disk_ioctl+0x38>)
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	79fa      	ldrb	r2, [r7, #7]
 800709a:	4906      	ldr	r1, [pc, #24]	; (80070b4 <disk_ioctl+0x38>)
 800709c:	440a      	add	r2, r1
 800709e:	7a10      	ldrb	r0, [r2, #8]
 80070a0:	79b9      	ldrb	r1, [r7, #6]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000364 	.word	0x20000364

080070b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3301      	adds	r3, #1
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80070c8:	89fb      	ldrh	r3, [r7, #14]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	b21a      	sxth	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80070da:	89fb      	ldrh	r3, [r7, #14]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3303      	adds	r3, #3
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	3202      	adds	r2, #2
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	3201      	adds	r2, #1
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
	return rv;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	887a      	ldrh	r2, [r7, #2]
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	887b      	ldrh	r3, [r7, #2]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	887a      	ldrh	r2, [r7, #2]
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bc80      	pop	{r7}
 80071b2:	4770      	bx	lr

080071b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	1c53      	adds	r3, r2, #1
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	6179      	str	r1, [r7, #20]
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f1      	bne.n	80071ce <mem_cpy+0x1a>
	}
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr

080071f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	617a      	str	r2, [r7, #20]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3b01      	subs	r3, #1
 8007214:	607b      	str	r3, [r7, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f3      	bne.n	8007204 <mem_set+0x10>
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007228:	b480      	push	{r7}
 800722a:	b089      	sub	sp, #36	; 0x24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	61fa      	str	r2, [r7, #28]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	61ba      	str	r2, [r7, #24]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	1acb      	subs	r3, r1, r3
 8007254:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <mem_cmp+0x40>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0eb      	beq.n	8007240 <mem_cmp+0x18>

	return r;
 8007268:	697b      	ldr	r3, [r7, #20]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3724      	adds	r7, #36	; 0x24
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800727e:	e002      	b.n	8007286 <chk_chr+0x12>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3301      	adds	r3, #1
 8007284:	607b      	str	r3, [r7, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <chk_chr+0x26>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	4293      	cmp	r3, r2
 8007298:	d1f2      	bne.n	8007280 <chk_chr+0xc>
	return *str;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	781b      	ldrb	r3, [r3, #0]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e029      	b.n	8007310 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80072bc:	4a26      	ldr	r2, [pc, #152]	; (8007358 <chk_lock+0xb0>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	4413      	add	r3, r2
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01d      	beq.n	8007306 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072ca:	4a23      	ldr	r2, [pc, #140]	; (8007358 <chk_lock+0xb0>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4413      	add	r3, r2
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d116      	bne.n	800730a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80072dc:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <chk_lock+0xb0>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	4413      	add	r3, r2
 80072e4:	3304      	adds	r3, #4
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d10c      	bne.n	800730a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80072f0:	4a19      	ldr	r2, [pc, #100]	; (8007358 <chk_lock+0xb0>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	4413      	add	r3, r2
 80072f8:	3308      	adds	r3, #8
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d102      	bne.n	800730a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007304:	e007      	b.n	8007316 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d9d2      	bls.n	80072bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d109      	bne.n	8007330 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <chk_lock+0x80>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d101      	bne.n	800732c <chk_lock+0x84>
 8007328:	2300      	movs	r3, #0
 800732a:	e010      	b.n	800734e <chk_lock+0xa6>
 800732c:	2312      	movs	r3, #18
 800732e:	e00e      	b.n	800734e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <chk_lock+0xa0>
 8007336:	4a08      	ldr	r2, [pc, #32]	; (8007358 <chk_lock+0xb0>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4413      	add	r3, r2
 800733e:	330c      	adds	r3, #12
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007346:	d101      	bne.n	800734c <chk_lock+0xa4>
 8007348:	2310      	movs	r3, #16
 800734a:	e000      	b.n	800734e <chk_lock+0xa6>
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr
 8007358:	20000144 	.word	0x20000144

0800735c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	e002      	b.n	800736e <enq_lock+0x12>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3301      	adds	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d806      	bhi.n	8007382 <enq_lock+0x26>
 8007374:	4a08      	ldr	r2, [pc, #32]	; (8007398 <enq_lock+0x3c>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f2      	bne.n	8007368 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b02      	cmp	r3, #2
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr
 8007398:	20000144 	.word	0x20000144

0800739c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e01f      	b.n	80073ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80073ac:	4a41      	ldr	r2, [pc, #260]	; (80074b4 <inc_lock+0x118>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	4413      	add	r3, r2
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d113      	bne.n	80073e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80073be:	4a3d      	ldr	r2, [pc, #244]	; (80074b4 <inc_lock+0x118>)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	4413      	add	r3, r2
 80073c6:	3304      	adds	r3, #4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d109      	bne.n	80073e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80073d2:	4a38      	ldr	r2, [pc, #224]	; (80074b4 <inc_lock+0x118>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	4413      	add	r3, r2
 80073da:	3308      	adds	r3, #8
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d006      	beq.n	80073f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d9dc      	bls.n	80073ac <inc_lock+0x10>
 80073f2:	e000      	b.n	80073f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80073f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d132      	bne.n	8007462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e002      	b.n	8007408 <inc_lock+0x6c>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d806      	bhi.n	800741c <inc_lock+0x80>
 800740e:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <inc_lock+0x118>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	4413      	add	r3, r2
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f2      	bne.n	8007402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d101      	bne.n	8007426 <inc_lock+0x8a>
 8007422:	2300      	movs	r3, #0
 8007424:	e040      	b.n	80074a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	4922      	ldr	r1, [pc, #136]	; (80074b4 <inc_lock+0x118>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	440b      	add	r3, r1
 8007432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	491e      	ldr	r1, [pc, #120]	; (80074b4 <inc_lock+0x118>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	440b      	add	r3, r1
 8007440:	3304      	adds	r3, #4
 8007442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	695a      	ldr	r2, [r3, #20]
 8007448:	491a      	ldr	r1, [pc, #104]	; (80074b4 <inc_lock+0x118>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	440b      	add	r3, r1
 8007450:	3308      	adds	r3, #8
 8007452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007454:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <inc_lock+0x118>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	4413      	add	r3, r2
 800745c:	330c      	adds	r3, #12
 800745e:	2200      	movs	r2, #0
 8007460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <inc_lock+0xe0>
 8007468:	4a12      	ldr	r2, [pc, #72]	; (80074b4 <inc_lock+0x118>)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	4413      	add	r3, r2
 8007470:	330c      	adds	r3, #12
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <inc_lock+0xe0>
 8007478:	2300      	movs	r3, #0
 800747a:	e015      	b.n	80074a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d108      	bne.n	8007494 <inc_lock+0xf8>
 8007482:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <inc_lock+0x118>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	4413      	add	r3, r2
 800748a:	330c      	adds	r3, #12
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	e001      	b.n	8007498 <inc_lock+0xfc>
 8007494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007498:	4906      	ldr	r1, [pc, #24]	; (80074b4 <inc_lock+0x118>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	440b      	add	r3, r1
 80074a0:	330c      	adds	r3, #12
 80074a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000144 	.word	0x20000144

080074b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	607b      	str	r3, [r7, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d825      	bhi.n	8007518 <dec_lock+0x60>
		n = Files[i].ctr;
 80074cc:	4a16      	ldr	r2, [pc, #88]	; (8007528 <dec_lock+0x70>)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	4413      	add	r3, r2
 80074d4:	330c      	adds	r3, #12
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e0:	d101      	bne.n	80074e6 <dec_lock+0x2e>
 80074e2:	2300      	movs	r3, #0
 80074e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80074e6:	89fb      	ldrh	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <dec_lock+0x3a>
 80074ec:	89fb      	ldrh	r3, [r7, #14]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80074f2:	4a0d      	ldr	r2, [pc, #52]	; (8007528 <dec_lock+0x70>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	330c      	adds	r3, #12
 80074fc:	89fa      	ldrh	r2, [r7, #14]
 80074fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007500:	89fb      	ldrh	r3, [r7, #14]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d105      	bne.n	8007512 <dec_lock+0x5a>
 8007506:	4a08      	ldr	r2, [pc, #32]	; (8007528 <dec_lock+0x70>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	737b      	strb	r3, [r7, #13]
 8007516:	e001      	b.n	800751c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007518:	2302      	movs	r3, #2
 800751a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800751c:	7b7b      	ldrb	r3, [r7, #13]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	20000144 	.word	0x20000144

0800752c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e010      	b.n	800755c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800753a:	4a0d      	ldr	r2, [pc, #52]	; (8007570 <clear_lock+0x44>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	4413      	add	r3, r2
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d105      	bne.n	8007556 <clear_lock+0x2a>
 800754a:	4a09      	ldr	r2, [pc, #36]	; (8007570 <clear_lock+0x44>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d9eb      	bls.n	800753a <clear_lock+0xe>
	}
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000144 	.word	0x20000144

08007574 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	78db      	ldrb	r3, [r3, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d034      	beq.n	80075f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	7858      	ldrb	r0, [r3, #1]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007598:	2301      	movs	r3, #1
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	f7ff fd4e 	bl	800703c <disk_write>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	e022      	b.n	80075f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	1ad2      	subs	r2, r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d217      	bcs.n	80075f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	e010      	b.n	80075ec <sync_window+0x78>
					wsect += fs->fsize;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7858      	ldrb	r0, [r3, #1]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075de:	2301      	movs	r3, #1
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	f7ff fd2b 	bl	800703c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d8eb      	bhi.n	80075ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d01b      	beq.n	800764c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ffad 	bl	8007574 <sync_window>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d113      	bne.n	800764c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7858      	ldrb	r0, [r3, #1]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800762e:	2301      	movs	r3, #1
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	f7ff fce3 	bl	8006ffc <disk_read>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800763c:	f04f 33ff 	mov.w	r3, #4294967295
 8007640:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007642:	2301      	movs	r3, #1
 8007644:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff87 	bl	8007574 <sync_window>
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d159      	bne.n	8007724 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d149      	bne.n	800770c <sync_fs+0xb4>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d145      	bne.n	800770c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	899b      	ldrh	r3, [r3, #12]
 800768a:	461a      	mov	r2, r3
 800768c:	2100      	movs	r1, #0
 800768e:	f7ff fdb1 	bl	80071f4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3338      	adds	r3, #56	; 0x38
 8007696:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800769a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fd43 	bl	800712a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3338      	adds	r3, #56	; 0x38
 80076a8:	4921      	ldr	r1, [pc, #132]	; (8007730 <sync_fs+0xd8>)
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fd57 	bl	800715e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3338      	adds	r3, #56	; 0x38
 80076b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076b8:	491e      	ldr	r1, [pc, #120]	; (8007734 <sync_fs+0xdc>)
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fd4f 	bl	800715e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3338      	adds	r3, #56	; 0x38
 80076c4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7ff fd45 	bl	800715e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3338      	adds	r3, #56	; 0x38
 80076d8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f7ff fd3b 	bl	800715e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7858      	ldrb	r0, [r3, #1]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007700:	2301      	movs	r3, #1
 8007702:	f7ff fc9b 	bl	800703c <disk_write>
			fs->fsi_flag = 0;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fcb1 	bl	800707c <disk_ioctl>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <sync_fs+0xcc>
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	41615252 	.word	0x41615252
 8007734:	61417272 	.word	0x61417272

08007738 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3b02      	subs	r3, #2
 8007746:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	3b02      	subs	r3, #2
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d301      	bcc.n	8007758 <clust2sect+0x20>
 8007754:	2300      	movs	r3, #0
 8007756:	e008      	b.n	800776a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	895b      	ldrh	r3, [r3, #10]
 800775c:	461a      	mov	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	fb03 f202 	mul.w	r2, r3, r2
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	4413      	add	r3, r2
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d904      	bls.n	8007794 <get_fat+0x20>
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d302      	bcc.n	800779a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e0bb      	b.n	8007912 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800779a:	f04f 33ff 	mov.w	r3, #4294967295
 800779e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	f000 8083 	beq.w	80078b0 <get_fat+0x13c>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f300 80a7 	bgt.w	80078fe <get_fat+0x18a>
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d002      	beq.n	80077ba <get_fat+0x46>
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d056      	beq.n	8007866 <get_fat+0xf2>
 80077b8:	e0a1      	b.n	80078fe <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	899b      	ldrh	r3, [r3, #12]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d8:	4413      	add	r3, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6938      	ldr	r0, [r7, #16]
 80077de:	f7ff ff0d 	bl	80075fc <move_window>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 808d 	bne.w	8007904 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	60fa      	str	r2, [r7, #12]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	8992      	ldrh	r2, [r2, #12]
 80077f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f8:	fb02 f201 	mul.w	r2, r2, r1
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007806:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	899b      	ldrh	r3, [r3, #12]
 8007810:	4619      	mov	r1, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	fbb3 f3f1 	udiv	r3, r3, r1
 8007818:	4413      	add	r3, r2
 800781a:	4619      	mov	r1, r3
 800781c:	6938      	ldr	r0, [r7, #16]
 800781e:	f7ff feed 	bl	80075fc <move_window>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d16f      	bne.n	8007908 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	899b      	ldrh	r3, [r3, #12]
 800782c:	461a      	mov	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	fbb3 f1f2 	udiv	r1, r3, r2
 8007834:	fb02 f201 	mul.w	r2, r2, r1
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4413      	add	r3, r2
 800783e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4313      	orrs	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <get_fat+0xe8>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	091b      	lsrs	r3, r3, #4
 800785a:	e002      	b.n	8007862 <get_fat+0xee>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007862:	617b      	str	r3, [r7, #20]
			break;
 8007864:	e055      	b.n	8007912 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	899b      	ldrh	r3, [r3, #12]
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	b29b      	uxth	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	fbb3 f3f1 	udiv	r3, r3, r1
 800787a:	4413      	add	r3, r2
 800787c:	4619      	mov	r1, r3
 800787e:	6938      	ldr	r0, [r7, #16]
 8007880:	f7ff febc 	bl	80075fc <move_window>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d140      	bne.n	800790c <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	8992      	ldrh	r2, [r2, #12]
 8007898:	fbb3 f0f2 	udiv	r0, r3, r2
 800789c:	fb02 f200 	mul.w	r2, r2, r0
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	440b      	add	r3, r1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fc07 	bl	80070b8 <ld_word>
 80078aa:	4603      	mov	r3, r0
 80078ac:	617b      	str	r3, [r7, #20]
			break;
 80078ae:	e030      	b.n	8007912 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	899b      	ldrh	r3, [r3, #12]
 80078b8:	089b      	lsrs	r3, r3, #2
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	4619      	mov	r1, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c4:	4413      	add	r3, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6938      	ldr	r0, [r7, #16]
 80078ca:	f7ff fe97 	bl	80075fc <move_window>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d11d      	bne.n	8007910 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	8992      	ldrh	r2, [r2, #12]
 80078e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80078e6:	fb02 f200 	mul.w	r2, r2, r0
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	440b      	add	r3, r1
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fbf9 	bl	80070e6 <ld_dword>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078fa:	617b      	str	r3, [r7, #20]
			break;
 80078fc:	e009      	b.n	8007912 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078fe:	2301      	movs	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e006      	b.n	8007912 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007904:	bf00      	nop
 8007906:	e004      	b.n	8007912 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007910:	bf00      	nop
		}
	}

	return val;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007928:	2302      	movs	r3, #2
 800792a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b01      	cmp	r3, #1
 8007930:	f240 8102 	bls.w	8007b38 <put_fat+0x21c>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	f080 80fc 	bcs.w	8007b38 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b03      	cmp	r3, #3
 8007946:	f000 80b6 	beq.w	8007ab6 <put_fat+0x19a>
 800794a:	2b03      	cmp	r3, #3
 800794c:	f300 80fd 	bgt.w	8007b4a <put_fat+0x22e>
 8007950:	2b01      	cmp	r3, #1
 8007952:	d003      	beq.n	800795c <put_fat+0x40>
 8007954:	2b02      	cmp	r3, #2
 8007956:	f000 8083 	beq.w	8007a60 <put_fat+0x144>
 800795a:	e0f6      	b.n	8007b4a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4413      	add	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	899b      	ldrh	r3, [r3, #12]
 8007972:	4619      	mov	r1, r3
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	fbb3 f3f1 	udiv	r3, r3, r1
 800797a:	4413      	add	r3, r2
 800797c:	4619      	mov	r1, r3
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fe3c 	bl	80075fc <move_window>
 8007984:	4603      	mov	r3, r0
 8007986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007988:	7ffb      	ldrb	r3, [r7, #31]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 80d6 	bne.w	8007b3c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	61ba      	str	r2, [r7, #24]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	8992      	ldrh	r2, [r2, #12]
 80079a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80079a4:	fb02 f200 	mul.w	r2, r2, r0
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	440b      	add	r3, r1
 80079ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00d      	beq.n	80079d4 <put_fat+0xb8>
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b25b      	sxtb	r3, r3
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	b25a      	sxtb	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	e001      	b.n	80079d8 <put_fat+0xbc>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	899b      	ldrh	r3, [r3, #12]
 80079ea:	4619      	mov	r1, r3
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80079f2:	4413      	add	r3, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fe00 	bl	80075fc <move_window>
 80079fc:	4603      	mov	r3, r0
 80079fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a00:	7ffb      	ldrb	r3, [r7, #31]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 809c 	bne.w	8007b40 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	899b      	ldrh	r3, [r3, #12]
 8007a12:	461a      	mov	r2, r3
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a1a:	fb02 f200 	mul.w	r2, r2, r0
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <put_fat+0x11a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e00e      	b.n	8007a54 <put_fat+0x138>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b25b      	sxtb	r3, r3
 8007a3c:	f023 030f 	bic.w	r3, r3, #15
 8007a40:	b25a      	sxtb	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	70da      	strb	r2, [r3, #3]
			break;
 8007a5e:	e074      	b.n	8007b4a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	899b      	ldrh	r3, [r3, #12]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a74:	4413      	add	r3, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fdbf 	bl	80075fc <move_window>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a82:	7ffb      	ldrb	r3, [r7, #31]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d15d      	bne.n	8007b44 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	8992      	ldrh	r2, [r2, #12]
 8007a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a9a:	fb02 f200 	mul.w	r2, r2, r0
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	b292      	uxth	r2, r2
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fb3e 	bl	800712a <st_word>
			fs->wflag = 1;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	70da      	strb	r2, [r3, #3]
			break;
 8007ab4:	e049      	b.n	8007b4a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	899b      	ldrh	r3, [r3, #12]
 8007abe:	089b      	lsrs	r3, r3, #2
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aca:	4413      	add	r3, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff fd94 	bl	80075fc <move_window>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad8:	7ffb      	ldrb	r3, [r7, #31]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d134      	bne.n	8007b48 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	8992      	ldrh	r2, [r2, #12]
 8007af2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007af6:	fb02 f200 	mul.w	r2, r2, r0
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	440b      	add	r3, r1
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff faf1 	bl	80070e6 <ld_dword>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b0a:	4323      	orrs	r3, r4
 8007b0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	8992      	ldrh	r2, [r2, #12]
 8007b1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b20:	fb02 f200 	mul.w	r2, r2, r0
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	440b      	add	r3, r1
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fb17 	bl	800715e <st_dword>
			fs->wflag = 1;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	70da      	strb	r2, [r3, #3]
			break;
 8007b36:	e008      	b.n	8007b4a <put_fat+0x22e>
		}
	}
 8007b38:	bf00      	nop
 8007b3a:	e006      	b.n	8007b4a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007b3c:	bf00      	nop
 8007b3e:	e004      	b.n	8007b4a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007b40:	bf00      	nop
 8007b42:	e002      	b.n	8007b4a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007b48:	bf00      	nop
	return res;
 8007b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3724      	adds	r7, #36	; 0x24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}

08007b54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d904      	bls.n	8007b7a <remove_chain+0x26>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d301      	bcc.n	8007b7e <remove_chain+0x2a>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e04b      	b.n	8007c16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	69b8      	ldr	r0, [r7, #24]
 8007b8c:	f7ff fec6 	bl	800791c <put_fat>
 8007b90:	4603      	mov	r3, r0
 8007b92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b94:	7ffb      	ldrb	r3, [r7, #31]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <remove_chain+0x4a>
 8007b9a:	7ffb      	ldrb	r3, [r7, #31]
 8007b9c:	e03b      	b.n	8007c16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff fde7 	bl	8007774 <get_fat>
 8007ba6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d031      	beq.n	8007c12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <remove_chain+0x64>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e02e      	b.n	8007c16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d101      	bne.n	8007bc4 <remove_chain+0x70>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e028      	b.n	8007c16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	69b8      	ldr	r0, [r7, #24]
 8007bca:	f7ff fea7 	bl	800791c <put_fat>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <remove_chain+0x88>
 8007bd8:	7ffb      	ldrb	r3, [r7, #31]
 8007bda:	e01c      	b.n	8007c16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	3b02      	subs	r3, #2
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d20b      	bcs.n	8007c02 <remove_chain+0xae>
			fs->free_clst++;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	791b      	ldrb	r3, [r3, #4]
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3c6      	bcc.n	8007b9e <remove_chain+0x4a>
 8007c10:	e000      	b.n	8007c14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10d      	bne.n	8007c50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <create_chain+0x2c>
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d31b      	bcc.n	8007c82 <create_chain+0x64>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	e018      	b.n	8007c82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fd8e 	bl	8007774 <get_fat>
 8007c58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d801      	bhi.n	8007c64 <create_chain+0x46>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e070      	b.n	8007d46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d101      	bne.n	8007c70 <create_chain+0x52>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	e06a      	b.n	8007d46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d201      	bcs.n	8007c7e <create_chain+0x60>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	e063      	b.n	8007d46 <create_chain+0x128>
		scl = clst;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	69fa      	ldr	r2, [r7, #28]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d307      	bcc.n	8007ca6 <create_chain+0x88>
				ncl = 2;
 8007c96:	2302      	movs	r3, #2
 8007c98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d901      	bls.n	8007ca6 <create_chain+0x88>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e04f      	b.n	8007d46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ca6:	69f9      	ldr	r1, [r7, #28]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fd63 	bl	8007774 <get_fat>
 8007cae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00e      	beq.n	8007cd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d003      	beq.n	8007cc4 <create_chain+0xa6>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d101      	bne.n	8007cc8 <create_chain+0xaa>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e03e      	b.n	8007d46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d1da      	bne.n	8007c86 <create_chain+0x68>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e038      	b.n	8007d46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007cd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	69f9      	ldr	r1, [r7, #28]
 8007cdc:	6938      	ldr	r0, [r7, #16]
 8007cde:	f7ff fe1d 	bl	800791c <put_fat>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <create_chain+0xe2>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6938      	ldr	r0, [r7, #16]
 8007cf8:	f7ff fe10 	bl	800791c <put_fat>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d116      	bne.n	8007d34 <create_chain+0x116>
		fs->last_clst = ncl;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	3b02      	subs	r3, #2
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d804      	bhi.n	8007d24 <create_chain+0x106>
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	1e5a      	subs	r2, r3, #1
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	791b      	ldrb	r3, [r3, #4]
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	711a      	strb	r2, [r3, #4]
 8007d32:	e007      	b.n	8007d44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d102      	bne.n	8007d40 <create_chain+0x122>
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	e000      	b.n	8007d42 <create_chain+0x124>
 8007d40:	2301      	movs	r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d44:	69fb      	ldr	r3, [r7, #28]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	3304      	adds	r3, #4
 8007d64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	899b      	ldrh	r3, [r3, #12]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	8952      	ldrh	r2, [r2, #10]
 8007d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	613a      	str	r2, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <clmt_clust+0x42>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e010      	b.n	8007db2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d307      	bcc.n	8007da8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3304      	adds	r3, #4
 8007da4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007da6:	e7e9      	b.n	8007d7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007da8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr

08007dbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd2:	d204      	bcs.n	8007dde <dir_sdi+0x22>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007dde:	2302      	movs	r3, #2
 8007de0:	e071      	b.n	8007ec6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <dir_sdi+0x46>
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d902      	bls.n	8007e02 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	8912      	ldrh	r2, [r2, #8]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d301      	bcc.n	8007e18 <dir_sdi+0x5c>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e056      	b.n	8007ec6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61da      	str	r2, [r3, #28]
 8007e20:	e02d      	b.n	8007e7e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	895b      	ldrh	r3, [r3, #10]
 8007e26:	461a      	mov	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	899b      	ldrh	r3, [r3, #12]
 8007e2c:	fb03 f302 	mul.w	r3, r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e32:	e019      	b.n	8007e68 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6979      	ldr	r1, [r7, #20]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fc9b 	bl	8007774 <get_fat>
 8007e3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e46:	d101      	bne.n	8007e4c <dir_sdi+0x90>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e03c      	b.n	8007ec6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d904      	bls.n	8007e5c <dir_sdi+0xa0>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d301      	bcc.n	8007e60 <dir_sdi+0xa4>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e032      	b.n	8007ec6 <dir_sdi+0x10a>
			ofs -= csz;
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d2e1      	bcs.n	8007e34 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007e70:	6979      	ldr	r1, [r7, #20]
 8007e72:	6938      	ldr	r0, [r7, #16]
 8007e74:	f7ff fc60 	bl	8007738 <clust2sect>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <dir_sdi+0xd4>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e01a      	b.n	8007ec6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69da      	ldr	r2, [r3, #28]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	899b      	ldrh	r3, [r3, #12]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	899b      	ldrh	r3, [r3, #12]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb8:	fb02 f200 	mul.w	r2, r2, r0
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	18ca      	adds	r2, r1, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	3320      	adds	r3, #32
 8007ee4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <dir_next+0x28>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ef4:	d301      	bcc.n	8007efa <dir_next+0x2c>
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	e0bb      	b.n	8008072 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	899b      	ldrh	r3, [r3, #12]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f06:	fb02 f201 	mul.w	r2, r2, r1
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 809d 	bne.w	800804c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	8912      	ldrh	r2, [r2, #8]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	f0c0 808d 	bcc.w	800804c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	61da      	str	r2, [r3, #28]
 8007f38:	2304      	movs	r3, #4
 8007f3a:	e09a      	b.n	8008072 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	899b      	ldrh	r3, [r3, #12]
 8007f40:	461a      	mov	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	8952      	ldrh	r2, [r2, #10]
 8007f4c:	3a01      	subs	r2, #1
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d17b      	bne.n	800804c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	f7ff fc09 	bl	8007774 <get_fat>
 8007f62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d801      	bhi.n	8007f6e <dir_next+0xa0>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e081      	b.n	8008072 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d101      	bne.n	8007f7a <dir_next+0xac>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e07b      	b.n	8008072 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d359      	bcc.n	8008038 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	61da      	str	r2, [r3, #28]
 8007f90:	2304      	movs	r3, #4
 8007f92:	e06e      	b.n	8008072 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f7ff fe3e 	bl	8007c1e <create_chain>
 8007fa2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <dir_next+0xe0>
 8007faa:	2307      	movs	r3, #7
 8007fac:	e061      	b.n	8008072 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <dir_next+0xea>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e05c      	b.n	8008072 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d101      	bne.n	8007fc4 <dir_next+0xf6>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e056      	b.n	8008072 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fad5 	bl	8007574 <sync_window>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <dir_next+0x106>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e04e      	b.n	8008072 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	899b      	ldrh	r3, [r3, #12]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	f7ff f907 	bl	80071f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	6979      	ldr	r1, [r7, #20]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fba3 	bl	8007738 <clust2sect>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8007ff8:	e012      	b.n	8008020 <dir_next+0x152>
						fs->wflag = 1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff fab7 	bl	8007574 <sync_window>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <dir_next+0x142>
 800800c:	2301      	movs	r3, #1
 800800e:	e030      	b.n	8008072 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	635a      	str	r2, [r3, #52]	; 0x34
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	895b      	ldrh	r3, [r3, #10]
 8008024:	461a      	mov	r2, r3
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4293      	cmp	r3, r2
 800802a:	d3e6      	bcc.n	8007ffa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800803e:	6979      	ldr	r1, [r7, #20]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fb79 	bl	8007738 <clust2sect>
 8008046:	4602      	mov	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	899b      	ldrh	r3, [r3, #12]
 800805c:	461a      	mov	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	fbb3 f0f2 	udiv	r0, r3, r2
 8008064:	fb02 f200 	mul.w	r2, r2, r0
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	18ca      	adds	r2, r1, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fe95 	bl	8007dbc <dir_sdi>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d12b      	bne.n	80080f4 <dir_alloc+0x7a>
		n = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	4619      	mov	r1, r3
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff faa8 	bl	80075fc <move_window>
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d11d      	bne.n	80080f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2be5      	cmp	r3, #229	; 0xe5
 80080be:	d004      	beq.n	80080ca <dir_alloc+0x50>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3301      	adds	r3, #1
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d102      	bne.n	80080de <dir_alloc+0x64>
 80080d8:	e00c      	b.n	80080f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80080de:	2101      	movs	r1, #1
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fef4 	bl	8007ece <dir_next>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0d7      	beq.n	80080a0 <dir_alloc+0x26>
 80080f0:	e000      	b.n	80080f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80080f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d101      	bne.n	80080fe <dir_alloc+0x84>
 80080fa:	2307      	movs	r3, #7
 80080fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	331a      	adds	r3, #26
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe ffce 	bl	80070b8 <ld_word>
 800811c:	4603      	mov	r3, r0
 800811e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d109      	bne.n	800813c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe ffc3 	bl	80070b8 <ld_word>
 8008132:	4603      	mov	r3, r0
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	331a      	adds	r3, #26
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	b292      	uxth	r2, r2
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe ffe4 	bl	800712a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d109      	bne.n	800817e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f103 0214 	add.w	r2, r3, #20
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	b29b      	uxth	r3, r3
 8008176:	4619      	mov	r1, r3
 8008178:	4610      	mov	r0, r2
 800817a:	f7fe ffd6 	bl	800712a <st_word>
	}
}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	331a      	adds	r3, #26
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe ff8e 	bl	80070b8 <ld_word>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <cmp_lfn+0x1e>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e059      	b.n	800825a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	4613      	mov	r3, r2
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80081bc:	2301      	movs	r3, #1
 80081be:	81fb      	strh	r3, [r7, #14]
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	e033      	b.n	800822e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80081c6:	4a27      	ldr	r2, [pc, #156]	; (8008264 <cmp_lfn+0xdc>)
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	4413      	add	r3, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe ff6f 	bl	80070b8 <ld_word>
 80081da:	4603      	mov	r3, r0
 80081dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01a      	beq.n	800821a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2bfe      	cmp	r3, #254	; 0xfe
 80081e8:	d812      	bhi.n	8008210 <cmp_lfn+0x88>
 80081ea:	89bb      	ldrh	r3, [r7, #12]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f002 fa2d 	bl	800a64c <ff_wtoupper>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461c      	mov	r4, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	617a      	str	r2, [r7, #20]
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f002 fa21 	bl	800a64c <ff_wtoupper>
 800820a:	4603      	mov	r3, r0
 800820c:	429c      	cmp	r4, r3
 800820e:	d001      	beq.n	8008214 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008210:	2300      	movs	r3, #0
 8008212:	e022      	b.n	800825a <cmp_lfn+0xd2>
			}
			wc = uc;
 8008214:	89bb      	ldrh	r3, [r7, #12]
 8008216:	81fb      	strh	r3, [r7, #14]
 8008218:	e006      	b.n	8008228 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800821a:	89bb      	ldrh	r3, [r7, #12]
 800821c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008220:	4293      	cmp	r3, r2
 8008222:	d001      	beq.n	8008228 <cmp_lfn+0xa0>
 8008224:	2300      	movs	r3, #0
 8008226:	e018      	b.n	800825a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3301      	adds	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b0c      	cmp	r3, #12
 8008232:	d9c8      	bls.n	80081c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <cmp_lfn+0xd0>
 8008240:	89fb      	ldrh	r3, [r7, #14]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <cmp_lfn+0xd0>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <cmp_lfn+0xd0>
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008258:	2301      	movs	r3, #1
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	bd90      	pop	{r4, r7, pc}
 8008262:	bf00      	nop
 8008264:	0800b1b8 	.word	0x0800b1b8

08008268 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4611      	mov	r1, r2
 8008274:	461a      	mov	r2, r3
 8008276:	460b      	mov	r3, r1
 8008278:	71fb      	strb	r3, [r7, #7]
 800827a:	4613      	mov	r3, r2
 800827c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	330d      	adds	r3, #13
 8008282:	79ba      	ldrb	r2, [r7, #6]
 8008284:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	330b      	adds	r3, #11
 800828a:	220f      	movs	r2, #15
 800828c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	330c      	adds	r3, #12
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	331a      	adds	r3, #26
 800829a:	2100      	movs	r1, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe ff44 	bl	800712a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	82fb      	strh	r3, [r7, #22]
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80082ba:	8afb      	ldrh	r3, [r7, #22]
 80082bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d007      	beq.n	80082d4 <put_lfn+0x6c>
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	61fa      	str	r2, [r7, #28]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80082d4:	4a17      	ldr	r2, [pc, #92]	; (8008334 <put_lfn+0xcc>)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	4413      	add	r3, r2
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	8afa      	ldrh	r2, [r7, #22]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe ff1f 	bl	800712a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80082ec:	8afb      	ldrh	r3, [r7, #22]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <put_lfn+0x90>
 80082f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	3301      	adds	r3, #1
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b0c      	cmp	r3, #12
 8008302:	d9da      	bls.n	80082ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008304:	8afb      	ldrh	r3, [r7, #22]
 8008306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800830a:	4293      	cmp	r3, r2
 800830c:	d006      	beq.n	800831c <put_lfn+0xb4>
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <put_lfn+0xbc>
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008322:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	79fa      	ldrb	r2, [r7, #7]
 8008328:	701a      	strb	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	0800b1b8 	.word	0x0800b1b8

08008338 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	; 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008346:	220b      	movs	r2, #11
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7fe ff32 	bl	80071b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b05      	cmp	r3, #5
 8008354:	d92b      	bls.n	80083ae <gen_numname+0x76>
		sr = seq;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800835a:	e022      	b.n	80083a2 <gen_numname+0x6a>
			wc = *lfn++;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	1c9a      	adds	r2, r3, #2
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008366:	2300      	movs	r3, #0
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
 800836a:	e017      	b.n	800839c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	005a      	lsls	r2, r3, #1
 8008370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	4413      	add	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800837a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <gen_numname+0x5e>
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008390:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008394:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	3301      	adds	r3, #1
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d9e4      	bls.n	800836c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1d8      	bne.n	800835c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80083ae:	2307      	movs	r3, #7
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	3330      	adds	r3, #48	; 0x30
 80083be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80083c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083c6:	2b39      	cmp	r3, #57	; 0x39
 80083c8:	d904      	bls.n	80083d4 <gen_numname+0x9c>
 80083ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083ce:	3307      	adds	r3, #7
 80083d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80083da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80083de:	4413      	add	r3, r2
 80083e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80083e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	091b      	lsrs	r3, r3, #4
 80083ec:	603b      	str	r3, [r7, #0]
	} while (seq);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1de      	bne.n	80083b2 <gen_numname+0x7a>
	ns[i] = '~';
 80083f4:	f107 0214 	add.w	r2, r7, #20
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	4413      	add	r3, r2
 80083fc:	227e      	movs	r2, #126	; 0x7e
 80083fe:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008400:	2300      	movs	r3, #0
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
 8008404:	e002      	b.n	800840c <gen_numname+0xd4>
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	3301      	adds	r3, #1
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
 800840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	429a      	cmp	r2, r3
 8008412:	d205      	bcs.n	8008420 <gen_numname+0xe8>
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	4413      	add	r3, r2
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b20      	cmp	r3, #32
 800841e:	d1f2      	bne.n	8008406 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2b07      	cmp	r3, #7
 8008424:	d808      	bhi.n	8008438 <gen_numname+0x100>
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	62ba      	str	r2, [r7, #40]	; 0x28
 800842c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008430:	4413      	add	r3, r2
 8008432:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008436:	e000      	b.n	800843a <gen_numname+0x102>
 8008438:	2120      	movs	r1, #32
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	627a      	str	r2, [r7, #36]	; 0x24
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	460a      	mov	r2, r1
 8008446:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	2b07      	cmp	r3, #7
 800844c:	d9e8      	bls.n	8008420 <gen_numname+0xe8>
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008464:	230b      	movs	r3, #11
 8008466:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	0852      	lsrs	r2, r2, #1
 800846e:	01db      	lsls	r3, r3, #7
 8008470:	4313      	orrs	r3, r2
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	1c59      	adds	r1, r3, #1
 8008478:	6079      	str	r1, [r7, #4]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4413      	add	r3, r2
 800847e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3b01      	subs	r3, #1
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1ed      	bne.n	8008468 <sum_sfn+0x10>
	return sum;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr

08008498 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084a6:	2100      	movs	r1, #0
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fc87 	bl	8007dbc <dir_sdi>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <dir_find+0x24>
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	e0a9      	b.n	8008610 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80084bc:	23ff      	movs	r3, #255	; 0xff
 80084be:	753b      	strb	r3, [r7, #20]
 80084c0:	7d3b      	ldrb	r3, [r7, #20]
 80084c2:	757b      	strb	r3, [r7, #21]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6938      	ldr	r0, [r7, #16]
 80084d4:	f7ff f892 	bl	80075fc <move_window>
 80084d8:	4603      	mov	r3, r0
 80084da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8090 	bne.w	8008604 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084ec:	7dbb      	ldrb	r3, [r7, #22]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <dir_find+0x60>
 80084f2:	2304      	movs	r3, #4
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e08a      	b.n	800860e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	330b      	adds	r3, #11
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008504:	73fb      	strb	r3, [r7, #15]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7bfa      	ldrb	r2, [r7, #15]
 800850a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800850c:	7dbb      	ldrb	r3, [r7, #22]
 800850e:	2be5      	cmp	r3, #229	; 0xe5
 8008510:	d007      	beq.n	8008522 <dir_find+0x8a>
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <dir_find+0x98>
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b0f      	cmp	r3, #15
 8008520:	d006      	beq.n	8008530 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008522:	23ff      	movs	r3, #255	; 0xff
 8008524:	757b      	strb	r3, [r7, #21]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f04f 32ff 	mov.w	r2, #4294967295
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
 800852e:	e05e      	b.n	80085ee <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d136      	bne.n	80085a4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d154      	bne.n	80085ee <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008544:	7dbb      	ldrb	r3, [r7, #22]
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00d      	beq.n	800856a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	7b5b      	ldrb	r3, [r3, #13]
 8008554:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008556:	7dbb      	ldrb	r3, [r7, #22]
 8008558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855c:	75bb      	strb	r3, [r7, #22]
 800855e:	7dbb      	ldrb	r3, [r7, #22]
 8008560:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	695a      	ldr	r2, [r3, #20]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800856a:	7dba      	ldrb	r2, [r7, #22]
 800856c:	7d7b      	ldrb	r3, [r7, #21]
 800856e:	429a      	cmp	r2, r3
 8008570:	d115      	bne.n	800859e <dir_find+0x106>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	330d      	adds	r3, #13
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	7d3a      	ldrb	r2, [r7, #20]
 800857c:	429a      	cmp	r2, r3
 800857e:	d10e      	bne.n	800859e <dir_find+0x106>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7ff fdfc 	bl	8008188 <cmp_lfn>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <dir_find+0x106>
 8008596:	7d7b      	ldrb	r3, [r7, #21]
 8008598:	3b01      	subs	r3, #1
 800859a:	b2db      	uxtb	r3, r3
 800859c:	e000      	b.n	80085a0 <dir_find+0x108>
 800859e:	23ff      	movs	r3, #255	; 0xff
 80085a0:	757b      	strb	r3, [r7, #21]
 80085a2:	e024      	b.n	80085ee <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80085a4:	7d7b      	ldrb	r3, [r7, #21]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <dir_find+0x126>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff ff52 	bl	8008458 <sum_sfn>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	7d3b      	ldrb	r3, [r7, #20]
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d024      	beq.n	8008608 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <dir_find+0x14a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a18      	ldr	r0, [r3, #32]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3324      	adds	r3, #36	; 0x24
 80085d4:	220b      	movs	r2, #11
 80085d6:	4619      	mov	r1, r3
 80085d8:	f7fe fe26 	bl	8007228 <mem_cmp>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80085e2:	23ff      	movs	r3, #255	; 0xff
 80085e4:	757b      	strb	r3, [r7, #21]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff fc6c 	bl	8007ece <dir_next>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f43f af65 	beq.w	80084cc <dir_find+0x34>
 8008602:	e004      	b.n	800860e <dir_find+0x176>
		if (res != FR_OK) break;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800860c:	bf00      	nop

	return res;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08c      	sub	sp, #48	; 0x30
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800862c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <dir_register+0x20>
 8008634:	2306      	movs	r3, #6
 8008636:	e0e0      	b.n	80087fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008638:	2300      	movs	r3, #0
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
 800863c:	e002      	b.n	8008644 <dir_register+0x2c>
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	3301      	adds	r3, #1
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f4      	bne.n	800863e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	220c      	movs	r2, #12
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe fda7 	bl	80071b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d032      	beq.n	80086d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2240      	movs	r2, #64	; 0x40
 8008674:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008678:	2301      	movs	r3, #1
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
 800867c:	e016      	b.n	80086ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	f107 010c 	add.w	r1, r7, #12
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	f7ff fe53 	bl	8008338 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff ff00 	bl	8008498 <dir_find>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800869e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	3301      	adds	r3, #1
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	2b63      	cmp	r3, #99	; 0x63
 80086b0:	d9e5      	bls.n	800867e <dir_register+0x66>
 80086b2:	e000      	b.n	80086b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80086b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	2b64      	cmp	r3, #100	; 0x64
 80086ba:	d101      	bne.n	80086c0 <dir_register+0xa8>
 80086bc:	2307      	movs	r3, #7
 80086be:	e09c      	b.n	80087fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80086c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d002      	beq.n	80086ce <dir_register+0xb6>
 80086c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086cc:	e095      	b.n	80087fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80086ce:	7dfa      	ldrb	r2, [r7, #23]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <dir_register+0xd8>
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	330c      	adds	r3, #12
 80086e4:	4a47      	ldr	r2, [pc, #284]	; (8008804 <dir_register+0x1ec>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	089b      	lsrs	r3, r3, #2
 80086ec:	3301      	adds	r3, #1
 80086ee:	e000      	b.n	80086f2 <dir_register+0xda>
 80086f0:	2301      	movs	r3, #1
 80086f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80086f4:	6a39      	ldr	r1, [r7, #32]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fcbf 	bl	800807a <dir_alloc>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008706:	2b00      	cmp	r3, #0
 8008708:	d148      	bne.n	800879c <dir_register+0x184>
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	3b01      	subs	r3, #1
 800870e:	623b      	str	r3, [r7, #32]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d042      	beq.n	800879c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	015b      	lsls	r3, r3, #5
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fb4a 	bl	8007dbc <dir_sdi>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800872e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008732:	2b00      	cmp	r3, #0
 8008734:	d132      	bne.n	800879c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3324      	adds	r3, #36	; 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fe8c 	bl	8008458 <sum_sfn>
 8008740:	4603      	mov	r3, r0
 8008742:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	4619      	mov	r1, r3
 800874a:	69f8      	ldr	r0, [r7, #28]
 800874c:	f7fe ff56 	bl	80075fc <move_window>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800875a:	2b00      	cmp	r3, #0
 800875c:	d11d      	bne.n	800879a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	6918      	ldr	r0, [r3, #16]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a19      	ldr	r1, [r3, #32]
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	b2da      	uxtb	r2, r3
 800876a:	7efb      	ldrb	r3, [r7, #27]
 800876c:	f7ff fd7c 	bl	8008268 <put_lfn>
				fs->wflag = 1;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	2201      	movs	r2, #1
 8008774:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008776:	2100      	movs	r1, #0
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fba8 	bl	8007ece <dir_next>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <dir_register+0x184>
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	3b01      	subs	r3, #1
 8008790:	623b      	str	r3, [r7, #32]
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1d5      	bne.n	8008744 <dir_register+0x12c>
 8008798:	e000      	b.n	800879c <dir_register+0x184>
				if (res != FR_OK) break;
 800879a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800879c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d128      	bne.n	80087f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	4619      	mov	r1, r3
 80087aa:	69f8      	ldr	r0, [r7, #28]
 80087ac:	f7fe ff26 	bl	80075fc <move_window>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80087b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d11b      	bne.n	80087f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	2220      	movs	r2, #32
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fd14 	bl	80071f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a18      	ldr	r0, [r3, #32]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3324      	adds	r3, #36	; 0x24
 80087d4:	220b      	movs	r2, #11
 80087d6:	4619      	mov	r1, r3
 80087d8:	f7fe fcec 	bl	80071b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	330c      	adds	r3, #12
 80087e8:	f002 0218 	and.w	r2, r2, #24
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2201      	movs	r2, #1
 80087f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80087f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3730      	adds	r7, #48	; 0x30
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	4ec4ec4f 	.word	0x4ec4ec4f

08008808 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	61ba      	str	r2, [r7, #24]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4413      	add	r3, r2
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008838:	2b1f      	cmp	r3, #31
 800883a:	d940      	bls.n	80088be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800883c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800883e:	2b2f      	cmp	r3, #47	; 0x2f
 8008840:	d006      	beq.n	8008850 <create_name+0x48>
 8008842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008844:	2b5c      	cmp	r3, #92	; 0x5c
 8008846:	d110      	bne.n	800886a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008848:	e002      	b.n	8008850 <create_name+0x48>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	3301      	adds	r3, #1
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	4413      	add	r3, r2
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b2f      	cmp	r3, #47	; 0x2f
 800885a:	d0f6      	beq.n	800884a <create_name+0x42>
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b5c      	cmp	r3, #92	; 0x5c
 8008866:	d0f0      	beq.n	800884a <create_name+0x42>
			break;
 8008868:	e02a      	b.n	80088c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2bfe      	cmp	r3, #254	; 0xfe
 800886e:	d901      	bls.n	8008874 <create_name+0x6c>
 8008870:	2306      	movs	r3, #6
 8008872:	e177      	b.n	8008b64 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008876:	b2db      	uxtb	r3, r3
 8008878:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800887a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800887c:	2101      	movs	r1, #1
 800887e:	4618      	mov	r0, r3
 8008880:	f001 feaa 	bl	800a5d8 <ff_convert>
 8008884:	4603      	mov	r3, r0
 8008886:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <create_name+0x8a>
 800888e:	2306      	movs	r3, #6
 8008890:	e168      	b.n	8008b64 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008894:	2b7f      	cmp	r3, #127	; 0x7f
 8008896:	d809      	bhi.n	80088ac <create_name+0xa4>
 8008898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800889a:	4619      	mov	r1, r3
 800889c:	48b3      	ldr	r0, [pc, #716]	; (8008b6c <create_name+0x364>)
 800889e:	f7fe fce9 	bl	8007274 <chk_chr>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <create_name+0xa4>
 80088a8:	2306      	movs	r3, #6
 80088aa:	e15b      	b.n	8008b64 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	617a      	str	r2, [r7, #20]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80088bc:	e7b4      	b.n	8008828 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80088be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	441a      	add	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80088ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088cc:	2b1f      	cmp	r3, #31
 80088ce:	d801      	bhi.n	80088d4 <create_name+0xcc>
 80088d0:	2304      	movs	r3, #4
 80088d2:	e000      	b.n	80088d6 <create_name+0xce>
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80088da:	e011      	b.n	8008900 <create_name+0xf8>
		w = lfn[di - 1];
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088e2:	3b01      	subs	r3, #1
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80088ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d002      	beq.n	80088fa <create_name+0xf2>
 80088f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f6:	2b2e      	cmp	r3, #46	; 0x2e
 80088f8:	d106      	bne.n	8008908 <create_name+0x100>
		di--;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1ea      	bne.n	80088dc <create_name+0xd4>
 8008906:	e000      	b.n	800890a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008908:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <create_name+0x118>
 800891c:	2306      	movs	r3, #6
 800891e:	e121      	b.n	8008b64 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	220b      	movs	r2, #11
 8008926:	2120      	movs	r1, #32
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fc63 	bl	80071f4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800892e:	2300      	movs	r3, #0
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	e002      	b.n	800893a <create_name+0x132>
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	3301      	adds	r3, #1
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	2b20      	cmp	r3, #32
 8008946:	d0f5      	beq.n	8008934 <create_name+0x12c>
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	2b2e      	cmp	r3, #46	; 0x2e
 8008954:	d0ee      	beq.n	8008934 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <create_name+0x168>
 800895c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008960:	f043 0303 	orr.w	r3, r3, #3
 8008964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008968:	e002      	b.n	8008970 <create_name+0x168>
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	3b01      	subs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <create_name+0x182>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800897c:	3b01      	subs	r3, #1
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	2b2e      	cmp	r3, #46	; 0x2e
 8008988:	d1ef      	bne.n	800896a <create_name+0x162>

	i = b = 0; ni = 8;
 800898a:	2300      	movs	r3, #0
 800898c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008990:	2300      	movs	r3, #0
 8008992:	623b      	str	r3, [r7, #32]
 8008994:	2308      	movs	r3, #8
 8008996:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	61ba      	str	r2, [r7, #24]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80089a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8090 	beq.w	8008ad0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80089b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d006      	beq.n	80089c4 <create_name+0x1bc>
 80089b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089b8:	2b2e      	cmp	r3, #46	; 0x2e
 80089ba:	d10a      	bne.n	80089d2 <create_name+0x1ca>
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d006      	beq.n	80089d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80089c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089c8:	f043 0303 	orr.w	r3, r3, #3
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089d0:	e07d      	b.n	8008ace <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <create_name+0x1da>
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d123      	bne.n	8008a2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b0b      	cmp	r3, #11
 80089e6:	d106      	bne.n	80089f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80089e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ec:	f043 0303 	orr.w	r3, r3, #3
 80089f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089f4:	e06f      	b.n	8008ad6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d005      	beq.n	8008a0a <create_name+0x202>
 80089fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a02:	f043 0303 	orr.w	r3, r3, #3
 8008a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d860      	bhi.n	8008ad4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	2308      	movs	r3, #8
 8008a18:	623b      	str	r3, [r7, #32]
 8008a1a:	230b      	movs	r3, #11
 8008a1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a28:	e051      	b.n	8008ace <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a2e:	d914      	bls.n	8008a5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008a30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fdcf 	bl	800a5d8 <ff_convert>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <create_name+0x246>
 8008a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a46:	3b80      	subs	r3, #128	; 0x80
 8008a48:	4a49      	ldr	r2, [pc, #292]	; (8008b70 <create_name+0x368>)
 8008a4a:	5cd3      	ldrb	r3, [r2, r3]
 8008a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a52:	f043 0302 	orr.w	r3, r3, #2
 8008a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <create_name+0x268>
 8008a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a62:	4619      	mov	r1, r3
 8008a64:	4843      	ldr	r0, [pc, #268]	; (8008b74 <create_name+0x36c>)
 8008a66:	f7fe fc05 	bl	8007274 <chk_chr>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d008      	beq.n	8008a82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008a70:	235f      	movs	r3, #95	; 0x5f
 8008a72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a78:	f043 0303 	orr.w	r3, r3, #3
 8008a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a80:	e01b      	b.n	8008aba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d909      	bls.n	8008a9c <create_name+0x294>
 8008a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a8a:	2b5a      	cmp	r3, #90	; 0x5a
 8008a8c:	d806      	bhi.n	8008a9c <create_name+0x294>
					b |= 2;
 8008a8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a9a:	e00e      	b.n	8008aba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a9e:	2b60      	cmp	r3, #96	; 0x60
 8008aa0:	d90b      	bls.n	8008aba <create_name+0x2b2>
 8008aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aa4:	2b7a      	cmp	r3, #122	; 0x7a
 8008aa6:	d808      	bhi.n	8008aba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab6:	3b20      	subs	r3, #32
 8008ab8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	623a      	str	r2, [r7, #32]
 8008ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ac2:	b2d1      	uxtb	r1, r2
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	460a      	mov	r2, r1
 8008aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008ace:	e763      	b.n	8008998 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008ad0:	bf00      	nop
 8008ad2:	e000      	b.n	8008ad6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008ad4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008adc:	2be5      	cmp	r3, #229	; 0xe5
 8008ade:	d103      	bne.n	8008ae8 <create_name+0x2e0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2205      	movs	r2, #5
 8008ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d104      	bne.n	8008af8 <create_name+0x2f0>
 8008aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008af8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008afc:	f003 030c 	and.w	r3, r3, #12
 8008b00:	2b0c      	cmp	r3, #12
 8008b02:	d005      	beq.n	8008b10 <create_name+0x308>
 8008b04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d105      	bne.n	8008b1c <create_name+0x314>
 8008b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b14:	f043 0302 	orr.w	r3, r3, #2
 8008b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d117      	bne.n	8008b58 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d105      	bne.n	8008b40 <create_name+0x338>
 8008b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b38:	f043 0310 	orr.w	r3, r3, #16
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008b40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b44:	f003 030c 	and.w	r3, r3, #12
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d105      	bne.n	8008b58 <create_name+0x350>
 8008b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008b5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008b62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3728      	adds	r7, #40	; 0x28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	0800b09c 	.word	0x0800b09c
 8008b70:	0800b138 	.word	0x0800b138
 8008b74:	0800b0a8 	.word	0x0800b0a8

08008b78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b8c:	e002      	b.n	8008b94 <follow_path+0x1c>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b2f      	cmp	r3, #47	; 0x2f
 8008b9a:	d0f8      	beq.n	8008b8e <follow_path+0x16>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b5c      	cmp	r3, #92	; 0x5c
 8008ba2:	d0f4      	beq.n	8008b8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b1f      	cmp	r3, #31
 8008bb0:	d80a      	bhi.n	8008bc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2280      	movs	r2, #128	; 0x80
 8008bb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008bba:	2100      	movs	r1, #0
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f8fd 	bl	8007dbc <dir_sdi>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
 8008bc6:	e048      	b.n	8008c5a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bc8:	463b      	mov	r3, r7
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fe1b 	bl	8008808 <create_name>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d139      	bne.n	8008c50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fc5b 	bl	8008498 <dir_find>
 8008be2:	4603      	mov	r3, r0
 8008be4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d12c      	bne.n	8008c54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008bfa:	7afb      	ldrb	r3, [r7, #11]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d127      	bne.n	8008c54 <follow_path+0xdc>
 8008c04:	2305      	movs	r3, #5
 8008c06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c08:	e024      	b.n	8008c54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d121      	bne.n	8008c58 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	799b      	ldrb	r3, [r3, #6]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008c20:	2305      	movs	r3, #5
 8008c22:	75fb      	strb	r3, [r7, #23]
 8008c24:	e019      	b.n	8008c5a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	8992      	ldrh	r2, [r2, #12]
 8008c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c38:	fb02 f200 	mul.w	r2, r2, r0
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	440b      	add	r3, r1
 8008c40:	4619      	mov	r1, r3
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fa60 	bl	8008108 <ld_clust>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c4e:	e7bb      	b.n	8008bc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008c50:	bf00      	nop
 8008c52:	e002      	b.n	8008c5a <follow_path+0xe2>
				break;
 8008c54:	bf00      	nop
 8008c56:	e000      	b.n	8008c5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c58:	bf00      	nop
			}
		}
	}

	return res;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d031      	beq.n	8008cde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e002      	b.n	8008c88 <get_ldnumber+0x24>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	3301      	adds	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b1f      	cmp	r3, #31
 8008c8e:	d903      	bls.n	8008c98 <get_ldnumber+0x34>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b3a      	cmp	r3, #58	; 0x3a
 8008c96:	d1f4      	bne.n	8008c82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b3a      	cmp	r3, #58	; 0x3a
 8008c9e:	d11c      	bne.n	8008cda <get_ldnumber+0x76>
			tp = *path;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	60fa      	str	r2, [r7, #12]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	3b30      	subs	r3, #48	; 0x30
 8008cb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	d80e      	bhi.n	8008cd6 <get_ldnumber+0x72>
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d10a      	bne.n	8008cd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <get_ldnumber+0x72>
					vol = (int)i;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	e002      	b.n	8008ce0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008cda:	2300      	movs	r3, #0
 8008cdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008cde:	693b      	ldr	r3, [r7, #16]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr
	...

08008cec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	70da      	strb	r2, [r3, #3]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008d02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe fc78 	bl	80075fc <move_window>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <check_fs+0x2a>
 8008d12:	2304      	movs	r3, #4
 8008d14:	e038      	b.n	8008d88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3338      	adds	r3, #56	; 0x38
 8008d1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe f9ca 	bl	80070b8 <ld_word>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d001      	beq.n	8008d34 <check_fs+0x48>
 8008d30:	2303      	movs	r3, #3
 8008d32:	e029      	b.n	8008d88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d3a:	2be9      	cmp	r3, #233	; 0xe9
 8008d3c:	d009      	beq.n	8008d52 <check_fs+0x66>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d44:	2beb      	cmp	r3, #235	; 0xeb
 8008d46:	d11e      	bne.n	8008d86 <check_fs+0x9a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d4e:	2b90      	cmp	r3, #144	; 0x90
 8008d50:	d119      	bne.n	8008d86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3338      	adds	r3, #56	; 0x38
 8008d56:	3336      	adds	r3, #54	; 0x36
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe f9c4 	bl	80070e6 <ld_dword>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d64:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <check_fs+0xa4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d101      	bne.n	8008d6e <check_fs+0x82>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e00c      	b.n	8008d88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3338      	adds	r3, #56	; 0x38
 8008d72:	3352      	adds	r3, #82	; 0x52
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe f9b6 	bl	80070e6 <ld_dword>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4a05      	ldr	r2, [pc, #20]	; (8008d94 <check_fs+0xa8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d101      	bne.n	8008d86 <check_fs+0x9a>
 8008d82:	2300      	movs	r3, #0
 8008d84:	e000      	b.n	8008d88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008d86:	2302      	movs	r3, #2
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	00544146 	.word	0x00544146
 8008d94:	33544146 	.word	0x33544146

08008d98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b096      	sub	sp, #88	; 0x58
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ff59 	bl	8008c64 <get_ldnumber>
 8008db2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da01      	bge.n	8008dbe <find_volume+0x26>
 8008dba:	230b      	movs	r3, #11
 8008dbc:	e268      	b.n	8009290 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008dbe:	4ab0      	ldr	r2, [pc, #704]	; (8009080 <find_volume+0x2e8>)
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <find_volume+0x3a>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	e25e      	b.n	8009290 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	f023 0301 	bic.w	r3, r3, #1
 8008dde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01a      	beq.n	8008e1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	785b      	ldrb	r3, [r3, #1]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe f8c5 	bl	8006f7c <disk_status>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <find_volume+0x82>
 8008e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008e16:	230a      	movs	r3, #10
 8008e18:	e23a      	b.n	8009290 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e238      	b.n	8009290 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe f8bd 	bl	8006fb0 <disk_initialize>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e221      	b.n	8009290 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <find_volume+0xca>
 8008e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008e5e:	230a      	movs	r3, #10
 8008e60:	e216      	b.n	8009290 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	7858      	ldrb	r0, [r3, #1]
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	330c      	adds	r3, #12
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	f7fe f905 	bl	800707c <disk_ioctl>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <find_volume+0xe4>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e209      	b.n	8009290 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	899b      	ldrh	r3, [r3, #12]
 8008e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e84:	d80d      	bhi.n	8008ea2 <find_volume+0x10a>
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	899b      	ldrh	r3, [r3, #12]
 8008e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8e:	d308      	bcc.n	8008ea2 <find_volume+0x10a>
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	899b      	ldrh	r3, [r3, #12]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	899b      	ldrh	r3, [r3, #12]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <find_volume+0x10e>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e1f4      	b.n	8009290 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008eae:	f7ff ff1d 	bl	8008cec <check_fs>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d14b      	bne.n	8008f58 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec4:	e01f      	b.n	8008f06 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ed4:	4413      	add	r3, r2
 8008ed6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	3304      	adds	r3, #4
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <find_volume+0x158>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe f8fd 	bl	80070e6 <ld_dword>
 8008eec:	4602      	mov	r2, r0
 8008eee:	e000      	b.n	8008ef2 <find_volume+0x15a>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008efa:	440b      	add	r3, r1
 8008efc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	3301      	adds	r3, #1
 8008f04:	643b      	str	r3, [r7, #64]	; 0x40
 8008f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d9dc      	bls.n	8008ec6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <find_volume+0x184>
 8008f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008f24:	4413      	add	r3, r2
 8008f26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <find_volume+0x1a6>
 8008f32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f36:	f7ff fed9 	bl	8008cec <check_fs>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	e000      	b.n	8008f40 <find_volume+0x1a8>
 8008f3e:	2303      	movs	r3, #3
 8008f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d905      	bls.n	8008f58 <find_volume+0x1c0>
 8008f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4e:	3301      	adds	r3, #1
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
 8008f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d9e1      	bls.n	8008f1c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d101      	bne.n	8008f64 <find_volume+0x1cc>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e195      	b.n	8009290 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d901      	bls.n	8008f70 <find_volume+0x1d8>
 8008f6c:	230d      	movs	r3, #13
 8008f6e:	e18f      	b.n	8009290 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	3338      	adds	r3, #56	; 0x38
 8008f74:	330b      	adds	r3, #11
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe f89e 	bl	80070b8 <ld_word>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	899b      	ldrh	r3, [r3, #12]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d001      	beq.n	8008f8c <find_volume+0x1f4>
 8008f88:	230d      	movs	r3, #13
 8008f8a:	e181      	b.n	8009290 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	3338      	adds	r3, #56	; 0x38
 8008f90:	3316      	adds	r3, #22
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe f890 	bl	80070b8 <ld_word>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <find_volume+0x218>
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	3338      	adds	r3, #56	; 0x38
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe f89c 	bl	80070e6 <ld_dword>
 8008fae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d005      	beq.n	8008fd4 <find_volume+0x23c>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	789b      	ldrb	r3, [r3, #2]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d001      	beq.n	8008fd4 <find_volume+0x23c>
 8008fd0:	230d      	movs	r3, #13
 8008fd2:	e15d      	b.n	8009290 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	789b      	ldrb	r3, [r3, #2]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
 8008fe0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	895b      	ldrh	r3, [r3, #10]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <find_volume+0x270>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	895b      	ldrh	r3, [r3, #10]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	895b      	ldrh	r3, [r3, #10]
 8009000:	3b01      	subs	r3, #1
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <find_volume+0x274>
 8009008:	230d      	movs	r3, #13
 800900a:	e141      	b.n	8009290 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	3338      	adds	r3, #56	; 0x38
 8009010:	3311      	adds	r3, #17
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe f850 	bl	80070b8 <ld_word>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	891b      	ldrh	r3, [r3, #8]
 8009024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009026:	8992      	ldrh	r2, [r2, #12]
 8009028:	0952      	lsrs	r2, r2, #5
 800902a:	b292      	uxth	r2, r2
 800902c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009030:	fb02 f201 	mul.w	r2, r2, r1
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <find_volume+0x2a8>
 800903c:	230d      	movs	r3, #13
 800903e:	e127      	b.n	8009290 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	3338      	adds	r3, #56	; 0x38
 8009044:	3313      	adds	r3, #19
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe f836 	bl	80070b8 <ld_word>
 800904c:	4603      	mov	r3, r0
 800904e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <find_volume+0x2cc>
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	3338      	adds	r3, #56	; 0x38
 800905a:	3320      	adds	r3, #32
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe f842 	bl	80070e6 <ld_dword>
 8009062:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	3338      	adds	r3, #56	; 0x38
 8009068:	330e      	adds	r3, #14
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f824 	bl	80070b8 <ld_word>
 8009070:	4603      	mov	r3, r0
 8009072:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <find_volume+0x2ec>
 800907a:	230d      	movs	r3, #13
 800907c:	e108      	b.n	8009290 <find_volume+0x4f8>
 800907e:	bf00      	nop
 8009080:	2000013c 	.word	0x2000013c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009084:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009088:	4413      	add	r3, r2
 800908a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908c:	8911      	ldrh	r1, [r2, #8]
 800908e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009090:	8992      	ldrh	r2, [r2, #12]
 8009092:	0952      	lsrs	r2, r2, #5
 8009094:	b292      	uxth	r2, r2
 8009096:	fbb1 f2f2 	udiv	r2, r1, r2
 800909a:	b292      	uxth	r2, r2
 800909c:	4413      	add	r3, r2
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80090a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d201      	bcs.n	80090ac <find_volume+0x314>
 80090a8:	230d      	movs	r3, #13
 80090aa:	e0f1      	b.n	8009290 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80090ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b4:	8952      	ldrh	r2, [r2, #10]
 80090b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <find_volume+0x32e>
 80090c2:	230d      	movs	r3, #13
 80090c4:	e0e4      	b.n	8009290 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80090c6:	2303      	movs	r3, #3
 80090c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d802      	bhi.n	80090dc <find_volume+0x344>
 80090d6:	2302      	movs	r3, #2
 80090d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d802      	bhi.n	80090ec <find_volume+0x354>
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	1c9a      	adds	r2, r3, #2
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090f8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80090fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090fe:	441a      	add	r2, r3
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	441a      	add	r2, r3
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800910e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009112:	2b03      	cmp	r3, #3
 8009114:	d11e      	bne.n	8009154 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	3338      	adds	r3, #56	; 0x38
 800911a:	332a      	adds	r3, #42	; 0x2a
 800911c:	4618      	mov	r0, r3
 800911e:	f7fd ffcb 	bl	80070b8 <ld_word>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <find_volume+0x394>
 8009128:	230d      	movs	r3, #13
 800912a:	e0b1      	b.n	8009290 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	891b      	ldrh	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <find_volume+0x3a0>
 8009134:	230d      	movs	r3, #13
 8009136:	e0ab      	b.n	8009290 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	3338      	adds	r3, #56	; 0x38
 800913c:	332c      	adds	r3, #44	; 0x2c
 800913e:	4618      	mov	r0, r3
 8009140:	f7fd ffd1 	bl	80070e6 <ld_dword>
 8009144:	4602      	mov	r2, r0
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	647b      	str	r3, [r7, #68]	; 0x44
 8009152:	e01f      	b.n	8009194 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	891b      	ldrh	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <find_volume+0x3c8>
 800915c:	230d      	movs	r3, #13
 800915e:	e097      	b.n	8009290 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009166:	441a      	add	r2, r3
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800916c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009170:	2b02      	cmp	r3, #2
 8009172:	d103      	bne.n	800917c <find_volume+0x3e4>
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	e00a      	b.n	8009192 <find_volume+0x3fa>
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	69da      	ldr	r2, [r3, #28]
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	4413      	add	r3, r2
 8009186:	085a      	lsrs	r2, r3, #1
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	6a1a      	ldr	r2, [r3, #32]
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	899b      	ldrh	r3, [r3, #12]
 800919c:	4619      	mov	r1, r3
 800919e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a0:	440b      	add	r3, r1
 80091a2:	3b01      	subs	r3, #1
 80091a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091a6:	8989      	ldrh	r1, [r1, #12]
 80091a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d201      	bcs.n	80091b4 <find_volume+0x41c>
 80091b0:	230d      	movs	r3, #13
 80091b2:	e06d      	b.n	8009290 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	619a      	str	r2, [r3, #24]
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	2280      	movs	r2, #128	; 0x80
 80091c8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80091ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d149      	bne.n	8009266 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	3338      	adds	r3, #56	; 0x38
 80091d6:	3330      	adds	r3, #48	; 0x30
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fd ff6d 	bl	80070b8 <ld_word>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d140      	bne.n	8009266 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80091e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e6:	3301      	adds	r3, #1
 80091e8:	4619      	mov	r1, r3
 80091ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091ec:	f7fe fa06 	bl	80075fc <move_window>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d137      	bne.n	8009266 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2200      	movs	r2, #0
 80091fa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	3338      	adds	r3, #56	; 0x38
 8009200:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009204:	4618      	mov	r0, r3
 8009206:	f7fd ff57 	bl	80070b8 <ld_word>
 800920a:	4603      	mov	r3, r0
 800920c:	461a      	mov	r2, r3
 800920e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009212:	429a      	cmp	r2, r3
 8009214:	d127      	bne.n	8009266 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	3338      	adds	r3, #56	; 0x38
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd ff63 	bl	80070e6 <ld_dword>
 8009220:	4603      	mov	r3, r0
 8009222:	4a1d      	ldr	r2, [pc, #116]	; (8009298 <find_volume+0x500>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d11e      	bne.n	8009266 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	3338      	adds	r3, #56	; 0x38
 800922c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009230:	4618      	mov	r0, r3
 8009232:	f7fd ff58 	bl	80070e6 <ld_dword>
 8009236:	4603      	mov	r3, r0
 8009238:	4a18      	ldr	r2, [pc, #96]	; (800929c <find_volume+0x504>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d113      	bne.n	8009266 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	3338      	adds	r3, #56	; 0x38
 8009242:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009246:	4618      	mov	r0, r3
 8009248:	f7fd ff4d 	bl	80070e6 <ld_dword>
 800924c:	4602      	mov	r2, r0
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	3338      	adds	r3, #56	; 0x38
 8009256:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800925a:	4618      	mov	r0, r3
 800925c:	f7fd ff43 	bl	80070e6 <ld_dword>
 8009260:	4602      	mov	r2, r0
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800926c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800926e:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <find_volume+0x508>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <find_volume+0x508>)
 8009278:	801a      	strh	r2, [r3, #0]
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <find_volume+0x508>)
 800927c:	881a      	ldrh	r2, [r3, #0]
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <find_volume+0x50c>)
 8009286:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800928a:	f7fe f94f 	bl	800752c <clear_lock>
#endif
	return FR_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3758      	adds	r7, #88	; 0x58
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	41615252 	.word	0x41615252
 800929c:	61417272 	.word	0x61417272
 80092a0:	20000140 	.word	0x20000140
 80092a4:	20000164 	.word	0x20000164

080092a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80092b2:	2309      	movs	r3, #9
 80092b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01c      	beq.n	80092f6 <validate+0x4e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d018      	beq.n	80092f6 <validate+0x4e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d013      	beq.n	80092f6 <validate+0x4e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	889a      	ldrh	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d10c      	bne.n	80092f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd fe4a 	bl	8006f7c <disk_status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <validate+0x4e>
			res = FR_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <validate+0x5a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	e000      	b.n	8009304 <validate+0x5c>
 8009302:	2300      	movs	r3, #0
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	6013      	str	r3, [r2, #0]
	return res;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009326:	f107 0310 	add.w	r3, r7, #16
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fc9a 	bl	8008c64 <get_ldnumber>
 8009330:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	da01      	bge.n	800933c <f_mount+0x28>
 8009338:	230b      	movs	r3, #11
 800933a:	e02b      	b.n	8009394 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800933c:	4a17      	ldr	r2, [pc, #92]	; (800939c <f_mount+0x88>)
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009344:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800934c:	69b8      	ldr	r0, [r7, #24]
 800934e:	f7fe f8ed 	bl	800752c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	490d      	ldr	r1, [pc, #52]	; (800939c <f_mount+0x88>)
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <f_mount+0x66>
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d001      	beq.n	800937e <f_mount+0x6a>
 800937a:	2300      	movs	r3, #0
 800937c:	e00a      	b.n	8009394 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800937e:	f107 010c 	add.w	r1, r7, #12
 8009382:	f107 0308 	add.w	r3, r7, #8
 8009386:	2200      	movs	r2, #0
 8009388:	4618      	mov	r0, r3
 800938a:	f7ff fd05 	bl	8008d98 <find_volume>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009392:	7dfb      	ldrb	r3, [r7, #23]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	2000013c 	.word	0x2000013c

080093a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b09a      	sub	sp, #104	; 0x68
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <f_open+0x18>
 80093b4:	2309      	movs	r3, #9
 80093b6:	e1bb      	b.n	8009730 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80093c0:	79fa      	ldrb	r2, [r7, #7]
 80093c2:	f107 0114 	add.w	r1, r7, #20
 80093c6:	f107 0308 	add.w	r3, r7, #8
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff fce4 	bl	8008d98 <find_volume>
 80093d0:	4603      	mov	r3, r0
 80093d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80093d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f040 819f 	bne.w	800971e <f_open+0x37e>
		dj.obj.fs = fs;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	f107 0318 	add.w	r3, r7, #24
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fbc3 	bl	8008b78 <follow_path>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11a      	bne.n	8009436 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009404:	b25b      	sxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	da03      	bge.n	8009412 <f_open+0x72>
				res = FR_INVALID_NAME;
 800940a:	2306      	movs	r3, #6
 800940c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009410:	e011      	b.n	8009436 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f107 0318 	add.w	r3, r7, #24
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fd ff3c 	bl	80072a8 <chk_lock>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	f003 031c 	and.w	r3, r3, #28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d07f      	beq.n	8009540 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009444:	2b00      	cmp	r3, #0
 8009446:	d017      	beq.n	8009478 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009448:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800944c:	2b04      	cmp	r3, #4
 800944e:	d10e      	bne.n	800946e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009450:	f7fd ff84 	bl	800735c <enq_lock>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <f_open+0xc8>
 800945a:	f107 0318 	add.w	r3, r7, #24
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff f8da 	bl	8008618 <dir_register>
 8009464:	4603      	mov	r3, r0
 8009466:	e000      	b.n	800946a <f_open+0xca>
 8009468:	2312      	movs	r3, #18
 800946a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	f043 0308 	orr.w	r3, r3, #8
 8009474:	71fb      	strb	r3, [r7, #7]
 8009476:	e010      	b.n	800949a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009478:	7fbb      	ldrb	r3, [r7, #30]
 800947a:	f003 0311 	and.w	r3, r3, #17
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <f_open+0xea>
					res = FR_DENIED;
 8009482:	2307      	movs	r3, #7
 8009484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009488:	e007      	b.n	800949a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <f_open+0xfa>
 8009494:	2308      	movs	r3, #8
 8009496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800949a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d168      	bne.n	8009574 <f_open+0x1d4>
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d063      	beq.n	8009574 <f_open+0x1d4>
				dw = GET_FATTIME();
 80094ac:	f7fd fd0a 	bl	8006ec4 <get_fattime>
 80094b0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	330e      	adds	r3, #14
 80094b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd fe50 	bl	800715e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	3316      	adds	r3, #22
 80094c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fd fe4a 	bl	800715e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	330b      	adds	r3, #11
 80094ce:	2220      	movs	r2, #32
 80094d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094d6:	4611      	mov	r1, r2
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fe15 	bl	8008108 <ld_clust>
 80094de:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094e4:	2200      	movs	r2, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fe2d 	bl	8008146 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	331c      	adds	r3, #28
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd fe33 	bl	800715e <st_dword>
					fs->wflag = 1;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2201      	movs	r2, #1
 80094fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009500:	2b00      	cmp	r3, #0
 8009502:	d037      	beq.n	8009574 <f_open+0x1d4>
						dw = fs->winsect;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800950a:	f107 0318 	add.w	r3, r7, #24
 800950e:	2200      	movs	r2, #0
 8009510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fb1e 	bl	8007b54 <remove_chain>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800951e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009522:	2b00      	cmp	r3, #0
 8009524:	d126      	bne.n	8009574 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe f866 	bl	80075fc <move_window>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800953a:	3a01      	subs	r2, #1
 800953c:	615a      	str	r2, [r3, #20]
 800953e:	e019      	b.n	8009574 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009540:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009544:	2b00      	cmp	r3, #0
 8009546:	d115      	bne.n	8009574 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009548:	7fbb      	ldrb	r3, [r7, #30]
 800954a:	f003 0310 	and.w	r3, r3, #16
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009552:	2304      	movs	r3, #4
 8009554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009558:	e00c      	b.n	8009574 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d007      	beq.n	8009574 <f_open+0x1d4>
 8009564:	7fbb      	ldrb	r3, [r7, #30]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <f_open+0x1d4>
						res = FR_DENIED;
 800956e:	2307      	movs	r3, #7
 8009570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009574:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009578:	2b00      	cmp	r3, #0
 800957a:	d128      	bne.n	80095ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	f003 0308 	and.w	r3, r3, #8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bf14      	ite	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	2300      	moveq	r3, #0
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	f107 0318 	add.w	r3, r7, #24
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fd fef1 	bl	800739c <inc_lock>
 80095ba:	4602      	mov	r2, r0
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <f_open+0x22e>
 80095c8:	2302      	movs	r3, #2
 80095ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80095ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f040 80a3 	bne.w	800971e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fd92 	bl	8008108 <ld_clust>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	331c      	adds	r3, #28
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fd79 	bl	80070e6 <ld_dword>
 80095f4:	4602      	mov	r2, r0
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	88da      	ldrh	r2, [r3, #6]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	79fa      	ldrb	r2, [r7, #7]
 8009612:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3330      	adds	r3, #48	; 0x30
 800962a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800962e:	2100      	movs	r1, #0
 8009630:	4618      	mov	r0, r3
 8009632:	f7fd fddf 	bl	80071f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d06e      	beq.n	800971e <f_open+0x37e>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d06a      	beq.n	800971e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	895b      	ldrh	r3, [r3, #10]
 8009654:	461a      	mov	r2, r3
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	899b      	ldrh	r3, [r3, #12]
 800965a:	fb03 f302 	mul.w	r3, r3, r2
 800965e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800966c:	e016      	b.n	800969c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe f87e 	bl	8007774 <get_fat>
 8009678:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800967a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967c:	2b01      	cmp	r3, #1
 800967e:	d802      	bhi.n	8009686 <f_open+0x2e6>
 8009680:	2302      	movs	r3, #2
 8009682:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d102      	bne.n	8009694 <f_open+0x2f4>
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800969c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <f_open+0x30c>
 80096a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d8e0      	bhi.n	800966e <f_open+0x2ce>
				}
				fp->clust = clst;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80096b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d131      	bne.n	800971e <f_open+0x37e>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	899b      	ldrh	r3, [r3, #12]
 80096be:	461a      	mov	r2, r3
 80096c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096c6:	fb02 f201 	mul.w	r2, r2, r1
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d026      	beq.n	800971e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe f82f 	bl	8007738 <clust2sect>
 80096da:	64f8      	str	r0, [r7, #76]	; 0x4c
 80096dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d103      	bne.n	80096ea <f_open+0x34a>
						res = FR_INT_ERR;
 80096e2:	2302      	movs	r3, #2
 80096e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096e8:	e019      	b.n	800971e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	899b      	ldrh	r3, [r3, #12]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f8:	441a      	add	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	7858      	ldrb	r0, [r3, #1]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a1a      	ldr	r2, [r3, #32]
 800970c:	2301      	movs	r3, #1
 800970e:	f7fd fc75 	bl	8006ffc <disk_read>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <f_open+0x37e>
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800971e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <f_open+0x38c>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800972c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009730:	4618      	mov	r0, r3
 8009732:	3768      	adds	r7, #104	; 0x68
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08c      	sub	sp, #48	; 0x30
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f107 0210 	add.w	r2, r7, #16
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fda5 	bl	80092a8 <validate>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009768:	2b00      	cmp	r3, #0
 800976a:	d107      	bne.n	800977c <f_write+0x44>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	7d5b      	ldrb	r3, [r3, #21]
 8009770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <f_write+0x4a>
 800977c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009780:	e16a      	b.n	8009a58 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7d1b      	ldrb	r3, [r3, #20]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <f_write+0x5a>
 800978e:	2307      	movs	r3, #7
 8009790:	e162      	b.n	8009a58 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	441a      	add	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	429a      	cmp	r2, r3
 80097a0:	f080 814c 	bcs.w	8009a3c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	43db      	mvns	r3, r3
 80097aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80097ac:	e146      	b.n	8009a3c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	8992      	ldrh	r2, [r2, #12]
 80097b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80097ba:	fb02 f201 	mul.w	r2, r2, r1
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 80f1 	bne.w	80099a8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	8992      	ldrh	r2, [r2, #12]
 80097ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	8952      	ldrh	r2, [r2, #10]
 80097d6:	3a01      	subs	r2, #1
 80097d8:	4013      	ands	r3, r2
 80097da:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d143      	bne.n	800986a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10c      	bne.n	8009804 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d11a      	bne.n	800982c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fa0f 	bl	8007c1e <create_chain>
 8009800:	62b8      	str	r0, [r7, #40]	; 0x28
 8009802:	e013      	b.n	800982c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d007      	beq.n	800981c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	4619      	mov	r1, r3
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7fe fa9b 	bl	8007d4e <clmt_clust>
 8009818:	62b8      	str	r0, [r7, #40]	; 0x28
 800981a:	e007      	b.n	800982c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7fe f9fa 	bl	8007c1e <create_chain>
 800982a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8109 	beq.w	8009a46 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	2b01      	cmp	r3, #1
 8009838:	d104      	bne.n	8009844 <f_write+0x10c>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2202      	movs	r2, #2
 800983e:	755a      	strb	r2, [r3, #21]
 8009840:	2302      	movs	r3, #2
 8009842:	e109      	b.n	8009a58 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984a:	d104      	bne.n	8009856 <f_write+0x11e>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	755a      	strb	r2, [r3, #21]
 8009852:	2301      	movs	r3, #1
 8009854:	e100      	b.n	8009a58 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <f_write+0x132>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009868:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	7d1b      	ldrb	r3, [r3, #20]
 800986e:	b25b      	sxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	da18      	bge.n	80098a6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	7858      	ldrb	r0, [r3, #1]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1a      	ldr	r2, [r3, #32]
 8009882:	2301      	movs	r3, #1
 8009884:	f7fd fbda 	bl	800703c <disk_write>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <f_write+0x160>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	755a      	strb	r2, [r3, #21]
 8009894:	2301      	movs	r3, #1
 8009896:	e0df      	b.n	8009a58 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	7d1b      	ldrb	r3, [r3, #20]
 800989c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	4619      	mov	r1, r3
 80098ae:	4610      	mov	r0, r2
 80098b0:	f7fd ff42 	bl	8007738 <clust2sect>
 80098b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <f_write+0x18e>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2202      	movs	r2, #2
 80098c0:	755a      	strb	r2, [r3, #21]
 80098c2:	2302      	movs	r3, #2
 80098c4:	e0c8      	b.n	8009a58 <f_write+0x320>
			sect += csect;
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	4413      	add	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	899b      	ldrh	r3, [r3, #12]
 80098d2:	461a      	mov	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80098da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d043      	beq.n	800996a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	4413      	add	r3, r2
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	8952      	ldrh	r2, [r2, #10]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d905      	bls.n	80098fc <f_write+0x1c4>
					cc = fs->csize - csect;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	895b      	ldrh	r3, [r3, #10]
 80098f4:	461a      	mov	r2, r3
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	7858      	ldrb	r0, [r3, #1]
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	69f9      	ldr	r1, [r7, #28]
 8009906:	f7fd fb99 	bl	800703c <disk_write>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <f_write+0x1e2>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	755a      	strb	r2, [r3, #21]
 8009916:	2301      	movs	r3, #1
 8009918:	e09e      	b.n	8009a58 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1a      	ldr	r2, [r3, #32]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	6a3a      	ldr	r2, [r7, #32]
 8009924:	429a      	cmp	r2, r3
 8009926:	d918      	bls.n	800995a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a1a      	ldr	r2, [r3, #32]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	8992      	ldrh	r2, [r2, #12]
 800993a:	fb02 f303 	mul.w	r3, r2, r3
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	18d1      	adds	r1, r2, r3
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	899b      	ldrh	r3, [r3, #12]
 8009946:	461a      	mov	r2, r3
 8009948:	f7fd fc34 	bl	80071b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	7d1b      	ldrb	r3, [r3, #20]
 8009950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009954:	b2da      	uxtb	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	899b      	ldrh	r3, [r3, #12]
 800995e:	461a      	mov	r2, r3
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	fb02 f303 	mul.w	r3, r2, r3
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009968:	e04b      	b.n	8009a02 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	429a      	cmp	r2, r3
 8009972:	d016      	beq.n	80099a2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	699a      	ldr	r2, [r3, #24]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800997c:	429a      	cmp	r2, r3
 800997e:	d210      	bcs.n	80099a2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	7858      	ldrb	r0, [r3, #1]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800998a:	2301      	movs	r3, #1
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	f7fd fb35 	bl	8006ffc <disk_read>
 8009992:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009994:	2b00      	cmp	r3, #0
 8009996:	d004      	beq.n	80099a2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2201      	movs	r2, #1
 800999c:	755a      	strb	r2, [r3, #21]
 800999e:	2301      	movs	r3, #1
 80099a0:	e05a      	b.n	8009a58 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	899b      	ldrh	r3, [r3, #12]
 80099ac:	4618      	mov	r0, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	8992      	ldrh	r2, [r2, #12]
 80099b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80099ba:	fb02 f201 	mul.w	r2, r2, r1
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	1ac3      	subs	r3, r0, r3
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80099c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d901      	bls.n	80099d0 <f_write+0x298>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	8992      	ldrh	r2, [r2, #12]
 80099de:	fbb3 f0f2 	udiv	r0, r3, r2
 80099e2:	fb02 f200 	mul.w	r2, r2, r0
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	440b      	add	r3, r1
 80099ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ec:	69f9      	ldr	r1, [r7, #28]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fd fbe0 	bl	80071b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	7d1b      	ldrb	r3, [r3, #20]
 80099f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	4413      	add	r3, r2
 8009a08:	61fb      	str	r3, [r7, #28]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	441a      	add	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	619a      	str	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	bf38      	it	cc
 8009a22:	461a      	movcc	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	60da      	str	r2, [r3, #12]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	441a      	add	r2, r3
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f aeb5 	bne.w	80097ae <f_write+0x76>
 8009a44:	e000      	b.n	8009a48 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a46:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	7d1b      	ldrb	r3, [r3, #20]
 8009a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3730      	adds	r7, #48	; 0x30
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f107 0208 	add.w	r2, r7, #8
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fc19 	bl	80092a8 <validate>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d168      	bne.n	8009b52 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	7d1b      	ldrb	r3, [r3, #20]
 8009a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d062      	beq.n	8009b52 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	b25b      	sxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da15      	bge.n	8009ac2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7fd fac9 	bl	800703c <disk_write>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <f_sync+0x54>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e04f      	b.n	8009b54 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009ac2:	f7fd f9ff 	bl	8006ec4 <get_fattime>
 8009ac6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7fd fd93 	bl	80075fc <move_window>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d138      	bne.n	8009b52 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	330b      	adds	r3, #11
 8009aea:	781a      	ldrb	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	330b      	adds	r3, #11
 8009af0:	f042 0220 	orr.w	r2, r2, #32
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	461a      	mov	r2, r3
 8009b02:	68f9      	ldr	r1, [r7, #12]
 8009b04:	f7fe fb1f 	bl	8008146 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f103 021c 	add.w	r2, r3, #28
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7fd fb22 	bl	800715e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3316      	adds	r3, #22
 8009b1e:	6939      	ldr	r1, [r7, #16]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fd fb1c 	bl	800715e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3312      	adds	r3, #18
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd fafc 	bl	800712a <st_word>
					fs->wflag = 1;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2201      	movs	r2, #1
 8009b36:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fd fd8c 	bl	8007658 <sync_fs>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7d1b      	ldrb	r3, [r3, #20]
 8009b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff7b 	bl	8009a60 <f_sync>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d118      	bne.n	8009ba6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f107 0208 	add.w	r2, r7, #8
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fb93 	bl	80092a8 <validate>
 8009b82:	4603      	mov	r3, r0
 8009b84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10c      	bne.n	8009ba6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fc91 	bl	80074b8 <dec_lock>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b090      	sub	sp, #64	; 0x40
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f107 0208 	add.w	r2, r7, #8
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff fb70 	bl	80092a8 <validate>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009bce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <f_lseek+0x2e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7d5b      	ldrb	r3, [r3, #21]
 8009bda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <f_lseek+0x3c>
 8009be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bea:	e201      	b.n	8009ff0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80d9 	beq.w	8009da8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d15a      	bne.n	8009cb4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	627a      	str	r2, [r7, #36]	; 0x24
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	2302      	movs	r3, #2
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d03a      	beq.n	8009c94 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	2300      	movs	r3, #0
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	3302      	adds	r3, #2
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	3301      	adds	r3, #1
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd fd9a 	bl	8007774 <get_fat>
 8009c40:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d804      	bhi.n	8009c52 <f_lseek+0xa2>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	755a      	strb	r2, [r3, #21]
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e1ce      	b.n	8009ff0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c58:	d104      	bne.n	8009c64 <f_lseek+0xb4>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	755a      	strb	r2, [r3, #21]
 8009c60:	2301      	movs	r3, #1
 8009c62:	e1c5      	b.n	8009ff0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d0de      	beq.n	8009c2c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d809      	bhi.n	8009c8a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	1d1a      	adds	r2, r3, #4
 8009c7a:	627a      	str	r2, [r7, #36]	; 0x24
 8009c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	1d1a      	adds	r2, r3, #4
 8009c84:	627a      	str	r2, [r7, #36]	; 0x24
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	69db      	ldr	r3, [r3, #28]
 8009c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3c4      	bcc.n	8009c1e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d803      	bhi.n	8009cac <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e19f      	b.n	8009fec <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009cac:	2311      	movs	r3, #17
 8009cae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009cb2:	e19b      	b.n	8009fec <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d902      	bls.n	8009cc4 <f_lseek+0x114>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 818d 	beq.w	8009fec <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fe f838 	bl	8007d4e <clmt_clust>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f7fd fd23 	bl	8007738 <clust2sect>
 8009cf2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <f_lseek+0x154>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	755a      	strb	r2, [r3, #21]
 8009d00:	2302      	movs	r3, #2
 8009d02:	e175      	b.n	8009ff0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	8992      	ldrh	r2, [r2, #12]
 8009d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	8952      	ldrh	r2, [r2, #10]
 8009d14:	3a01      	subs	r2, #1
 8009d16:	4013      	ands	r3, r2
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	8992      	ldrh	r2, [r2, #12]
 8009d26:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d2a:	fb02 f201 	mul.w	r2, r2, r1
 8009d2e:	1a9b      	subs	r3, r3, r2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 815b 	beq.w	8009fec <f_lseek+0x43c>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	f000 8155 	beq.w	8009fec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7d1b      	ldrb	r3, [r3, #20]
 8009d46:	b25b      	sxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	da18      	bge.n	8009d7e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	7858      	ldrb	r0, [r3, #1]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1a      	ldr	r2, [r3, #32]
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f7fd f96e 	bl	800703c <disk_write>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <f_lseek+0x1c0>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	755a      	strb	r2, [r3, #21]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e13f      	b.n	8009ff0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	7858      	ldrb	r0, [r3, #1]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d88:	2301      	movs	r3, #1
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	f7fd f936 	bl	8006ffc <disk_read>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <f_lseek+0x1f0>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	755a      	strb	r2, [r3, #21]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e127      	b.n	8009ff0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	621a      	str	r2, [r3, #32]
 8009da6:	e121      	b.n	8009fec <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d908      	bls.n	8009dc4 <f_lseek+0x214>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7d1b      	ldrb	r3, [r3, #20]
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 80b5 	beq.w	8009f46 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	895b      	ldrh	r3, [r3, #10]
 8009de0:	461a      	mov	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	899b      	ldrh	r3, [r3, #12]
 8009de6:	fb03 f302 	mul.w	r3, r3, r2
 8009dea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d01b      	beq.n	8009e2a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	1e5a      	subs	r2, r3, #1
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	1e59      	subs	r1, r3, #1
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d30f      	bcc.n	8009e2a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	425b      	negs	r3, r3
 8009e12:	401a      	ands	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e28:	e022      	b.n	8009e70 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d119      	bne.n	8009e6a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fd feef 	bl	8007c1e <create_chain>
 8009e40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d104      	bne.n	8009e52 <f_lseek+0x2a2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	755a      	strb	r2, [r3, #21]
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e0ce      	b.n	8009ff0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e58:	d104      	bne.n	8009e64 <f_lseek+0x2b4>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	755a      	strb	r2, [r3, #21]
 8009e60:	2301      	movs	r3, #1
 8009e62:	e0c5      	b.n	8009ff0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d067      	beq.n	8009f46 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009e76:	e03a      	b.n	8009eee <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699a      	ldr	r2, [r3, #24]
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	441a      	add	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fd febe 	bl	8007c1e <create_chain>
 8009ea2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d108      	bne.n	8009ebc <f_lseek+0x30c>
							ofs = 0; break;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	603b      	str	r3, [r7, #0]
 8009eae:	e022      	b.n	8009ef6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fd fc5d 	bl	8007774 <get_fat>
 8009eba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec2:	d104      	bne.n	8009ece <f_lseek+0x31e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	755a      	strb	r2, [r3, #21]
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e090      	b.n	8009ff0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d904      	bls.n	8009ede <f_lseek+0x32e>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d304      	bcc.n	8009ee8 <f_lseek+0x338>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	755a      	strb	r2, [r3, #21]
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e083      	b.n	8009ff0 <f_lseek+0x440>
					fp->clust = clst;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d8c0      	bhi.n	8009e78 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	441a      	add	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	461a      	mov	r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f0e:	fb02 f201 	mul.w	r2, r2, r1
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d016      	beq.n	8009f46 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd fc0b 	bl	8007738 <clust2sect>
 8009f22:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <f_lseek+0x384>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	755a      	strb	r2, [r3, #21]
 8009f30:	2302      	movs	r3, #2
 8009f32:	e05d      	b.n	8009ff0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	899b      	ldrh	r3, [r3, #12]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f42:	4413      	add	r3, r2
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d90a      	bls.n	8009f68 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7d1b      	ldrb	r3, [r3, #20]
 8009f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	8992      	ldrh	r2, [r2, #12]
 8009f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f74:	fb02 f201 	mul.w	r2, r2, r1
 8009f78:	1a9b      	subs	r3, r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d036      	beq.n	8009fec <f_lseek+0x43c>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d031      	beq.n	8009fec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7d1b      	ldrb	r3, [r3, #20]
 8009f8c:	b25b      	sxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da18      	bge.n	8009fc4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	7858      	ldrb	r0, [r3, #1]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1a      	ldr	r2, [r3, #32]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	f7fd f84b 	bl	800703c <disk_write>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d004      	beq.n	8009fb6 <f_lseek+0x406>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	755a      	strb	r2, [r3, #21]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e01c      	b.n	8009ff0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7d1b      	ldrb	r3, [r3, #20]
 8009fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	7858      	ldrb	r0, [r3, #1]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fce:	2301      	movs	r3, #1
 8009fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fd2:	f7fd f813 	bl	8006ffc <disk_read>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <f_lseek+0x436>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	755a      	strb	r2, [r3, #21]
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e004      	b.n	8009ff0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009fec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3740      	adds	r7, #64	; 0x40
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	2b0a      	cmp	r3, #10
 800a008:	d103      	bne.n	800a012 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a00a:	210d      	movs	r1, #13
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fff3 	bl	8009ff8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	db25      	blt.n	800a06a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	60fa      	str	r2, [r7, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	78fa      	ldrb	r2, [r7, #3]
 800a02a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b3c      	cmp	r3, #60	; 0x3c
 800a030:	dd12      	ble.n	800a058 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f103 010c 	add.w	r1, r3, #12
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	f7ff fb79 	bl	8009738 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d101      	bne.n	800a052 <putc_bfd+0x5a>
 800a04e:	2300      	movs	r3, #0
 800a050:	e001      	b.n	800a056 <putc_bfd+0x5e>
 800a052:	f04f 33ff 	mov.w	r3, #4294967295
 800a056:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	609a      	str	r2, [r3, #8]
 800a068:	e000      	b.n	800a06c <putc_bfd+0x74>
	if (i < 0) return;
 800a06a:	bf00      	nop
}
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	db16      	blt.n	800a0b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f103 010c 	add.w	r1, r3, #12
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	461a      	mov	r2, r3
 800a092:	f107 030c 	add.w	r3, r7, #12
 800a096:	f7ff fb4f 	bl	8009738 <f_write>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d107      	bne.n	800a0b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d102      	bne.n	800a0b0 <putc_flush+0x3e>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	e001      	b.n	800a0b4 <putc_flush+0x42>
	return EOF;
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	605a      	str	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	609a      	str	r2, [r3, #8]
}
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr

0800a0e4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a0e4:	b40e      	push	{r1, r2, r3}
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b0a7      	sub	sp, #156	; 0x9c
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a0ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ffe1 	bl	800a0bc <putc_init>

	va_start(arp, fmt);
 800a0fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a0fe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a110:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 81f4 	beq.w	800a502 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a11a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a11e:	2b25      	cmp	r3, #37	; 0x25
 800a120:	d008      	beq.n	800a134 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a122:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7ff ff63 	bl	8009ff8 <putc_bfd>
			continue;
 800a132:	e1e5      	b.n	800a500 <f_printf+0x41c>
		}
		w = f = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a13a:	2300      	movs	r3, #0
 800a13c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a150:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a154:	2b30      	cmp	r3, #48	; 0x30
 800a156:	d10b      	bne.n	800a170 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a15e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a16e:	e024      	b.n	800a1ba <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a170:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a174:	2b2d      	cmp	r3, #45	; 0x2d
 800a176:	d120      	bne.n	800a1ba <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a178:	2302      	movs	r3, #2
 800a17a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a17e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a18e:	e014      	b.n	800a1ba <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a190:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	461a      	mov	r2, r3
 800a19e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1a2:	4413      	add	r3, r2
 800a1a4:	3b30      	subs	r3, #48	; 0x30
 800a1a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a1aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a1ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1be:	2b2f      	cmp	r3, #47	; 0x2f
 800a1c0:	d903      	bls.n	800a1ca <f_printf+0xe6>
 800a1c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1c6:	2b39      	cmp	r3, #57	; 0x39
 800a1c8:	d9e2      	bls.n	800a190 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a1ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1ce:	2b6c      	cmp	r3, #108	; 0x6c
 800a1d0:	d003      	beq.n	800a1da <f_printf+0xf6>
 800a1d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1d6:	2b4c      	cmp	r3, #76	; 0x4c
 800a1d8:	d10d      	bne.n	800a1f6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a1da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a1de:	f043 0304 	orr.w	r3, r3, #4
 800a1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a1e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a1f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 8183 	beq.w	800a506 <f_printf+0x422>
		d = c;
 800a200:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a204:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a208:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a20c:	2b60      	cmp	r3, #96	; 0x60
 800a20e:	d908      	bls.n	800a222 <f_printf+0x13e>
 800a210:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a214:	2b7a      	cmp	r3, #122	; 0x7a
 800a216:	d804      	bhi.n	800a222 <f_printf+0x13e>
 800a218:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a21c:	3b20      	subs	r3, #32
 800a21e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a222:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a226:	3b42      	subs	r3, #66	; 0x42
 800a228:	2b16      	cmp	r3, #22
 800a22a:	f200 8098 	bhi.w	800a35e <f_printf+0x27a>
 800a22e:	a201      	add	r2, pc, #4	; (adr r2, 800a234 <f_printf+0x150>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a33f 	.word	0x0800a33f
 800a238:	0800a327 	.word	0x0800a327
 800a23c:	0800a34f 	.word	0x0800a34f
 800a240:	0800a35f 	.word	0x0800a35f
 800a244:	0800a35f 	.word	0x0800a35f
 800a248:	0800a35f 	.word	0x0800a35f
 800a24c:	0800a35f 	.word	0x0800a35f
 800a250:	0800a35f 	.word	0x0800a35f
 800a254:	0800a35f 	.word	0x0800a35f
 800a258:	0800a35f 	.word	0x0800a35f
 800a25c:	0800a35f 	.word	0x0800a35f
 800a260:	0800a35f 	.word	0x0800a35f
 800a264:	0800a35f 	.word	0x0800a35f
 800a268:	0800a347 	.word	0x0800a347
 800a26c:	0800a35f 	.word	0x0800a35f
 800a270:	0800a35f 	.word	0x0800a35f
 800a274:	0800a35f 	.word	0x0800a35f
 800a278:	0800a291 	.word	0x0800a291
 800a27c:	0800a35f 	.word	0x0800a35f
 800a280:	0800a34f 	.word	0x0800a34f
 800a284:	0800a35f 	.word	0x0800a35f
 800a288:	0800a35f 	.word	0x0800a35f
 800a28c:	0800a357 	.word	0x0800a357
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	67ba      	str	r2, [r7, #120]	; 0x78
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2a0:	e004      	b.n	800a2ac <f_printf+0x1c8>
 800a2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2b2:	4413      	add	r3, r2
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f3      	bne.n	800a2a2 <f_printf+0x1be>
			if (!(f & 2)) {
 800a2ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d11a      	bne.n	800a2fc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a2c6:	e005      	b.n	800a2d4 <f_printf+0x1f0>
 800a2c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2cc:	2120      	movs	r1, #32
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fe92 	bl	8009ff8 <putc_bfd>
 800a2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d8f0      	bhi.n	800a2c8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a2e6:	e009      	b.n	800a2fc <f_printf+0x218>
 800a2e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2ee:	781a      	ldrb	r2, [r3, #0]
 800a2f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff fe7e 	bl	8009ff8 <putc_bfd>
 800a2fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1f1      	bne.n	800a2e8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a304:	e005      	b.n	800a312 <f_printf+0x22e>
 800a306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a30a:	2120      	movs	r1, #32
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fe73 	bl	8009ff8 <putc_bfd>
 800a312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a31c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a320:	429a      	cmp	r2, r3
 800a322:	d8f0      	bhi.n	800a306 <f_printf+0x222>
			continue;
 800a324:	e0ec      	b.n	800a500 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a328:	1d1a      	adds	r2, r3, #4
 800a32a:	67ba      	str	r2, [r7, #120]	; 0x78
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fe5e 	bl	8009ff8 <putc_bfd>
 800a33c:	e0e0      	b.n	800a500 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800a33e:	2302      	movs	r3, #2
 800a340:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a344:	e014      	b.n	800a370 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a346:	2308      	movs	r3, #8
 800a348:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a34c:	e010      	b.n	800a370 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a34e:	230a      	movs	r3, #10
 800a350:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a354:	e00c      	b.n	800a370 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a356:	2310      	movs	r3, #16
 800a358:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a35c:	e008      	b.n	800a370 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a35e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fe45 	bl	8009ff8 <putc_bfd>
 800a36e:	e0c7      	b.n	800a500 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a370:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <f_printf+0x2a2>
 800a37c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a37e:	1d1a      	adds	r2, r3, #4
 800a380:	67ba      	str	r2, [r7, #120]	; 0x78
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	e00c      	b.n	800a3a0 <f_printf+0x2bc>
 800a386:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a38a:	2b44      	cmp	r3, #68	; 0x44
 800a38c:	d104      	bne.n	800a398 <f_printf+0x2b4>
 800a38e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	67ba      	str	r2, [r7, #120]	; 0x78
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	e003      	b.n	800a3a0 <f_printf+0x2bc>
 800a398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a3a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a3a8:	2b44      	cmp	r3, #68	; 0x44
 800a3aa:	d10e      	bne.n	800a3ca <f_printf+0x2e6>
 800a3ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da0a      	bge.n	800a3ca <f_printf+0x2e6>
			v = 0 - v;
 800a3b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a3be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a3c2:	f043 0308 	orr.w	r3, r3, #8
 800a3c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a3d0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3dc:	fb02 f201 	mul.w	r2, r2, r1
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a3e6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a3ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a3f6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a3fa:	2b09      	cmp	r3, #9
 800a3fc:	d90b      	bls.n	800a416 <f_printf+0x332>
 800a3fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a402:	2b78      	cmp	r3, #120	; 0x78
 800a404:	d101      	bne.n	800a40a <f_printf+0x326>
 800a406:	2227      	movs	r2, #39	; 0x27
 800a408:	e000      	b.n	800a40c <f_printf+0x328>
 800a40a:	2207      	movs	r2, #7
 800a40c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a410:	4413      	add	r3, r2
 800a412:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a420:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a424:	3230      	adds	r2, #48	; 0x30
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a42c:	440b      	add	r3, r1
 800a42e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <f_printf+0x35e>
 800a43a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a43e:	2b1f      	cmp	r3, #31
 800a440:	d9c6      	bls.n	800a3d0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a442:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <f_printf+0x380>
 800a44e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a458:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a45c:	4413      	add	r3, r2
 800a45e:	222d      	movs	r2, #45	; 0x2d
 800a460:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a46c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <f_printf+0x398>
 800a478:	2330      	movs	r3, #48	; 0x30
 800a47a:	e000      	b.n	800a47e <f_printf+0x39a>
 800a47c:	2320      	movs	r3, #32
 800a47e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a482:	e007      	b.n	800a494 <f_printf+0x3b0>
 800a484:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff fdb2 	bl	8009ff8 <putc_bfd>
 800a494:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d108      	bne.n	800a4b2 <f_printf+0x3ce>
 800a4a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a4aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d8e8      	bhi.n	800a484 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800a4b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4bc:	f107 020c 	add.w	r2, r7, #12
 800a4c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4c4:	4413      	add	r3, r2
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fd92 	bl	8009ff8 <putc_bfd>
		} while (i);
 800a4d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1ea      	bne.n	800a4b2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800a4dc:	e007      	b.n	800a4ee <f_printf+0x40a>
 800a4de:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a4e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff fd85 	bl	8009ff8 <putc_bfd>
 800a4ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a4f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d8ee      	bhi.n	800a4de <f_printf+0x3fa>
		c = *fmt++;
 800a500:	e5fe      	b.n	800a100 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a502:	bf00      	nop
 800a504:	e000      	b.n	800a508 <f_printf+0x424>
		if (!c) break;
 800a506:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fdb0 	bl	800a072 <putc_flush>
 800a512:	4603      	mov	r3, r0
}
 800a514:	4618      	mov	r0, r3
 800a516:	379c      	adds	r7, #156	; 0x9c
 800a518:	46bd      	mov	sp, r7
 800a51a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a51e:	b003      	add	sp, #12
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop

0800a524 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4613      	mov	r3, r2
 800a530:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a532:	2301      	movs	r3, #1
 800a534:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a53a:	4b1e      	ldr	r3, [pc, #120]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a53c:	7a5b      	ldrb	r3, [r3, #9]
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d131      	bne.n	800a5a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a544:	4b1b      	ldr	r3, [pc, #108]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a546:	7a5b      	ldrb	r3, [r3, #9]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	4b19      	ldr	r3, [pc, #100]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a54e:	2100      	movs	r1, #0
 800a550:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a552:	4b18      	ldr	r3, [pc, #96]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a554:	7a5b      	ldrb	r3, [r3, #9]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4a16      	ldr	r2, [pc, #88]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a562:	4b14      	ldr	r3, [pc, #80]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a564:	7a5b      	ldrb	r3, [r3, #9]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a56c:	4413      	add	r3, r2
 800a56e:	79fa      	ldrb	r2, [r7, #7]
 800a570:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a574:	7a5b      	ldrb	r3, [r3, #9]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	b2d1      	uxtb	r1, r2
 800a57c:	4a0d      	ldr	r2, [pc, #52]	; (800a5b4 <FATFS_LinkDriverEx+0x90>)
 800a57e:	7251      	strb	r1, [r2, #9]
 800a580:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a582:	7dbb      	ldrb	r3, [r7, #22]
 800a584:	3330      	adds	r3, #48	; 0x30
 800a586:	b2da      	uxtb	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3301      	adds	r3, #1
 800a590:	223a      	movs	r2, #58	; 0x3a
 800a592:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	3302      	adds	r3, #2
 800a598:	222f      	movs	r2, #47	; 0x2f
 800a59a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3303      	adds	r3, #3
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	20000364 	.word	0x20000364

0800a5b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff ffac 	bl	800a524 <FATFS_LinkDriverEx>
 800a5cc:	4603      	mov	r3, r0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a5e4:	88fb      	ldrh	r3, [r7, #6]
 800a5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a5e8:	d802      	bhi.n	800a5f0 <ff_convert+0x18>
		c = chr;
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	81fb      	strh	r3, [r7, #14]
 800a5ee:	e025      	b.n	800a63c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	2bff      	cmp	r3, #255	; 0xff
 800a5fa:	d805      	bhi.n	800a608 <ff_convert+0x30>
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	3b80      	subs	r3, #128	; 0x80
 800a600:	4a11      	ldr	r2, [pc, #68]	; (800a648 <ff_convert+0x70>)
 800a602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a606:	e000      	b.n	800a60a <ff_convert+0x32>
 800a608:	2300      	movs	r3, #0
 800a60a:	81fb      	strh	r3, [r7, #14]
 800a60c:	e016      	b.n	800a63c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a60e:	2300      	movs	r3, #0
 800a610:	81fb      	strh	r3, [r7, #14]
 800a612:	e009      	b.n	800a628 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a614:	89fb      	ldrh	r3, [r7, #14]
 800a616:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <ff_convert+0x70>)
 800a618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d006      	beq.n	800a630 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a622:	89fb      	ldrh	r3, [r7, #14]
 800a624:	3301      	adds	r3, #1
 800a626:	81fb      	strh	r3, [r7, #14]
 800a628:	89fb      	ldrh	r3, [r7, #14]
 800a62a:	2b7f      	cmp	r3, #127	; 0x7f
 800a62c:	d9f2      	bls.n	800a614 <ff_convert+0x3c>
 800a62e:	e000      	b.n	800a632 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a630:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a632:	89fb      	ldrh	r3, [r7, #14]
 800a634:	3380      	adds	r3, #128	; 0x80
 800a636:	b29b      	uxth	r3, r3
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a63c:	89fb      	ldrh	r3, [r7, #14]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	bc80      	pop	{r7}
 800a646:	4770      	bx	lr
 800a648:	0800b1c8 	.word	0x0800b1c8

0800a64c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a656:	88fb      	ldrh	r3, [r7, #6]
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d201      	bcs.n	800a662 <ff_wtoupper+0x16>
 800a65e:	4b3d      	ldr	r3, [pc, #244]	; (800a754 <ff_wtoupper+0x108>)
 800a660:	e000      	b.n	800a664 <ff_wtoupper+0x18>
 800a662:	4b3d      	ldr	r3, [pc, #244]	; (800a758 <ff_wtoupper+0x10c>)
 800a664:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	1c9a      	adds	r2, r3, #2
 800a66a:	617a      	str	r2, [r7, #20]
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a670:	8a7b      	ldrh	r3, [r7, #18]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d068      	beq.n	800a748 <ff_wtoupper+0xfc>
 800a676:	88fa      	ldrh	r2, [r7, #6]
 800a678:	8a7b      	ldrh	r3, [r7, #18]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d364      	bcc.n	800a748 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	1c9a      	adds	r2, r3, #2
 800a682:	617a      	str	r2, [r7, #20]
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	823b      	strh	r3, [r7, #16]
 800a688:	8a3b      	ldrh	r3, [r7, #16]
 800a68a:	0a1b      	lsrs	r3, r3, #8
 800a68c:	81fb      	strh	r3, [r7, #14]
 800a68e:	8a3b      	ldrh	r3, [r7, #16]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	8a79      	ldrh	r1, [r7, #18]
 800a698:	8a3b      	ldrh	r3, [r7, #16]
 800a69a:	440b      	add	r3, r1
 800a69c:	429a      	cmp	r2, r3
 800a69e:	da49      	bge.n	800a734 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a6a0:	89fb      	ldrh	r3, [r7, #14]
 800a6a2:	2b08      	cmp	r3, #8
 800a6a4:	d84f      	bhi.n	800a746 <ff_wtoupper+0xfa>
 800a6a6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <ff_wtoupper+0x60>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6e3 	.word	0x0800a6e3
 800a6b4:	0800a6f9 	.word	0x0800a6f9
 800a6b8:	0800a701 	.word	0x0800a701
 800a6bc:	0800a709 	.word	0x0800a709
 800a6c0:	0800a711 	.word	0x0800a711
 800a6c4:	0800a719 	.word	0x0800a719
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a729 	.word	0x0800a729
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a6d0:	88fa      	ldrh	r2, [r7, #6]
 800a6d2:	8a7b      	ldrh	r3, [r7, #18]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4413      	add	r3, r2
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	80fb      	strh	r3, [r7, #6]
 800a6e0:	e027      	b.n	800a732 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a6e2:	88fa      	ldrh	r2, [r7, #6]
 800a6e4:	8a7b      	ldrh	r3, [r7, #18]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	88fa      	ldrh	r2, [r7, #6]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	80fb      	strh	r3, [r7, #6]
 800a6f6:	e01c      	b.n	800a732 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	3b10      	subs	r3, #16
 800a6fc:	80fb      	strh	r3, [r7, #6]
 800a6fe:	e018      	b.n	800a732 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	3b20      	subs	r3, #32
 800a704:	80fb      	strh	r3, [r7, #6]
 800a706:	e014      	b.n	800a732 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	3b30      	subs	r3, #48	; 0x30
 800a70c:	80fb      	strh	r3, [r7, #6]
 800a70e:	e010      	b.n	800a732 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	3b1a      	subs	r3, #26
 800a714:	80fb      	strh	r3, [r7, #6]
 800a716:	e00c      	b.n	800a732 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	3308      	adds	r3, #8
 800a71c:	80fb      	strh	r3, [r7, #6]
 800a71e:	e008      	b.n	800a732 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	3b50      	subs	r3, #80	; 0x50
 800a724:	80fb      	strh	r3, [r7, #6]
 800a726:	e004      	b.n	800a732 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a728:	88fb      	ldrh	r3, [r7, #6]
 800a72a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a72e:	80fb      	strh	r3, [r7, #6]
 800a730:	bf00      	nop
			}
			break;
 800a732:	e008      	b.n	800a746 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a734:	89fb      	ldrh	r3, [r7, #14]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d195      	bne.n	800a666 <ff_wtoupper+0x1a>
 800a73a:	8a3b      	ldrh	r3, [r7, #16]
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4413      	add	r3, r2
 800a742:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a744:	e78f      	b.n	800a666 <ff_wtoupper+0x1a>
			break;
 800a746:	bf00      	nop
	}

	return chr;
 800a748:	88fb      	ldrh	r3, [r7, #6]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr
 800a754:	0800b2c8 	.word	0x0800b2c8
 800a758:	0800b4bc 	.word	0x0800b4bc

0800a75c <__errno>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	; (800a764 <__errno+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	2000006c 	.word	0x2000006c

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2600      	movs	r6, #0
 800a76c:	4d0c      	ldr	r5, [pc, #48]	; (800a7a0 <__libc_init_array+0x38>)
 800a76e:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a770:	1b64      	subs	r4, r4, r5
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	42a6      	cmp	r6, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	f000 fc5c 	bl	800b034 <_init>
 800a77c:	2600      	movs	r6, #0
 800a77e:	4d0a      	ldr	r5, [pc, #40]	; (800a7a8 <__libc_init_array+0x40>)
 800a780:	4c0a      	ldr	r4, [pc, #40]	; (800a7ac <__libc_init_array+0x44>)
 800a782:	1b64      	subs	r4, r4, r5
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	42a6      	cmp	r6, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a790:	4798      	blx	r3
 800a792:	3601      	adds	r6, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79a:	4798      	blx	r3
 800a79c:	3601      	adds	r6, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800b5b4 	.word	0x0800b5b4
 800a7a4:	0800b5b4 	.word	0x0800b5b4
 800a7a8:	0800b5b4 	.word	0x0800b5b4
 800a7ac:	0800b5b8 	.word	0x0800b5b8

0800a7b0 <memcpy>:
 800a7b0:	440a      	add	r2, r1
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7b8:	d100      	bne.n	800a7bc <memcpy+0xc>
 800a7ba:	4770      	bx	lr
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c2:	4291      	cmp	r1, r2
 800a7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c8:	d1f9      	bne.n	800a7be <memcpy+0xe>
 800a7ca:	bd10      	pop	{r4, pc}

0800a7cc <memset>:
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4402      	add	r2, r0
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <memset+0xa>
 800a7d4:	4770      	bx	lr
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <memset+0x4>

0800a7dc <siprintf>:
 800a7dc:	b40e      	push	{r1, r2, r3}
 800a7de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7e2:	b500      	push	{lr}
 800a7e4:	b09c      	sub	sp, #112	; 0x70
 800a7e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	9006      	str	r0, [sp, #24]
 800a7ec:	9107      	str	r1, [sp, #28]
 800a7ee:	9104      	str	r1, [sp, #16]
 800a7f0:	4808      	ldr	r0, [pc, #32]	; (800a814 <siprintf+0x38>)
 800a7f2:	4909      	ldr	r1, [pc, #36]	; (800a818 <siprintf+0x3c>)
 800a7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f8:	9105      	str	r1, [sp, #20]
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	a902      	add	r1, sp, #8
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f000 f868 	bl	800a8d4 <_svfiprintf_r>
 800a804:	2200      	movs	r2, #0
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	b01c      	add	sp, #112	; 0x70
 800a80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a810:	b003      	add	sp, #12
 800a812:	4770      	bx	lr
 800a814:	2000006c 	.word	0x2000006c
 800a818:	ffff0208 	.word	0xffff0208

0800a81c <__ssputs_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	688e      	ldr	r6, [r1, #8]
 800a822:	4682      	mov	sl, r0
 800a824:	429e      	cmp	r6, r3
 800a826:	460c      	mov	r4, r1
 800a828:	4690      	mov	r8, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	d838      	bhi.n	800a8a0 <__ssputs_r+0x84>
 800a82e:	898a      	ldrh	r2, [r1, #12]
 800a830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a834:	d032      	beq.n	800a89c <__ssputs_r+0x80>
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6909      	ldr	r1, [r1, #16]
 800a83a:	3301      	adds	r3, #1
 800a83c:	eba5 0901 	sub.w	r9, r5, r1
 800a840:	6965      	ldr	r5, [r4, #20]
 800a842:	444b      	add	r3, r9
 800a844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a84c:	106d      	asrs	r5, r5, #1
 800a84e:	429d      	cmp	r5, r3
 800a850:	bf38      	it	cc
 800a852:	461d      	movcc	r5, r3
 800a854:	0553      	lsls	r3, r2, #21
 800a856:	d531      	bpl.n	800a8bc <__ssputs_r+0xa0>
 800a858:	4629      	mov	r1, r5
 800a85a:	f000 fb45 	bl	800aee8 <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b950      	cbnz	r0, 800a878 <__ssputs_r+0x5c>
 800a862:	230c      	movs	r3, #12
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	f8ca 3000 	str.w	r3, [sl]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	464a      	mov	r2, r9
 800a87a:	6921      	ldr	r1, [r4, #16]
 800a87c:	f7ff ff98 	bl	800a7b0 <memcpy>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	6126      	str	r6, [r4, #16]
 800a88e:	444e      	add	r6, r9
 800a890:	6026      	str	r6, [r4, #0]
 800a892:	463e      	mov	r6, r7
 800a894:	6165      	str	r5, [r4, #20]
 800a896:	eba5 0509 	sub.w	r5, r5, r9
 800a89a:	60a5      	str	r5, [r4, #8]
 800a89c:	42be      	cmp	r6, r7
 800a89e:	d900      	bls.n	800a8a2 <__ssputs_r+0x86>
 800a8a0:	463e      	mov	r6, r7
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	f000 fab8 	bl	800ae1c <memmove>
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	1b9b      	subs	r3, r3, r6
 800a8b2:	4432      	add	r2, r6
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	60a3      	str	r3, [r4, #8]
 800a8b8:	6022      	str	r2, [r4, #0]
 800a8ba:	e7db      	b.n	800a874 <__ssputs_r+0x58>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 fb6d 	bl	800af9c <_realloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d1e1      	bne.n	800a88c <__ssputs_r+0x70>
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	f000 fac0 	bl	800ae50 <_free_r>
 800a8d0:	e7c7      	b.n	800a862 <__ssputs_r+0x46>
	...

0800a8d4 <_svfiprintf_r>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4698      	mov	r8, r3
 800a8da:	898b      	ldrh	r3, [r1, #12]
 800a8dc:	4607      	mov	r7, r0
 800a8de:	061b      	lsls	r3, r3, #24
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	4614      	mov	r4, r2
 800a8e4:	b09d      	sub	sp, #116	; 0x74
 800a8e6:	d50e      	bpl.n	800a906 <_svfiprintf_r+0x32>
 800a8e8:	690b      	ldr	r3, [r1, #16]
 800a8ea:	b963      	cbnz	r3, 800a906 <_svfiprintf_r+0x32>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	f000 fafb 	bl	800aee8 <_malloc_r>
 800a8f2:	6028      	str	r0, [r5, #0]
 800a8f4:	6128      	str	r0, [r5, #16]
 800a8f6:	b920      	cbnz	r0, 800a902 <_svfiprintf_r+0x2e>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	e0d1      	b.n	800aaa6 <_svfiprintf_r+0x1d2>
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	616b      	str	r3, [r5, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	2320      	movs	r3, #32
 800a90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a910:	2330      	movs	r3, #48	; 0x30
 800a912:	f04f 0901 	mov.w	r9, #1
 800a916:	f8cd 800c 	str.w	r8, [sp, #12]
 800a91a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aac0 <_svfiprintf_r+0x1ec>
 800a91e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a922:	4623      	mov	r3, r4
 800a924:	469a      	mov	sl, r3
 800a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92a:	b10a      	cbz	r2, 800a930 <_svfiprintf_r+0x5c>
 800a92c:	2a25      	cmp	r2, #37	; 0x25
 800a92e:	d1f9      	bne.n	800a924 <_svfiprintf_r+0x50>
 800a930:	ebba 0b04 	subs.w	fp, sl, r4
 800a934:	d00b      	beq.n	800a94e <_svfiprintf_r+0x7a>
 800a936:	465b      	mov	r3, fp
 800a938:	4622      	mov	r2, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ff6d 	bl	800a81c <__ssputs_r>
 800a942:	3001      	adds	r0, #1
 800a944:	f000 80aa 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94a:	445a      	add	r2, fp
 800a94c:	9209      	str	r2, [sp, #36]	; 0x24
 800a94e:	f89a 3000 	ldrb.w	r3, [sl]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 80a2 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a958:	2300      	movs	r3, #0
 800a95a:	f04f 32ff 	mov.w	r2, #4294967295
 800a95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a962:	f10a 0a01 	add.w	sl, sl, #1
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96e:	931a      	str	r3, [sp, #104]	; 0x68
 800a970:	4654      	mov	r4, sl
 800a972:	2205      	movs	r2, #5
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4851      	ldr	r0, [pc, #324]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800a97a:	f000 fa41 	bl	800ae00 <memchr>
 800a97e:	9a04      	ldr	r2, [sp, #16]
 800a980:	b9d8      	cbnz	r0, 800a9ba <_svfiprintf_r+0xe6>
 800a982:	06d0      	lsls	r0, r2, #27
 800a984:	bf44      	itt	mi
 800a986:	2320      	movmi	r3, #32
 800a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98c:	0711      	lsls	r1, r2, #28
 800a98e:	bf44      	itt	mi
 800a990:	232b      	movmi	r3, #43	; 0x2b
 800a992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a996:	f89a 3000 	ldrb.w	r3, [sl]
 800a99a:	2b2a      	cmp	r3, #42	; 0x2a
 800a99c:	d015      	beq.n	800a9ca <_svfiprintf_r+0xf6>
 800a99e:	4654      	mov	r4, sl
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	9a07      	ldr	r2, [sp, #28]
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	2b09      	cmp	r3, #9
 800a9b2:	d94e      	bls.n	800aa52 <_svfiprintf_r+0x17e>
 800a9b4:	b1b0      	cbz	r0, 800a9e4 <_svfiprintf_r+0x110>
 800a9b6:	9207      	str	r2, [sp, #28]
 800a9b8:	e014      	b.n	800a9e4 <_svfiprintf_r+0x110>
 800a9ba:	eba0 0308 	sub.w	r3, r0, r8
 800a9be:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	46a2      	mov	sl, r4
 800a9c6:	9304      	str	r3, [sp, #16]
 800a9c8:	e7d2      	b.n	800a970 <_svfiprintf_r+0x9c>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9103      	str	r1, [sp, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfbb      	ittet	lt
 800a9d6:	425b      	neglt	r3, r3
 800a9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9dc:	9307      	strge	r3, [sp, #28]
 800a9de:	9307      	strlt	r3, [sp, #28]
 800a9e0:	bfb8      	it	lt
 800a9e2:	9204      	strlt	r2, [sp, #16]
 800a9e4:	7823      	ldrb	r3, [r4, #0]
 800a9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e8:	d10c      	bne.n	800aa04 <_svfiprintf_r+0x130>
 800a9ea:	7863      	ldrb	r3, [r4, #1]
 800a9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ee:	d135      	bne.n	800aa5c <_svfiprintf_r+0x188>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	3402      	adds	r4, #2
 800a9f4:	1d1a      	adds	r2, r3, #4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	9203      	str	r2, [sp, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	bfb8      	it	lt
 800a9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad0 <_svfiprintf_r+0x1fc>
 800aa08:	2203      	movs	r2, #3
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	7821      	ldrb	r1, [r4, #0]
 800aa0e:	f000 f9f7 	bl	800ae00 <memchr>
 800aa12:	b140      	cbz	r0, 800aa26 <_svfiprintf_r+0x152>
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	eba0 000a 	sub.w	r0, r0, sl
 800aa1a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	3401      	adds	r4, #1
 800aa22:	4303      	orrs	r3, r0
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	4825      	ldr	r0, [pc, #148]	; (800aac4 <_svfiprintf_r+0x1f0>)
 800aa2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa32:	f000 f9e5 	bl	800ae00 <memchr>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d038      	beq.n	800aaac <_svfiprintf_r+0x1d8>
 800aa3a:	4b23      	ldr	r3, [pc, #140]	; (800aac8 <_svfiprintf_r+0x1f4>)
 800aa3c:	bb1b      	cbnz	r3, 800aa86 <_svfiprintf_r+0x1b2>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	3308      	adds	r3, #8
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	4433      	add	r3, r6
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e767      	b.n	800a922 <_svfiprintf_r+0x4e>
 800aa52:	460c      	mov	r4, r1
 800aa54:	2001      	movs	r0, #1
 800aa56:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5a:	e7a5      	b.n	800a9a8 <_svfiprintf_r+0xd4>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4619      	mov	r1, r3
 800aa64:	3401      	adds	r4, #1
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6e:	3a30      	subs	r2, #48	; 0x30
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d903      	bls.n	800aa7c <_svfiprintf_r+0x1a8>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c5      	beq.n	800aa04 <_svfiprintf_r+0x130>
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	e7c3      	b.n	800aa04 <_svfiprintf_r+0x130>
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2301      	movs	r3, #1
 800aa80:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa84:	e7f0      	b.n	800aa68 <_svfiprintf_r+0x194>
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aa90:	a904      	add	r1, sp, #16
 800aa92:	f3af 8000 	nop.w
 800aa96:	1c42      	adds	r2, r0, #1
 800aa98:	4606      	mov	r6, r0
 800aa9a:	d1d6      	bne.n	800aa4a <_svfiprintf_r+0x176>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af2c 	bmi.w	800a8fc <_svfiprintf_r+0x28>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	b01d      	add	sp, #116	; 0x74
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4638      	mov	r0, r7
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	f000 f87c 	bl	800abb4 <_printf_i>
 800aabc:	e7eb      	b.n	800aa96 <_svfiprintf_r+0x1c2>
 800aabe:	bf00      	nop
 800aac0:	0800b578 	.word	0x0800b578
 800aac4:	0800b582 	.word	0x0800b582
 800aac8:	00000000 	.word	0x00000000
 800aacc:	0800a81d 	.word	0x0800a81d
 800aad0:	0800b57e 	.word	0x0800b57e

0800aad4 <_printf_common>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	4616      	mov	r6, r2
 800aada:	4699      	mov	r9, r3
 800aadc:	688a      	ldr	r2, [r1, #8]
 800aade:	690b      	ldr	r3, [r1, #16]
 800aae0:	4607      	mov	r7, r0
 800aae2:	4293      	cmp	r3, r2
 800aae4:	bfb8      	it	lt
 800aae6:	4613      	movlt	r3, r2
 800aae8:	6033      	str	r3, [r6, #0]
 800aaea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaee:	460c      	mov	r4, r1
 800aaf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf4:	b10a      	cbz	r2, 800aafa <_printf_common+0x26>
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	6033      	str	r3, [r6, #0]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	0699      	lsls	r1, r3, #26
 800aafe:	bf42      	ittt	mi
 800ab00:	6833      	ldrmi	r3, [r6, #0]
 800ab02:	3302      	addmi	r3, #2
 800ab04:	6033      	strmi	r3, [r6, #0]
 800ab06:	6825      	ldr	r5, [r4, #0]
 800ab08:	f015 0506 	ands.w	r5, r5, #6
 800ab0c:	d106      	bne.n	800ab1c <_printf_common+0x48>
 800ab0e:	f104 0a19 	add.w	sl, r4, #25
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	6832      	ldr	r2, [r6, #0]
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dc28      	bgt.n	800ab6e <_printf_common+0x9a>
 800ab1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab20:	1e13      	subs	r3, r2, #0
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	bf18      	it	ne
 800ab26:	2301      	movne	r3, #1
 800ab28:	0692      	lsls	r2, r2, #26
 800ab2a:	d42d      	bmi.n	800ab88 <_printf_common+0xb4>
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab34:	47c0      	blx	r8
 800ab36:	3001      	adds	r0, #1
 800ab38:	d020      	beq.n	800ab7c <_printf_common+0xa8>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	68e5      	ldr	r5, [r4, #12]
 800ab3e:	f003 0306 	and.w	r3, r3, #6
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	bf18      	it	ne
 800ab46:	2500      	movne	r5, #0
 800ab48:	6832      	ldr	r2, [r6, #0]
 800ab4a:	f04f 0600 	mov.w	r6, #0
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	bf08      	it	eq
 800ab52:	1aad      	subeq	r5, r5, r2
 800ab54:	6922      	ldr	r2, [r4, #16]
 800ab56:	bf08      	it	eq
 800ab58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	bfc4      	itt	gt
 800ab60:	1a9b      	subgt	r3, r3, r2
 800ab62:	18ed      	addgt	r5, r5, r3
 800ab64:	341a      	adds	r4, #26
 800ab66:	42b5      	cmp	r5, r6
 800ab68:	d11a      	bne.n	800aba0 <_printf_common+0xcc>
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e008      	b.n	800ab80 <_printf_common+0xac>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4652      	mov	r2, sl
 800ab72:	4649      	mov	r1, r9
 800ab74:	4638      	mov	r0, r7
 800ab76:	47c0      	blx	r8
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d103      	bne.n	800ab84 <_printf_common+0xb0>
 800ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab84:	3501      	adds	r5, #1
 800ab86:	e7c4      	b.n	800ab12 <_printf_common+0x3e>
 800ab88:	2030      	movs	r0, #48	; 0x30
 800ab8a:	18e1      	adds	r1, r4, r3
 800ab8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab96:	4422      	add	r2, r4
 800ab98:	3302      	adds	r3, #2
 800ab9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab9e:	e7c5      	b.n	800ab2c <_printf_common+0x58>
 800aba0:	2301      	movs	r3, #1
 800aba2:	4622      	mov	r2, r4
 800aba4:	4649      	mov	r1, r9
 800aba6:	4638      	mov	r0, r7
 800aba8:	47c0      	blx	r8
 800abaa:	3001      	adds	r0, #1
 800abac:	d0e6      	beq.n	800ab7c <_printf_common+0xa8>
 800abae:	3601      	adds	r6, #1
 800abb0:	e7d9      	b.n	800ab66 <_printf_common+0x92>
	...

0800abb4 <_printf_i>:
 800abb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	7e27      	ldrb	r7, [r4, #24]
 800abbc:	4691      	mov	r9, r2
 800abbe:	2f78      	cmp	r7, #120	; 0x78
 800abc0:	4680      	mov	r8, r0
 800abc2:	469a      	mov	sl, r3
 800abc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abca:	d807      	bhi.n	800abdc <_printf_i+0x28>
 800abcc:	2f62      	cmp	r7, #98	; 0x62
 800abce:	d80a      	bhi.n	800abe6 <_printf_i+0x32>
 800abd0:	2f00      	cmp	r7, #0
 800abd2:	f000 80d9 	beq.w	800ad88 <_printf_i+0x1d4>
 800abd6:	2f58      	cmp	r7, #88	; 0x58
 800abd8:	f000 80a4 	beq.w	800ad24 <_printf_i+0x170>
 800abdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abe4:	e03a      	b.n	800ac5c <_printf_i+0xa8>
 800abe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abea:	2b15      	cmp	r3, #21
 800abec:	d8f6      	bhi.n	800abdc <_printf_i+0x28>
 800abee:	a001      	add	r0, pc, #4	; (adr r0, 800abf4 <_printf_i+0x40>)
 800abf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abf4:	0800ac4d 	.word	0x0800ac4d
 800abf8:	0800ac61 	.word	0x0800ac61
 800abfc:	0800abdd 	.word	0x0800abdd
 800ac00:	0800abdd 	.word	0x0800abdd
 800ac04:	0800abdd 	.word	0x0800abdd
 800ac08:	0800abdd 	.word	0x0800abdd
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800abdd 	.word	0x0800abdd
 800ac14:	0800abdd 	.word	0x0800abdd
 800ac18:	0800abdd 	.word	0x0800abdd
 800ac1c:	0800abdd 	.word	0x0800abdd
 800ac20:	0800ad6f 	.word	0x0800ad6f
 800ac24:	0800ac91 	.word	0x0800ac91
 800ac28:	0800ad51 	.word	0x0800ad51
 800ac2c:	0800abdd 	.word	0x0800abdd
 800ac30:	0800abdd 	.word	0x0800abdd
 800ac34:	0800ad91 	.word	0x0800ad91
 800ac38:	0800abdd 	.word	0x0800abdd
 800ac3c:	0800ac91 	.word	0x0800ac91
 800ac40:	0800abdd 	.word	0x0800abdd
 800ac44:	0800abdd 	.word	0x0800abdd
 800ac48:	0800ad59 	.word	0x0800ad59
 800ac4c:	680b      	ldr	r3, [r1, #0]
 800ac4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac52:	1d1a      	adds	r2, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	600a      	str	r2, [r1, #0]
 800ac58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e0a4      	b.n	800adaa <_printf_i+0x1f6>
 800ac60:	6825      	ldr	r5, [r4, #0]
 800ac62:	6808      	ldr	r0, [r1, #0]
 800ac64:	062e      	lsls	r6, r5, #24
 800ac66:	f100 0304 	add.w	r3, r0, #4
 800ac6a:	d50a      	bpl.n	800ac82 <_printf_i+0xce>
 800ac6c:	6805      	ldr	r5, [r0, #0]
 800ac6e:	600b      	str	r3, [r1, #0]
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	da03      	bge.n	800ac7c <_printf_i+0xc8>
 800ac74:	232d      	movs	r3, #45	; 0x2d
 800ac76:	426d      	negs	r5, r5
 800ac78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	485e      	ldr	r0, [pc, #376]	; (800adf8 <_printf_i+0x244>)
 800ac80:	e019      	b.n	800acb6 <_printf_i+0x102>
 800ac82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac86:	6805      	ldr	r5, [r0, #0]
 800ac88:	600b      	str	r3, [r1, #0]
 800ac8a:	bf18      	it	ne
 800ac8c:	b22d      	sxthne	r5, r5
 800ac8e:	e7ef      	b.n	800ac70 <_printf_i+0xbc>
 800ac90:	680b      	ldr	r3, [r1, #0]
 800ac92:	6825      	ldr	r5, [r4, #0]
 800ac94:	1d18      	adds	r0, r3, #4
 800ac96:	6008      	str	r0, [r1, #0]
 800ac98:	0628      	lsls	r0, r5, #24
 800ac9a:	d501      	bpl.n	800aca0 <_printf_i+0xec>
 800ac9c:	681d      	ldr	r5, [r3, #0]
 800ac9e:	e002      	b.n	800aca6 <_printf_i+0xf2>
 800aca0:	0669      	lsls	r1, r5, #25
 800aca2:	d5fb      	bpl.n	800ac9c <_printf_i+0xe8>
 800aca4:	881d      	ldrh	r5, [r3, #0]
 800aca6:	2f6f      	cmp	r7, #111	; 0x6f
 800aca8:	bf0c      	ite	eq
 800acaa:	2308      	moveq	r3, #8
 800acac:	230a      	movne	r3, #10
 800acae:	4852      	ldr	r0, [pc, #328]	; (800adf8 <_printf_i+0x244>)
 800acb0:	2100      	movs	r1, #0
 800acb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acb6:	6866      	ldr	r6, [r4, #4]
 800acb8:	2e00      	cmp	r6, #0
 800acba:	bfa8      	it	ge
 800acbc:	6821      	ldrge	r1, [r4, #0]
 800acbe:	60a6      	str	r6, [r4, #8]
 800acc0:	bfa4      	itt	ge
 800acc2:	f021 0104 	bicge.w	r1, r1, #4
 800acc6:	6021      	strge	r1, [r4, #0]
 800acc8:	b90d      	cbnz	r5, 800acce <_printf_i+0x11a>
 800acca:	2e00      	cmp	r6, #0
 800accc:	d04d      	beq.n	800ad6a <_printf_i+0x1b6>
 800acce:	4616      	mov	r6, r2
 800acd0:	fbb5 f1f3 	udiv	r1, r5, r3
 800acd4:	fb03 5711 	mls	r7, r3, r1, r5
 800acd8:	5dc7      	ldrb	r7, [r0, r7]
 800acda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acde:	462f      	mov	r7, r5
 800ace0:	42bb      	cmp	r3, r7
 800ace2:	460d      	mov	r5, r1
 800ace4:	d9f4      	bls.n	800acd0 <_printf_i+0x11c>
 800ace6:	2b08      	cmp	r3, #8
 800ace8:	d10b      	bne.n	800ad02 <_printf_i+0x14e>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	07df      	lsls	r7, r3, #31
 800acee:	d508      	bpl.n	800ad02 <_printf_i+0x14e>
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	6861      	ldr	r1, [r4, #4]
 800acf4:	4299      	cmp	r1, r3
 800acf6:	bfde      	ittt	le
 800acf8:	2330      	movle	r3, #48	; 0x30
 800acfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad02:	1b92      	subs	r2, r2, r6
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	464b      	mov	r3, r9
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	aa03      	add	r2, sp, #12
 800ad12:	f7ff fedf 	bl	800aad4 <_printf_common>
 800ad16:	3001      	adds	r0, #1
 800ad18:	d14c      	bne.n	800adb4 <_printf_i+0x200>
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	b004      	add	sp, #16
 800ad20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad24:	4834      	ldr	r0, [pc, #208]	; (800adf8 <_printf_i+0x244>)
 800ad26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad2a:	680e      	ldr	r6, [r1, #0]
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad32:	061f      	lsls	r7, r3, #24
 800ad34:	600e      	str	r6, [r1, #0]
 800ad36:	d514      	bpl.n	800ad62 <_printf_i+0x1ae>
 800ad38:	07d9      	lsls	r1, r3, #31
 800ad3a:	bf44      	itt	mi
 800ad3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ad40:	6023      	strmi	r3, [r4, #0]
 800ad42:	b91d      	cbnz	r5, 800ad4c <_printf_i+0x198>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	f023 0320 	bic.w	r3, r3, #32
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	e7af      	b.n	800acb0 <_printf_i+0xfc>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	f043 0320 	orr.w	r3, r3, #32
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	2378      	movs	r3, #120	; 0x78
 800ad5a:	4828      	ldr	r0, [pc, #160]	; (800adfc <_printf_i+0x248>)
 800ad5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad60:	e7e3      	b.n	800ad2a <_printf_i+0x176>
 800ad62:	065e      	lsls	r6, r3, #25
 800ad64:	bf48      	it	mi
 800ad66:	b2ad      	uxthmi	r5, r5
 800ad68:	e7e6      	b.n	800ad38 <_printf_i+0x184>
 800ad6a:	4616      	mov	r6, r2
 800ad6c:	e7bb      	b.n	800ace6 <_printf_i+0x132>
 800ad6e:	680b      	ldr	r3, [r1, #0]
 800ad70:	6826      	ldr	r6, [r4, #0]
 800ad72:	1d1d      	adds	r5, r3, #4
 800ad74:	6960      	ldr	r0, [r4, #20]
 800ad76:	600d      	str	r5, [r1, #0]
 800ad78:	0635      	lsls	r5, r6, #24
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	d501      	bpl.n	800ad82 <_printf_i+0x1ce>
 800ad7e:	6018      	str	r0, [r3, #0]
 800ad80:	e002      	b.n	800ad88 <_printf_i+0x1d4>
 800ad82:	0671      	lsls	r1, r6, #25
 800ad84:	d5fb      	bpl.n	800ad7e <_printf_i+0x1ca>
 800ad86:	8018      	strh	r0, [r3, #0]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4616      	mov	r6, r2
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	e7ba      	b.n	800ad06 <_printf_i+0x152>
 800ad90:	680b      	ldr	r3, [r1, #0]
 800ad92:	1d1a      	adds	r2, r3, #4
 800ad94:	600a      	str	r2, [r1, #0]
 800ad96:	681e      	ldr	r6, [r3, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	6862      	ldr	r2, [r4, #4]
 800ad9e:	f000 f82f 	bl	800ae00 <memchr>
 800ada2:	b108      	cbz	r0, 800ada8 <_printf_i+0x1f4>
 800ada4:	1b80      	subs	r0, r0, r6
 800ada6:	6060      	str	r0, [r4, #4]
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	2300      	movs	r3, #0
 800adae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb2:	e7a8      	b.n	800ad06 <_printf_i+0x152>
 800adb4:	4632      	mov	r2, r6
 800adb6:	4649      	mov	r1, r9
 800adb8:	4640      	mov	r0, r8
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	47d0      	blx	sl
 800adbe:	3001      	adds	r0, #1
 800adc0:	d0ab      	beq.n	800ad1a <_printf_i+0x166>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	079b      	lsls	r3, r3, #30
 800adc6:	d413      	bmi.n	800adf0 <_printf_i+0x23c>
 800adc8:	68e0      	ldr	r0, [r4, #12]
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	4298      	cmp	r0, r3
 800adce:	bfb8      	it	lt
 800add0:	4618      	movlt	r0, r3
 800add2:	e7a4      	b.n	800ad1e <_printf_i+0x16a>
 800add4:	2301      	movs	r3, #1
 800add6:	4632      	mov	r2, r6
 800add8:	4649      	mov	r1, r9
 800adda:	4640      	mov	r0, r8
 800addc:	47d0      	blx	sl
 800adde:	3001      	adds	r0, #1
 800ade0:	d09b      	beq.n	800ad1a <_printf_i+0x166>
 800ade2:	3501      	adds	r5, #1
 800ade4:	68e3      	ldr	r3, [r4, #12]
 800ade6:	9903      	ldr	r1, [sp, #12]
 800ade8:	1a5b      	subs	r3, r3, r1
 800adea:	42ab      	cmp	r3, r5
 800adec:	dcf2      	bgt.n	800add4 <_printf_i+0x220>
 800adee:	e7eb      	b.n	800adc8 <_printf_i+0x214>
 800adf0:	2500      	movs	r5, #0
 800adf2:	f104 0619 	add.w	r6, r4, #25
 800adf6:	e7f5      	b.n	800ade4 <_printf_i+0x230>
 800adf8:	0800b589 	.word	0x0800b589
 800adfc:	0800b59a 	.word	0x0800b59a

0800ae00 <memchr>:
 800ae00:	4603      	mov	r3, r0
 800ae02:	b510      	push	{r4, lr}
 800ae04:	b2c9      	uxtb	r1, r1
 800ae06:	4402      	add	r2, r0
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	d101      	bne.n	800ae12 <memchr+0x12>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e003      	b.n	800ae1a <memchr+0x1a>
 800ae12:	7804      	ldrb	r4, [r0, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	428c      	cmp	r4, r1
 800ae18:	d1f6      	bne.n	800ae08 <memchr+0x8>
 800ae1a:	bd10      	pop	{r4, pc}

0800ae1c <memmove>:
 800ae1c:	4288      	cmp	r0, r1
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	eb01 0402 	add.w	r4, r1, r2
 800ae24:	d902      	bls.n	800ae2c <memmove+0x10>
 800ae26:	4284      	cmp	r4, r0
 800ae28:	4623      	mov	r3, r4
 800ae2a:	d807      	bhi.n	800ae3c <memmove+0x20>
 800ae2c:	1e43      	subs	r3, r0, #1
 800ae2e:	42a1      	cmp	r1, r4
 800ae30:	d008      	beq.n	800ae44 <memmove+0x28>
 800ae32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae3a:	e7f8      	b.n	800ae2e <memmove+0x12>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4402      	add	r2, r0
 800ae40:	428a      	cmp	r2, r1
 800ae42:	d100      	bne.n	800ae46 <memmove+0x2a>
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae4e:	e7f7      	b.n	800ae40 <memmove+0x24>

0800ae50 <_free_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4605      	mov	r5, r0
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d043      	beq.n	800aee0 <_free_r+0x90>
 800ae58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5c:	1f0c      	subs	r4, r1, #4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bfb8      	it	lt
 800ae62:	18e4      	addlt	r4, r4, r3
 800ae64:	f000 f8d0 	bl	800b008 <__malloc_lock>
 800ae68:	4a1e      	ldr	r2, [pc, #120]	; (800aee4 <_free_r+0x94>)
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	b933      	cbnz	r3, 800ae7e <_free_r+0x2e>
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	6014      	str	r4, [r2, #0]
 800ae74:	4628      	mov	r0, r5
 800ae76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae7a:	f000 b8cb 	b.w	800b014 <__malloc_unlock>
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	d90a      	bls.n	800ae98 <_free_r+0x48>
 800ae82:	6821      	ldr	r1, [r4, #0]
 800ae84:	1862      	adds	r2, r4, r1
 800ae86:	4293      	cmp	r3, r2
 800ae88:	bf01      	itttt	eq
 800ae8a:	681a      	ldreq	r2, [r3, #0]
 800ae8c:	685b      	ldreq	r3, [r3, #4]
 800ae8e:	1852      	addeq	r2, r2, r1
 800ae90:	6022      	streq	r2, [r4, #0]
 800ae92:	6063      	str	r3, [r4, #4]
 800ae94:	6004      	str	r4, [r0, #0]
 800ae96:	e7ed      	b.n	800ae74 <_free_r+0x24>
 800ae98:	461a      	mov	r2, r3
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	b10b      	cbz	r3, 800aea2 <_free_r+0x52>
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	d9fa      	bls.n	800ae98 <_free_r+0x48>
 800aea2:	6811      	ldr	r1, [r2, #0]
 800aea4:	1850      	adds	r0, r2, r1
 800aea6:	42a0      	cmp	r0, r4
 800aea8:	d10b      	bne.n	800aec2 <_free_r+0x72>
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	4401      	add	r1, r0
 800aeae:	1850      	adds	r0, r2, r1
 800aeb0:	4283      	cmp	r3, r0
 800aeb2:	6011      	str	r1, [r2, #0]
 800aeb4:	d1de      	bne.n	800ae74 <_free_r+0x24>
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4401      	add	r1, r0
 800aebc:	6011      	str	r1, [r2, #0]
 800aebe:	6053      	str	r3, [r2, #4]
 800aec0:	e7d8      	b.n	800ae74 <_free_r+0x24>
 800aec2:	d902      	bls.n	800aeca <_free_r+0x7a>
 800aec4:	230c      	movs	r3, #12
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	e7d4      	b.n	800ae74 <_free_r+0x24>
 800aeca:	6820      	ldr	r0, [r4, #0]
 800aecc:	1821      	adds	r1, r4, r0
 800aece:	428b      	cmp	r3, r1
 800aed0:	bf01      	itttt	eq
 800aed2:	6819      	ldreq	r1, [r3, #0]
 800aed4:	685b      	ldreq	r3, [r3, #4]
 800aed6:	1809      	addeq	r1, r1, r0
 800aed8:	6021      	streq	r1, [r4, #0]
 800aeda:	6063      	str	r3, [r4, #4]
 800aedc:	6054      	str	r4, [r2, #4]
 800aede:	e7c9      	b.n	800ae74 <_free_r+0x24>
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	20000370 	.word	0x20000370

0800aee8 <_malloc_r>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	1ccd      	adds	r5, r1, #3
 800aeec:	f025 0503 	bic.w	r5, r5, #3
 800aef0:	3508      	adds	r5, #8
 800aef2:	2d0c      	cmp	r5, #12
 800aef4:	bf38      	it	cc
 800aef6:	250c      	movcc	r5, #12
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	4606      	mov	r6, r0
 800aefc:	db01      	blt.n	800af02 <_malloc_r+0x1a>
 800aefe:	42a9      	cmp	r1, r5
 800af00:	d903      	bls.n	800af0a <_malloc_r+0x22>
 800af02:	230c      	movs	r3, #12
 800af04:	6033      	str	r3, [r6, #0]
 800af06:	2000      	movs	r0, #0
 800af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0a:	f000 f87d 	bl	800b008 <__malloc_lock>
 800af0e:	4921      	ldr	r1, [pc, #132]	; (800af94 <_malloc_r+0xac>)
 800af10:	680a      	ldr	r2, [r1, #0]
 800af12:	4614      	mov	r4, r2
 800af14:	b99c      	cbnz	r4, 800af3e <_malloc_r+0x56>
 800af16:	4f20      	ldr	r7, [pc, #128]	; (800af98 <_malloc_r+0xb0>)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	b923      	cbnz	r3, 800af26 <_malloc_r+0x3e>
 800af1c:	4621      	mov	r1, r4
 800af1e:	4630      	mov	r0, r6
 800af20:	f000 f862 	bl	800afe8 <_sbrk_r>
 800af24:	6038      	str	r0, [r7, #0]
 800af26:	4629      	mov	r1, r5
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f85d 	bl	800afe8 <_sbrk_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d123      	bne.n	800af7a <_malloc_r+0x92>
 800af32:	230c      	movs	r3, #12
 800af34:	4630      	mov	r0, r6
 800af36:	6033      	str	r3, [r6, #0]
 800af38:	f000 f86c 	bl	800b014 <__malloc_unlock>
 800af3c:	e7e3      	b.n	800af06 <_malloc_r+0x1e>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	1b5b      	subs	r3, r3, r5
 800af42:	d417      	bmi.n	800af74 <_malloc_r+0x8c>
 800af44:	2b0b      	cmp	r3, #11
 800af46:	d903      	bls.n	800af50 <_malloc_r+0x68>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	441c      	add	r4, r3
 800af4c:	6025      	str	r5, [r4, #0]
 800af4e:	e004      	b.n	800af5a <_malloc_r+0x72>
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	42a2      	cmp	r2, r4
 800af54:	bf0c      	ite	eq
 800af56:	600b      	streq	r3, [r1, #0]
 800af58:	6053      	strne	r3, [r2, #4]
 800af5a:	4630      	mov	r0, r6
 800af5c:	f000 f85a 	bl	800b014 <__malloc_unlock>
 800af60:	f104 000b 	add.w	r0, r4, #11
 800af64:	1d23      	adds	r3, r4, #4
 800af66:	f020 0007 	bic.w	r0, r0, #7
 800af6a:	1ac2      	subs	r2, r0, r3
 800af6c:	d0cc      	beq.n	800af08 <_malloc_r+0x20>
 800af6e:	1a1b      	subs	r3, r3, r0
 800af70:	50a3      	str	r3, [r4, r2]
 800af72:	e7c9      	b.n	800af08 <_malloc_r+0x20>
 800af74:	4622      	mov	r2, r4
 800af76:	6864      	ldr	r4, [r4, #4]
 800af78:	e7cc      	b.n	800af14 <_malloc_r+0x2c>
 800af7a:	1cc4      	adds	r4, r0, #3
 800af7c:	f024 0403 	bic.w	r4, r4, #3
 800af80:	42a0      	cmp	r0, r4
 800af82:	d0e3      	beq.n	800af4c <_malloc_r+0x64>
 800af84:	1a21      	subs	r1, r4, r0
 800af86:	4630      	mov	r0, r6
 800af88:	f000 f82e 	bl	800afe8 <_sbrk_r>
 800af8c:	3001      	adds	r0, #1
 800af8e:	d1dd      	bne.n	800af4c <_malloc_r+0x64>
 800af90:	e7cf      	b.n	800af32 <_malloc_r+0x4a>
 800af92:	bf00      	nop
 800af94:	20000370 	.word	0x20000370
 800af98:	20000374 	.word	0x20000374

0800af9c <_realloc_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	4607      	mov	r7, r0
 800afa0:	4614      	mov	r4, r2
 800afa2:	460e      	mov	r6, r1
 800afa4:	b921      	cbnz	r1, 800afb0 <_realloc_r+0x14>
 800afa6:	4611      	mov	r1, r2
 800afa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afac:	f7ff bf9c 	b.w	800aee8 <_malloc_r>
 800afb0:	b922      	cbnz	r2, 800afbc <_realloc_r+0x20>
 800afb2:	f7ff ff4d 	bl	800ae50 <_free_r>
 800afb6:	4625      	mov	r5, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	f000 f830 	bl	800b020 <_malloc_usable_size_r>
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d20f      	bcs.n	800afe4 <_realloc_r+0x48>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff8e 	bl	800aee8 <_malloc_r>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0f2      	beq.n	800afb8 <_realloc_r+0x1c>
 800afd2:	4631      	mov	r1, r6
 800afd4:	4622      	mov	r2, r4
 800afd6:	f7ff fbeb 	bl	800a7b0 <memcpy>
 800afda:	4631      	mov	r1, r6
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff ff37 	bl	800ae50 <_free_r>
 800afe2:	e7e9      	b.n	800afb8 <_realloc_r+0x1c>
 800afe4:	4635      	mov	r5, r6
 800afe6:	e7e7      	b.n	800afb8 <_realloc_r+0x1c>

0800afe8 <_sbrk_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	2300      	movs	r3, #0
 800afec:	4d05      	ldr	r5, [pc, #20]	; (800b004 <_sbrk_r+0x1c>)
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	f7f6 ff8a 	bl	8001f0c <_sbrk>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_sbrk_r+0x1a>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_sbrk_r+0x1a>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	20004658 	.word	0x20004658

0800b008 <__malloc_lock>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__malloc_lock+0x8>)
 800b00a:	f000 b811 	b.w	800b030 <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20004660 	.word	0x20004660

0800b014 <__malloc_unlock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__malloc_unlock+0x8>)
 800b016:	f000 b80c 	b.w	800b032 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20004660 	.word	0x20004660

0800b020 <_malloc_usable_size_r>:
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f18      	subs	r0, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbc      	itt	lt
 800b02a:	580b      	ldrlt	r3, [r1, r0]
 800b02c:	18c0      	addlt	r0, r0, r3
 800b02e:	4770      	bx	lr

0800b030 <__retarget_lock_acquire_recursive>:
 800b030:	4770      	bx	lr

0800b032 <__retarget_lock_release_recursive>:
 800b032:	4770      	bx	lr

0800b034 <_init>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr

0800b040 <_fini>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr
