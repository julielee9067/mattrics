
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a944  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af80  0800af80  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af88  0800af88  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af8c  0800af8c  0001af8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800af90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004530  200000f0  0800b080  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20004620  0800b080  00024620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199f2  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003750  00000000  00000000  00039b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018461  00000000  00000000  0003f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019205  00000000  00000000  00057ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d6a  00000000  00000000  00070ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fac10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b8  00000000  00000000  000fac64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000f0 	.word	0x200000f0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800aa68 	.word	0x0800aa68

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000f4 	.word	0x200000f4
 8000178:	0800aa68 	.word	0x0800aa68

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <SELECT+0x18>)
 800047e:	f002 fc46 	bl	8002d0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000482:	2001      	movs	r0, #1
 8000484:	f001 fc96 	bl	8001db4 <HAL_Delay>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020400 	.word	0x40020400

08000490 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <DESELECT+0x18>)
 800049a:	f002 fc38 	bl	8002d0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 fc88 	bl	8001db4 <HAL_Delay>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40020400 	.word	0x40020400

080004ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b6:	bf00      	nop
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SPI_TxByte+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d1f8      	bne.n	80004b8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SPI_TxByte+0x30>)
 80004ce:	f005 fd28 	bl	8005f22 <HAL_SPI_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000034c 	.word	0x2000034c

080004e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004ec:	bf00      	nop
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SPI_TxBuffer+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d1f8      	bne.n	80004ee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <SPI_TxBuffer+0x30>)
 8000504:	f005 fd0d 	bl	8005f22 <HAL_SPI_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000034c 	.word	0x2000034c

08000514 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SPI_RxByte+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052e:	1dba      	adds	r2, r7, #6
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_RxByte+0x34>)
 800053a:	f005 fe2e 	bl	800619a <HAL_SPI_TransmitReceive>

	return data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000034c 	.word	0x2000034c

0800054c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000554:	f7ff ffde 	bl	8000514 <SPI_RxByte>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SD_ReadyWait+0x30>)
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000576:	f7ff ffcd 	bl	8000514 <SPI_RxByte>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d003      	beq.n	800058c <SD_ReadyWait+0x24>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SD_ReadyWait+0x30>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <SD_ReadyWait+0xe>

	return res;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000344 	.word	0x20000344

0800059c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a8:	f7ff ff72 	bl	8000490 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	f7ff ff7a 	bl	80004ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf6      	ble.n	80005b2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c4:	f7ff ff56 	bl	8000474 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005dc:	2395      	movs	r3, #149	; 0x95
 80005de:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005e0:	463b      	mov	r3, r7
 80005e2:	2106      	movs	r1, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff7b 	bl	80004e0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ea:	e002      	b.n	80005f2 <SD_PowerOn+0x56>
	{
		cnt--;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005f2:	f7ff ff8f 	bl	8000514 <SPI_RxByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d002      	beq.n	8000602 <SD_PowerOn+0x66>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f4      	bne.n	80005ec <SD_PowerOn+0x50>
	}

	DESELECT();
 8000602:	f7ff ff45 	bl	8000490 <DESELECT>
	SPI_TxByte(0XFF);
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	f7ff ff50 	bl	80004ac <SPI_TxByte>

	PowerFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <SD_PowerOn+0x80>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000010d 	.word	0x2000010d

08000620 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SD_PowerOff+0x14>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000010d 	.word	0x2000010d

08000638 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SD_CheckPower+0x10>)
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	2000010d 	.word	0x2000010d

0800064c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SD_RxDataBlock+0x58>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800065c:	f7ff ff5a 	bl	8000514 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d103      	bne.n	8000672 <SD_RxDataBlock+0x26>
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SD_RxDataBlock+0x58>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f4      	bne.n	800065c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	d001      	beq.n	800067c <SD_RxDataBlock+0x30>
 8000678:	2300      	movs	r3, #0
 800067a:	e00f      	b.n	800069c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff62 	bl	800054c <SPI_RxBytePtr>
	} while(len--);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000692:	f7ff ff3f 	bl	8000514 <SPI_RxByte>
	SPI_RxByte();
 8000696:	f7ff ff3d 	bl	8000514 <SPI_RxByte>

	return TRUE;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000346 	.word	0x20000346

080006a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b8:	f7ff ff56 	bl	8000568 <SD_ReadyWait>
 80006bc:	4603      	mov	r3, r0
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d001      	beq.n	80006c6 <SD_TxDataBlock+0x1e>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02f      	b.n	8000726 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff feef 	bl	80004ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2bfd      	cmp	r3, #253	; 0xfd
 80006d2:	d020      	beq.n	8000716 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff01 	bl	80004e0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006de:	f7ff ff19 	bl	8000514 <SPI_RxByte>
		SPI_RxByte();
 80006e2:	f7ff ff17 	bl	8000514 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e6:	e00b      	b.n	8000700 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e8:	f7ff ff14 	bl	8000514 <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d006      	beq.n	8000708 <SD_TxDataBlock+0x60>
			i++;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d9f0      	bls.n	80006e8 <SD_TxDataBlock+0x40>
 8000706:	e000      	b.n	800070a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000708:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800070a:	bf00      	nop
 800070c:	f7ff ff02 	bl	8000514 <SPI_RxByte>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0fa      	beq.n	800070c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	2b05      	cmp	r3, #5
 800071e:	d101      	bne.n	8000724 <SD_TxDataBlock+0x7c>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	6039      	str	r1, [r7, #0]
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800073a:	f7ff ff15 	bl	8000568 <SD_ReadyWait>
 800073e:	4603      	mov	r3, r0
 8000740:	2bff      	cmp	r3, #255	; 0xff
 8000742:	d001      	beq.n	8000748 <SD_SendCmd+0x1a>
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	e042      	b.n	80007ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feae 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0e1b      	lsrs	r3, r3, #24
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea8 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fea2 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe9c 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe97 	bl	80004ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x5c>
 8000784:	2395      	movs	r3, #149	; 0x95
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e007      	b.n	800079a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b48      	cmp	r3, #72	; 0x48
 800078e:	d102      	bne.n	8000796 <SD_SendCmd+0x68>
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <SD_SendCmd+0x6c>
	else crc = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe85 	bl	80004ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b4c      	cmp	r3, #76	; 0x4c
 80007a6:	d101      	bne.n	80007ac <SD_SendCmd+0x7e>
 80007a8:	f7ff feb4 	bl	8000514 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007b0:	f7ff feb0 	bl	8000514 <SPI_RxByte>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da05      	bge.n	80007cc <SD_SendCmd+0x9e>
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <SD_SendCmd+0x82>

	return res;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SD_disk_initialize+0x14>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e0d1      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <SD_disk_initialize+0x2a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e0c6      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000802:	f7ff fecb 	bl	800059c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000806:	f7ff fe35 	bl	8000474 <SELECT>

	/* check disk type */
	type = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080e:	2100      	movs	r1, #0
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f7ff ff8c 	bl	800072e <SD_SendCmd>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 80a1 	bne.w	8000960 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <SD_disk_initialize+0x1c4>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800082a:	2048      	movs	r0, #72	; 0x48
 800082c:	f7ff ff7f 	bl	800072e <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d155      	bne.n	80008e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e00c      	b.n	8000856 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800083c:	7bfc      	ldrb	r4, [r7, #15]
 800083e:	f7ff fe69 	bl	8000514 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4423      	add	r3, r4
 800084c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9ef      	bls.n	800083c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d17e      	bne.n	8000960 <SD_disk_initialize+0x188>
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2baa      	cmp	r3, #170	; 0xaa
 8000866:	d17b      	bne.n	8000960 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000868:	2100      	movs	r1, #0
 800086a:	2077      	movs	r0, #119	; 0x77
 800086c:	f7ff ff5f 	bl	800072e <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d807      	bhi.n	8000886 <SD_disk_initialize+0xae>
 8000876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800087a:	2069      	movs	r0, #105	; 0x69
 800087c:	f7ff ff57 	bl	800072e <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ec      	bne.n	8000868 <SD_disk_initialize+0x90>
 800088e:	e000      	b.n	8000892 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <SD_disk_initialize+0x1c4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d062      	beq.n	8000960 <SD_disk_initialize+0x188>
 800089a:	2100      	movs	r1, #0
 800089c:	207a      	movs	r0, #122	; 0x7a
 800089e:	f7ff ff46 	bl	800072e <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d15b      	bne.n	8000960 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe30 	bl	8000514 <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4423      	add	r3, r4
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x104>
 80008d8:	230c      	movs	r3, #12
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0x106>
 80008dc:	2304      	movs	r3, #4
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e03e      	b.n	8000960 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008e2:	2100      	movs	r1, #0
 80008e4:	2077      	movs	r0, #119	; 0x77
 80008e6:	f7ff ff22 	bl	800072e <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d808      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008f0:	2100      	movs	r1, #0
 80008f2:	2069      	movs	r0, #105	; 0x69
 80008f4:	f7ff ff1b 	bl	800072e <SD_SendCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d801      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <SD_disk_initialize+0x12c>
 8000902:	2301      	movs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10e      	bne.n	800092a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800090c:	2100      	movs	r1, #0
 800090e:	2077      	movs	r0, #119	; 0x77
 8000910:	f7ff ff0d 	bl	800072e <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d80e      	bhi.n	8000938 <SD_disk_initialize+0x160>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff ff06 	bl	800072e <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <SD_disk_initialize+0x160>
 8000928:	e00c      	b.n	8000944 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800092a:	2100      	movs	r1, #0
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fefe 	bl	800072e <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e2      	bne.n	8000906 <SD_disk_initialize+0x12e>
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <SD_disk_initialize+0x1c4>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <SD_disk_initialize+0x184>
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	2050      	movs	r0, #80	; 0x50
 8000952:	f7ff feec 	bl	800072e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x188>
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SD_disk_initialize+0x1c8>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000966:	f7ff fd93 	bl	8000490 <DESELECT>
	SPI_RxByte();
 800096a:	f7ff fdd3 	bl	8000514 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e001      	b.n	800098a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000986:	f7ff fe4b 	bl	8000620 <SD_PowerOff>
	}

	return Stat;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SD_disk_initialize+0x1c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000346 	.word	0x20000346
 80009a0:	2000010c 	.word	0x2000010c

080009a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_status+0x14>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e002      	b.n	80009be <SD_disk_status+0x1a>
	return Stat;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SD_disk_status+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <SD_disk_read+0x1c>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SD_disk_read+0x20>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e051      	b.n	8000a90 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SD_disk_read+0xcc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SD_disk_read+0x32>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e048      	b.n	8000a90 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SD_disk_read+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <SD_disk_read+0x44>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a10:	f7ff fd30 	bl	8000474 <SELECT>

	if (count == 1)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d111      	bne.n	8000a3e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2051      	movs	r0, #81	; 0x51
 8000a1e:	f7ff fe86 	bl	800072e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <SD_disk_read+0xb0>
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fe0d 	bl	800064c <SD_RxDataBlock>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d021      	beq.n	8000a7c <SD_disk_read+0xb0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e01e      	b.n	8000a7c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2052      	movs	r0, #82	; 0x52
 8000a42:	f7ff fe74 	bl	800072e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d117      	bne.n	8000a7c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f7ff fdfb 	bl	800064c <SD_RxDataBlock>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <SD_disk_read+0xa6>
				buff += 512;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <SD_disk_read+0x80>
 8000a70:	e000      	b.n	8000a74 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a72:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	204c      	movs	r0, #76	; 0x4c
 8000a78:	f7ff fe59 	bl	800072e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd08 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fd48 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000010c 	.word	0x2000010c

08000aa0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_write+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_write+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e06b      	b.n	8000b98 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SD_disk_write+0x100>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_write+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e062      	b.n	8000b98 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SD_disk_write+0x100>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_write+0x44>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e059      	b.n	8000b98 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SD_disk_write+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <SD_disk_write+0x56>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af6:	f7ff fcbd 	bl	8000474 <SELECT>

	if (count == 1)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d110      	bne.n	8000b22 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2058      	movs	r0, #88	; 0x58
 8000b04:	f7ff fe13 	bl	800072e <SD_SendCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d13a      	bne.n	8000b84 <SD_disk_write+0xe4>
 8000b0e:	21fe      	movs	r1, #254	; 0xfe
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fdc9 	bl	80006a8 <SD_TxDataBlock>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <SD_disk_write+0xe4>
			count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e030      	b.n	8000b84 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <SD_disk_write+0x104>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2077      	movs	r0, #119	; 0x77
 8000b32:	f7ff fdfc 	bl	800072e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	2057      	movs	r0, #87	; 0x57
 8000b3a:	f7ff fdf8 	bl	800072e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2059      	movs	r0, #89	; 0x59
 8000b42:	f7ff fdf4 	bl	800072e <SD_SendCmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b4c:	21fc      	movs	r1, #252	; 0xfc
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f7ff fdaa 	bl	80006a8 <SD_TxDataBlock>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <SD_disk_write+0xd0>
				buff += 512;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ee      	bne.n	8000b4c <SD_disk_write+0xac>
 8000b6e:	e000      	b.n	8000b72 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b70:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b72:	21fd      	movs	r1, #253	; 0xfd
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd97 	bl	80006a8 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b84:	f7ff fc84 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fcc4 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	2000010c 	.word	0x2000010c

08000ba8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_ioctl+0x1e>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e115      	b.n	8000df2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d124      	bne.n	8000c1c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d012      	beq.n	8000c00 <SD_disk_ioctl+0x58>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc1a      	bgt.n	8000c14 <SD_disk_ioctl+0x6c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SD_disk_ioctl+0x40>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d006      	beq.n	8000bf4 <SD_disk_ioctl+0x4c>
 8000be6:	e015      	b.n	8000c14 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be8:	f7ff fd1a 	bl	8000620 <SD_PowerOff>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0fc      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf4:	f7ff fcd2 	bl	800059c <SD_PowerOn>
			res = RES_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfe:	e0f6      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	1c5c      	adds	r4, r3, #1
 8000c04:	f7ff fd18 	bl	8000638 <SD_CheckPower>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c12:	e0ec      	b.n	8000dee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	e0e8      	b.n	8000dee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <SD_disk_ioctl+0x254>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x86>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e0e1      	b.n	8000df2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2e:	f7ff fc21 	bl	8000474 <SELECT>

		switch (ctrl)
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	f200 80cb 	bhi.w	8000dd0 <SD_disk_ioctl+0x228>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <SD_disk_ioctl+0x98>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000d3b 	.word	0x08000d3b
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	08000d2b 	.word	0x08000d2b
 8000c4c:	08000dd1 	.word	0x08000dd1
 8000c50:	08000dd1 	.word	0x08000dd1
 8000c54:	08000dd1 	.word	0x08000dd1
 8000c58:	08000dd1 	.word	0x08000dd1
 8000c5c:	08000dd1 	.word	0x08000dd1
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000dd1 	.word	0x08000dd1
 8000c68:	08000dd1 	.word	0x08000dd1
 8000c6c:	08000d4d 	.word	0x08000d4d
 8000c70:	08000d71 	.word	0x08000d71
 8000c74:	08000d95 	.word	0x08000d95
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2049      	movs	r0, #73	; 0x49
 8000c7c:	f7ff fd57 	bl	800072e <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 80a8 	bne.w	8000dd8 <SD_disk_ioctl+0x230>
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcdc 	bl	800064c <SD_RxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809e 	beq.w	8000dd8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	099b      	lsrs	r3, r3, #6
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cba:	8bfb      	ldrh	r3, [r7, #30]
 8000cbc:	029a      	lsls	r2, r3, #10
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02e      	b.n	8000d22 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0306 	and.w	r3, r3, #6
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	7cbb      	ldrb	r3, [r7, #18]
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1a:	3b09      	subs	r3, #9
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d28:	e056      	b.n	8000dd8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d38:	e055      	b.n	8000de6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d3a:	f7ff fc15 	bl	8000568 <SD_ReadyWait>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d14b      	bne.n	8000ddc <SD_disk_ioctl+0x234>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e047      	b.n	8000ddc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	; 0x49
 8000d50:	f7ff fced 	bl	800072e <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <SD_disk_ioctl+0x238>
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fc75 	bl	800064c <SD_RxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d03b      	beq.n	8000de0 <SD_disk_ioctl+0x238>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6e:	e037      	b.n	8000de0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d70:	2100      	movs	r1, #0
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fcdb 	bl	800072e <SD_SendCmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d132      	bne.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d7e:	2110      	movs	r1, #16
 8000d80:	6a38      	ldr	r0, [r7, #32]
 8000d82:	f7ff fc63 	bl	800064c <SD_RxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d92:	e027      	b.n	8000de4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	207a      	movs	r0, #122	; 0x7a
 8000d98:	f7ff fcc9 	bl	800072e <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da8:	e00b      	b.n	8000dc2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000daa:	6a3c      	ldr	r4, [r7, #32]
 8000dac:	1c63      	adds	r3, r4, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	f7ff fbb0 	bl	8000514 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd6:	e006      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de4:	bf00      	nop
		}

		DESELECT();
 8000de6:	f7ff fb53 	bl	8000490 <DESELECT>
		SPI_RxByte();
 8000dea:	f7ff fb93 	bl	8000514 <SPI_RxByte>
	}

	return res;
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0a6      	sub	sp, #152	; 0x98
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 ff66 	bl	8001cd6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f871 	bl	8000ef0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fa43 	bl	8001298 <MX_GPIO_Init>
  MX_ADC_Init();
 8000e12:	f000 f8d3 	bl	8000fbc <MX_ADC_Init>
  MX_I2C1_Init();
 8000e16:	f000 f929 	bl	800106c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e1a:	f000 f9dd 	bl	80011d8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000e1e:	f000 fa11 	bl	8001244 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000e22:	f006 f97d 	bl	8007120 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e26:	f000 f94f 	bl	80010c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  muxInit();
 8000e2a:	f000 fb41 	bl	80014b0 <muxInit>


  int pressure_data[NUM_NODES] = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2290      	movs	r2, #144	; 0x90
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f009 fe0f 	bl	800aa58 <memset>
//
//    /* Mount the SD card */
  fr = f_mount(&fs, "", 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4926      	ldr	r1, [pc, #152]	; (8000ed8 <main+0xd8>)
 8000e3e:	4827      	ldr	r0, [pc, #156]	; (8000edc <main+0xdc>)
 8000e40:	f008 fba8 	bl	8009594 <f_mount>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <main+0xe0>)
 8000e4a:	701a      	strb	r2, [r3, #0]
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//


  int cycle_cnt = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


    // Wait for Button press
    while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 8000e52:	bf00      	nop
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <main+0xe4>)
 8000e58:	f001 ff42 	bl	8002ce0 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d0f8      	beq.n	8000e54 <main+0x54>
//
//    // Start time for 30 seconds to settle
//    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
//    HAL_Delay(WAITTIME);
//    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <main+0xe4>)
 8000e68:	f001 ff51 	bl	8002d0e <HAL_GPIO_WritePin>

    /*Open the file*/
    fr = f_open(&fil, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	491e      	ldr	r1, [pc, #120]	; (8000ee8 <main+0xe8>)
 8000e70:	481e      	ldr	r0, [pc, #120]	; (8000eec <main+0xec>)
 8000e72:	f008 fbd5 	bl	8009620 <f_open>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <main+0xe0>)
 8000e7c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//    	sampleSingleSquare(0,0,0,0);
    	samplePrototypeMat(0, 0, pressure_data);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fc8d 	bl	80017a4 <samplePrototypeMat>

//      /* Write to SD card */
    	logData2SDCard(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2124      	movs	r1, #36	; 0x24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fac2 	bl	8001418 <logData2SDCard>
    	HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 ff8d 	bl	8001db4 <HAL_Delay>


      if (cycle_cnt >= 15) {
 8000e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e9e:	2b0e      	cmp	r3, #14
 8000ea0:	dd13      	ble.n	8000eca <main+0xca>
  		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <main+0xe4>)
 8000ea8:	f001 ff31 	bl	8002d0e <HAL_GPIO_WritePin>

		// Read SD card and send data to ESP8266 via UART
//		readSDCardSendUART();

	    /* Unmount the default drive */
  		f_close(&fil);
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <main+0xec>)
 8000eae:	f008 ff95 	bl	8009ddc <f_close>
		fr = f_mount(0, "", 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <main+0xd8>)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f008 fb6c 	bl	8009594 <f_mount>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <main+0xe0>)
 8000ec2:	701a      	strb	r2, [r3, #0]

	    exit(0);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f009 fd8f 	bl	800a9e8 <exit>
      }

      cycle_cnt++;
 8000eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    	samplePrototypeMat(0, 0, pressure_data);
 8000ed4:	e7d3      	b.n	8000e7e <main+0x7e>
 8000ed6:	bf00      	nop
 8000ed8:	0800aa80 	.word	0x0800aa80
 8000edc:	200003e8 	.word	0x200003e8
 8000ee0:	20001500 	.word	0x20001500
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	2000157c 	.word	0x2000157c

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f009 fdaa 	bl	800aa58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <SystemClock_Config+0xc8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <SystemClock_Config+0xc8>)
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f2e:	230b      	movs	r3, #11
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fcf6 	bl	800494c <HAL_RCC_OscConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f66:	f000 fc75 	bl	8001854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f811 	bl	8004fac <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f90:	f000 fc60 	bl	8001854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fa6f 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fac:	f000 fc52 	bl	8001854 <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3758      	adds	r7, #88	; 0x58
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_ADC_Init+0xac>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_ADC_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC_Init+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_ADC_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_ADC_Init+0xa8>)
 800100c:	2201      	movs	r2, #1
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC_Init+0xa8>)
 800101a:	2210      	movs	r2, #16
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC_Init+0xa8>)
 8001020:	2200      	movs	r2, #0
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC_Init+0xa8>)
 800102e:	f000 fee3 	bl	8001df8 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001038:	f000 fc0c 	bl	8001854 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800103c:	2309      	movs	r3, #9
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001044:	2304      	movs	r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC_Init+0xa8>)
 800104e:	f001 f941 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001058:	f000 fbfc 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20001528 	.word	0x20001528
 8001068:	40012400 	.word	0x40012400

0800106c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_I2C1_Init+0x50>)
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_I2C1_Init+0x54>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_I2C1_Init+0x50>)
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x58>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_I2C1_Init+0x50>)
 800108a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_I2C1_Init+0x50>)
 80010aa:	f001 fe49 	bl	8002d40 <HAL_I2C_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b4:	f000 fbce 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001420 	.word	0x20001420
 80010c0:	40005400 	.word	0x40005400
 80010c4:	000186a0 	.word	0x000186a0

080010c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <MX_RTC_Init+0x108>)
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <MX_RTC_Init+0x10c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <MX_RTC_Init+0x108>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <MX_RTC_Init+0x108>)
 80010fe:	227f      	movs	r2, #127	; 0x7f
 8001100:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <MX_RTC_Init+0x108>)
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_RTC_Init+0x108>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_RTC_Init+0x108>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_RTC_Init+0x108>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111a:	482d      	ldr	r0, [pc, #180]	; (80011d0 <MX_RTC_Init+0x108>)
 800111c:	f004 fabc 	bl	8005698 <HAL_RTC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001126:	f000 fb95 	bl	8001854 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 800112a:	2316      	movs	r3, #22
 800112c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4820      	ldr	r0, [pc, #128]	; (80011d0 <MX_RTC_Init+0x108>)
 800114e:	f004 fb2d 	bl	80057ac <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001158:	f000 fb7c 	bl	8001854 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800115c:	2305      	movs	r3, #5
 800115e:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8001162:	2303      	movs	r3, #3
 8001164:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 8001168:	230b      	movs	r3, #11
 800116a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 800116e:	2316      	movs	r3, #22
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_RTC_Init+0x108>)
 800117e:	f004 fbc9 	bl	8005914 <HAL_RTC_SetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001188:	f000 fb64 	bl	8001854 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 800118c:	2306      	movs	r3, #6
 800118e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_RTC_Init+0x108>)
 80011ba:	f004 fc49 	bl	8005a50 <HAL_RTC_SetAlarm_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80011c4:	f000 fb46 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200014e0 	.word	0x200014e0
 80011d4:	40002800 	.word	0x40002800

080011d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI2_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI2_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI2_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI2_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI2_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI2_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI2_Init+0x64>)
 800120c:	2210      	movs	r2, #16
 800120e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI2_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI2_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI2_Init+0x64>)
 800122a:	f004 fdfe 	bl	8005e2a <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fb0e 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000034c 	.word	0x2000034c
 8001240:	40003800 	.word	0x40003800

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART3_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800127c:	f005 fafe 	bl	800687c <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 fae5 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003a4 	.word	0x200003a4
 8001294:	40004800 	.word	0x40004800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a42      	ldr	r2, [pc, #264]	; (8001404 <MX_GPIO_Init+0x16c>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <MX_GPIO_Init+0x16c>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <MX_GPIO_Init+0x16c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001326:	2200      	movs	r2, #0
 8001328:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 800132c:	4836      	ldr	r0, [pc, #216]	; (8001408 <MX_GPIO_Init+0x170>)
 800132e:	f001 fcee 	bl	8002d0e <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001332:	2200      	movs	r2, #0
 8001334:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001338:	4834      	ldr	r0, [pc, #208]	; (800140c <MX_GPIO_Init+0x174>)
 800133a:	f001 fce8 	bl	8002d0e <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800133e:	2200      	movs	r2, #0
 8001340:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001344:	4832      	ldr	r0, [pc, #200]	; (8001410 <MX_GPIO_Init+0x178>)
 8001346:	f001 fce2 	bl	8002d0e <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4831      	ldr	r0, [pc, #196]	; (8001414 <MX_GPIO_Init+0x17c>)
 8001350:	f001 fcdd 	bl	8002d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001354:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001358:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4826      	ldr	r0, [pc, #152]	; (8001408 <MX_GPIO_Init+0x170>)
 800136e:	f001 fb37 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001372:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001376:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <MX_GPIO_Init+0x174>)
 800138c:	f001 fb28 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001390:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001394:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <MX_GPIO_Init+0x178>)
 80013aa:	f001 fb19 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_GPIO_Init+0x170>)
 80013c2:	f001 fb0d 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_GPIO_Init+0x174>)
 80013dc:	f001 fb00 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80013e0:	2304      	movs	r3, #4
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_GPIO_Init+0x17c>)
 80013f8:	f001 faf2 	bl	80029e0 <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020c00 	.word	0x40020c00

08001418 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int *data, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    /* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 8001422:	21b4      	movs	r1, #180	; 0xb4
 8001424:	481e      	ldr	r0, [pc, #120]	; (80014a0 <logData2SDCard+0x88>)
 8001426:	f008 fd03 	bl	8009e30 <f_lseek>
    f_lseek(&fil, f_size(&fil));
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <logData2SDCard+0x88>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4619      	mov	r1, r3
 8001430:	481b      	ldr	r0, [pc, #108]	; (80014a0 <logData2SDCard+0x88>)
 8001432:	f008 fcfd 	bl	8009e30 <f_lseek>

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; node++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e010      	b.n	800145e <logData2SDCard+0x46>
    {
        fr = f_printf(&fil, "%d,", data[node]);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4916      	ldr	r1, [pc, #88]	; (80014a4 <logData2SDCard+0x8c>)
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <logData2SDCard+0x88>)
 800144c:	f008 ff8a 	bl	800a364 <f_printf>
 8001450:	4603      	mov	r3, r0
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <logData2SDCard+0x90>)
 8001456:	701a      	strb	r2, [r3, #0]
    for(int node = 0; node < len - 1; node++)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbe9      	blt.n	800143c <logData2SDCard+0x24>
    }

    fr = f_printf(&fil, "%d\n", data[len - 1]);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800146e:	3b01      	subs	r3, #1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <logData2SDCard+0x94>)
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <logData2SDCard+0x88>)
 800147e:	f008 ff71 	bl	800a364 <f_printf>
 8001482:	4603      	mov	r3, r0
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <logData2SDCard+0x90>)
 8001488:	701a      	strb	r2, [r3, #0]

    // Flush file after every mat reading
    fr = f_sync(&fil);
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <logData2SDCard+0x88>)
 800148c:	f008 fc28 	bl	8009ce0 <f_sync>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <logData2SDCard+0x90>)
 8001496:	701a      	strb	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000157c 	.word	0x2000157c
 80014a4:	0800aa98 	.word	0x0800aa98
 80014a8:	20001500 	.word	0x20001500
 80014ac:	0800aa9c 	.word	0x0800aa9c

080014b0 <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2101      	movs	r1, #1
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <muxInit+0x70>)
 80014bc:	f001 fc27 	bl	8002d0e <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	e00e      	b.n	80014e4 <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <muxInit+0x74>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ce:	4916      	ldr	r1, [pc, #88]	; (8001528 <muxInit+0x78>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f000 f935 	bl	8001748 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	dded      	ble.n	80014c6 <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	e00e      	b.n	800150e <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <muxInit+0x7c>)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f8:	490d      	ldr	r1, [pc, #52]	; (8001530 <muxInit+0x80>)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f000 f920 	bl	8001748 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b07      	cmp	r3, #7
 8001512:	dded      	ble.n	80014f0 <muxInit+0x40>
	}
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020800 	.word	0x40020800
 8001524:	20000024 	.word	0x20000024
 8001528:	0800aae8 	.word	0x0800aae8
 800152c:	20000034 	.word	0x20000034
 8001530:	0800aaf8 	.word	0x0800aaf8

08001534 <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b07      	cmp	r3, #7
 8001542:	f200 80eb 	bhi.w	800171c <selectChannel+0x1e8>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <selectChannel+0x18>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800156d 	.word	0x0800156d
 8001550:	080015a3 	.word	0x080015a3
 8001554:	080015d9 	.word	0x080015d9
 8001558:	0800160f 	.word	0x0800160f
 800155c:	08001645 	.word	0x08001645
 8001560:	0800167b 	.word	0x0800167b
 8001564:	080016b1 	.word	0x080016b1
 8001568:	080016e7 	.word	0x080016e7
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	486b      	ldr	r0, [pc, #428]	; (8001724 <selectChannel+0x1f0>)
 8001578:	f001 fbc9 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3304      	adds	r3, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4866      	ldr	r0, [pc, #408]	; (8001724 <selectChannel+0x1f0>)
 800158a:	f001 fbc0 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3308      	adds	r3, #8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4862      	ldr	r0, [pc, #392]	; (8001724 <selectChannel+0x1f0>)
 800159c:	f001 fbb7 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 80015a0:	e0bc      	b.n	800171c <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	485d      	ldr	r0, [pc, #372]	; (8001724 <selectChannel+0x1f0>)
 80015ae:	f001 fbae 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3304      	adds	r3, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4859      	ldr	r0, [pc, #356]	; (8001724 <selectChannel+0x1f0>)
 80015c0:	f001 fba5 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3308      	adds	r3, #8
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4854      	ldr	r0, [pc, #336]	; (8001724 <selectChannel+0x1f0>)
 80015d2:	f001 fb9c 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 80015d6:	e0a1      	b.n	800171c <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4850      	ldr	r0, [pc, #320]	; (8001724 <selectChannel+0x1f0>)
 80015e4:	f001 fb93 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	484b      	ldr	r0, [pc, #300]	; (8001724 <selectChannel+0x1f0>)
 80015f6:	f001 fb8a 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3308      	adds	r3, #8
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4847      	ldr	r0, [pc, #284]	; (8001724 <selectChannel+0x1f0>)
 8001608:	f001 fb81 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 800160c:	e086      	b.n	800171c <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	2201      	movs	r2, #1
 8001616:	4619      	mov	r1, r3
 8001618:	4842      	ldr	r0, [pc, #264]	; (8001724 <selectChannel+0x1f0>)
 800161a:	f001 fb78 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	483e      	ldr	r0, [pc, #248]	; (8001724 <selectChannel+0x1f0>)
 800162c:	f001 fb6f 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3308      	adds	r3, #8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4839      	ldr	r0, [pc, #228]	; (8001724 <selectChannel+0x1f0>)
 800163e:	f001 fb66 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 8001642:	e06b      	b.n	800171c <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	4835      	ldr	r0, [pc, #212]	; (8001724 <selectChannel+0x1f0>)
 8001650:	f001 fb5d 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3304      	adds	r3, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <selectChannel+0x1f0>)
 8001662:	f001 fb54 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3308      	adds	r3, #8
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	482c      	ldr	r0, [pc, #176]	; (8001724 <selectChannel+0x1f0>)
 8001674:	f001 fb4b 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 8001678:	e050      	b.n	800171c <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	4827      	ldr	r0, [pc, #156]	; (8001724 <selectChannel+0x1f0>)
 8001686:	f001 fb42 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3304      	adds	r3, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <selectChannel+0x1f0>)
 8001698:	f001 fb39 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3308      	adds	r3, #8
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2201      	movs	r2, #1
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	; (8001724 <selectChannel+0x1f0>)
 80016aa:	f001 fb30 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 80016ae:	e035      	b.n	800171c <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	481a      	ldr	r0, [pc, #104]	; (8001724 <selectChannel+0x1f0>)
 80016bc:	f001 fb27 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	4815      	ldr	r0, [pc, #84]	; (8001724 <selectChannel+0x1f0>)
 80016ce:	f001 fb1e 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3308      	adds	r3, #8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2201      	movs	r2, #1
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	; (8001724 <selectChannel+0x1f0>)
 80016e0:	f001 fb15 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 80016e4:	e01a      	b.n	800171c <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <selectChannel+0x1f0>)
 80016f2:	f001 fb0c 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <selectChannel+0x1f0>)
 8001704:	f001 fb03 	bl	8002d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3308      	adds	r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <selectChannel+0x1f0>)
 8001716:	f001 fafa 	bl	8002d0e <HAL_GPIO_WritePin>
			break;
 800171a:	bf00      	nop
	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020000 	.word	0x40020000

08001728 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f001 fae7 	bl	8002d0e <HAL_GPIO_WritePin>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	2201      	movs	r2, #1
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f001 fad7 	bl	8002d0e <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	HAL_Delay(3);
 800176e:	2003      	movs	r0, #3
 8001770:	f000 fb20 	bl	8001db4 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <readPressure+0x38>)
 8001776:	f000 fc85 	bl	8002084 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800177a:	f04f 31ff 	mov.w	r1, #4294967295
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <readPressure+0x38>)
 8001780:	f000 fd0c 	bl	800219c <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <readPressure+0x38>)
 8001786:	f000 fd99 	bl	80022bc <HAL_ADC_GetValue>
 800178a:	4603      	mov	r3, r0
 800178c:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <readPressure+0x38>)
 8001790:	f000 fcd8 	bl	8002144 <HAL_ADC_Stop>
    return data;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001528 	.word	0x20001528

080017a4 <samplePrototypeMat>:
/**
    * @brief  :
    * @param  :
    * @retval :
    */
void samplePrototypeMat(int pwr_mux, int sense_mux, int* data) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	int array_cnt = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
	enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <samplePrototypeMat+0x98>)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017bc:	4920      	ldr	r1, [pc, #128]	; (8001840 <samplePrototypeMat+0x9c>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7ff ffae 	bl	8001728 <enableMux>
	enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <samplePrototypeMat+0xa0>)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017d4:	491c      	ldr	r1, [pc, #112]	; (8001848 <samplePrototypeMat+0xa4>)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f7ff ffa2 	bl	8001728 <enableMux>

	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e01f      	b.n	800182a <samplePrototypeMat+0x86>
		selectChannel(pwr_sel, pwrMuxSelect);
 80017ea:	4918      	ldr	r1, [pc, #96]	; (800184c <samplePrototypeMat+0xa8>)
 80017ec:	69b8      	ldr	r0, [r7, #24]
 80017ee:	f7ff fea1 	bl	8001534 <selectChannel>
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e012      	b.n	800181e <samplePrototypeMat+0x7a>

			selectChannel(sense_sel, senseMuxSelect);
 80017f8:	4915      	ldr	r1, [pc, #84]	; (8001850 <samplePrototypeMat+0xac>)
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff fe9a 	bl	8001534 <selectChannel>

			/* Read voltage */
			int raw_ADC_pressure = readPressure();
 8001800:	f7ff ffb2 	bl	8001768 <readPressure>
 8001804:	6138      	str	r0, [r7, #16]

			data[array_cnt] = raw_ADC_pressure;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	601a      	str	r2, [r3, #0]
			array_cnt++;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b05      	cmp	r3, #5
 8001822:	dde9      	ble.n	80017f8 <samplePrototypeMat+0x54>
	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	3301      	adds	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b05      	cmp	r3, #5
 800182e:	dddc      	ble.n	80017ea <samplePrototypeMat+0x46>
		}
	}

}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000024 	.word	0x20000024
 8001840:	0800aae8 	.word	0x0800aae8
 8001844:	20000034 	.word	0x20000034
 8001848:	0800aaf8 	.word	0x0800aaf8
 800184c:	20000060 	.word	0x20000060
 8001850:	20000054 	.word	0x20000054

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_MspInit+0x68>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_MspInit+0x68>)
 800186c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001870:	6253      	str	r3, [r2, #36]	; 0x24
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_MspInit+0x68>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_MspInit+0x68>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_MspInit+0x68>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x68>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x68>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_MspInit+0x68>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6253      	str	r3, [r2, #36]	; 0x24
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_MspInit+0x68>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2005      	movs	r0, #5
 80018b4:	f000 ffd3 	bl	800285e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80018b8:	2005      	movs	r0, #5
 80018ba:	f000 ffec 	bl	8002896 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_ADC_MspInit+0x74>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d123      	bne.n	8001936 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_ADC_MspInit+0x78>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_ADC_MspInit+0x78>)
 80018f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_ADC_MspInit+0x78>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_ADC_MspInit+0x78>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_ADC_MspInit+0x78>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_ADC_MspInit+0x78>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 800191e:	2302      	movs	r3, #2
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_ADC_MspInit+0x7c>)
 8001932:	f001 f855 	bl	80029e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40012400 	.word	0x40012400
 8001944:	40023800 	.word	0x40023800
 8001948:	40020400 	.word	0x40020400

0800194c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_I2C_MspInit+0x9c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d138      	bne.n	80019e0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001998:	2304      	movs	r3, #4
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4813      	ldr	r0, [pc, #76]	; (80019f0 <HAL_I2C_MspInit+0xa4>)
 80019a4:	f001 f81c 	bl	80029e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 80019ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b2:	6253      	str	r3, [r2, #36]	; 0x24
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_I2C_MspInit+0xa0>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	201f      	movs	r0, #31
 80019c6:	f000 ff4a 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019ca:	201f      	movs	r0, #31
 80019cc:	f000 ff63 	bl	8002896 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2020      	movs	r0, #32
 80019d6:	f000 ff42 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019da:	2020      	movs	r0, #32
 80019dc:	f000 ff5b 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_RTC_MspInit+0x30>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10a      	bne.n	8001a1c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_RTC_MspInit+0x34>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2029      	movs	r0, #41	; 0x29
 8001a12:	f000 ff24 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a16:	2029      	movs	r0, #41	; 0x29
 8001a18:	f000 ff3d 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40002800 	.word	0x40002800
 8001a28:	424706d8 	.word	0x424706d8

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_SPI_MspInit+0x8c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6253      	str	r3, [r2, #36]	; 0x24
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a90:	2305      	movs	r3, #5
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_SPI_MspInit+0x94>)
 8001a9c:	f000 ffa0 	bl	80029e0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2024      	movs	r0, #36	; 0x24
 8001aa6:	f000 feda 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001aaa:	2024      	movs	r0, #36	; 0x24
 8001aac:	f000 fef3 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40003800 	.word	0x40003800
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x8c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d130      	bne.n	8001b48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6253      	str	r3, [r2, #36]	; 0x24
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_UART_MspInit+0x94>)
 8001b34:	f000 ff54 	bl	80029e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2027      	movs	r0, #39	; 0x27
 8001b3e:	f000 fe8e 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b42:	2027      	movs	r0, #39	; 0x27
 8001b44:	f000 fea7 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004800 	.word	0x40004800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020800 	.word	0x40020800

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <SysTick_Handler+0x34>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <SysTick_Handler+0x18>
		Timer1--;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <SysTick_Handler+0x34>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <SysTick_Handler+0x34>)
 8001bb6:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <SysTick_Handler+0x38>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <SysTick_Handler+0x2c>
		Timer2--;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Handler+0x38>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <SysTick_Handler+0x38>)
 8001bca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 f8d6 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000346 	.word	0x20000346
 8001bd8:	20000344 	.word	0x20000344

08001bdc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <I2C1_EV_IRQHandler+0x10>)
 8001bee:	f001 f9eb 	bl	8002fc8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001420 	.word	0x20001420

08001bfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <I2C1_ER_IRQHandler+0x10>)
 8001c02:	f001 fb52 	bl	80032aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20001420 	.word	0x20001420

08001c10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <SPI2_IRQHandler+0x10>)
 8001c16:	f004 fc63 	bl	80064e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000034c 	.word	0x2000034c

08001c24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART3_IRQHandler+0x10>)
 8001c2a:	f004 fe75 	bl	8006918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200003a4 	.word	0x200003a4

08001c38 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <RTC_Alarm_IRQHandler+0x10>)
 8001c3e:	f004 f82d 	bl	8005c9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200014e0 	.word	0x200014e0

08001c4c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c56:	f008 fec1 	bl	800a9dc <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb2:	f7ff ffe5 	bl	8001c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f008 feab 	bl	800aa10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cba:	f7ff f8a1 	bl	8000e00 <main>
  bx lr
 8001cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001cc8:	0800af90 	.word	0x0800af90
  ldr r2, =_sbss
 8001ccc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001cd0:	20004620 	.word	0x20004620

08001cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_IRQHandler>

08001cd6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fdb1 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f80e 	bl	8001d08 <HAL_InitTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	71fb      	strb	r3, [r7, #7]
 8001cf6:	e001      	b.n	8001cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf8:	f7ff fdb2 	bl	8001860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d022      	beq.n	8001d62 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_InitTick+0x6c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_InitTick+0x68>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fdbe 	bl	80028b2 <HAL_SYSTICK_Config>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10f      	bne.n	8001d5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d809      	bhi.n	8001d56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d42:	2200      	movs	r2, #0
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4a:	f000 fd88 	bl	800285e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_InitTick+0x70>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e007      	b.n	8001d66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e004      	b.n	8001d66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000074 	.word	0x20000074
 8001d74:	2000006c 	.word	0x2000006c
 8001d78:	20000070 	.word	0x20000070

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x20>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200025ac 	.word	0x200025ac
 8001d9c:	20000074 	.word	0x20000074

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <HAL_GetTick+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	200025ac 	.word	0x200025ac

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d004      	beq.n	8001dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_Delay+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd8:	bf00      	nop
 8001dda:	f7ff ffe1 	bl	8001da0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f7      	bhi.n	8001dda <HAL_Delay+0x26>
  {
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000074 	.word	0x20000074

08001df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e127      	b.n	8002068 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e34:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <HAL_ADC_Init+0x278>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a8d      	ldr	r2, [pc, #564]	; (8002070 <HAL_ADC_Init+0x278>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_ADC_Init+0x278>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fd3d 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80ff 	bne.w	800205e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e68:	f023 0302 	bic.w	r3, r3, #2
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001e74:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_ADC_Init+0x27c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	497c      	ldr	r1, [pc, #496]	; (8002074 <HAL_ADC_Init+0x27c>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e8e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e96:	4619      	mov	r1, r3
 8001e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001eb2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001eb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001eda:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d007      	beq.n	8001efa <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d04f      	beq.n	8001fa8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f1a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6912      	ldr	r2, [r2, #16]
 8001f20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_Init+0x136>
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6912      	ldr	r2, [r2, #16]
 8001f2a:	2a01      	cmp	r2, #1
 8001f2c:	d102      	bne.n	8001f34 <HAL_ADC_Init+0x13c>
 8001f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_Init+0x13e>
 8001f34:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f36:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d125      	bne.n	8001f94 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d114      	bne.n	8001f7c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	617a      	str	r2, [r7, #20]
  return result;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	4313      	orrs	r3, r2
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7a:	e00b      	b.n	8001f94 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_ADC_Init+0x280>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_ADC_Init+0x284>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc4:	d003      	beq.n	8001fce <HAL_ADC_Init+0x1d6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d119      	bne.n	8002002 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001fe2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	fa92 f2a2 	rbit	r2, r2
 8001fea:	60fa      	str	r2, [r7, #12]
  return result;
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	fab2 f282 	clz	r2, r2
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	fa03 f202 	lsl.w	r2, r3, r2
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8002000:	e007      	b.n	8002012 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_ADC_Init+0x288>)
 800201a:	4013      	ands	r3, r2
 800201c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201e:	429a      	cmp	r2, r3
 8002020:	d10b      	bne.n	800203a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	64da      	str	r2, [r3, #76]	; 0x4c
 8002038:	e014      	b.n	8002064 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f023 0312 	bic.w	r3, r3, #18
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800205c:	e002      	b.n	8002064 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002068:	4618      	mov	r0, r3
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40012700 	.word	0x40012700
 8002078:	fcfc16ff 	.word	0xfcfc16ff
 800207c:	c0fff18d 	.word	0xc0fff18d
 8002080:	bf80fffe 	.word	0xbf80fffe

08002084 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_Start+0x1a>
 800209a:	2302      	movs	r3, #2
 800209c:	e04e      	b.n	800213c <HAL_ADC_Start+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fa64 	bl	8002574 <ADC_Enable>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d141      	bne.n	800213a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	f023 0206 	bic.w	r2, r3, #6
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	651a      	str	r2, [r3, #80]	; 0x50
 8002102:	e002      	b.n	800210a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800211a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002138:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADC_Stop+0x1a>
 800215a:	2302      	movs	r3, #2
 800215c:	e01a      	b.n	8002194 <HAL_ADC_Stop+0x50>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa60 	bl	800262c <ADC_ConversionStop_Disable>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d113      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c8:	d10b      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e068      	b.n	80022b4 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021e2:	f7ff fddd 	bl	8001da0 <HAL_GetTick>
 80021e6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e8:	e021      	b.n	800222e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d01d      	beq.n	800222e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_ADC_PollForConversion+0x6c>
 80021f8:	f7ff fdd2 	bl	8001da0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d212      	bcs.n	800222e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e042      	b.n	80022b4 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0d6      	beq.n	80021ea <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0212 	mvn.w	r2, #18
 800224c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d124      	bne.n	80022b2 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11f      	bne.n	80022b2 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228a:	2b00      	cmp	r3, #0
 800228c:	d111      	bne.n	80022b2 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x20>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e134      	b.n	800255e <HAL_ADC_ConfigChannel+0x28a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d81c      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3b05      	subs	r3, #5
 8002316:	221f      	movs	r2, #31
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	4019      	ands	r1, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	3b05      	subs	r3, #5
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	e07e      	b.n	800243c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d81c      	bhi.n	8002380 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b23      	subs	r3, #35	; 0x23
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	4019      	ands	r1, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b23      	subs	r3, #35	; 0x23
 8002372:	fa00 f203 	lsl.w	r2, r0, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c
 800237e:	e05d      	b.n	800243c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b12      	cmp	r3, #18
 8002386:	d81c      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b41      	subs	r3, #65	; 0x41
 800239a:	221f      	movs	r2, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b41      	subs	r3, #65	; 0x41
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
 80023c0:	e03c      	b.n	800243c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	d81c      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b5f      	subs	r3, #95	; 0x5f
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b5f      	subs	r3, #95	; 0x5f
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
 8002402:	e01b      	b.n	800243c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b7d      	subs	r3, #125	; 0x7d
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b7d      	subs	r3, #125	; 0x7d
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d81a      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6959      	ldr	r1, [r3, #20]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	2207      	movs	r2, #7
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	4019      	ands	r1, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6898      	ldr	r0, [r3, #8]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	e042      	b.n	8002500 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b13      	cmp	r3, #19
 8002480:	d81c      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6919      	ldr	r1, [r3, #16]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	3b1e      	subs	r3, #30
 8002494:	2207      	movs	r2, #7
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	4019      	ands	r1, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6898      	ldr	r0, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	e021      	b.n	8002500 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b1a      	cmp	r3, #26
 80024c2:	d81c      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b3c      	subs	r3, #60	; 0x3c
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	4019      	ands	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6898      	ldr	r0, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	3b3c      	subs	r3, #60	; 0x3c
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	e000      	b.n	8002500 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80024fe:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b10      	cmp	r3, #16
 8002506:	d003      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800250c:	2b11      	cmp	r3, #17
 800250e:	d121      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_ADC_ConfigChannel+0x294>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11b      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_ADC_ConfigChannel+0x294>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x294>)
 8002522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002526:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d111      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_ADC_ConfigChannel+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_ADC_ConfigChannel+0x29c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9a      	lsrs	r2, r3, #18
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002546:	e002      	b.n	800254e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3b01      	subs	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f9      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40012700 	.word	0x40012700
 800256c:	2000006c 	.word	0x2000006c
 8002570:	431bde83 	.word	0x431bde83

08002574 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d043      	beq.n	800261a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <ADC_Enable+0xb0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <ADC_Enable+0xb4>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	0c9a      	lsrs	r2, r3, #18
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025b6:	e002      	b.n	80025be <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f9      	bne.n	80025b8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80025c4:	f7ff fbec 	bl	8001da0 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ca:	e01f      	b.n	800260c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80025cc:	f7ff fbe8 	bl	8001da0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d918      	bls.n	800260c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d011      	beq.n	800260c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d1d8      	bne.n	80025cc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000006c 	.word	0x2000006c
 8002628:	431bde83 	.word	0x431bde83

0800262c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d12e      	bne.n	80026a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002656:	f7ff fba3 	bl	8001da0 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800265c:	e01b      	b.n	8002696 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800265e:	f7ff fb9f 	bl	8001da0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d914      	bls.n	8002696 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d10d      	bne.n	8002696 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d0dc      	beq.n	800265e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <__NVIC_EnableIRQ+0x34>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff90 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff2d 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002870:	f7ff ff42 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 8002874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff90 	bl	80027a0 <NVIC_EncodePriority>
 8002880:	4602      	mov	r2, r0
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5f 	bl	800274c <__NVIC_SetPriority>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff35 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffa2 	bl	8002804 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d008      	beq.n	80028f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e022      	b.n	800293a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 020e 	bic.w	r2, r2, #14
 8002902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 021c 	and.w	r2, r3, #28
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d005      	beq.n	8002968 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2204      	movs	r2, #4
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e029      	b.n	80029bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 020e 	bic.w	r2, r2, #14
 8002976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f003 021c 	and.w	r2, r3, #28
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
    }
  }
  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d4:	b2db      	uxtb	r3, r3
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029f6:	e154      	b.n	8002ca2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8146 	beq.w	8002c9c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d005      	beq.n	8002a28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d130      	bne.n	8002a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 0201 	and.w	r2, r3, #1
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d017      	beq.n	8002ac6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d123      	bne.n	8002b1a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ade:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a0 	beq.w	8002c9c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5c:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <HAL_GPIO_Init+0x2e0>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a57      	ldr	r2, [pc, #348]	; (8002cc0 <HAL_GPIO_Init+0x2e0>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <HAL_GPIO_Init+0x2e0>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b74:	4a53      	ldr	r2, [pc, #332]	; (8002cc4 <HAL_GPIO_Init+0x2e4>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_GPIO_Init+0x2e8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d019      	beq.n	8002bd4 <HAL_GPIO_Init+0x1f4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_GPIO_Init+0x2ec>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_GPIO_Init+0x1f0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_GPIO_Init+0x2f0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00d      	beq.n	8002bcc <HAL_GPIO_Init+0x1ec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a48      	ldr	r2, [pc, #288]	; (8002cd4 <HAL_GPIO_Init+0x2f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <HAL_GPIO_Init+0x1e8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <HAL_GPIO_Init+0x2f8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_GPIO_Init+0x1e4>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	e008      	b.n	8002bd6 <HAL_GPIO_Init+0x1f6>
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	e006      	b.n	8002bd6 <HAL_GPIO_Init+0x1f6>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e004      	b.n	8002bd6 <HAL_GPIO_Init+0x1f6>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e002      	b.n	8002bd6 <HAL_GPIO_Init+0x1f6>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_GPIO_Init+0x1f6>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	f002 0203 	and.w	r2, r2, #3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	4093      	lsls	r3, r2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002be6:	4937      	ldr	r1, [pc, #220]	; (8002cc4 <HAL_GPIO_Init+0x2e4>)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c18:	4a30      	ldr	r2, [pc, #192]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c42:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f aea3 	bne.w	80029f8 <HAL_GPIO_Init+0x18>
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e001      	b.n	8002d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d1e:	787b      	ldrb	r3, [r7, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d2a:	e003      	b.n	8002d34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	041a      	lsls	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe fdf0 	bl	800194c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f002 fae6 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	; (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d003      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x38>
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	f040 80c1 	bne.w	8003182 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10d      	bne.n	8003036 <HAL_I2C_EV_IRQHandler+0x6e>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003020:	d003      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0x62>
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003028:	d101      	bne.n	800302e <HAL_I2C_EV_IRQHandler+0x66>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_I2C_EV_IRQHandler+0x68>
 800302e:	2300      	movs	r3, #0
 8003030:	2b01      	cmp	r3, #1
 8003032:	f000 8132 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0x92>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	0a5b      	lsrs	r3, r3, #9
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 fc63 	bl	8004918 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fd6f 	bl	8003b36 <I2C_Master_SB>
 8003058:	e092      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	08db      	lsrs	r3, r3, #3
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0xb2>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	0a5b      	lsrs	r3, r3, #9
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fde4 	bl	8003c40 <I2C_Master_ADD10>
 8003078:	e082      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_I2C_EV_IRQHandler+0xd2>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	0a5b      	lsrs	r3, r3, #9
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fdfd 	bl	8003c92 <I2C_Master_ADDR>
 8003098:	e072      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03b      	beq.n	800311e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	f000 80f3 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	09db      	lsrs	r3, r3, #7
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00f      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f9e9 	bl	80034b4 <I2C_MasterTransmit_TXE>
 80030e2:	e04d      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80d6 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a5b      	lsrs	r3, r3, #9
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80cf 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	2b21      	cmp	r3, #33	; 0x21
 8003104:	d103      	bne.n	800310e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa70 	bl	80035ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310c:	e0c7      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	f040 80c4 	bne.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fade 	bl	80036d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311c:	e0bf      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	f000 80b7 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00f      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x194>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	0a9b      	lsrs	r3, r3, #10
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x194>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb53 	bl	8003800 <I2C_MasterReceive_RXNE>
 800315a:	e011      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 809a 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	0a5b      	lsrs	r3, r3, #9
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8093 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fbf2 	bl	8003962 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317e:	e08e      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003180:	e08d      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	e007      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	0a5b      	lsrs	r3, r3, #9
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031cc:	69b9      	ldr	r1, [r7, #24]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ffab 	bl	800412a <I2C_Slave_ADDR>
 80031d4:	e066      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0a5b      	lsrs	r3, r3, #9
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 ffe6 	bl	80041c0 <I2C_Slave_STOPF>
 80031f4:	e056      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	2b21      	cmp	r3, #33	; 0x21
 80031fa:	d002      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x23a>
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	2b29      	cmp	r3, #41	; 0x29
 8003200:	d125      	bne.n	800324e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	09db      	lsrs	r3, r3, #7
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00f      	beq.n	800322e <HAL_I2C_EV_IRQHandler+0x266>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	0a9b      	lsrs	r3, r3, #10
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_I2C_EV_IRQHandler+0x266>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fec3 	bl	8003fb2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800322c:	e039      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d033      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	0a5b      	lsrs	r3, r3, #9
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02d      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fef0 	bl	800402c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800324c:	e029      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00f      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x2b2>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	0a9b      	lsrs	r3, r3, #10
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fefa 	bl	800406c <I2C_SlaveReceive_RXNE>
 8003278:	e014      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	0a5b      	lsrs	r3, r3, #9
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 ff28 	bl	80040e8 <I2C_SlaveReceive_BTF>
 8003298:	e004      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08a      	sub	sp, #40	; 0x28
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	0a5b      	lsrs	r3, r3, #9
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <HAL_I2C_ER_IRQHandler+0x78>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003320:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	0a9b      	lsrs	r3, r3, #10
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03f      	beq.n	80033ae <HAL_I2C_ER_IRQHandler+0x104>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d039      	beq.n	80033ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800333a:	7efb      	ldrb	r3, [r7, #27]
 800333c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003354:	7ebb      	ldrb	r3, [r7, #26]
 8003356:	2b20      	cmp	r3, #32
 8003358:	d112      	bne.n	8003380 <HAL_I2C_ER_IRQHandler+0xd6>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <HAL_I2C_ER_IRQHandler+0xd6>
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b21      	cmp	r3, #33	; 0x21
 8003364:	d008      	beq.n	8003378 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b29      	cmp	r3, #41	; 0x29
 800336a:	d005      	beq.n	8003378 <HAL_I2C_ER_IRQHandler+0xce>
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b28      	cmp	r3, #40	; 0x28
 8003370:	d106      	bne.n	8003380 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b21      	cmp	r3, #33	; 0x21
 8003376:	d103      	bne.n	8003380 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f001 f851 	bl	8004420 <I2C_Slave_AF>
 800337e:	e016      	b.n	80033ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003388:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003392:	7efb      	ldrb	r3, [r7, #27]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d002      	beq.n	800339e <HAL_I2C_ER_IRQHandler+0xf4>
 8003398:	7efb      	ldrb	r3, [r7, #27]
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d107      	bne.n	80033ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	0adb      	lsrs	r3, r3, #11
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 f888 	bl	8004500 <I2C_ITError>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
 800344c:	4613      	mov	r3, r2
 800344e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d150      	bne.n	800357c <I2C_MasterTransmit_TXE+0xc8>
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d14d      	bne.n	800357c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d01d      	beq.n	8003522 <I2C_MasterTransmit_TXE+0x6e>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d01a      	beq.n	8003522 <I2C_MasterTransmit_TXE+0x6e>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f2:	d016      	beq.n	8003522 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003502:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2211      	movs	r2, #17
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff6c 	bl	80033f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003520:	e060      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003530:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d107      	bne.n	800356c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff81 	bl	800346c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356a:	e03b      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff3f 	bl	80033f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800357a:	e033      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b21      	cmp	r3, #33	; 0x21
 8003580:	d005      	beq.n	800358e <I2C_MasterTransmit_TXE+0xda>
 8003582:	7bbb      	ldrb	r3, [r7, #14]
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d12d      	bne.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b22      	cmp	r3, #34	; 0x22
 800358c:	d12a      	bne.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035a8:	e01c      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d103      	bne.n	80035be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f88e 	bl	80036d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80035bc:	e012      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035e2:	e7ff      	b.n	80035e4 <I2C_MasterTransmit_TXE+0x130>
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d164      	bne.n	80036d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003634:	e04c      	b.n	80036d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d01d      	beq.n	8003678 <I2C_MasterTransmit_BTF+0x8c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b20      	cmp	r3, #32
 8003640:	d01a      	beq.n	8003678 <I2C_MasterTransmit_BTF+0x8c>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003648:	d016      	beq.n	8003678 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003658:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2211      	movs	r2, #17
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fec1 	bl	80033f8 <HAL_I2C_MasterTxCpltCallback>
}
 8003676:	e02b      	b.n	80036d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003686:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d107      	bne.n	80036c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fed6 	bl	800346c <HAL_I2C_MemTxCpltCallback>
}
 80036c0:	e006      	b.n	80036d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fe94 	bl	80033f8 <HAL_I2C_MasterTxCpltCallback>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11d      	bne.n	800372c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10b      	bne.n	8003710 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800370e:	e073      	b.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	b29b      	uxth	r3, r3
 8003716:	121b      	asrs	r3, r3, #8
 8003718:	b2da      	uxtb	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
}
 800372a:	e065      	b.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10b      	bne.n	800374c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	651a      	str	r2, [r3, #80]	; 0x50
}
 800374a:	e055      	b.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	2b02      	cmp	r3, #2
 8003752:	d151      	bne.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b22      	cmp	r3, #34	; 0x22
 8003758:	d10d      	bne.n	8003776 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003768:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003774:	e040      	b.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b21      	cmp	r3, #33	; 0x21
 8003784:	d112      	bne.n	80037ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037aa:	e025      	b.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d120      	bne.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b21      	cmp	r3, #33	; 0x21
 80037ba:	d11d      	bne.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fe3a 	bl	800346c <HAL_I2C_MemTxCpltCallback>
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b22      	cmp	r3, #34	; 0x22
 8003812:	f040 80a2 	bne.w	800395a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d921      	bls.n	8003868 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b03      	cmp	r3, #3
 8003852:	f040 8082 	bne.w	800395a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003866:	e078      	b.n	800395a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	2b02      	cmp	r3, #2
 800386e:	d074      	beq.n	800395a <I2C_MasterReceive_RXNE+0x15a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d002      	beq.n	800387c <I2C_MasterReceive_RXNE+0x7c>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d16e      	bne.n	800395a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 f819 	bl	80048b4 <I2C_WaitOnSTOPRequestThroughIT>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d142      	bne.n	800390e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003896:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d10a      	bne.n	80038f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fdc4 	bl	800347e <HAL_I2C_MemRxCpltCallback>
}
 80038f6:	e030      	b.n	800395a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2212      	movs	r2, #18
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fd7f 	bl	800340a <HAL_I2C_MasterRxCpltCallback>
}
 800390c:	e025      	b.n	800395a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fd9b 	bl	8003490 <HAL_I2C_ErrorCallback>
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b04      	cmp	r3, #4
 8003978:	d11b      	bne.n	80039b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039b0:	e0bd      	b.n	8003b2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d129      	bne.n	8003a10 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00a      	beq.n	80039e8 <I2C_MasterReceive_BTF+0x86>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d007      	beq.n	80039e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a0e:	e08e      	b.n	8003b2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d176      	bne.n	8003b08 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d002      	beq.n	8003a26 <I2C_MasterReceive_BTF+0xc4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e019      	b.n	8003a6c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d002      	beq.n	8003a44 <I2C_MasterReceive_BTF+0xe2>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d108      	bne.n	8003a56 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e00a      	b.n	8003a6c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d007      	beq.n	8003a6c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ac6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d10a      	bne.n	8003af2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fcc7 	bl	800347e <HAL_I2C_MemRxCpltCallback>
}
 8003af0:	e01d      	b.n	8003b2e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2212      	movs	r2, #18
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fc82 	bl	800340a <HAL_I2C_MasterRxCpltCallback>
}
 8003b06:	e012      	b.n	8003b2e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d117      	bne.n	8003b7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b64:	e067      	b.n	8003c36 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	611a      	str	r2, [r3, #16]
}
 8003b78:	e05d      	b.n	8003c36 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b82:	d133      	bne.n	8003bec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b21      	cmp	r3, #33	; 0x21
 8003b8e:	d109      	bne.n	8003ba4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e008      	b.n	8003bb6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <I2C_Master_SB+0x92>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d032      	beq.n	8003c36 <I2C_Master_SB+0x100>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02d      	beq.n	8003c36 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be8:	605a      	str	r2, [r3, #4]
}
 8003bea:	e024      	b.n	8003c36 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10e      	bne.n	8003c12 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	11db      	asrs	r3, r3, #7
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0306 	and.w	r3, r3, #6
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f063 030f 	orn	r3, r3, #15
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]
}
 8003c10:	e011      	b.n	8003c36 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d10d      	bne.n	8003c36 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	11db      	asrs	r3, r3, #7
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f003 0306 	and.w	r3, r3, #6
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f063 030e 	orn	r3, r3, #14
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <I2C_Master_ADD10+0x26>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d108      	bne.n	8003c78 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <I2C_Master_ADD10+0x48>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c86:	605a      	str	r2, [r3, #4]
  }
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b091      	sub	sp, #68	; 0x44
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b22      	cmp	r3, #34	; 0x22
 8003cba:	f040 8169 	bne.w	8003f90 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <I2C_Master_ADDR+0x54>
 8003cc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d10b      	bne.n	8003ce6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	e160      	b.n	8003fa8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <I2C_Master_ADDR+0x98>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cf6:	d118      	bne.n	8003d2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50
 8003d28:	e13e      	b.n	8003fa8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d113      	bne.n	8003d5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e115      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 808a 	bne.w	8003e7c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6e:	d137      	bne.n	8003de0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8e:	d113      	bne.n	8003db8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	e0e7      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e0d3      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d02e      	beq.n	8003e44 <I2C_Master_ADDR+0x1b2>
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d02b      	beq.n	8003e44 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	2b12      	cmp	r3, #18
 8003df0:	d102      	bne.n	8003df8 <I2C_Master_ADDR+0x166>
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d125      	bne.n	8003e44 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00e      	beq.n	8003e1c <I2C_Master_ADDR+0x18a>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d00b      	beq.n	8003e1c <I2C_Master_ADDR+0x18a>
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d008      	beq.n	8003e1c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e007      	b.n	8003e2c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e2a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	e0a1      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e085      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d14d      	bne.n	8003f22 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d016      	beq.n	8003eba <I2C_Master_ADDR+0x228>
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d013      	beq.n	8003eba <I2C_Master_ADDR+0x228>
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d010      	beq.n	8003eba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e007      	b.n	8003eca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed8:	d117      	bne.n	8003f0a <I2C_Master_ADDR+0x278>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee0:	d00b      	beq.n	8003efa <I2C_Master_ADDR+0x268>
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d008      	beq.n	8003efa <I2C_Master_ADDR+0x268>
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d005      	beq.n	8003efa <I2C_Master_ADDR+0x268>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d002      	beq.n	8003efa <I2C_Master_ADDR+0x268>
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d107      	bne.n	8003f0a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e032      	b.n	8003f88 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f30:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f40:	d117      	bne.n	8003f72 <I2C_Master_ADDR+0x2e0>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f48:	d00b      	beq.n	8003f62 <I2C_Master_ADDR+0x2d0>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d008      	beq.n	8003f62 <I2C_Master_ADDR+0x2d0>
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d005      	beq.n	8003f62 <I2C_Master_ADDR+0x2d0>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d002      	beq.n	8003f62 <I2C_Master_ADDR+0x2d0>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d107      	bne.n	8003f72 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f8e:	e00b      	b.n	8003fa8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	e7ff      	b.n	8003fa8 <I2C_Master_ADDR+0x316>
 8003fa8:	bf00      	nop
 8003faa:	3744      	adds	r7, #68	; 0x44
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02b      	beq.n	8004024 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d114      	bne.n	8004024 <I2C_SlaveTransmit_TXE+0x72>
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b29      	cmp	r3, #41	; 0x29
 8003ffe:	d111      	bne.n	8004024 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2221      	movs	r2, #33	; 0x21
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2228      	movs	r2, #40	; 0x28
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff f9fc 	bl	800341c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02c      	beq.n	80040e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d114      	bne.n	80040e0 <I2C_SlaveReceive_RXNE+0x74>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ba:	d111      	bne.n	80040e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2222      	movs	r2, #34	; 0x22
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2228      	movs	r2, #40	; 0x28
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff f9a7 	bl	800342e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004144:	2b28      	cmp	r3, #40	; 0x28
 8004146:	d127      	bne.n	8004198 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004156:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	09db      	lsrs	r3, r3, #7
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	81bb      	strh	r3, [r7, #12]
 800417a:	e002      	b.n	8004182 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800418a:	89ba      	ldrh	r2, [r7, #12]
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff f955 	bl	8003440 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004196:	e00e      	b.n	80041b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d172      	bne.n	8004304 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b22      	cmp	r3, #34	; 0x22
 8004222:	d002      	beq.n	800422a <I2C_Slave_STOPF+0x6a>
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b2a      	cmp	r3, #42	; 0x2a
 8004228:	d135      	bne.n	8004296 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fbaf 	bl	80029c6 <HAL_DMA_GetState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d049      	beq.n	8004302 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	4a69      	ldr	r2, [pc, #420]	; (8004418 <I2C_Slave_STOPF+0x258>)
 8004274:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fb62 	bl	8002944 <HAL_DMA_Abort_IT>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03d      	beq.n	8004302 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004290:	4610      	mov	r0, r2
 8004292:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004294:	e035      	b.n	8004302 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fb79 	bl	80029c6 <HAL_DMA_GetState>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d014      	beq.n	8004304 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	4a4e      	ldr	r2, [pc, #312]	; (8004418 <I2C_Slave_STOPF+0x258>)
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe fb2c 	bl	8002944 <HAL_DMA_Abort_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fc:	4610      	mov	r0, r2
 80042fe:	4798      	blx	r3
 8004300:	e000      	b.n	8004304 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004302:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03e      	beq.n	800438c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d112      	bne.n	8004342 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d112      	bne.n	8004376 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0204 	orr.w	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8b3 	bl	8004500 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800439a:	e039      	b.n	8004410 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b2a      	cmp	r3, #42	; 0x2a
 80043a0:	d109      	bne.n	80043b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2228      	movs	r2, #40	; 0x28
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f83c 	bl	800342e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b28      	cmp	r3, #40	; 0x28
 80043c0:	d111      	bne.n	80043e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <I2C_Slave_STOPF+0x25c>)
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff f83b 	bl	800345a <HAL_I2C_ListenCpltCallback>
}
 80043e4:	e014      	b.n	8004410 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	d002      	beq.n	80043f4 <I2C_Slave_STOPF+0x234>
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b22      	cmp	r3, #34	; 0x22
 80043f2:	d10d      	bne.n	8004410 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff f80f 	bl	800342e <HAL_I2C_SlaveRxCpltCallback>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08004765 	.word	0x08004765
 800441c:	ffff0000 	.word	0xffff0000

08004420 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d002      	beq.n	8004442 <I2C_Slave_AF+0x22>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b20      	cmp	r3, #32
 8004440:	d129      	bne.n	8004496 <I2C_Slave_AF+0x76>
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b28      	cmp	r3, #40	; 0x28
 8004446:	d126      	bne.n	8004496 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <I2C_Slave_AF+0xdc>)
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800445c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004466:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe ffe3 	bl	800345a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004494:	e02e      	b.n	80044f4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b21      	cmp	r3, #33	; 0x21
 800449a:	d126      	bne.n	80044ea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <I2C_Slave_AF+0xdc>)
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe ff9a 	bl	800341c <HAL_I2C_SlaveTxCpltCallback>
}
 80044e8:	e004      	b.n	80044f4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f2:	615a      	str	r2, [r3, #20]
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	ffff0000 	.word	0xffff0000

08004500 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004516:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004518:	7bbb      	ldrb	r3, [r7, #14]
 800451a:	2b10      	cmp	r3, #16
 800451c:	d002      	beq.n	8004524 <I2C_ITError+0x24>
 800451e:	7bbb      	ldrb	r3, [r7, #14]
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d10a      	bne.n	800453a <I2C_ITError+0x3a>
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b22      	cmp	r3, #34	; 0x22
 8004528:	d107      	bne.n	800453a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004540:	2b28      	cmp	r3, #40	; 0x28
 8004542:	d107      	bne.n	8004554 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2228      	movs	r2, #40	; 0x28
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004552:	e015      	b.n	8004580 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d00a      	beq.n	800457a <I2C_ITError+0x7a>
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b60      	cmp	r3, #96	; 0x60
 8004568:	d007      	beq.n	800457a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	d162      	bne.n	8004656 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d020      	beq.n	80045f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <I2C_ITError+0x25c>)
 80045b4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe f9c2 	bl	8002944 <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8089 	beq.w	80046da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ea:	4610      	mov	r0, r2
 80045ec:	4798      	blx	r3
 80045ee:	e074      	b.n	80046da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	4a59      	ldr	r2, [pc, #356]	; (800475c <I2C_ITError+0x25c>)
 80045f6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f9a1 	bl	8002944 <HAL_DMA_Abort_IT>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d068      	beq.n	80046da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d10b      	bne.n	800462e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
 8004654:	e041      	b.n	80046da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b60      	cmp	r3, #96	; 0x60
 8004660:	d125      	bne.n	80046ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d10b      	bne.n	8004696 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe fefb 	bl	80034a2 <HAL_I2C_AbortCpltCallback>
 80046ac:	e015      	b.n	80046da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d10b      	bne.n	80046d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fe fedb 	bl	8003490 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d113      	bne.n	8004754 <I2C_ITError+0x254>
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b28      	cmp	r3, #40	; 0x28
 8004730:	d110      	bne.n	8004754 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <I2C_ITError+0x260>)
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe fe83 	bl	800345a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	08004765 	.word	0x08004765
 8004760:	ffff0000 	.word	0xffff0000

08004764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800477e:	4b4b      	ldr	r3, [pc, #300]	; (80048ac <I2C_DMAAbort+0x148>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	4a4a      	ldr	r2, [pc, #296]	; (80048b0 <I2C_DMAAbort+0x14c>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0a1a      	lsrs	r2, r3, #8
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047aa:	e00a      	b.n	80047c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d0ea      	beq.n	8004798 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	2200      	movs	r2, #0
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2200      	movs	r2, #0
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	2200      	movs	r2, #0
 8004806:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	2200      	movs	r2, #0
 8004816:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b60      	cmp	r3, #96	; 0x60
 8004832:	d10e      	bne.n	8004852 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7fe fe29 	bl	80034a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004850:	e027      	b.n	80048a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004858:	2b28      	cmp	r3, #40	; 0x28
 800485a:	d117      	bne.n	800488c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2228      	movs	r2, #40	; 0x28
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800488a:	e007      	b.n	800489c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7fe fdf7 	bl	8003490 <HAL_I2C_ErrorCallback>
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000006c 	.word	0x2000006c
 80048b0:	14f8b589 	.word	0x14f8b589

080048b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	0a1a      	lsrs	r2, r3, #8
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b01      	subs	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e008      	b.n	8004904 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004900:	d0e9      	beq.n	80048d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	2000006c 	.word	0x2000006c
 8004914:	14f8b589 	.word	0x14f8b589

08004918 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004928:	d103      	bne.n	8004932 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004930:	e007      	b.n	8004942 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800493a:	d102      	bne.n	8004942 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2208      	movs	r2, #8
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e31d      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b94      	ldr	r3, [pc, #592]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d07b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d006      	beq.n	8004992 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d10f      	bne.n	80049aa <HAL_RCC_OscConfig+0x5e>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d10b      	bne.n	80049aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	4b87      	ldr	r3, [pc, #540]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d06a      	beq.n	8004a74 <HAL_RCC_OscConfig+0x128>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d166      	bne.n	8004a74 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e2f7      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x74>
 80049b2:	4b7f      	ldr	r3, [pc, #508]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7e      	ldr	r2, [pc, #504]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e02d      	b.n	8004a1c <HAL_RCC_OscConfig+0xd0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10c      	bne.n	80049e2 <HAL_RCC_OscConfig+0x96>
 80049c8:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a78      	ldr	r2, [pc, #480]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e01c      	b.n	8004a1c <HAL_RCC_OscConfig+0xd0>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0xb8>
 80049ea:	4b71      	ldr	r3, [pc, #452]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a70      	ldr	r2, [pc, #448]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b6e      	ldr	r3, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6d      	ldr	r2, [pc, #436]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xd0>
 8004a04:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a69      	ldr	r2, [pc, #420]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a66      	ldr	r2, [pc, #408]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd f9bc 	bl	8001da0 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fd f9b8 	bl	8001da0 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e2ad      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe0>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd f9a8 	bl	8001da0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd f9a4 	bl	8001da0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e299      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a66:	4b52      	ldr	r3, [pc, #328]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x108>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d05a      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d119      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x176>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a94:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_OscConfig+0x160>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e276      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	493d      	ldr	r1, [pc, #244]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac0:	e03a      	b.n	8004b38 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aca:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fd f966 	bl	8001da0 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd f962 	bl	8001da0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e257      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	492a      	ldr	r1, [pc, #168]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
 8004b0a:	e015      	b.n	8004b38 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0c:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd f945 	bl	8001da0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd f941 	bl	8001da0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e236      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b2c:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80b8 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d170      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_OscConfig+0x218>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e21a      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d921      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fc23 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e208      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	4901      	ldr	r1, [pc, #4]	; (8004bb0 <HAL_RCC_OscConfig+0x264>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
 8004bae:	e020      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2a6>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb8:	4ba4      	ldr	r3, [pc, #656]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	49a1      	ldr	r1, [pc, #644]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bca:	4ba0      	ldr	r3, [pc, #640]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	499c      	ldr	r1, [pc, #624]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fbee 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e1d3      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	0b5b      	lsrs	r3, r3, #13
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c02:	4a92      	ldr	r2, [pc, #584]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c04:	6892      	ldr	r2, [r2, #8]
 8004c06:	0912      	lsrs	r2, r2, #4
 8004c08:	f002 020f 	and.w	r2, r2, #15
 8004c0c:	4990      	ldr	r1, [pc, #576]	; (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c0e:	5c8a      	ldrb	r2, [r1, r2]
 8004c10:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c12:	4a90      	ldr	r2, [pc, #576]	; (8004e54 <HAL_RCC_OscConfig+0x508>)
 8004c14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <HAL_RCC_OscConfig+0x50c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd f874 	bl	8001d08 <HAL_InitTick>
 8004c20:	4603      	mov	r3, r0
 8004c22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d045      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	e1b5      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d029      	beq.n	8004c8a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c36:	4b89      	ldr	r3, [pc, #548]	; (8004e5c <HAL_RCC_OscConfig+0x510>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f8b0 	bl	8001da0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c44:	f7fd f8ac 	bl	8001da0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1a1      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c56:	4b7d      	ldr	r3, [pc, #500]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c62:	4b7a      	ldr	r3, [pc, #488]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4977      	ldr	r1, [pc, #476]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c74:	4b75      	ldr	r3, [pc, #468]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	4972      	ldr	r1, [pc, #456]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
 8004c88:	e015      	b.n	8004cb6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c8a:	4b74      	ldr	r3, [pc, #464]	; (8004e5c <HAL_RCC_OscConfig+0x510>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fd f886 	bl	8001da0 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c98:	f7fd f882 	bl	8001da0 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e177      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004caa:	4b68      	ldr	r3, [pc, #416]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d030      	beq.n	8004d24 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cca:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <HAL_RCC_OscConfig+0x514>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd0:	f7fd f866 	bl	8001da0 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd8:	f7fd f862 	bl	8001da0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e157      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cea:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x38c>
 8004cf6:	e015      	b.n	8004d24 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_OscConfig+0x514>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd f84f 	bl	8001da0 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d06:	f7fd f84b 	bl	8001da0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e140      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d18:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80b5 	beq.w	8004e9c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	4a41      	ldr	r2, [pc, #260]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6253      	str	r3, [r2, #36]	; 0x24
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_OscConfig+0x518>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d118      	bne.n	8004d9c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_RCC_OscConfig+0x518>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3d      	ldr	r2, [pc, #244]	; (8004e64 <HAL_RCC_OscConfig+0x518>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fd f813 	bl	8001da0 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fd f80f 	bl	8001da0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b64      	cmp	r3, #100	; 0x64
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e104      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_OscConfig+0x518>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x466>
 8004da4:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6353      	str	r3, [r2, #52]	; 0x34
 8004db0:	e02d      	b.n	8004e0e <HAL_RCC_OscConfig+0x4c2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x488>
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6353      	str	r3, [r2, #52]	; 0x34
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	4a20      	ldr	r2, [pc, #128]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd0:	6353      	str	r3, [r2, #52]	; 0x34
 8004dd2:	e01c      	b.n	8004e0e <HAL_RCC_OscConfig+0x4c2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4aa>
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de6:	6353      	str	r3, [r2, #52]	; 0x34
 8004de8:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6353      	str	r3, [r2, #52]	; 0x34
 8004df4:	e00b      	b.n	8004e0e <HAL_RCC_OscConfig+0x4c2>
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e00:	6353      	str	r3, [r2, #52]	; 0x34
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e0c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d015      	beq.n	8004e42 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fc ffc3 	bl	8001da0 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fc ffbf 	bl	8001da0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0b2      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_OscConfig+0x500>)
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ee      	beq.n	8004e1e <HAL_RCC_OscConfig+0x4d2>
 8004e40:	e023      	b.n	8004e8a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e42:	f7fc ffad 	bl	8001da0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e48:	e019      	b.n	8004e7e <HAL_RCC_OscConfig+0x532>
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800ab24 	.word	0x0800ab24
 8004e54:	2000006c 	.word	0x2000006c
 8004e58:	20000070 	.word	0x20000070
 8004e5c:	42470020 	.word	0x42470020
 8004e60:	42470680 	.word	0x42470680
 8004e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fc ff9a 	bl	8001da0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e08d      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e7e:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ee      	bne.n	8004e68 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	4a43      	ldr	r2, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d079      	beq.n	8004f98 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d056      	beq.n	8004f58 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d13b      	bne.n	8004f2a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	; (8004fa8 <HAL_RCC_OscConfig+0x65c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fc ff72 	bl	8001da0 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fc ff6e 	bl	8001da0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e063      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ede:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4319      	orrs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	492b      	ldr	r1, [pc, #172]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <HAL_RCC_OscConfig+0x65c>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fc ff4d 	bl	8001da0 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fc ff49 	bl	8001da0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e03e      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x5be>
 8004f28:	e036      	b.n	8004f98 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <HAL_RCC_OscConfig+0x65c>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fc ff36 	bl	8001da0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fc ff32 	bl	8001da0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e027      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5ec>
 8004f56:	e01f      	b.n	8004f98 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e01a      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <HAL_RCC_OscConfig+0x658>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d106      	bne.n	8004f94 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470060 	.word	0x42470060

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e11a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d919      	bls.n	8005002 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x34>
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a89      	ldr	r2, [pc, #548]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b87      	ldr	r3, [pc, #540]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 0201 	bic.w	r2, r3, #1
 8004fe8:	4985      	ldr	r1, [pc, #532]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff0:	4b83      	ldr	r3, [pc, #524]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0f9      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500e:	4b7d      	ldr	r3, [pc, #500]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	497a      	ldr	r1, [pc, #488]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 808e 	beq.w	800514a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005036:	4b73      	ldr	r3, [pc, #460]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d121      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0d7      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d107      	bne.n	800505e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504e:	4b6d      	ldr	r3, [pc, #436]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d115      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0cb      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d107      	bne.n	8005076 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005066:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0bf      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005076:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0b7      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005086:	4b5f      	ldr	r3, [pc, #380]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	495c      	ldr	r1, [pc, #368]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005094:	4313      	orrs	r3, r2
 8005096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005098:	f7fc fe82 	bl	8001da0 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d112      	bne.n	80050cc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a6:	e00a      	b.n	80050be <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a8:	f7fc fe7a 	bl	8001da0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e09b      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050be:	4b51      	ldr	r3, [pc, #324]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d1ee      	bne.n	80050a8 <HAL_RCC_ClockConfig+0xfc>
 80050ca:	e03e      	b.n	800514a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d112      	bne.n	80050fa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d6:	f7fc fe63 	bl	8001da0 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e084      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d1ee      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x12a>
 80050f8:	e027      	b.n	800514a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d11d      	bne.n	800513e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fc fe4c 	bl	8001da0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e06d      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800511a:	4b3a      	ldr	r3, [pc, #232]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b04      	cmp	r3, #4
 8005124:	d1ee      	bne.n	8005104 <HAL_RCC_ClockConfig+0x158>
 8005126:	e010      	b.n	800514a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005128:	f7fc fe3a 	bl	8001da0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e05b      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800513e:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ee      	bne.n	8005128 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d219      	bcs.n	800518c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <HAL_RCC_ClockConfig+0x1be>
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a27      	ldr	r2, [pc, #156]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8005164:	f043 0304 	orr.w	r3, r3, #4
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	4923      	ldr	r1, [pc, #140]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_RCC_ClockConfig+0x254>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e034      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4917      	ldr	r1, [pc, #92]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b6:	4b13      	ldr	r3, [pc, #76]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	490f      	ldr	r1, [pc, #60]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ca:	f000 f823 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051ce:	4602      	mov	r2, r0
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <HAL_RCC_ClockConfig+0x258>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	490b      	ldr	r1, [pc, #44]	; (8005208 <HAL_RCC_ClockConfig+0x25c>)
 80051dc:	5ccb      	ldrb	r3, [r1, r3]
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x260>)
 80051e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051e6:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc fd8c 	bl	8001d08 <HAL_InitTick>
 80051f0:	4603      	mov	r3, r0
 80051f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80051f4:	7afb      	ldrb	r3, [r7, #11]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023c00 	.word	0x40023c00
 8005204:	40023800 	.word	0x40023800
 8005208:	0800ab24 	.word	0x0800ab24
 800520c:	2000006c 	.word	0x2000006c
 8005210:	20000070 	.word	0x20000070

08005214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800521a:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <HAL_RCC_GetSysClockFreq+0x13c>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d00c      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x30>
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d87c      	bhi.n	8005328 <HAL_RCC_GetSysClockFreq+0x114>
 800522e:	2b04      	cmp	r3, #4
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x24>
 8005232:	2b08      	cmp	r3, #8
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x2a>
 8005236:	e077      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b46      	ldr	r3, [pc, #280]	; (8005354 <HAL_RCC_GetSysClockFreq+0x140>)
 800523a:	613b      	str	r3, [r7, #16]
      break;
 800523c:	e082      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800523e:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCC_GetSysClockFreq+0x144>)
 8005240:	613b      	str	r3, [r7, #16]
      break;
 8005242:	e07f      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	0c9b      	lsrs	r3, r3, #18
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a43      	ldr	r2, [pc, #268]	; (800535c <HAL_RCC_GetSysClockFreq+0x148>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0d9b      	lsrs	r3, r3, #22
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	3301      	adds	r3, #1
 800525c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800525e:	4b3c      	ldr	r3, [pc, #240]	; (8005350 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	461a      	mov	r2, r3
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	4939      	ldr	r1, [pc, #228]	; (8005358 <HAL_RCC_GetSysClockFreq+0x144>)
 8005274:	fb01 f003 	mul.w	r0, r1, r3
 8005278:	2100      	movs	r1, #0
 800527a:	fb01 f102 	mul.w	r1, r1, r2
 800527e:	1844      	adds	r4, r0, r1
 8005280:	4935      	ldr	r1, [pc, #212]	; (8005358 <HAL_RCC_GetSysClockFreq+0x144>)
 8005282:	fba2 0101 	umull	r0, r1, r2, r1
 8005286:	1863      	adds	r3, r4, r1
 8005288:	4619      	mov	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	461a      	mov	r2, r3
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	f7fa ff73 	bl	800017c <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4613      	mov	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e040      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	461c      	mov	r4, r3
 80052a4:	f04f 0500 	mov.w	r5, #0
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	014b      	lsls	r3, r1, #5
 80052b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052ba:	0142      	lsls	r2, r0, #5
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	1b00      	subs	r0, r0, r4
 80052c2:	eb61 0105 	sbc.w	r1, r1, r5
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	018b      	lsls	r3, r1, #6
 80052d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052d4:	0182      	lsls	r2, r0, #6
 80052d6:	1a12      	subs	r2, r2, r0
 80052d8:	eb63 0301 	sbc.w	r3, r3, r1
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	00d9      	lsls	r1, r3, #3
 80052e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ea:	00d0      	lsls	r0, r2, #3
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	1912      	adds	r2, r2, r4
 80052f2:	eb45 0303 	adc.w	r3, r5, r3
 80052f6:	f04f 0000 	mov.w	r0, #0
 80052fa:	f04f 0100 	mov.w	r1, #0
 80052fe:	0299      	lsls	r1, r3, #10
 8005300:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005304:	0290      	lsls	r0, r2, #10
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	461a      	mov	r2, r3
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f7fa ff31 	bl	800017c <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4613      	mov	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	613b      	str	r3, [r7, #16]
      break;
 8005326:	e00d      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_RCC_GetSysClockFreq+0x13c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0b5b      	lsrs	r3, r3, #13
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	613b      	str	r3, [r7, #16]
      break;
 8005342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005344:	693b      	ldr	r3, [r7, #16]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bdb0      	pop	{r4, r5, r7, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	00f42400 	.word	0x00f42400
 8005358:	01312d00 	.word	0x01312d00
 800535c:	0800ab18 	.word	0x0800ab18

08005360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b02      	ldr	r3, [pc, #8]	; (8005370 <HAL_RCC_GetHCLKFreq+0x10>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	2000006c 	.word	0x2000006c

08005374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005378:	f7ff fff2 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800
 8005398:	0800ab34 	.word	0x0800ab34

0800539c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a0:	f7ff ffde 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0adb      	lsrs	r3, r3, #11
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4903      	ldr	r1, [pc, #12]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	0800ab34 	.word	0x0800ab34

080053c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80053d0:	4b29      	ldr	r3, [pc, #164]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d12c      	bne.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053dc:	4b26      	ldr	r3, [pc, #152]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053e8:	4b24      	ldr	r3, [pc, #144]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e016      	b.n	8005422 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6253      	str	r3, [r2, #36]	; 0x24
 8005400:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005414:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005416:	4b18      	ldr	r3, [pc, #96]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800541c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005420:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005428:	d105      	bne.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005430:	d101      	bne.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005432:	2301      	movs	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d105      	bne.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005442:	f043 0304 	orr.w	r3, r3, #4
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 0201 	bic.w	r2, r3, #1
 8005450:	490b      	ldr	r1, [pc, #44]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000
 8005480:	40023c00 	.word	0x40023c00

08005484 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80ed 	beq.w	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10d      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	4b75      	ldr	r3, [pc, #468]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	4a74      	ldr	r2, [pc, #464]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6253      	str	r3, [r2, #36]	; 0x24
 80054c2:	4b72      	ldr	r3, [pc, #456]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	4b6f      	ldr	r3, [pc, #444]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d118      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a6b      	ldr	r2, [pc, #428]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ea:	f7fc fc59 	bl	8001da0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	e008      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f2:	f7fc fc55 	bl	8001da0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b64      	cmp	r3, #100	; 0x64
 80054fe:	d901      	bls.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e0be      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005510:	4b5e      	ldr	r3, [pc, #376]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005518:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	429a      	cmp	r2, r3
 8005526:	d106      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	429a      	cmp	r2, r3
 8005534:	d00f      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800553e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005542:	d108      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005544:	4b51      	ldr	r3, [pc, #324]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005550:	d101      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e095      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005556:	4b4d      	ldr	r3, [pc, #308]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800555e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d041      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d005      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	429a      	cmp	r2, r3
 800558c:	d02d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d027      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800559a:	4b3c      	ldr	r3, [pc, #240]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055a2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055a4:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055aa:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80055b0:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d014      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c0:	f7fc fbee 	bl	8001da0 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c6:	e00a      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c8:	f7fc fbea 	bl	8001da0 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e051      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055de:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0ee      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005614:	491d      	ldr	r1, [pc, #116]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005626:	4919      	ldr	r1, [pc, #100]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005628:	4313      	orrs	r3, r2
 800562a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005644:	d10a      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005656:	490d      	ldr	r1, [pc, #52]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800565e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005668:	4908      	ldr	r1, [pc, #32]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800566a:	4313      	orrs	r3, r2
 800566c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800567a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40023800 	.word	0x40023800
 8005690:	40007000 	.word	0x40007000
 8005694:	424706dc 	.word	0x424706dc

08005698 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e07c      	b.n	80057a4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7f5b      	ldrb	r3, [r3, #29]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc f99a 	bl	80019f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	22ca      	movs	r2, #202	; 0xca
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2253      	movs	r2, #83	; 0x53
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fb55 	bl	8005d86 <RTC_EnterInitMode>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e057      	b.n	80057a4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005706:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68d2      	ldr	r2, [r2, #12]
 800572e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6919      	ldr	r1, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	041a      	lsls	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005752:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 faf0 	bl	8005d3a <HAL_RTC_WaitForSynchro>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2204      	movs	r2, #4
 800576c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e018      	b.n	80057a4 <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	22ff      	movs	r2, #255	; 0xff
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	7f1b      	ldrb	r3, [r3, #28]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_RTC_SetTime+0x18>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0a3      	b.n	800590c <HAL_RTC_SetTime+0x160>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2202      	movs	r2, #2
 80057ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d126      	bne.n	8005824 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 faf3 	bl	8005dda <RTC_ByteToBcd2>
 80057f4:	4603      	mov	r3, r0
 80057f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 faec 	bl	8005dda <RTC_ByteToBcd2>
 8005802:	4603      	mov	r3, r0
 8005804:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005806:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	789b      	ldrb	r3, [r3, #2]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fae4 	bl	8005dda <RTC_ByteToBcd2>
 8005812:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005814:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e018      	b.n	8005856 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005844:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800584a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	78db      	ldrb	r3, [r3, #3]
 8005850:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	22ca      	movs	r2, #202	; 0xca
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2253      	movs	r2, #83	; 0x53
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa8d 	bl	8005d86 <RTC_EnterInitMode>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2204      	movs	r2, #4
 800587e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e040      	b.n	800590c <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005894:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005898:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d0:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fa31 	bl	8005d3a <HAL_RTC_WaitForSynchro>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	22ff      	movs	r2, #255	; 0xff
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2204      	movs	r2, #4
 80058ea:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e00a      	b.n	800590c <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800590a:	2300      	movs	r3, #0
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd90      	pop	{r4, r7, pc}

08005914 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	7f1b      	ldrb	r3, [r3, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_RTC_SetDate+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e08d      	b.n	8005a48 <HAL_RTC_SetDate+0x134>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10e      	bne.n	800595c <HAL_RTC_SetDate+0x48>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	f023 0310 	bic.w	r3, r3, #16
 8005952:	b2db      	uxtb	r3, r3
 8005954:	330a      	adds	r3, #10
 8005956:	b2da      	uxtb	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11c      	bne.n	800599c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa37 	bl	8005dda <RTC_ByteToBcd2>
 800596c:	4603      	mov	r3, r0
 800596e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa30 	bl	8005dda <RTC_ByteToBcd2>
 800597a:	4603      	mov	r3, r0
 800597c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800597e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	789b      	ldrb	r3, [r3, #2]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fa28 	bl	8005dda <RTC_ByteToBcd2>
 800598a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800598c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e00e      	b.n	80059ba <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	78db      	ldrb	r3, [r3, #3]
 80059a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80059ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	22ca      	movs	r2, #202	; 0xca
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2253      	movs	r2, #83	; 0x53
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9db 	bl	8005d86 <RTC_EnterInitMode>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	22ff      	movs	r2, #255	; 0xff
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2204      	movs	r2, #4
 80059e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e02c      	b.n	8005a48 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a0c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f993 	bl	8005d3a <HAL_RTC_WaitForSynchro>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	22ff      	movs	r2, #255	; 0xff
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2204      	movs	r2, #4
 8005a26:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e00a      	b.n	8005a48 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005a46:	2300      	movs	r3, #0
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd90      	pop	{r4, r7, pc}

08005a50 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	7f1b      	ldrb	r3, [r3, #28]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_RTC_SetAlarm_IT+0x20>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e10f      	b.n	8005c90 <HAL_RTC_SetAlarm_IT+0x240>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d136      	bne.n	8005af0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f99d 	bl	8005dda <RTC_ByteToBcd2>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f996 	bl	8005dda <RTC_ByteToBcd2>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ab2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	789b      	ldrb	r3, [r3, #2]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f98e 	bl	8005dda <RTC_ByteToBcd2>
 8005abe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ac0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	78db      	ldrb	r3, [r3, #3]
 8005ac8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005aca:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	7d1b      	ldrb	r3, [r3, #20]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f981 	bl	8005dda <RTC_ByteToBcd2>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005adc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ae4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e022      	b.n	8005b36 <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b10:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	7d1b      	ldrb	r3, [r3, #20]
 8005b24:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	22ca      	movs	r2, #202	; 0xca
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2253      	movs	r2, #83	; 0x53
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d144      	bne.n	8005bda <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b70:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b72:	f7fc f915 	bl	8001da0 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b78:	e013      	b.n	8005ba2 <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b7a:	f7fc f911 	bl	8001da0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b88:	d90b      	bls.n	8005ba2 <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2203      	movs	r2, #3
 8005b96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e076      	b.n	8005c90 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0e4      	beq.n	8005b7a <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	e043      	b.n	8005c62 <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005be8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005bfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005bfc:	f7fc f8d0 	bl	8001da0 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c02:	e013      	b.n	8005c2c <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c04:	f7fc f8cc 	bl	8001da0 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c12:	d90b      	bls.n	8005c2c <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	22ff      	movs	r2, #255	; 0xff
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e031      	b.n	8005c90 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0e4      	beq.n	8005c04 <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6c:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c78:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	40010400 	.word	0x40010400

08005c9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f831 	bl	8005d28 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005cd6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d012      	beq.n	8005d0c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f88f 	bl	8005e18 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d0a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	775a      	strb	r2, [r3, #29]
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40010400 	.word	0x40010400

08005d28 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d50:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d52:	f7fc f825 	bl	8001da0 <HAL_GetTick>
 8005d56:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d58:	e009      	b.n	8005d6e <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d5a:	f7fc f821 	bl	8001da0 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d68:	d901      	bls.n	8005d6e <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e007      	b.n	8005d7e <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ee      	beq.n	8005d5a <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d119      	bne.n	8005dd0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005da6:	f7fb fffb 	bl	8001da0 <HAL_GetTick>
 8005daa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dac:	e009      	b.n	8005dc2 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005dae:	f7fb fff7 	bl	8001da0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dbc:	d901      	bls.n	8005dc2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e007      	b.n	8005dd2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ee      	beq.n	8005dae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	4603      	mov	r3, r0
 8005de2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005dec:	e005      	b.n	8005dfa <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3b0a      	subs	r3, #10
 8005df8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d8f6      	bhi.n	8005dee <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	7afb      	ldrb	r3, [r7, #11]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b2db      	uxtb	r3, r3
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr

08005e18 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e06e      	b.n	8005f1a <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e4c:	d009      	beq.n	8005e62 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	61da      	str	r2, [r3, #28]
 8005e54:	e005      	b.n	8005e62 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fb fdd5 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	ea42 0103 	orr.w	r1, r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	0c1a      	lsrs	r2, r3, #16
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f002 0204 	and.w	r2, r2, #4
 8005f08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b088      	sub	sp, #32
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_Transmit+0x22>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e126      	b.n	8006192 <HAL_SPI_Transmit+0x270>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4c:	f7fb ff28 	bl	8001da0 <HAL_GetTick>
 8005f50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
 8005f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f66:	e10b      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Transmit+0x52>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f78:	e102      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d14b      	bne.n	80060a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0xf6>
 8006012:	8afb      	ldrh	r3, [r7, #22]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d13e      	bne.n	8006096 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800603c:	e02b      	b.n	8006096 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d112      	bne.n	8006072 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006070:	e011      	b.n	8006096 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006072:	f7fb fe95 	bl	8001da0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d803      	bhi.n	800608a <HAL_SPI_Transmit+0x168>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d102      	bne.n	8006090 <HAL_SPI_Transmit+0x16e>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006094:	e074      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ce      	bne.n	800603e <HAL_SPI_Transmit+0x11c>
 80060a0:	e04c      	b.n	800613c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Transmit+0x18e>
 80060aa:	8afb      	ldrh	r3, [r7, #22]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d140      	bne.n	8006132 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060d6:	e02c      	b.n	8006132 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d113      	bne.n	800610e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	86da      	strh	r2, [r3, #54]	; 0x36
 800610c:	e011      	b.n	8006132 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610e:	f7fb fe47 	bl	8001da0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d803      	bhi.n	8006126 <HAL_SPI_Transmit+0x204>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d102      	bne.n	800612c <HAL_SPI_Transmit+0x20a>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006130:	e026      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1cd      	bne.n	80060d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fb59 	bl	80067f8 <SPI_EndRxTxTransaction>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e000      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

error:
 800617e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006190:	7ffb      	ldrb	r3, [r7, #31]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b08c      	sub	sp, #48	; 0x30
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061a8:	2301      	movs	r3, #1
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_SPI_TransmitReceive+0x26>
 80061bc:	2302      	movs	r3, #2
 80061be:	e18a      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x33c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061c8:	f7fb fdea 	bl	8001da0 <HAL_GetTick>
 80061cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d00f      	beq.n	800620a <HAL_SPI_TransmitReceive+0x70>
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f0:	d107      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x68>
 80061fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d003      	beq.n	800620a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006202:	2302      	movs	r3, #2
 8006204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006208:	e15b      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_SPI_TransmitReceive+0x82>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_SPI_TransmitReceive+0x82>
 8006216:	887b      	ldrh	r3, [r7, #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006222:	e14e      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b04      	cmp	r3, #4
 800622e:	d003      	beq.n	8006238 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2205      	movs	r2, #5
 8006234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	887a      	ldrh	r2, [r7, #2]
 800624e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	887a      	ldrh	r2, [r7, #2]
 8006260:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d007      	beq.n	800628c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006294:	d178      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x10a>
 800629e:	8b7b      	ldrh	r3, [r7, #26]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d166      	bne.n	8006372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c8:	e053      	b.n	8006372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d11b      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x176>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d016      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x176>
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d113      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	881a      	ldrh	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	1c9a      	adds	r2, r3, #2
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d119      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x1b8>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d014      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	b292      	uxth	r2, r2
 8006334:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	1c9a      	adds	r2, r3, #2
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800634e:	2301      	movs	r3, #1
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006352:	f7fb fd25 	bl	8001da0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635e:	429a      	cmp	r2, r3
 8006360:	d807      	bhi.n	8006372 <HAL_SPI_TransmitReceive+0x1d8>
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d003      	beq.n	8006372 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006370:	e0a7      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1a6      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x130>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1a1      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x130>
 8006386:	e07c      	b.n	8006482 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x1fc>
 8006390:	8b7b      	ldrh	r3, [r7, #26]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d16b      	bne.n	800646e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063bc:	e057      	b.n	800646e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d11c      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x26c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d017      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x26c>
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d114      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d119      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x2ae>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d014      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006448:	f7fb fcaa 	bl	8001da0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	429a      	cmp	r2, r3
 8006456:	d803      	bhi.n	8006460 <HAL_SPI_TransmitReceive+0x2c6>
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d102      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x2cc>
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800646c:	e029      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1a2      	bne.n	80063be <HAL_SPI_TransmitReceive+0x224>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d19d      	bne.n	80063be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f9b6 	bl	80067f8 <SPI_EndRxTxTransaction>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800649e:	e010      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	e000      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3730      	adds	r7, #48	; 0x30
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	099b      	lsrs	r3, r3, #6
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
    return;
 8006522:	e0be      	b.n	80066a2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_SPI_IRQHandler+0x66>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
    return;
 8006544:	e0ad      	b.n	80066a2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_SPI_IRQHandler+0x80>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	099b      	lsrs	r3, r3, #6
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a1 	beq.w	80066a2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 809a 	beq.w	80066a2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	099b      	lsrs	r3, r3, #6
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d023      	beq.n	80065c2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b03      	cmp	r3, #3
 8006584:	d011      	beq.n	80065aa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f043 0204 	orr.w	r2, r3, #4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	e00b      	b.n	80065c2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
        return;
 80065c0:	e06f      	b.n	80066a2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d014      	beq.n	80065f8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d04f      	beq.n	80066a0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800660e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_SPI_IRQHandler+0x14c>
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d034      	beq.n	8006696 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0203 	bic.w	r2, r2, #3
 800663a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006648:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_SPI_IRQHandler+0x1c8>)
 800664a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	4618      	mov	r0, r3
 8006652:	f7fc f977 	bl	8002944 <HAL_DMA_Abort_IT>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	2b00      	cmp	r3, #0
 800666e:	d016      	beq.n	800669e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <HAL_SPI_IRQHandler+0x1c8>)
 8006676:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667c:	4618      	mov	r0, r3
 800667e:	f7fc f961 	bl	8002944 <HAL_DMA_Abort_IT>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006694:	e003      	b.n	800669e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f808 	bl	80066ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800669c:	e000      	b.n	80066a0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800669e:	bf00      	nop
    return;
 80066a0:	bf00      	nop
  }
}
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	080066bf 	.word	0x080066bf

080066ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff ffe7 	bl	80066ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066f8:	f7fb fb52 	bl	8001da0 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	4413      	add	r3, r2
 8006706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006708:	f7fb fb4a 	bl	8001da0 <HAL_GetTick>
 800670c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800670e:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	015b      	lsls	r3, r3, #5
 8006714:	0d1b      	lsrs	r3, r3, #20
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671e:	e054      	b.n	80067ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d050      	beq.n	80067ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006728:	f7fb fb3a 	bl	8001da0 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	429a      	cmp	r2, r3
 8006736:	d902      	bls.n	800673e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d13d      	bne.n	80067ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800674c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006756:	d111      	bne.n	800677c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006760:	d004      	beq.n	800676c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676a:	d107      	bne.n	800677c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006784:	d10f      	bne.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e017      	b.n	80067ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d19b      	bne.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	2000006c 	.word	0x2000006c

080067f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <SPI_EndRxTxTransaction+0x7c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <SPI_EndRxTxTransaction+0x80>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	0d5b      	lsrs	r3, r3, #21
 8006810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006822:	d112      	bne.n	800684a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2200      	movs	r2, #0
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ff5a 	bl	80066e8 <SPI_WaitFlagStateUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e00f      	b.n	800686a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3b01      	subs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b80      	cmp	r3, #128	; 0x80
 8006862:	d0f2      	beq.n	800684a <SPI_EndRxTxTransaction+0x52>
 8006864:	e000      	b.n	8006868 <SPI_EndRxTxTransaction+0x70>
        break;
 8006866:	bf00      	nop
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	2000006c 	.word	0x2000006c
 8006878:	165e9f81 	.word	0x165e9f81

0800687c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e03f      	b.n	800690e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb f90e 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2224      	movs	r2, #36	; 0x24
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb49 	bl	8006f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10d      	bne.n	800696a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_UART_IRQHandler+0x52>
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa4f 	bl	8006e06 <UART_Receive_IT>
      return;
 8006968:	e17b      	b.n	8006c62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80b1 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x1bc>
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <HAL_UART_IRQHandler+0x70>
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80a6 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_UART_IRQHandler+0x90>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_UART_IRQHandler+0xb0>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	f043 0202 	orr.w	r2, r3, #2
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_UART_IRQHandler+0xd0>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	f043 0204 	orr.w	r2, r3, #4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <HAL_UART_IRQHandler+0xfa>
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_UART_IRQHandler+0xee>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f043 0208 	orr.w	r2, r3, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 811e 	beq.w	8006c58 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_UART_IRQHandler+0x11e>
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9e8 	bl	8006e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	bf0c      	ite	eq
 8006a44:	2301      	moveq	r3, #1
 8006a46:	2300      	movne	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_UART_IRQHandler+0x146>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d031      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f92a 	bl	8006cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d123      	bne.n	8006aba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695a      	ldr	r2, [r3, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	4a76      	ldr	r2, [pc, #472]	; (8006c68 <HAL_UART_IRQHandler+0x350>)
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fb ff54 	bl	8002944 <HAL_DMA_Abort_IT>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00e      	b.n	8006ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8ec 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e00a      	b.n	8006ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8e8 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8e4 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ace:	e0c3      	b.n	8006c58 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	bf00      	nop
    return;
 8006ad2:	e0c1      	b.n	8006c58 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 80a1 	bne.w	8006c20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 809b 	beq.w	8006c20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8095 	beq.w	8006c20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d14e      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006b24:	8a3b      	ldrh	r3, [r7, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8098 	beq.w	8006c5c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b30:	8a3a      	ldrh	r2, [r7, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	f080 8092 	bcs.w	8006c5c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8a3a      	ldrh	r2, [r7, #16]
 8006b3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d02b      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0210 	bic.w	r2, r2, #16
 8006b94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fb fe95 	bl	80028ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f876 	bl	8006ca2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006bb6:	e051      	b.n	8006c5c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d047      	beq.n	8006c60 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006bd0:	8a7b      	ldrh	r3, [r7, #18]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d044      	beq.n	8006c60 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006be4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695a      	ldr	r2, [r3, #20]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0210 	bic.w	r2, r2, #16
 8006c12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c14:	8a7b      	ldrh	r3, [r7, #18]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f842 	bl	8006ca2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c1e:	e01f      	b.n	8006c60 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <HAL_UART_IRQHandler+0x324>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f87f 	bl	8006d38 <UART_Transmit_IT>
    return;
 8006c3a:	e012      	b.n	8006c62 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <HAL_UART_IRQHandler+0x34a>
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8c0 	bl	8006dd6 <UART_EndTransmit_IT>
    return;
 8006c56:	e004      	b.n	8006c62 <HAL_UART_IRQHandler+0x34a>
    return;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <HAL_UART_IRQHandler+0x34a>
      return;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <HAL_UART_IRQHandler+0x34a>
      return;
 8006c60:	bf00      	nop
  }
}
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	08006d11 	.word	0x08006d11

08006c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d107      	bne.n	8006cf8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0210 	bic.w	r2, r2, #16
 8006cf6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff ffb0 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b21      	cmp	r3, #33	; 0x21
 8006d4a:	d13e      	bne.n	8006dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d54:	d114      	bne.n	8006d80 <UART_Transmit_IT+0x48>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d110      	bne.n	8006d80 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	1c9a      	adds	r2, r3, #2
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]
 8006d7e:	e008      	b.n	8006d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6211      	str	r1, [r2, #32]
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e000      	b.n	8006dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dca:	2302      	movs	r3, #2
  }
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ff38 	bl	8006c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b086      	sub	sp, #24
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b22      	cmp	r3, #34	; 0x22
 8006e18:	f040 8099 	bne.w	8006f4e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	d117      	bne.n	8006e56 <UART_Receive_IT+0x50>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d113      	bne.n	8006e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	1c9a      	adds	r2, r3, #2
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
 8006e54:	e026      	b.n	8006ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e68:	d007      	beq.n	8006e7a <UART_Receive_IT+0x74>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <UART_Receive_IT+0x82>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e008      	b.n	8006e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d148      	bne.n	8006f4a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0220 	bic.w	r2, r2, #32
 8006ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d123      	bne.n	8006f40 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0210 	bic.w	r2, r2, #16
 8006f0c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d10a      	bne.n	8006f32 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff feb2 	bl	8006ca2 <HAL_UARTEx_RxEventCallback>
 8006f3e:	e002      	b.n	8006f46 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fe9c 	bl	8006c7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e002      	b.n	8006f50 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e000      	b.n	8006f50 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
  }
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f98:	f023 030c 	bic.w	r3, r3, #12
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a55      	ldr	r2, [pc, #340]	; (8007118 <UART_SetConfig+0x1c0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d103      	bne.n	8006fce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fc6:	f7fe f9e9 	bl	800539c <HAL_RCC_GetPCLK2Freq>
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	e002      	b.n	8006fd4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fce:	f7fe f9d1 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8006fd2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d14c      	bne.n	8007078 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009a      	lsls	r2, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	4a49      	ldr	r2, [pc, #292]	; (800711c <UART_SetConfig+0x1c4>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	0119      	lsls	r1, r3, #4
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009a      	lsls	r2, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	fbb2 f2f3 	udiv	r2, r2, r3
 8007014:	4b41      	ldr	r3, [pc, #260]	; (800711c <UART_SetConfig+0x1c4>)
 8007016:	fba3 0302 	umull	r0, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2064      	movs	r0, #100	; 0x64
 800701e:	fb00 f303 	mul.w	r3, r0, r3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	3332      	adds	r3, #50	; 0x32
 8007028:	4a3c      	ldr	r2, [pc, #240]	; (800711c <UART_SetConfig+0x1c4>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007036:	4419      	add	r1, r3
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009a      	lsls	r2, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	fbb2 f2f3 	udiv	r2, r2, r3
 800704e:	4b33      	ldr	r3, [pc, #204]	; (800711c <UART_SetConfig+0x1c4>)
 8007050:	fba3 0302 	umull	r0, r3, r3, r2
 8007054:	095b      	lsrs	r3, r3, #5
 8007056:	2064      	movs	r0, #100	; 0x64
 8007058:	fb00 f303 	mul.w	r3, r0, r3
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	3332      	adds	r3, #50	; 0x32
 8007062:	4a2e      	ldr	r2, [pc, #184]	; (800711c <UART_SetConfig+0x1c4>)
 8007064:	fba2 2303 	umull	r2, r3, r2, r3
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f003 0207 	and.w	r2, r3, #7
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	440a      	add	r2, r1
 8007074:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007076:	e04a      	b.n	800710e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009a      	lsls	r2, r3, #2
 8007082:	441a      	add	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	4a23      	ldr	r2, [pc, #140]	; (800711c <UART_SetConfig+0x1c4>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	0119      	lsls	r1, r3, #4
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009a      	lsls	r2, r3, #2
 80070a2:	441a      	add	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80070ae:	4b1b      	ldr	r3, [pc, #108]	; (800711c <UART_SetConfig+0x1c4>)
 80070b0:	fba3 0302 	umull	r0, r3, r3, r2
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	2064      	movs	r0, #100	; 0x64
 80070b8:	fb00 f303 	mul.w	r3, r0, r3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	3332      	adds	r3, #50	; 0x32
 80070c2:	4a16      	ldr	r2, [pc, #88]	; (800711c <UART_SetConfig+0x1c4>)
 80070c4:	fba2 2303 	umull	r2, r3, r2, r3
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ce:	4419      	add	r1, r3
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009a      	lsls	r2, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <UART_SetConfig+0x1c4>)
 80070e8:	fba3 0302 	umull	r0, r3, r3, r2
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	2064      	movs	r0, #100	; 0x64
 80070f0:	fb00 f303 	mul.w	r3, r0, r3
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	3332      	adds	r3, #50	; 0x32
 80070fa:	4a08      	ldr	r2, [pc, #32]	; (800711c <UART_SetConfig+0x1c4>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	f003 020f 	and.w	r2, r3, #15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	440a      	add	r2, r1
 800710c:	609a      	str	r2, [r3, #8]
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40013800 	.word	0x40013800
 800711c:	51eb851f 	.word	0x51eb851f

08007120 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007124:	4904      	ldr	r1, [pc, #16]	; (8007138 <MX_FATFS_Init+0x18>)
 8007126:	4805      	ldr	r0, [pc, #20]	; (800713c <MX_FATFS_Init+0x1c>)
 8007128:	f003 fb86 	bl	800a838 <FATFS_LinkDriver>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	4b03      	ldr	r3, [pc, #12]	; (8007140 <MX_FATFS_Init+0x20>)
 8007132:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200025b0 	.word	0x200025b0
 800713c:	20000078 	.word	0x20000078
 8007140:	200025b4 	.word	0x200025b4

08007144 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007148:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	4603      	mov	r3, r0
 800715a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	4618      	mov	r0, r3
 8007160:	f7f9 fb3a 	bl	80007d8 <SD_disk_initialize>
 8007164:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 fc12 	bl	80009a4 <SD_disk_status>
 8007180:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800719a:	7bf8      	ldrb	r0, [r7, #15]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	f7f9 fc13 	bl	80009cc <SD_disk_read>
 80071a6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80071c0:	7bf8      	ldrb	r0, [r7, #15]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	f7f9 fc6a 	bl	8000aa0 <SD_disk_write>
 80071cc:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	4603      	mov	r3, r0
 80071de:	603a      	str	r2, [r7, #0]
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	460b      	mov	r3, r1
 80071e4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80071e6:	79b9      	ldrb	r1, [r7, #6]
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 fcdb 	bl	8000ba8 <SD_disk_ioctl>
 80071f2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <disk_status+0x30>)
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	79fa      	ldrb	r2, [r7, #7]
 8007214:	4905      	ldr	r1, [pc, #20]	; (800722c <disk_status+0x30>)
 8007216:	440a      	add	r2, r1
 8007218:	7a12      	ldrb	r2, [r2, #8]
 800721a:	4610      	mov	r0, r2
 800721c:	4798      	blx	r3
 800721e:	4603      	mov	r3, r0
 8007220:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000338 	.word	0x20000338

08007230 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <disk_initialize+0x48>)
 8007242:	5cd3      	ldrb	r3, [r2, r3]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d111      	bne.n	800726c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	4a0b      	ldr	r2, [pc, #44]	; (8007278 <disk_initialize+0x48>)
 800724c:	2101      	movs	r1, #1
 800724e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <disk_initialize+0x48>)
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	79fa      	ldrb	r2, [r7, #7]
 800725e:	4906      	ldr	r1, [pc, #24]	; (8007278 <disk_initialize+0x48>)
 8007260:	440a      	add	r2, r1
 8007262:	7a12      	ldrb	r2, [r2, #8]
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000338 	.word	0x20000338

0800727c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800727c:	b590      	push	{r4, r7, lr}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <disk_read+0x3c>)
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	689c      	ldr	r4, [r3, #8]
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <disk_read+0x3c>)
 800729c:	4413      	add	r3, r2
 800729e:	7a18      	ldrb	r0, [r3, #8]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	47a0      	blx	r4
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd90      	pop	{r4, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000338 	.word	0x20000338

080072bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <disk_write+0x3c>)
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68dc      	ldr	r4, [r3, #12]
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	4a07      	ldr	r2, [pc, #28]	; (80072f8 <disk_write+0x3c>)
 80072dc:	4413      	add	r3, r2
 80072de:	7a18      	ldrb	r0, [r3, #8]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	47a0      	blx	r4
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd90      	pop	{r4, r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000338 	.word	0x20000338

080072fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	603a      	str	r2, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
 8007308:	460b      	mov	r3, r1
 800730a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <disk_ioctl+0x38>)
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	79fa      	ldrb	r2, [r7, #7]
 800731a:	4906      	ldr	r1, [pc, #24]	; (8007334 <disk_ioctl+0x38>)
 800731c:	440a      	add	r2, r1
 800731e:	7a10      	ldrb	r0, [r2, #8]
 8007320:	79b9      	ldrb	r1, [r7, #6]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]
  return res;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000338 	.word	0x20000338

08007338 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3301      	adds	r3, #1
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007348:	89fb      	ldrh	r3, [r7, #14]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	b21a      	sxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b21b      	sxth	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b21b      	sxth	r3, r3
 8007358:	81fb      	strh	r3, [r7, #14]
	return rv;
 800735a:	89fb      	ldrh	r3, [r7, #14]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3303      	adds	r3, #3
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	3202      	adds	r2, #2
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	3201      	adds	r2, #1
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
	return rv;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	887a      	ldrh	r2, [r7, #2]
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	0a1b      	lsrs	r3, r3, #8
 800740a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	1c53      	adds	r3, r2, #1
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	6179      	str	r1, [r7, #20]
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f1      	bne.n	800744e <mem_cpy+0x1a>
	}
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	617a      	str	r2, [r7, #20]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3b01      	subs	r3, #1
 8007494:	607b      	str	r3, [r7, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f3      	bne.n	8007484 <mem_set+0x10>
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80074a8:	b480      	push	{r7}
 80074aa:	b089      	sub	sp, #36	; 0x24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	61fa      	str	r2, [r7, #28]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	61ba      	str	r2, [r7, #24]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	1acb      	subs	r3, r1, r3
 80074d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3b01      	subs	r3, #1
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <mem_cmp+0x40>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0eb      	beq.n	80074c0 <mem_cmp+0x18>

	return r;
 80074e8:	697b      	ldr	r3, [r7, #20]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3724      	adds	r7, #36	; 0x24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80074fe:	e002      	b.n	8007506 <chk_chr+0x12>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <chk_chr+0x26>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	4293      	cmp	r3, r2
 8007518:	d1f2      	bne.n	8007500 <chk_chr+0xc>
	return *str;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	781b      	ldrb	r3, [r3, #0]
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e029      	b.n	8007590 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800753c:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <chk_lock+0xb0>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4413      	add	r3, r2
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01d      	beq.n	8007586 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800754a:	4a23      	ldr	r2, [pc, #140]	; (80075d8 <chk_lock+0xb0>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	4413      	add	r3, r2
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d116      	bne.n	800758a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800755c:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <chk_lock+0xb0>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	4413      	add	r3, r2
 8007564:	3304      	adds	r3, #4
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800756c:	429a      	cmp	r2, r3
 800756e:	d10c      	bne.n	800758a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <chk_lock+0xb0>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	3308      	adds	r3, #8
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007580:	429a      	cmp	r2, r3
 8007582:	d102      	bne.n	800758a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007584:	e007      	b.n	8007596 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007586:	2301      	movs	r3, #1
 8007588:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d9d2      	bls.n	800753c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d109      	bne.n	80075b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <chk_lock+0x80>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d101      	bne.n	80075ac <chk_lock+0x84>
 80075a8:	2300      	movs	r3, #0
 80075aa:	e010      	b.n	80075ce <chk_lock+0xa6>
 80075ac:	2312      	movs	r3, #18
 80075ae:	e00e      	b.n	80075ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <chk_lock+0xa0>
 80075b6:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <chk_lock+0xb0>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	4413      	add	r3, r2
 80075be:	330c      	adds	r3, #12
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d101      	bne.n	80075cc <chk_lock+0xa4>
 80075c8:	2310      	movs	r3, #16
 80075ca:	e000      	b.n	80075ce <chk_lock+0xa6>
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr
 80075d8:	20000118 	.word	0x20000118

080075dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	e002      	b.n	80075ee <enq_lock+0x12>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3301      	adds	r3, #1
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d806      	bhi.n	8007602 <enq_lock+0x26>
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <enq_lock+0x3c>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	4413      	add	r3, r2
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f2      	bne.n	80075e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	bf14      	ite	ne
 8007608:	2301      	movne	r3, #1
 800760a:	2300      	moveq	r3, #0
 800760c:	b2db      	uxtb	r3, r3
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr
 8007618:	20000118 	.word	0x20000118

0800761c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e01f      	b.n	800766c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800762c:	4a41      	ldr	r2, [pc, #260]	; (8007734 <inc_lock+0x118>)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	4413      	add	r3, r2
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d113      	bne.n	8007666 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800763e:	4a3d      	ldr	r2, [pc, #244]	; (8007734 <inc_lock+0x118>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4413      	add	r3, r2
 8007646:	3304      	adds	r3, #4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800764e:	429a      	cmp	r2, r3
 8007650:	d109      	bne.n	8007666 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007652:	4a38      	ldr	r2, [pc, #224]	; (8007734 <inc_lock+0x118>)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	3308      	adds	r3, #8
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007662:	429a      	cmp	r2, r3
 8007664:	d006      	beq.n	8007674 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d9dc      	bls.n	800762c <inc_lock+0x10>
 8007672:	e000      	b.n	8007676 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007674:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d132      	bne.n	80076e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e002      	b.n	8007688 <inc_lock+0x6c>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d806      	bhi.n	800769c <inc_lock+0x80>
 800768e:	4a29      	ldr	r2, [pc, #164]	; (8007734 <inc_lock+0x118>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	4413      	add	r3, r2
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f2      	bne.n	8007682 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d101      	bne.n	80076a6 <inc_lock+0x8a>
 80076a2:	2300      	movs	r3, #0
 80076a4:	e040      	b.n	8007728 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4922      	ldr	r1, [pc, #136]	; (8007734 <inc_lock+0x118>)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	440b      	add	r3, r1
 80076b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	491e      	ldr	r1, [pc, #120]	; (8007734 <inc_lock+0x118>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	440b      	add	r3, r1
 80076c0:	3304      	adds	r3, #4
 80076c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695a      	ldr	r2, [r3, #20]
 80076c8:	491a      	ldr	r1, [pc, #104]	; (8007734 <inc_lock+0x118>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	440b      	add	r3, r1
 80076d0:	3308      	adds	r3, #8
 80076d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80076d4:	4a17      	ldr	r2, [pc, #92]	; (8007734 <inc_lock+0x118>)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	330c      	adds	r3, #12
 80076de:	2200      	movs	r2, #0
 80076e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <inc_lock+0xe0>
 80076e8:	4a12      	ldr	r2, [pc, #72]	; (8007734 <inc_lock+0x118>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	4413      	add	r3, r2
 80076f0:	330c      	adds	r3, #12
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <inc_lock+0xe0>
 80076f8:	2300      	movs	r3, #0
 80076fa:	e015      	b.n	8007728 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d108      	bne.n	8007714 <inc_lock+0xf8>
 8007702:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <inc_lock+0x118>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	4413      	add	r3, r2
 800770a:	330c      	adds	r3, #12
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	e001      	b.n	8007718 <inc_lock+0xfc>
 8007714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007718:	4906      	ldr	r1, [pc, #24]	; (8007734 <inc_lock+0x118>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	440b      	add	r3, r1
 8007720:	330c      	adds	r3, #12
 8007722:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20000118 	.word	0x20000118

08007738 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3b01      	subs	r3, #1
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d825      	bhi.n	8007798 <dec_lock+0x60>
		n = Files[i].ctr;
 800774c:	4a16      	ldr	r2, [pc, #88]	; (80077a8 <dec_lock+0x70>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	4413      	add	r3, r2
 8007754:	330c      	adds	r3, #12
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007760:	d101      	bne.n	8007766 <dec_lock+0x2e>
 8007762:	2300      	movs	r3, #0
 8007764:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007766:	89fb      	ldrh	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <dec_lock+0x3a>
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	3b01      	subs	r3, #1
 8007770:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007772:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <dec_lock+0x70>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	4413      	add	r3, r2
 800777a:	330c      	adds	r3, #12
 800777c:	89fa      	ldrh	r2, [r7, #14]
 800777e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <dec_lock+0x5a>
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <dec_lock+0x70>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	4413      	add	r3, r2
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	737b      	strb	r3, [r7, #13]
 8007796:	e001      	b.n	800779c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007798:	2302      	movs	r3, #2
 800779a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800779c:	7b7b      	ldrb	r3, [r7, #13]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr
 80077a8:	20000118 	.word	0x20000118

080077ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e010      	b.n	80077dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <clear_lock+0x44>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	4413      	add	r3, r2
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d105      	bne.n	80077d6 <clear_lock+0x2a>
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <clear_lock+0x44>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	4413      	add	r3, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d9eb      	bls.n	80077ba <clear_lock+0xe>
	}
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000118 	.word	0x20000118

080077f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	78db      	ldrb	r3, [r3, #3]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d034      	beq.n	8007872 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7858      	ldrb	r0, [r3, #1]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007818:	2301      	movs	r3, #1
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	f7ff fd4e 	bl	80072bc <disk_write>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007826:	2301      	movs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]
 800782a:	e022      	b.n	8007872 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	429a      	cmp	r2, r3
 8007840:	d217      	bcs.n	8007872 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	789b      	ldrb	r3, [r3, #2]
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	e010      	b.n	800786c <sync_window+0x78>
					wsect += fs->fsize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7858      	ldrb	r0, [r3, #1]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800785e:	2301      	movs	r3, #1
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	f7ff fd2b 	bl	80072bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	3b01      	subs	r3, #1
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d8eb      	bhi.n	800784a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d01b      	beq.n	80078cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ffad 	bl	80077f4 <sync_window>
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d113      	bne.n	80078cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7858      	ldrb	r0, [r3, #1]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078ae:	2301      	movs	r3, #1
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f7ff fce3 	bl	800727c <disk_read>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295
 80078c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ff87 	bl	80077f4 <sync_window>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d159      	bne.n	80079a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d149      	bne.n	800798c <sync_fs+0xb4>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	791b      	ldrb	r3, [r3, #4]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d145      	bne.n	800798c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	899b      	ldrh	r3, [r3, #12]
 800790a:	461a      	mov	r2, r3
 800790c:	2100      	movs	r1, #0
 800790e:	f7ff fdb1 	bl	8007474 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3338      	adds	r3, #56	; 0x38
 8007916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800791a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fd43 	bl	80073aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3338      	adds	r3, #56	; 0x38
 8007928:	4921      	ldr	r1, [pc, #132]	; (80079b0 <sync_fs+0xd8>)
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fd57 	bl	80073de <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3338      	adds	r3, #56	; 0x38
 8007934:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007938:	491e      	ldr	r1, [pc, #120]	; (80079b4 <sync_fs+0xdc>)
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fd4f 	bl	80073de <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3338      	adds	r3, #56	; 0x38
 8007944:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7ff fd45 	bl	80073de <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3338      	adds	r3, #56	; 0x38
 8007958:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7ff fd3b 	bl	80073de <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7858      	ldrb	r0, [r3, #1]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007980:	2301      	movs	r3, #1
 8007982:	f7ff fc9b 	bl	80072bc <disk_write>
			fs->fsi_flag = 0;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2200      	movs	r2, #0
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fcb1 	bl	80072fc <disk_ioctl>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <sync_fs+0xcc>
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	41615252 	.word	0x41615252
 80079b4:	61417272 	.word	0x61417272

080079b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	3b02      	subs	r3, #2
 80079c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	3b02      	subs	r3, #2
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d301      	bcc.n	80079d8 <clust2sect+0x20>
 80079d4:	2300      	movs	r3, #0
 80079d6:	e008      	b.n	80079ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	895b      	ldrh	r3, [r3, #10]
 80079dc:	461a      	mov	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	fb03 f202 	mul.w	r2, r3, r2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	4413      	add	r3, r2
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d904      	bls.n	8007a14 <get_fat+0x20>
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d302      	bcc.n	8007a1a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e0bb      	b.n	8007b92 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	f000 8083 	beq.w	8007b30 <get_fat+0x13c>
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	f300 80a7 	bgt.w	8007b7e <get_fat+0x18a>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d002      	beq.n	8007a3a <get_fat+0x46>
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d056      	beq.n	8007ae6 <get_fat+0xf2>
 8007a38:	e0a1      	b.n	8007b7e <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	899b      	ldrh	r3, [r3, #12]
 8007a50:	4619      	mov	r1, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a58:	4413      	add	r3, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6938      	ldr	r0, [r7, #16]
 8007a5e:	f7ff ff0d 	bl	800787c <move_window>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 808d 	bne.w	8007b84 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	60fa      	str	r2, [r7, #12]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	8992      	ldrh	r2, [r2, #12]
 8007a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a78:	fb02 f201 	mul.w	r2, r2, r1
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4413      	add	r3, r2
 8007a82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	899b      	ldrh	r3, [r3, #12]
 8007a90:	4619      	mov	r1, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a98:	4413      	add	r3, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6938      	ldr	r0, [r7, #16]
 8007a9e:	f7ff feed 	bl	800787c <move_window>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d16f      	bne.n	8007b88 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	899b      	ldrh	r3, [r3, #12]
 8007aac:	461a      	mov	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab4:	fb02 f201 	mul.w	r2, r2, r1
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4413      	add	r3, r2
 8007abe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <get_fat+0xe8>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	e002      	b.n	8007ae2 <get_fat+0xee>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae2:	617b      	str	r3, [r7, #20]
			break;
 8007ae4:	e055      	b.n	8007b92 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	899b      	ldrh	r3, [r3, #12]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007afa:	4413      	add	r3, r2
 8007afc:	4619      	mov	r1, r3
 8007afe:	6938      	ldr	r0, [r7, #16]
 8007b00:	f7ff febc 	bl	800787c <move_window>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d140      	bne.n	8007b8c <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	8992      	ldrh	r2, [r2, #12]
 8007b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b1c:	fb02 f200 	mul.w	r2, r2, r0
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	440b      	add	r3, r1
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff fc07 	bl	8007338 <ld_word>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	617b      	str	r3, [r7, #20]
			break;
 8007b2e:	e030      	b.n	8007b92 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	899b      	ldrh	r3, [r3, #12]
 8007b38:	089b      	lsrs	r3, r3, #2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b44:	4413      	add	r3, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	6938      	ldr	r0, [r7, #16]
 8007b4a:	f7ff fe97 	bl	800787c <move_window>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d11d      	bne.n	8007b90 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	8992      	ldrh	r2, [r2, #12]
 8007b62:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b66:	fb02 f200 	mul.w	r2, r2, r0
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fbf9 	bl	8007366 <ld_dword>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b7a:	617b      	str	r3, [r7, #20]
			break;
 8007b7c:	e009      	b.n	8007b92 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e006      	b.n	8007b92 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b84:	bf00      	nop
 8007b86:	e004      	b.n	8007b92 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b88:	bf00      	nop
 8007b8a:	e002      	b.n	8007b92 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b90:	bf00      	nop
		}
	}

	return val;
 8007b92:	697b      	ldr	r3, [r7, #20]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b089      	sub	sp, #36	; 0x24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	f240 8102 	bls.w	8007db8 <put_fat+0x21c>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	f080 80fc 	bcs.w	8007db8 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	f000 80b6 	beq.w	8007d36 <put_fat+0x19a>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	f300 80fd 	bgt.w	8007dca <put_fat+0x22e>
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d003      	beq.n	8007bdc <put_fat+0x40>
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	f000 8083 	beq.w	8007ce0 <put_fat+0x144>
 8007bda:	e0f6      	b.n	8007dca <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	085b      	lsrs	r3, r3, #1
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4413      	add	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	899b      	ldrh	r3, [r3, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fe3c 	bl	800787c <move_window>
 8007c04:	4603      	mov	r3, r0
 8007c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c08:	7ffb      	ldrb	r3, [r7, #31]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 80d6 	bne.w	8007dbc <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	61ba      	str	r2, [r7, #24]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	8992      	ldrh	r2, [r2, #12]
 8007c20:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c24:	fb02 f200 	mul.w	r2, r2, r0
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <put_fat+0xb8>
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	b25a      	sxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e001      	b.n	8007c58 <put_fat+0xbc>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	899b      	ldrh	r3, [r3, #12]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c72:	4413      	add	r3, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fe00 	bl	800787c <move_window>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c80:	7ffb      	ldrb	r3, [r7, #31]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f040 809c 	bne.w	8007dc0 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	899b      	ldrh	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c9a:	fb02 f200 	mul.w	r2, r2, r0
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <put_fat+0x11a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	e00e      	b.n	8007cd4 <put_fat+0x138>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	f023 030f 	bic.w	r3, r3, #15
 8007cc0:	b25a      	sxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	b25b      	sxtb	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	70da      	strb	r2, [r3, #3]
			break;
 8007cde:	e074      	b.n	8007dca <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	899b      	ldrh	r3, [r3, #12]
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4619      	mov	r1, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff fdbf 	bl	800787c <move_window>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d15d      	bne.n	8007dc4 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	8992      	ldrh	r2, [r2, #12]
 8007d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d1a:	fb02 f200 	mul.w	r2, r2, r0
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	440b      	add	r3, r1
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	b292      	uxth	r2, r2
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fb3e 	bl	80073aa <st_word>
			fs->wflag = 1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	70da      	strb	r2, [r3, #3]
			break;
 8007d34:	e049      	b.n	8007dca <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	899b      	ldrh	r3, [r3, #12]
 8007d3e:	089b      	lsrs	r3, r3, #2
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fd94 	bl	800787c <move_window>
 8007d54:	4603      	mov	r3, r0
 8007d56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d58:	7ffb      	ldrb	r3, [r7, #31]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d134      	bne.n	8007dc8 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	8992      	ldrh	r2, [r2, #12]
 8007d72:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d76:	fb02 f200 	mul.w	r2, r2, r0
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff faf1 	bl	8007366 <ld_dword>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d8a:	4323      	orrs	r3, r4
 8007d8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	8992      	ldrh	r2, [r2, #12]
 8007d9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007da0:	fb02 f200 	mul.w	r2, r2, r0
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	440b      	add	r3, r1
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fb17 	bl	80073de <st_dword>
			fs->wflag = 1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	70da      	strb	r2, [r3, #3]
			break;
 8007db6:	e008      	b.n	8007dca <put_fat+0x22e>
		}
	}
 8007db8:	bf00      	nop
 8007dba:	e006      	b.n	8007dca <put_fat+0x22e>
			if (res != FR_OK) break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <put_fat+0x22e>
			if (res != FR_OK) break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <put_fat+0x22e>
			if (res != FR_OK) break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <put_fat+0x22e>
			if (res != FR_OK) break;
 8007dc8:	bf00      	nop
	return res;
 8007dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3724      	adds	r7, #36	; 0x24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}

08007dd4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d904      	bls.n	8007dfa <remove_chain+0x26>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d301      	bcc.n	8007dfe <remove_chain+0x2a>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e04b      	b.n	8007e96 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	69b8      	ldr	r0, [r7, #24]
 8007e0c:	f7ff fec6 	bl	8007b9c <put_fat>
 8007e10:	4603      	mov	r3, r0
 8007e12:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e14:	7ffb      	ldrb	r3, [r7, #31]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <remove_chain+0x4a>
 8007e1a:	7ffb      	ldrb	r3, [r7, #31]
 8007e1c:	e03b      	b.n	8007e96 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fde7 	bl	80079f4 <get_fat>
 8007e26:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d031      	beq.n	8007e92 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <remove_chain+0x64>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e02e      	b.n	8007e96 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d101      	bne.n	8007e44 <remove_chain+0x70>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e028      	b.n	8007e96 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e44:	2200      	movs	r2, #0
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	69b8      	ldr	r0, [r7, #24]
 8007e4a:	f7ff fea7 	bl	8007b9c <put_fat>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e52:	7ffb      	ldrb	r3, [r7, #31]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <remove_chain+0x88>
 8007e58:	7ffb      	ldrb	r3, [r7, #31]
 8007e5a:	e01c      	b.n	8007e96 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	699a      	ldr	r2, [r3, #24]
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	3b02      	subs	r3, #2
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d20b      	bcs.n	8007e82 <remove_chain+0xae>
			fs->free_clst++;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d3c6      	bcc.n	8007e1e <remove_chain+0x4a>
 8007e90:	e000      	b.n	8007e94 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007e92:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10d      	bne.n	8007ed0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <create_chain+0x2c>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d31b      	bcc.n	8007f02 <create_chain+0x64>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	e018      	b.n	8007f02 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fd8e 	bl	80079f4 <get_fat>
 8007ed8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d801      	bhi.n	8007ee4 <create_chain+0x46>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e070      	b.n	8007fc6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eea:	d101      	bne.n	8007ef0 <create_chain+0x52>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e06a      	b.n	8007fc6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d201      	bcs.n	8007efe <create_chain+0x60>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	e063      	b.n	8007fc6 <create_chain+0x128>
		scl = clst;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d307      	bcc.n	8007f26 <create_chain+0x88>
				ncl = 2;
 8007f16:	2302      	movs	r3, #2
 8007f18:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d901      	bls.n	8007f26 <create_chain+0x88>
 8007f22:	2300      	movs	r3, #0
 8007f24:	e04f      	b.n	8007fc6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f26:	69f9      	ldr	r1, [r7, #28]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fd63 	bl	80079f4 <get_fat>
 8007f2e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d003      	beq.n	8007f44 <create_chain+0xa6>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d101      	bne.n	8007f48 <create_chain+0xaa>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	e03e      	b.n	8007fc6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d1da      	bne.n	8007f06 <create_chain+0x68>
 8007f50:	2300      	movs	r3, #0
 8007f52:	e038      	b.n	8007fc6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007f54:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	69f9      	ldr	r1, [r7, #28]
 8007f5c:	6938      	ldr	r0, [r7, #16]
 8007f5e:	f7ff fe1d 	bl	8007b9c <put_fat>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <create_chain+0xe2>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6938      	ldr	r0, [r7, #16]
 8007f78:	f7ff fe10 	bl	8007b9c <put_fat>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d116      	bne.n	8007fb4 <create_chain+0x116>
		fs->last_clst = ncl;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	3b02      	subs	r3, #2
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d804      	bhi.n	8007fa4 <create_chain+0x106>
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	791b      	ldrb	r3, [r3, #4]
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	711a      	strb	r2, [r3, #4]
 8007fb2:	e007      	b.n	8007fc4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d102      	bne.n	8007fc0 <create_chain+0x122>
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	e000      	b.n	8007fc2 <create_chain+0x124>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007fc4:	69fb      	ldr	r3, [r7, #28]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b087      	sub	sp, #28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	899b      	ldrh	r3, [r3, #12]
 8007fea:	461a      	mov	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	8952      	ldrh	r2, [r2, #10]
 8007ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1d1a      	adds	r2, r3, #4
 8008000:	613a      	str	r2, [r7, #16]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <clmt_clust+0x42>
 800800c:	2300      	movs	r3, #0
 800800e:	e010      	b.n	8008032 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	429a      	cmp	r2, r3
 8008016:	d307      	bcc.n	8008028 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	3304      	adds	r3, #4
 8008024:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008026:	e7e9      	b.n	8007ffc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008028:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4413      	add	r3, r2
}
 8008032:	4618      	mov	r0, r3
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008052:	d204      	bcs.n	800805e <dir_sdi+0x22>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <dir_sdi+0x26>
		return FR_INT_ERR;
 800805e:	2302      	movs	r3, #2
 8008060:	e071      	b.n	8008146 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d106      	bne.n	8008082 <dir_sdi+0x46>
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d902      	bls.n	8008082 <dir_sdi+0x46>
		clst = fs->dirbase;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10c      	bne.n	80080a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	8912      	ldrh	r2, [r2, #8]
 8008090:	4293      	cmp	r3, r2
 8008092:	d301      	bcc.n	8008098 <dir_sdi+0x5c>
 8008094:	2302      	movs	r3, #2
 8008096:	e056      	b.n	8008146 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	61da      	str	r2, [r3, #28]
 80080a0:	e02d      	b.n	80080fe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	895b      	ldrh	r3, [r3, #10]
 80080a6:	461a      	mov	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	899b      	ldrh	r3, [r3, #12]
 80080ac:	fb03 f302 	mul.w	r3, r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080b2:	e019      	b.n	80080e8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6979      	ldr	r1, [r7, #20]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fc9b 	bl	80079f4 <get_fat>
 80080be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d101      	bne.n	80080cc <dir_sdi+0x90>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e03c      	b.n	8008146 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d904      	bls.n	80080dc <dir_sdi+0xa0>
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d301      	bcc.n	80080e0 <dir_sdi+0xa4>
 80080dc:	2302      	movs	r3, #2
 80080de:	e032      	b.n	8008146 <dir_sdi+0x10a>
			ofs -= csz;
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d2e1      	bcs.n	80080b4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80080f0:	6979      	ldr	r1, [r7, #20]
 80080f2:	6938      	ldr	r0, [r7, #16]
 80080f4:	f7ff fc60 	bl	80079b8 <clust2sect>
 80080f8:	4602      	mov	r2, r0
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <dir_sdi+0xd4>
 800810c:	2302      	movs	r3, #2
 800810e:	e01a      	b.n	8008146 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	899b      	ldrh	r3, [r3, #12]
 8008118:	4619      	mov	r1, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	899b      	ldrh	r3, [r3, #12]
 8008130:	461a      	mov	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	fbb3 f0f2 	udiv	r0, r3, r2
 8008138:	fb02 f200 	mul.w	r2, r2, r0
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	18ca      	adds	r2, r1, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	3320      	adds	r3, #32
 8008164:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <dir_next+0x28>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008174:	d301      	bcc.n	800817a <dir_next+0x2c>
 8008176:	2304      	movs	r3, #4
 8008178:	e0bb      	b.n	80082f2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	899b      	ldrh	r3, [r3, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	fbb3 f1f2 	udiv	r1, r3, r2
 8008186:	fb02 f201 	mul.w	r2, r2, r1
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 809d 	bne.w	80082cc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10b      	bne.n	80081bc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	8912      	ldrh	r2, [r2, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	f0c0 808d 	bcc.w	80082cc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	61da      	str	r2, [r3, #28]
 80081b8:	2304      	movs	r3, #4
 80081ba:	e09a      	b.n	80082f2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	899b      	ldrh	r3, [r3, #12]
 80081c0:	461a      	mov	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	8952      	ldrh	r2, [r2, #10]
 80081cc:	3a01      	subs	r2, #1
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d17b      	bne.n	80082cc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7ff fc09 	bl	80079f4 <get_fat>
 80081e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d801      	bhi.n	80081ee <dir_next+0xa0>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e081      	b.n	80082f2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d101      	bne.n	80081fa <dir_next+0xac>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e07b      	b.n	80082f2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	429a      	cmp	r2, r3
 8008202:	d359      	bcc.n	80082b8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	61da      	str	r2, [r3, #28]
 8008210:	2304      	movs	r3, #4
 8008212:	e06e      	b.n	80082f2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7ff fe3e 	bl	8007e9e <create_chain>
 8008222:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <dir_next+0xe0>
 800822a:	2307      	movs	r3, #7
 800822c:	e061      	b.n	80082f2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <dir_next+0xea>
 8008234:	2302      	movs	r3, #2
 8008236:	e05c      	b.n	80082f2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d101      	bne.n	8008244 <dir_next+0xf6>
 8008240:	2301      	movs	r3, #1
 8008242:	e056      	b.n	80082f2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fad5 	bl	80077f4 <sync_window>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <dir_next+0x106>
 8008250:	2301      	movs	r3, #1
 8008252:	e04e      	b.n	80082f2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	899b      	ldrh	r3, [r3, #12]
 800825e:	461a      	mov	r2, r3
 8008260:	2100      	movs	r1, #0
 8008262:	f7ff f907 	bl	8007474 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fba3 	bl	80079b8 <clust2sect>
 8008272:	4602      	mov	r2, r0
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	635a      	str	r2, [r3, #52]	; 0x34
 8008278:	e012      	b.n	80082a0 <dir_next+0x152>
						fs->wflag = 1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fab7 	bl	80077f4 <sync_window>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <dir_next+0x142>
 800828c:	2301      	movs	r3, #1
 800828e:	e030      	b.n	80082f2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	3301      	adds	r3, #1
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	635a      	str	r2, [r3, #52]	; 0x34
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	895b      	ldrh	r3, [r3, #10]
 80082a4:	461a      	mov	r2, r3
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d3e6      	bcc.n	800827a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80082be:	6979      	ldr	r1, [r7, #20]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff fb79 	bl	80079b8 <clust2sect>
 80082c6:	4602      	mov	r2, r0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	899b      	ldrh	r3, [r3, #12]
 80082dc:	461a      	mov	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80082e4:	fb02 f200 	mul.w	r2, r2, r0
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	18ca      	adds	r2, r1, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800830a:	2100      	movs	r1, #0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fe95 	bl	800803c <dir_sdi>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d12b      	bne.n	8008374 <dir_alloc+0x7a>
		n = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4619      	mov	r1, r3
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff faa8 	bl	800787c <move_window>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d11d      	bne.n	8008372 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2be5      	cmp	r3, #229	; 0xe5
 800833e:	d004      	beq.n	800834a <dir_alloc+0x50>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d102      	bne.n	800835e <dir_alloc+0x64>
 8008358:	e00c      	b.n	8008374 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800835e:	2101      	movs	r1, #1
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fef4 	bl	800814e <dir_next>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0d7      	beq.n	8008320 <dir_alloc+0x26>
 8008370:	e000      	b.n	8008374 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008372:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	2b04      	cmp	r3, #4
 8008378:	d101      	bne.n	800837e <dir_alloc+0x84>
 800837a:	2307      	movs	r3, #7
 800837c:	75fb      	strb	r3, [r7, #23]
	return res;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	331a      	adds	r3, #26
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe ffce 	bl	8007338 <ld_word>
 800839c:	4603      	mov	r3, r0
 800839e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d109      	bne.n	80083bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	3314      	adds	r3, #20
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe ffc3 	bl	8007338 <ld_word>
 80083b2:	4603      	mov	r3, r0
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	331a      	adds	r3, #26
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	b292      	uxth	r2, r2
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe ffe4 	bl	80073aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d109      	bne.n	80083fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f103 0214 	add.w	r2, r3, #20
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fe ffd6 	bl	80073aa <st_word>
	}
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	331a      	adds	r3, #26
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe ff8e 	bl	8007338 <ld_word>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <cmp_lfn+0x1e>
 8008422:	2300      	movs	r3, #0
 8008424:	e059      	b.n	80084da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842e:	1e5a      	subs	r2, r3, #1
 8008430:	4613      	mov	r3, r2
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800843c:	2301      	movs	r3, #1
 800843e:	81fb      	strh	r3, [r7, #14]
 8008440:	2300      	movs	r3, #0
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	e033      	b.n	80084ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008446:	4a27      	ldr	r2, [pc, #156]	; (80084e4 <cmp_lfn+0xdc>)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4413      	add	r3, r2
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	4413      	add	r3, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe ff6f 	bl	8007338 <ld_word>
 800845a:	4603      	mov	r3, r0
 800845c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800845e:	89fb      	ldrh	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01a      	beq.n	800849a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2bfe      	cmp	r3, #254	; 0xfe
 8008468:	d812      	bhi.n	8008490 <cmp_lfn+0x88>
 800846a:	89bb      	ldrh	r3, [r7, #12]
 800846c:	4618      	mov	r0, r3
 800846e:	f002 fa2d 	bl	800a8cc <ff_wtoupper>
 8008472:	4603      	mov	r3, r0
 8008474:	461c      	mov	r4, r3
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	617a      	str	r2, [r7, #20]
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f002 fa21 	bl	800a8cc <ff_wtoupper>
 800848a:	4603      	mov	r3, r0
 800848c:	429c      	cmp	r4, r3
 800848e:	d001      	beq.n	8008494 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008490:	2300      	movs	r3, #0
 8008492:	e022      	b.n	80084da <cmp_lfn+0xd2>
			}
			wc = uc;
 8008494:	89bb      	ldrh	r3, [r7, #12]
 8008496:	81fb      	strh	r3, [r7, #14]
 8008498:	e006      	b.n	80084a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800849a:	89bb      	ldrh	r3, [r7, #12]
 800849c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d001      	beq.n	80084a8 <cmp_lfn+0xa0>
 80084a4:	2300      	movs	r3, #0
 80084a6:	e018      	b.n	80084da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	d9c8      	bls.n	8008446 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <cmp_lfn+0xd0>
 80084c0:	89fb      	ldrh	r3, [r7, #14]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d008      	beq.n	80084d8 <cmp_lfn+0xd0>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <cmp_lfn+0xd0>
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80084d8:	2301      	movs	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd90      	pop	{r4, r7, pc}
 80084e2:	bf00      	nop
 80084e4:	0800abbc 	.word	0x0800abbc

080084e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	460b      	mov	r3, r1
 80084f8:	71fb      	strb	r3, [r7, #7]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	330d      	adds	r3, #13
 8008502:	79ba      	ldrb	r2, [r7, #6]
 8008504:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	330b      	adds	r3, #11
 800850a:	220f      	movs	r2, #15
 800850c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	330c      	adds	r3, #12
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	331a      	adds	r3, #26
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe ff44 	bl	80073aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	1e5a      	subs	r2, r3, #1
 8008526:	4613      	mov	r3, r2
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	82fb      	strh	r3, [r7, #22]
 8008536:	2300      	movs	r3, #0
 8008538:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <put_lfn+0x6c>
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	61fa      	str	r2, [r7, #28]
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008554:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <put_lfn+0xcc>)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4413      	add	r3, r2
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	8afa      	ldrh	r2, [r7, #22]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe ff1f 	bl	80073aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800856c:	8afb      	ldrh	r3, [r7, #22]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <put_lfn+0x90>
 8008572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008576:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	3301      	adds	r3, #1
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b0c      	cmp	r3, #12
 8008582:	d9da      	bls.n	800853a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008584:	8afb      	ldrh	r3, [r7, #22]
 8008586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800858a:	4293      	cmp	r3, r2
 800858c:	d006      	beq.n	800859c <put_lfn+0xb4>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <put_lfn+0xbc>
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	79fa      	ldrb	r2, [r7, #7]
 80085a8:	701a      	strb	r2, [r3, #0]
}
 80085aa:	bf00      	nop
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	0800abbc 	.word	0x0800abbc

080085b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80085c6:	220b      	movs	r2, #11
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7fe ff32 	bl	8007434 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d92b      	bls.n	800862e <gen_numname+0x76>
		sr = seq;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80085da:	e022      	b.n	8008622 <gen_numname+0x6a>
			wc = *lfn++;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	607a      	str	r2, [r7, #4]
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80085e6:	2300      	movs	r3, #0
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ea:	e017      	b.n	800861c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005a      	lsls	r2, r3, #1
 80085f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	4413      	add	r3, r2
 80085f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80085fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <gen_numname+0x5e>
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008610:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008614:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	3301      	adds	r3, #1
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2b0f      	cmp	r3, #15
 8008620:	d9e4      	bls.n	80085ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1d8      	bne.n	80085dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800862e:	2307      	movs	r3, #7
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	b2db      	uxtb	r3, r3
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008646:	2b39      	cmp	r3, #57	; 0x39
 8008648:	d904      	bls.n	8008654 <gen_numname+0x9c>
 800864a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800864e:	3307      	adds	r3, #7
 8008650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	1e5a      	subs	r2, r3, #1
 8008658:	62ba      	str	r2, [r7, #40]	; 0x28
 800865a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800865e:	4413      	add	r3, r2
 8008660:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008664:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1de      	bne.n	8008632 <gen_numname+0x7a>
	ns[i] = '~';
 8008674:	f107 0214 	add.w	r2, r7, #20
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	4413      	add	r3, r2
 800867c:	227e      	movs	r2, #126	; 0x7e
 800867e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008680:	2300      	movs	r3, #0
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
 8008684:	e002      	b.n	800868c <gen_numname+0xd4>
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	3301      	adds	r3, #1
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	429a      	cmp	r2, r3
 8008692:	d205      	bcs.n	80086a0 <gen_numname+0xe8>
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	4413      	add	r3, r2
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b20      	cmp	r3, #32
 800869e:	d1f2      	bne.n	8008686 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	2b07      	cmp	r3, #7
 80086a4:	d808      	bhi.n	80086b8 <gen_numname+0x100>
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80086ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80086b0:	4413      	add	r3, r2
 80086b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80086b6:	e000      	b.n	80086ba <gen_numname+0x102>
 80086b8:	2120      	movs	r1, #32
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	627a      	str	r2, [r7, #36]	; 0x24
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	460a      	mov	r2, r1
 80086c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2b07      	cmp	r3, #7
 80086cc:	d9e8      	bls.n	80086a0 <gen_numname+0xe8>
}
 80086ce:	bf00      	nop
 80086d0:	bf00      	nop
 80086d2:	3730      	adds	r7, #48	; 0x30
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80086e4:	230b      	movs	r3, #11
 80086e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	0852      	lsrs	r2, r2, #1
 80086ee:	01db      	lsls	r3, r3, #7
 80086f0:	4313      	orrs	r3, r2
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	6079      	str	r1, [r7, #4]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4413      	add	r3, r2
 80086fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	3b01      	subs	r3, #1
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ed      	bne.n	80086e8 <sum_sfn+0x10>
	return sum;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008726:	2100      	movs	r1, #0
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff fc87 	bl	800803c <dir_sdi>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <dir_find+0x24>
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	e0a9      	b.n	8008890 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800873c:	23ff      	movs	r3, #255	; 0xff
 800873e:	753b      	strb	r3, [r7, #20]
 8008740:	7d3b      	ldrb	r3, [r7, #20]
 8008742:	757b      	strb	r3, [r7, #21]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	4619      	mov	r1, r3
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f7ff f892 	bl	800787c <move_window>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 8090 	bne.w	8008884 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <dir_find+0x60>
 8008772:	2304      	movs	r3, #4
 8008774:	75fb      	strb	r3, [r7, #23]
 8008776:	e08a      	b.n	800888e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	330b      	adds	r3, #11
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7bfa      	ldrb	r2, [r7, #15]
 800878a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800878c:	7dbb      	ldrb	r3, [r7, #22]
 800878e:	2be5      	cmp	r3, #229	; 0xe5
 8008790:	d007      	beq.n	80087a2 <dir_find+0x8a>
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d009      	beq.n	80087b0 <dir_find+0x98>
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d006      	beq.n	80087b0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087a2:	23ff      	movs	r3, #255	; 0xff
 80087a4:	757b      	strb	r3, [r7, #21]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
 80087ae:	e05e      	b.n	800886e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	d136      	bne.n	8008824 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d154      	bne.n	800886e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00d      	beq.n	80087ea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	7b5b      	ldrb	r3, [r3, #13]
 80087d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	75bb      	strb	r3, [r7, #22]
 80087de:	7dbb      	ldrb	r3, [r7, #22]
 80087e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695a      	ldr	r2, [r3, #20]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80087ea:	7dba      	ldrb	r2, [r7, #22]
 80087ec:	7d7b      	ldrb	r3, [r7, #21]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d115      	bne.n	800881e <dir_find+0x106>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	330d      	adds	r3, #13
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	7d3a      	ldrb	r2, [r7, #20]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d10e      	bne.n	800881e <dir_find+0x106>
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7ff fdfc 	bl	8008408 <cmp_lfn>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <dir_find+0x106>
 8008816:	7d7b      	ldrb	r3, [r7, #21]
 8008818:	3b01      	subs	r3, #1
 800881a:	b2db      	uxtb	r3, r3
 800881c:	e000      	b.n	8008820 <dir_find+0x108>
 800881e:	23ff      	movs	r3, #255	; 0xff
 8008820:	757b      	strb	r3, [r7, #21]
 8008822:	e024      	b.n	800886e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008824:	7d7b      	ldrb	r3, [r7, #21]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <dir_find+0x126>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff ff52 	bl	80086d8 <sum_sfn>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	7d3b      	ldrb	r3, [r7, #20]
 800883a:	4293      	cmp	r3, r2
 800883c:	d024      	beq.n	8008888 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <dir_find+0x14a>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a18      	ldr	r0, [r3, #32]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3324      	adds	r3, #36	; 0x24
 8008854:	220b      	movs	r2, #11
 8008856:	4619      	mov	r1, r3
 8008858:	f7fe fe26 	bl	80074a8 <mem_cmp>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d014      	beq.n	800888c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008862:	23ff      	movs	r3, #255	; 0xff
 8008864:	757b      	strb	r3, [r7, #21]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f04f 32ff 	mov.w	r2, #4294967295
 800886c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800886e:	2100      	movs	r1, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fc6c 	bl	800814e <dir_next>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f43f af65 	beq.w	800874c <dir_find+0x34>
 8008882:	e004      	b.n	800888e <dir_find+0x176>
		if (res != FR_OK) break;
 8008884:	bf00      	nop
 8008886:	e002      	b.n	800888e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800888c:	bf00      	nop

	return res;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	; 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <dir_register+0x20>
 80088b4:	2306      	movs	r3, #6
 80088b6:	e0e0      	b.n	8008a7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80088b8:	2300      	movs	r3, #0
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
 80088bc:	e002      	b.n	80088c4 <dir_register+0x2c>
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	3301      	adds	r3, #1
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f4      	bne.n	80088be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	220c      	movs	r2, #12
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fda7 	bl	8007434 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d032      	beq.n	8008956 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80088f8:	2301      	movs	r3, #1
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088fc:	e016      	b.n	800892c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	f107 010c 	add.w	r1, r7, #12
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	f7ff fe53 	bl	80085b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff ff00 	bl	8008718 <dir_find>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800891e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	3301      	adds	r3, #1
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	2b63      	cmp	r3, #99	; 0x63
 8008930:	d9e5      	bls.n	80088fe <dir_register+0x66>
 8008932:	e000      	b.n	8008936 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008934:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	2b64      	cmp	r3, #100	; 0x64
 800893a:	d101      	bne.n	8008940 <dir_register+0xa8>
 800893c:	2307      	movs	r3, #7
 800893e:	e09c      	b.n	8008a7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008944:	2b04      	cmp	r3, #4
 8008946:	d002      	beq.n	800894e <dir_register+0xb6>
 8008948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800894c:	e095      	b.n	8008a7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800894e:	7dfa      	ldrb	r2, [r7, #23]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <dir_register+0xd8>
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	330c      	adds	r3, #12
 8008964:	4a47      	ldr	r2, [pc, #284]	; (8008a84 <dir_register+0x1ec>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	3301      	adds	r3, #1
 800896e:	e000      	b.n	8008972 <dir_register+0xda>
 8008970:	2301      	movs	r3, #1
 8008972:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008974:	6a39      	ldr	r1, [r7, #32]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fcbf 	bl	80082fa <dir_alloc>
 800897c:	4603      	mov	r3, r0
 800897e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008986:	2b00      	cmp	r3, #0
 8008988:	d148      	bne.n	8008a1c <dir_register+0x184>
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	3b01      	subs	r3, #1
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d042      	beq.n	8008a1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	015b      	lsls	r3, r3, #5
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff fb4a 	bl	800803c <dir_sdi>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80089ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d132      	bne.n	8008a1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3324      	adds	r3, #36	; 0x24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fe8c 	bl	80086d8 <sum_sfn>
 80089c0:	4603      	mov	r3, r0
 80089c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4619      	mov	r1, r3
 80089ca:	69f8      	ldr	r0, [r7, #28]
 80089cc:	f7fe ff56 	bl	800787c <move_window>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80089d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11d      	bne.n	8008a1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	6918      	ldr	r0, [r3, #16]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a19      	ldr	r1, [r3, #32]
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	7efb      	ldrb	r3, [r7, #27]
 80089ec:	f7ff fd7c 	bl	80084e8 <put_lfn>
				fs->wflag = 1;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	2201      	movs	r2, #1
 80089f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80089f6:	2100      	movs	r1, #0
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff fba8 	bl	800814e <dir_next>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d107      	bne.n	8008a1c <dir_register+0x184>
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1d5      	bne.n	80089c4 <dir_register+0x12c>
 8008a18:	e000      	b.n	8008a1c <dir_register+0x184>
				if (res != FR_OK) break;
 8008a1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d128      	bne.n	8008a76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f7fe ff26 	bl	800787c <move_window>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d11b      	bne.n	8008a76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	2220      	movs	r2, #32
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fd14 	bl	8007474 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a18      	ldr	r0, [r3, #32]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	220b      	movs	r2, #11
 8008a56:	4619      	mov	r1, r3
 8008a58:	f7fe fcec 	bl	8007434 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	330c      	adds	r3, #12
 8008a68:	f002 0218 	and.w	r2, r2, #24
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2201      	movs	r2, #1
 8008a74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3730      	adds	r7, #48	; 0x30
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	4ec4ec4f 	.word	0x4ec4ec4f

08008a88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08a      	sub	sp, #40	; 0x28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	613b      	str	r3, [r7, #16]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	61ba      	str	r2, [r7, #24]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab8:	2b1f      	cmp	r3, #31
 8008aba:	d940      	bls.n	8008b3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008abe:	2b2f      	cmp	r3, #47	; 0x2f
 8008ac0:	d006      	beq.n	8008ad0 <create_name+0x48>
 8008ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ac6:	d110      	bne.n	8008aea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ac8:	e002      	b.n	8008ad0 <create_name+0x48>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	3301      	adds	r3, #1
 8008ace:	61bb      	str	r3, [r7, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b2f      	cmp	r3, #47	; 0x2f
 8008ada:	d0f6      	beq.n	8008aca <create_name+0x42>
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ae6:	d0f0      	beq.n	8008aca <create_name+0x42>
			break;
 8008ae8:	e02a      	b.n	8008b40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2bfe      	cmp	r3, #254	; 0xfe
 8008aee:	d901      	bls.n	8008af4 <create_name+0x6c>
 8008af0:	2306      	movs	r3, #6
 8008af2:	e177      	b.n	8008de4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 feaa 	bl	800a858 <ff_convert>
 8008b04:	4603      	mov	r3, r0
 8008b06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <create_name+0x8a>
 8008b0e:	2306      	movs	r3, #6
 8008b10:	e168      	b.n	8008de4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b14:	2b7f      	cmp	r3, #127	; 0x7f
 8008b16:	d809      	bhi.n	8008b2c <create_name+0xa4>
 8008b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	48b3      	ldr	r0, [pc, #716]	; (8008dec <create_name+0x364>)
 8008b1e:	f7fe fce9 	bl	80074f4 <chk_chr>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <create_name+0xa4>
 8008b28:	2306      	movs	r3, #6
 8008b2a:	e15b      	b.n	8008de4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	617a      	str	r2, [r7, #20]
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b3c:	e7b4      	b.n	8008aa8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	441a      	add	r2, r3
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b4c:	2b1f      	cmp	r3, #31
 8008b4e:	d801      	bhi.n	8008b54 <create_name+0xcc>
 8008b50:	2304      	movs	r3, #4
 8008b52:	e000      	b.n	8008b56 <create_name+0xce>
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b5a:	e011      	b.n	8008b80 <create_name+0xf8>
		w = lfn[di - 1];
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b62:	3b01      	subs	r3, #1
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d002      	beq.n	8008b7a <create_name+0xf2>
 8008b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b76:	2b2e      	cmp	r3, #46	; 0x2e
 8008b78:	d106      	bne.n	8008b88 <create_name+0x100>
		di--;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1ea      	bne.n	8008b5c <create_name+0xd4>
 8008b86:	e000      	b.n	8008b8a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b88:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <create_name+0x118>
 8008b9c:	2306      	movs	r3, #6
 8008b9e:	e121      	b.n	8008de4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3324      	adds	r3, #36	; 0x24
 8008ba4:	220b      	movs	r2, #11
 8008ba6:	2120      	movs	r1, #32
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fc63 	bl	8007474 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e002      	b.n	8008bba <create_name+0x132>
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d0f5      	beq.n	8008bb4 <create_name+0x12c>
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd4:	d0ee      	beq.n	8008bb4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d009      	beq.n	8008bf0 <create_name+0x168>
 8008bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008be0:	f043 0303 	orr.w	r3, r3, #3
 8008be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008be8:	e002      	b.n	8008bf0 <create_name+0x168>
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <create_name+0x182>
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	2b2e      	cmp	r3, #46	; 0x2e
 8008c08:	d1ef      	bne.n	8008bea <create_name+0x162>

	i = b = 0; ni = 8;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c10:	2300      	movs	r3, #0
 8008c12:	623b      	str	r3, [r7, #32]
 8008c14:	2308      	movs	r3, #8
 8008c16:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	61ba      	str	r2, [r7, #24]
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 8090 	beq.w	8008d50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d006      	beq.n	8008c44 <create_name+0x1bc>
 8008c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c38:	2b2e      	cmp	r3, #46	; 0x2e
 8008c3a:	d10a      	bne.n	8008c52 <create_name+0x1ca>
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d006      	beq.n	8008c52 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c48:	f043 0303 	orr.w	r3, r3, #3
 8008c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c50:	e07d      	b.n	8008d4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008c52:	6a3a      	ldr	r2, [r7, #32]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d203      	bcs.n	8008c62 <create_name+0x1da>
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d123      	bne.n	8008caa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b0b      	cmp	r3, #11
 8008c66:	d106      	bne.n	8008c76 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c6c:	f043 0303 	orr.w	r3, r3, #3
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c74:	e06f      	b.n	8008d56 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d005      	beq.n	8008c8a <create_name+0x202>
 8008c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c82:	f043 0303 	orr.w	r3, r3, #3
 8008c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d860      	bhi.n	8008d54 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	2308      	movs	r3, #8
 8008c98:	623b      	str	r3, [r7, #32]
 8008c9a:	230b      	movs	r3, #11
 8008c9c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ca8:	e051      	b.n	8008d4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cac:	2b7f      	cmp	r3, #127	; 0x7f
 8008cae:	d914      	bls.n	8008cda <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 fdcf 	bl	800a858 <ff_convert>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <create_name+0x246>
 8008cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cc6:	3b80      	subs	r3, #128	; 0x80
 8008cc8:	4a49      	ldr	r2, [pc, #292]	; (8008df0 <create_name+0x368>)
 8008cca:	5cd3      	ldrb	r3, [r2, r3]
 8008ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd2:	f043 0302 	orr.w	r3, r3, #2
 8008cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <create_name+0x268>
 8008ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4843      	ldr	r0, [pc, #268]	; (8008df4 <create_name+0x36c>)
 8008ce6:	f7fe fc05 	bl	80074f4 <chk_chr>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d008      	beq.n	8008d02 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008cf0:	235f      	movs	r3, #95	; 0x5f
 8008cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cf8:	f043 0303 	orr.w	r3, r3, #3
 8008cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d00:	e01b      	b.n	8008d3a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d04:	2b40      	cmp	r3, #64	; 0x40
 8008d06:	d909      	bls.n	8008d1c <create_name+0x294>
 8008d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d0a:	2b5a      	cmp	r3, #90	; 0x5a
 8008d0c:	d806      	bhi.n	8008d1c <create_name+0x294>
					b |= 2;
 8008d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d12:	f043 0302 	orr.w	r3, r3, #2
 8008d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d1a:	e00e      	b.n	8008d3a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d1e:	2b60      	cmp	r3, #96	; 0x60
 8008d20:	d90b      	bls.n	8008d3a <create_name+0x2b2>
 8008d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d24:	2b7a      	cmp	r3, #122	; 0x7a
 8008d26:	d808      	bhi.n	8008d3a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008d28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d2c:	f043 0301 	orr.w	r3, r3, #1
 8008d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d36:	3b20      	subs	r3, #32
 8008d38:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	623a      	str	r2, [r7, #32]
 8008d40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d42:	b2d1      	uxtb	r1, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	460a      	mov	r2, r1
 8008d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008d4e:	e763      	b.n	8008c18 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008d50:	bf00      	nop
 8008d52:	e000      	b.n	8008d56 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008d54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d5c:	2be5      	cmp	r3, #229	; 0xe5
 8008d5e:	d103      	bne.n	8008d68 <create_name+0x2e0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2205      	movs	r2, #5
 8008d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d104      	bne.n	8008d78 <create_name+0x2f0>
 8008d6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d7c:	f003 030c 	and.w	r3, r3, #12
 8008d80:	2b0c      	cmp	r3, #12
 8008d82:	d005      	beq.n	8008d90 <create_name+0x308>
 8008d84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d105      	bne.n	8008d9c <create_name+0x314>
 8008d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d94:	f043 0302 	orr.w	r3, r3, #2
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d117      	bne.n	8008dd8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d105      	bne.n	8008dc0 <create_name+0x338>
 8008db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db8:	f043 0310 	orr.w	r3, r3, #16
 8008dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dc4:	f003 030c 	and.w	r3, r3, #12
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d105      	bne.n	8008dd8 <create_name+0x350>
 8008dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dd0:	f043 0308 	orr.w	r3, r3, #8
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008dde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008de2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3728      	adds	r7, #40	; 0x28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	0800aaa0 	.word	0x0800aaa0
 8008df0:	0800ab3c 	.word	0x0800ab3c
 8008df4:	0800aaac 	.word	0x0800aaac

08008df8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e0c:	e002      	b.n	8008e14 <follow_path+0x1c>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b2f      	cmp	r3, #47	; 0x2f
 8008e1a:	d0f8      	beq.n	8008e0e <follow_path+0x16>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b5c      	cmp	r3, #92	; 0x5c
 8008e22:	d0f4      	beq.n	8008e0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2200      	movs	r2, #0
 8008e28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b1f      	cmp	r3, #31
 8008e30:	d80a      	bhi.n	8008e48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2280      	movs	r2, #128	; 0x80
 8008e36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f8fd 	bl	800803c <dir_sdi>
 8008e42:	4603      	mov	r3, r0
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e048      	b.n	8008eda <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fe1b 	bl	8008a88 <create_name>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d139      	bne.n	8008ed0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fc5b 	bl	8008718 <dir_find>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d12c      	bne.n	8008ed4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d127      	bne.n	8008ed4 <follow_path+0xdc>
 8008e84:	2305      	movs	r3, #5
 8008e86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e88:	e024      	b.n	8008ed4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d121      	bne.n	8008ed8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	799b      	ldrb	r3, [r3, #6]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ea0:	2305      	movs	r3, #5
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	e019      	b.n	8008eda <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	8992      	ldrh	r2, [r2, #12]
 8008eb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eb8:	fb02 f200 	mul.w	r2, r2, r0
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7ff fa60 	bl	8008388 <ld_clust>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ece:	e7bb      	b.n	8008e48 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <follow_path+0xe2>
				break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ed8:	bf00      	nop
			}
		}
	}

	return res;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008eec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d031      	beq.n	8008f5e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	e002      	b.n	8008f08 <get_ldnumber+0x24>
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3301      	adds	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b1f      	cmp	r3, #31
 8008f0e:	d903      	bls.n	8008f18 <get_ldnumber+0x34>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b3a      	cmp	r3, #58	; 0x3a
 8008f16:	d1f4      	bne.n	8008f02 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8008f1e:	d11c      	bne.n	8008f5a <get_ldnumber+0x76>
			tp = *path;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	60fa      	str	r2, [r7, #12]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	3b30      	subs	r3, #48	; 0x30
 8008f30:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b09      	cmp	r3, #9
 8008f36:	d80e      	bhi.n	8008f56 <get_ldnumber+0x72>
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d10a      	bne.n	8008f56 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d107      	bne.n	8008f56 <get_ldnumber+0x72>
					vol = (int)i;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	e002      	b.n	8008f60 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f5e:	693b      	ldr	r3, [r7, #16]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr
	...

08008f6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	70da      	strb	r2, [r3, #3]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f82:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe fc78 	bl	800787c <move_window>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <check_fs+0x2a>
 8008f92:	2304      	movs	r3, #4
 8008f94:	e038      	b.n	8009008 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3338      	adds	r3, #56	; 0x38
 8008f9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe f9ca 	bl	8007338 <ld_word>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d001      	beq.n	8008fb4 <check_fs+0x48>
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e029      	b.n	8009008 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fba:	2be9      	cmp	r3, #233	; 0xe9
 8008fbc:	d009      	beq.n	8008fd2 <check_fs+0x66>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fc4:	2beb      	cmp	r3, #235	; 0xeb
 8008fc6:	d11e      	bne.n	8009006 <check_fs+0x9a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008fce:	2b90      	cmp	r3, #144	; 0x90
 8008fd0:	d119      	bne.n	8009006 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3338      	adds	r3, #56	; 0x38
 8008fd6:	3336      	adds	r3, #54	; 0x36
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe f9c4 	bl	8007366 <ld_dword>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008fe4:	4a0a      	ldr	r2, [pc, #40]	; (8009010 <check_fs+0xa4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d101      	bne.n	8008fee <check_fs+0x82>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e00c      	b.n	8009008 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3338      	adds	r3, #56	; 0x38
 8008ff2:	3352      	adds	r3, #82	; 0x52
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe f9b6 	bl	8007366 <ld_dword>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4a05      	ldr	r2, [pc, #20]	; (8009014 <check_fs+0xa8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d101      	bne.n	8009006 <check_fs+0x9a>
 8009002:	2300      	movs	r3, #0
 8009004:	e000      	b.n	8009008 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009006:	2302      	movs	r3, #2
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	00544146 	.word	0x00544146
 8009014:	33544146 	.word	0x33544146

08009018 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b096      	sub	sp, #88	; 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff ff59 	bl	8008ee4 <get_ldnumber>
 8009032:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009036:	2b00      	cmp	r3, #0
 8009038:	da01      	bge.n	800903e <find_volume+0x26>
 800903a:	230b      	movs	r3, #11
 800903c:	e268      	b.n	8009510 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800903e:	4ab0      	ldr	r2, [pc, #704]	; (8009300 <find_volume+0x2e8>)
 8009040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <find_volume+0x3a>
 800904e:	230c      	movs	r3, #12
 8009050:	e25e      	b.n	8009510 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009056:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	f023 0301 	bic.w	r3, r3, #1
 800905e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01a      	beq.n	800909e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe f8c5 	bl	80071fc <disk_status>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10c      	bne.n	800909e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <find_volume+0x82>
 800908a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009096:	230a      	movs	r3, #10
 8009098:	e23a      	b.n	8009510 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800909a:	2300      	movs	r3, #0
 800909c:	e238      	b.n	8009510 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	2200      	movs	r2, #0
 80090a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe f8bd 	bl	8007230 <disk_initialize>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090c8:	2303      	movs	r3, #3
 80090ca:	e221      	b.n	8009510 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <find_volume+0xca>
 80090d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80090de:	230a      	movs	r3, #10
 80090e0:	e216      	b.n	8009510 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	7858      	ldrb	r0, [r3, #1]
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	330c      	adds	r3, #12
 80090ea:	461a      	mov	r2, r3
 80090ec:	2102      	movs	r1, #2
 80090ee:	f7fe f905 	bl	80072fc <disk_ioctl>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <find_volume+0xe4>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e209      	b.n	8009510 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	899b      	ldrh	r3, [r3, #12]
 8009100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009104:	d80d      	bhi.n	8009122 <find_volume+0x10a>
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	899b      	ldrh	r3, [r3, #12]
 800910a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910e:	d308      	bcc.n	8009122 <find_volume+0x10a>
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	899b      	ldrh	r3, [r3, #12]
 8009114:	461a      	mov	r2, r3
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	899b      	ldrh	r3, [r3, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	4013      	ands	r3, r2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <find_volume+0x10e>
 8009122:	2301      	movs	r3, #1
 8009124:	e1f4      	b.n	8009510 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800912a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800912c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800912e:	f7ff ff1d 	bl	8008f6c <check_fs>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800913c:	2b02      	cmp	r3, #2
 800913e:	d14b      	bne.n	80091d8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009140:	2300      	movs	r3, #0
 8009142:	643b      	str	r3, [r7, #64]	; 0x40
 8009144:	e01f      	b.n	8009186 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800914c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009154:	4413      	add	r3, r2
 8009156:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915a:	3304      	adds	r3, #4
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d006      	beq.n	8009170 <find_volume+0x158>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	3308      	adds	r3, #8
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe f8fd 	bl	8007366 <ld_dword>
 800916c:	4602      	mov	r2, r0
 800916e:	e000      	b.n	8009172 <find_volume+0x15a>
 8009170:	2200      	movs	r2, #0
 8009172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800917a:	440b      	add	r3, r1
 800917c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009182:	3301      	adds	r3, #1
 8009184:	643b      	str	r3, [r7, #64]	; 0x40
 8009186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009188:	2b03      	cmp	r3, #3
 800918a:	d9dc      	bls.n	8009146 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800918c:	2300      	movs	r3, #0
 800918e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <find_volume+0x184>
 8009196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009198:	3b01      	subs	r3, #1
 800919a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80091a4:	4413      	add	r3, r2
 80091a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80091ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <find_volume+0x1a6>
 80091b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091b6:	f7ff fed9 	bl	8008f6c <check_fs>
 80091ba:	4603      	mov	r3, r0
 80091bc:	e000      	b.n	80091c0 <find_volume+0x1a8>
 80091be:	2303      	movs	r3, #3
 80091c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80091c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d905      	bls.n	80091d8 <find_volume+0x1c0>
 80091cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ce:	3301      	adds	r3, #1
 80091d0:	643b      	str	r3, [r7, #64]	; 0x40
 80091d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d9e1      	bls.n	800919c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d101      	bne.n	80091e4 <find_volume+0x1cc>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e195      	b.n	8009510 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d901      	bls.n	80091f0 <find_volume+0x1d8>
 80091ec:	230d      	movs	r3, #13
 80091ee:	e18f      	b.n	8009510 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	3338      	adds	r3, #56	; 0x38
 80091f4:	330b      	adds	r3, #11
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe f89e 	bl	8007338 <ld_word>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	899b      	ldrh	r3, [r3, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d001      	beq.n	800920c <find_volume+0x1f4>
 8009208:	230d      	movs	r3, #13
 800920a:	e181      	b.n	8009510 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	3338      	adds	r3, #56	; 0x38
 8009210:	3316      	adds	r3, #22
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe f890 	bl	8007338 <ld_word>
 8009218:	4603      	mov	r3, r0
 800921a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800921c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d106      	bne.n	8009230 <find_volume+0x218>
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	3338      	adds	r3, #56	; 0x38
 8009226:	3324      	adds	r3, #36	; 0x24
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe f89c 	bl	8007366 <ld_dword>
 800922e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009234:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	789b      	ldrb	r3, [r3, #2]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d005      	beq.n	8009254 <find_volume+0x23c>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	789b      	ldrb	r3, [r3, #2]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d001      	beq.n	8009254 <find_volume+0x23c>
 8009250:	230d      	movs	r3, #13
 8009252:	e15d      	b.n	8009510 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	789b      	ldrb	r3, [r3, #2]
 8009258:	461a      	mov	r2, r3
 800925a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009268:	b29a      	uxth	r2, r3
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	895b      	ldrh	r3, [r3, #10]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d008      	beq.n	8009288 <find_volume+0x270>
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	895b      	ldrh	r3, [r3, #10]
 800927a:	461a      	mov	r2, r3
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	895b      	ldrh	r3, [r3, #10]
 8009280:	3b01      	subs	r3, #1
 8009282:	4013      	ands	r3, r2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <find_volume+0x274>
 8009288:	230d      	movs	r3, #13
 800928a:	e141      	b.n	8009510 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	3338      	adds	r3, #56	; 0x38
 8009290:	3311      	adds	r3, #17
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe f850 	bl	8007338 <ld_word>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	891b      	ldrh	r3, [r3, #8]
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	8992      	ldrh	r2, [r2, #12]
 80092a8:	0952      	lsrs	r2, r2, #5
 80092aa:	b292      	uxth	r2, r2
 80092ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80092b0:	fb02 f201 	mul.w	r2, r2, r1
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <find_volume+0x2a8>
 80092bc:	230d      	movs	r3, #13
 80092be:	e127      	b.n	8009510 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	3338      	adds	r3, #56	; 0x38
 80092c4:	3313      	adds	r3, #19
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe f836 	bl	8007338 <ld_word>
 80092cc:	4603      	mov	r3, r0
 80092ce:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <find_volume+0x2cc>
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	3338      	adds	r3, #56	; 0x38
 80092da:	3320      	adds	r3, #32
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe f842 	bl	8007366 <ld_dword>
 80092e2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	3338      	adds	r3, #56	; 0x38
 80092e8:	330e      	adds	r3, #14
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe f824 	bl	8007338 <ld_word>
 80092f0:	4603      	mov	r3, r0
 80092f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <find_volume+0x2ec>
 80092fa:	230d      	movs	r3, #13
 80092fc:	e108      	b.n	8009510 <find_volume+0x4f8>
 80092fe:	bf00      	nop
 8009300:	20000110 	.word	0x20000110

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009304:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009308:	4413      	add	r3, r2
 800930a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800930c:	8911      	ldrh	r1, [r2, #8]
 800930e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009310:	8992      	ldrh	r2, [r2, #12]
 8009312:	0952      	lsrs	r2, r2, #5
 8009314:	b292      	uxth	r2, r2
 8009316:	fbb1 f2f2 	udiv	r2, r1, r2
 800931a:	b292      	uxth	r2, r2
 800931c:	4413      	add	r3, r2
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	429a      	cmp	r2, r3
 8009326:	d201      	bcs.n	800932c <find_volume+0x314>
 8009328:	230d      	movs	r3, #13
 800932a:	e0f1      	b.n	8009510 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800932c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009334:	8952      	ldrh	r2, [r2, #10]
 8009336:	fbb3 f3f2 	udiv	r3, r3, r2
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <find_volume+0x32e>
 8009342:	230d      	movs	r3, #13
 8009344:	e0e4      	b.n	8009510 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009346:	2303      	movs	r3, #3
 8009348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009352:	4293      	cmp	r3, r2
 8009354:	d802      	bhi.n	800935c <find_volume+0x344>
 8009356:	2302      	movs	r3, #2
 8009358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009362:	4293      	cmp	r3, r2
 8009364:	d802      	bhi.n	800936c <find_volume+0x354>
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	1c9a      	adds	r2, r3, #2
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009378:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800937a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800937c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800937e:	441a      	add	r2, r3
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	441a      	add	r2, r3
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800938e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009392:	2b03      	cmp	r3, #3
 8009394:	d11e      	bne.n	80093d4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	3338      	adds	r3, #56	; 0x38
 800939a:	332a      	adds	r3, #42	; 0x2a
 800939c:	4618      	mov	r0, r3
 800939e:	f7fd ffcb 	bl	8007338 <ld_word>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <find_volume+0x394>
 80093a8:	230d      	movs	r3, #13
 80093aa:	e0b1      	b.n	8009510 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	891b      	ldrh	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <find_volume+0x3a0>
 80093b4:	230d      	movs	r3, #13
 80093b6:	e0ab      	b.n	8009510 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	3338      	adds	r3, #56	; 0x38
 80093bc:	332c      	adds	r3, #44	; 0x2c
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd ffd1 	bl	8007366 <ld_dword>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	647b      	str	r3, [r7, #68]	; 0x44
 80093d2:	e01f      	b.n	8009414 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	891b      	ldrh	r3, [r3, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <find_volume+0x3c8>
 80093dc:	230d      	movs	r3, #13
 80093de:	e097      	b.n	8009510 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e6:	441a      	add	r2, r3
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d103      	bne.n	80093fc <find_volume+0x3e4>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	e00a      	b.n	8009412 <find_volume+0x3fa>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	69da      	ldr	r2, [r3, #28]
 8009400:	4613      	mov	r3, r2
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	4413      	add	r3, r2
 8009406:	085a      	lsrs	r2, r3, #1
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009412:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	6a1a      	ldr	r2, [r3, #32]
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	899b      	ldrh	r3, [r3, #12]
 800941c:	4619      	mov	r1, r3
 800941e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009420:	440b      	add	r3, r1
 8009422:	3b01      	subs	r3, #1
 8009424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009426:	8989      	ldrh	r1, [r1, #12]
 8009428:	fbb3 f3f1 	udiv	r3, r3, r1
 800942c:	429a      	cmp	r2, r3
 800942e:	d201      	bcs.n	8009434 <find_volume+0x41c>
 8009430:	230d      	movs	r3, #13
 8009432:	e06d      	b.n	8009510 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	f04f 32ff 	mov.w	r2, #4294967295
 800943a:	619a      	str	r2, [r3, #24]
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	2280      	movs	r2, #128	; 0x80
 8009448:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800944a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800944e:	2b03      	cmp	r3, #3
 8009450:	d149      	bne.n	80094e6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	3338      	adds	r3, #56	; 0x38
 8009456:	3330      	adds	r3, #48	; 0x30
 8009458:	4618      	mov	r0, r3
 800945a:	f7fd ff6d 	bl	8007338 <ld_word>
 800945e:	4603      	mov	r3, r0
 8009460:	2b01      	cmp	r3, #1
 8009462:	d140      	bne.n	80094e6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009466:	3301      	adds	r3, #1
 8009468:	4619      	mov	r1, r3
 800946a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800946c:	f7fe fa06 	bl	800787c <move_window>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d137      	bne.n	80094e6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2200      	movs	r2, #0
 800947a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	3338      	adds	r3, #56	; 0x38
 8009480:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009484:	4618      	mov	r0, r3
 8009486:	f7fd ff57 	bl	8007338 <ld_word>
 800948a:	4603      	mov	r3, r0
 800948c:	461a      	mov	r2, r3
 800948e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009492:	429a      	cmp	r2, r3
 8009494:	d127      	bne.n	80094e6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	3338      	adds	r3, #56	; 0x38
 800949a:	4618      	mov	r0, r3
 800949c:	f7fd ff63 	bl	8007366 <ld_dword>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4a1d      	ldr	r2, [pc, #116]	; (8009518 <find_volume+0x500>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d11e      	bne.n	80094e6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	3338      	adds	r3, #56	; 0x38
 80094ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd ff58 	bl	8007366 <ld_dword>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4a18      	ldr	r2, [pc, #96]	; (800951c <find_volume+0x504>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d113      	bne.n	80094e6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	3338      	adds	r3, #56	; 0x38
 80094c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fd ff4d 	bl	8007366 <ld_dword>
 80094cc:	4602      	mov	r2, r0
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	3338      	adds	r3, #56	; 0x38
 80094d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fd ff43 	bl	8007366 <ld_dword>
 80094e0:	4602      	mov	r2, r0
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80094ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80094ee:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <find_volume+0x508>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <find_volume+0x508>)
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <find_volume+0x508>)
 80094fc:	881a      	ldrh	r2, [r3, #0]
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	4a07      	ldr	r2, [pc, #28]	; (8009524 <find_volume+0x50c>)
 8009506:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800950a:	f7fe f94f 	bl	80077ac <clear_lock>
#endif
	return FR_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3758      	adds	r7, #88	; 0x58
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	41615252 	.word	0x41615252
 800951c:	61417272 	.word	0x61417272
 8009520:	20000114 	.word	0x20000114
 8009524:	20000138 	.word	0x20000138

08009528 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009532:	2309      	movs	r3, #9
 8009534:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01c      	beq.n	8009576 <validate+0x4e>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d018      	beq.n	8009576 <validate+0x4e>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d013      	beq.n	8009576 <validate+0x4e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	889a      	ldrh	r2, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	88db      	ldrh	r3, [r3, #6]
 8009558:	429a      	cmp	r2, r3
 800955a:	d10c      	bne.n	8009576 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	4618      	mov	r0, r3
 8009564:	f7fd fe4a 	bl	80071fc <disk_status>
 8009568:	4603      	mov	r3, r0
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <validate+0x4e>
			res = FR_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <validate+0x5a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	e000      	b.n	8009584 <validate+0x5c>
 8009582:	2300      	movs	r3, #0
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	6013      	str	r3, [r2, #0]
	return res;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095a6:	f107 0310 	add.w	r3, r7, #16
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fc9a 	bl	8008ee4 <get_ldnumber>
 80095b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da01      	bge.n	80095bc <f_mount+0x28>
 80095b8:	230b      	movs	r3, #11
 80095ba:	e02b      	b.n	8009614 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095bc:	4a17      	ldr	r2, [pc, #92]	; (800961c <f_mount+0x88>)
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80095cc:	69b8      	ldr	r0, [r7, #24]
 80095ce:	f7fe f8ed 	bl	80077ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	490d      	ldr	r1, [pc, #52]	; (800961c <f_mount+0x88>)
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <f_mount+0x66>
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d001      	beq.n	80095fe <f_mount+0x6a>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e00a      	b.n	8009614 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80095fe:	f107 010c 	add.w	r1, r7, #12
 8009602:	f107 0308 	add.w	r3, r7, #8
 8009606:	2200      	movs	r2, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fd05 	bl	8009018 <find_volume>
 800960e:	4603      	mov	r3, r0
 8009610:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20000110 	.word	0x20000110

08009620 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b09a      	sub	sp, #104	; 0x68
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <f_open+0x18>
 8009634:	2309      	movs	r3, #9
 8009636:	e1bb      	b.n	80099b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800963e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	f107 0114 	add.w	r1, r7, #20
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fce4 	bl	8009018 <find_volume>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800965a:	2b00      	cmp	r3, #0
 800965c:	f040 819f 	bne.w	800999e <f_open+0x37e>
		dj.obj.fs = fs;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	f107 0318 	add.w	r3, r7, #24
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff fbc3 	bl	8008df8 <follow_path>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800967c:	2b00      	cmp	r3, #0
 800967e:	d11a      	bne.n	80096b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009684:	b25b      	sxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	da03      	bge.n	8009692 <f_open+0x72>
				res = FR_INVALID_NAME;
 800968a:	2306      	movs	r3, #6
 800968c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009690:	e011      	b.n	80096b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	f107 0318 	add.w	r3, r7, #24
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fd ff3c 	bl	8007528 <chk_lock>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	f003 031c 	and.w	r3, r3, #28
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d07f      	beq.n	80097c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80096c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d10e      	bne.n	80096ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096d0:	f7fd ff84 	bl	80075dc <enq_lock>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d006      	beq.n	80096e8 <f_open+0xc8>
 80096da:	f107 0318 	add.w	r3, r7, #24
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff f8da 	bl	8008898 <dir_register>
 80096e4:	4603      	mov	r3, r0
 80096e6:	e000      	b.n	80096ea <f_open+0xca>
 80096e8:	2312      	movs	r3, #18
 80096ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	f043 0308 	orr.w	r3, r3, #8
 80096f4:	71fb      	strb	r3, [r7, #7]
 80096f6:	e010      	b.n	800971a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096f8:	7fbb      	ldrb	r3, [r7, #30]
 80096fa:	f003 0311 	and.w	r3, r3, #17
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <f_open+0xea>
					res = FR_DENIED;
 8009702:	2307      	movs	r3, #7
 8009704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009708:	e007      	b.n	800971a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <f_open+0xfa>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800971a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800971e:	2b00      	cmp	r3, #0
 8009720:	d168      	bne.n	80097f4 <f_open+0x1d4>
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	2b00      	cmp	r3, #0
 800972a:	d063      	beq.n	80097f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800972c:	f7fd fd0a 	bl	8007144 <get_fattime>
 8009730:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	330e      	adds	r3, #14
 8009736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd fe50 	bl	80073de <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	3316      	adds	r3, #22
 8009742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009744:	4618      	mov	r0, r3
 8009746:	f7fd fe4a 	bl	80073de <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	330b      	adds	r3, #11
 800974e:	2220      	movs	r2, #32
 8009750:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fe15 	bl	8008388 <ld_clust>
 800975e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009764:	2200      	movs	r2, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fe2d 	bl	80083c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	331c      	adds	r3, #28
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd fe33 	bl	80073de <st_dword>
					fs->wflag = 1;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2201      	movs	r2, #1
 800977c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800977e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009780:	2b00      	cmp	r3, #0
 8009782:	d037      	beq.n	80097f4 <f_open+0x1d4>
						dw = fs->winsect;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	2200      	movs	r2, #0
 8009790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fb1e 	bl	8007dd4 <remove_chain>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800979e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d126      	bne.n	80097f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe f866 	bl	800787c <move_window>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097ba:	3a01      	subs	r2, #1
 80097bc:	615a      	str	r2, [r3, #20]
 80097be:	e019      	b.n	80097f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d115      	bne.n	80097f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097c8:	7fbb      	ldrb	r3, [r7, #30]
 80097ca:	f003 0310 	and.w	r3, r3, #16
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <f_open+0x1ba>
					res = FR_NO_FILE;
 80097d2:	2304      	movs	r3, #4
 80097d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80097d8:	e00c      	b.n	80097f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <f_open+0x1d4>
 80097e4:	7fbb      	ldrb	r3, [r7, #30]
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <f_open+0x1d4>
						res = FR_DENIED;
 80097ee:	2307      	movs	r3, #7
 80097f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80097f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d128      	bne.n	800984e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	f003 0308 	and.w	r3, r3, #8
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	f023 0301 	bic.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2301      	movne	r3, #1
 8009828:	2300      	moveq	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	461a      	mov	r2, r3
 800982e:	f107 0318 	add.w	r3, r7, #24
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd fef1 	bl	800761c <inc_lock>
 800983a:	4602      	mov	r2, r0
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <f_open+0x22e>
 8009848:	2302      	movs	r3, #2
 800984a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800984e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009852:	2b00      	cmp	r3, #0
 8009854:	f040 80a3 	bne.w	800999e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fd92 	bl	8008388 <ld_clust>
 8009864:	4602      	mov	r2, r0
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	331c      	adds	r3, #28
 800986e:	4618      	mov	r0, r3
 8009870:	f7fd fd79 	bl	8007366 <ld_dword>
 8009874:	4602      	mov	r2, r0
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	88da      	ldrh	r2, [r3, #6]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	79fa      	ldrb	r2, [r7, #7]
 8009892:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3330      	adds	r3, #48	; 0x30
 80098aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fd fddf 	bl	8007474 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d06e      	beq.n	800999e <f_open+0x37e>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d06a      	beq.n	800999e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	895b      	ldrh	r3, [r3, #10]
 80098d4:	461a      	mov	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	899b      	ldrh	r3, [r3, #12]
 80098da:	fb03 f302 	mul.w	r3, r3, r2
 80098de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098ec:	e016      	b.n	800991c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe f87e 	bl	80079f4 <get_fat>
 80098f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80098fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d802      	bhi.n	8009906 <f_open+0x2e6>
 8009900:	2302      	movs	r3, #2
 8009902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d102      	bne.n	8009914 <f_open+0x2f4>
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800991c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009920:	2b00      	cmp	r3, #0
 8009922:	d103      	bne.n	800992c <f_open+0x30c>
 8009924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009928:	429a      	cmp	r2, r3
 800992a:	d8e0      	bhi.n	80098ee <f_open+0x2ce>
				}
				fp->clust = clst;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009930:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009936:	2b00      	cmp	r3, #0
 8009938:	d131      	bne.n	800999e <f_open+0x37e>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	899b      	ldrh	r3, [r3, #12]
 800993e:	461a      	mov	r2, r3
 8009940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009942:	fbb3 f1f2 	udiv	r1, r3, r2
 8009946:	fb02 f201 	mul.w	r2, r2, r1
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d026      	beq.n	800999e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe f82f 	bl	80079b8 <clust2sect>
 800995a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800995c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d103      	bne.n	800996a <f_open+0x34a>
						res = FR_INT_ERR;
 8009962:	2302      	movs	r3, #2
 8009964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009968:	e019      	b.n	800999e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	899b      	ldrh	r3, [r3, #12]
 800996e:	461a      	mov	r2, r3
 8009970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009972:	fbb3 f2f2 	udiv	r2, r3, r2
 8009976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009978:	441a      	add	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	7858      	ldrb	r0, [r3, #1]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1a      	ldr	r2, [r3, #32]
 800998c:	2301      	movs	r3, #1
 800998e:	f7fd fc75 	bl	800727c <disk_read>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <f_open+0x37e>
 8009998:	2301      	movs	r3, #1
 800999a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800999e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <f_open+0x38c>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3768      	adds	r7, #104	; 0x68
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f107 0210 	add.w	r2, r7, #16
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fda5 	bl	8009528 <validate>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d107      	bne.n	80099fc <f_write+0x44>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	7d5b      	ldrb	r3, [r3, #21]
 80099f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <f_write+0x4a>
 80099fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a00:	e16a      	b.n	8009cd8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	7d1b      	ldrb	r3, [r3, #20]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <f_write+0x5a>
 8009a0e:	2307      	movs	r3, #7
 8009a10:	e162      	b.n	8009cd8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	441a      	add	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	f080 814c 	bcs.w	8009cbc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a2c:	e146      	b.n	8009cbc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	8992      	ldrh	r2, [r2, #12]
 8009a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a3a:	fb02 f201 	mul.w	r2, r2, r1
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 80f1 	bne.w	8009c28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	8992      	ldrh	r2, [r2, #12]
 8009a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	8952      	ldrh	r2, [r2, #10]
 8009a56:	3a01      	subs	r2, #1
 8009a58:	4013      	ands	r3, r2
 8009a5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d143      	bne.n	8009aea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10c      	bne.n	8009a84 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d11a      	bne.n	8009aac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fa0f 	bl	8007e9e <create_chain>
 8009a80:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a82:	e013      	b.n	8009aac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	4619      	mov	r1, r3
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7fe fa9b 	bl	8007fce <clmt_clust>
 8009a98:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a9a:	e007      	b.n	8009aac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe f9fa 	bl	8007e9e <create_chain>
 8009aaa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 8109 	beq.w	8009cc6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d104      	bne.n	8009ac4 <f_write+0x10c>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2202      	movs	r2, #2
 8009abe:	755a      	strb	r2, [r3, #21]
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e109      	b.n	8009cd8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d104      	bne.n	8009ad6 <f_write+0x11e>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	755a      	strb	r2, [r3, #21]
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e100      	b.n	8009cd8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ada:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <f_write+0x132>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	7d1b      	ldrb	r3, [r3, #20]
 8009aee:	b25b      	sxtb	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da18      	bge.n	8009b26 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	7858      	ldrb	r0, [r3, #1]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1a      	ldr	r2, [r3, #32]
 8009b02:	2301      	movs	r3, #1
 8009b04:	f7fd fbda 	bl	80072bc <disk_write>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <f_write+0x160>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	755a      	strb	r2, [r3, #21]
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0df      	b.n	8009cd8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	7d1b      	ldrb	r3, [r3, #20]
 8009b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	f7fd ff42 	bl	80079b8 <clust2sect>
 8009b34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d104      	bne.n	8009b46 <f_write+0x18e>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	755a      	strb	r2, [r3, #21]
 8009b42:	2302      	movs	r3, #2
 8009b44:	e0c8      	b.n	8009cd8 <f_write+0x320>
			sect += csect;
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b5a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d043      	beq.n	8009bea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	4413      	add	r3, r2
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	8952      	ldrh	r2, [r2, #10]
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d905      	bls.n	8009b7c <f_write+0x1c4>
					cc = fs->csize - csect;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	895b      	ldrh	r3, [r3, #10]
 8009b74:	461a      	mov	r2, r3
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	7858      	ldrb	r0, [r3, #1]
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	69f9      	ldr	r1, [r7, #28]
 8009b86:	f7fd fb99 	bl	80072bc <disk_write>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <f_write+0x1e2>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2201      	movs	r2, #1
 8009b94:	755a      	strb	r2, [r3, #21]
 8009b96:	2301      	movs	r3, #1
 8009b98:	e09e      	b.n	8009cd8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a1a      	ldr	r2, [r3, #32]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	6a3a      	ldr	r2, [r7, #32]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d918      	bls.n	8009bda <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1a      	ldr	r2, [r3, #32]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	8992      	ldrh	r2, [r2, #12]
 8009bba:	fb02 f303 	mul.w	r3, r2, r3
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	18d1      	adds	r1, r2, r3
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	899b      	ldrh	r3, [r3, #12]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f7fd fc34 	bl	8007434 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	7d1b      	ldrb	r3, [r3, #20]
 8009bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	899b      	ldrh	r3, [r3, #12]
 8009bde:	461a      	mov	r2, r3
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	fb02 f303 	mul.w	r3, r2, r3
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009be8:	e04b      	b.n	8009c82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d016      	beq.n	8009c22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d210      	bcs.n	8009c22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	7858      	ldrb	r0, [r3, #1]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	f7fd fb35 	bl	800727c <disk_read>
 8009c12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	755a      	strb	r2, [r3, #21]
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e05a      	b.n	8009cd8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	899b      	ldrh	r3, [r3, #12]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	8992      	ldrh	r2, [r2, #12]
 8009c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c3a:	fb02 f201 	mul.w	r2, r2, r1
 8009c3e:	1a9b      	subs	r3, r3, r2
 8009c40:	1ac3      	subs	r3, r0, r3
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d901      	bls.n	8009c50 <f_write+0x298>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	8992      	ldrh	r2, [r2, #12]
 8009c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c62:	fb02 f200 	mul.w	r2, r2, r0
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	440b      	add	r3, r1
 8009c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6c:	69f9      	ldr	r1, [r7, #28]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd fbe0 	bl	8007434 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
 8009c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	4413      	add	r3, r2
 8009c88:	61fb      	str	r3, [r7, #28]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	441a      	add	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	619a      	str	r2, [r3, #24]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	bf38      	it	cc
 8009ca2:	461a      	movcc	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	60da      	str	r2, [r3, #12]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	441a      	add	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f47f aeb5 	bne.w	8009a2e <f_write+0x76>
 8009cc4:	e000      	b.n	8009cc8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cc6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	7d1b      	ldrb	r3, [r3, #20]
 8009ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3730      	adds	r7, #48	; 0x30
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f107 0208 	add.w	r2, r7, #8
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fc19 	bl	8009528 <validate>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d168      	bne.n	8009dd2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7d1b      	ldrb	r3, [r3, #20]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d062      	beq.n	8009dd2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da15      	bge.n	8009d42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	7858      	ldrb	r0, [r3, #1]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1a      	ldr	r2, [r3, #32]
 8009d24:	2301      	movs	r3, #1
 8009d26:	f7fd fac9 	bl	80072bc <disk_write>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <f_sync+0x54>
 8009d30:	2301      	movs	r3, #1
 8009d32:	e04f      	b.n	8009dd4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7d1b      	ldrb	r3, [r3, #20]
 8009d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d42:	f7fd f9ff 	bl	8007144 <get_fattime>
 8009d46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7fd fd93 	bl	800787c <move_window>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d138      	bne.n	8009dd2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	330b      	adds	r3, #11
 8009d6a:	781a      	ldrb	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	330b      	adds	r3, #11
 8009d70:	f042 0220 	orr.w	r2, r2, #32
 8009d74:	b2d2      	uxtb	r2, r2
 8009d76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	461a      	mov	r2, r3
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	f7fe fb1f 	bl	80083c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f103 021c 	add.w	r2, r3, #28
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f7fd fb22 	bl	80073de <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3316      	adds	r3, #22
 8009d9e:	6939      	ldr	r1, [r7, #16]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fd fb1c 	bl	80073de <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3312      	adds	r3, #18
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fd fafc 	bl	80073aa <st_word>
					fs->wflag = 1;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2201      	movs	r2, #1
 8009db6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fd fd8c 	bl	80078d8 <sync_fs>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7d1b      	ldrb	r3, [r3, #20]
 8009dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff7b 	bl	8009ce0 <f_sync>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d118      	bne.n	8009e26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fb93 	bl	8009528 <validate>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10c      	bne.n	8009e26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fd fc91 	bl	8007738 <dec_lock>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b090      	sub	sp, #64	; 0x40
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f107 0208 	add.w	r2, r7, #8
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff fb70 	bl	8009528 <validate>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d103      	bne.n	8009e5e <f_lseek+0x2e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	7d5b      	ldrb	r3, [r3, #21]
 8009e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <f_lseek+0x3c>
 8009e66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e6a:	e201      	b.n	800a270 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 80d9 	beq.w	800a028 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d15a      	bne.n	8009f34 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	1d1a      	adds	r2, r3, #4
 8009e88:	627a      	str	r2, [r7, #36]	; 0x24
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	2302      	movs	r3, #2
 8009e90:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d03a      	beq.n	8009f14 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	613b      	str	r3, [r7, #16]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd fd9a 	bl	80079f4 <get_fat>
 8009ec0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d804      	bhi.n	8009ed2 <f_lseek+0xa2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	755a      	strb	r2, [r3, #21]
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e1ce      	b.n	800a270 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed8:	d104      	bne.n	8009ee4 <f_lseek+0xb4>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	755a      	strb	r2, [r3, #21]
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e1c5      	b.n	800a270 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d0de      	beq.n	8009eac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d809      	bhi.n	8009f0a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	627a      	str	r2, [r7, #36]	; 0x24
 8009efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	1d1a      	adds	r2, r3, #4
 8009f04:	627a      	str	r2, [r7, #36]	; 0x24
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d3c4      	bcc.n	8009e9e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d803      	bhi.n	8009f2c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e19f      	b.n	800a26c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f2c:	2311      	movs	r3, #17
 8009f2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f32:	e19b      	b.n	800a26c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d902      	bls.n	8009f44 <f_lseek+0x114>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 818d 	beq.w	800a26c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fe f838 	bl	8007fce <clmt_clust>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fd fd23 	bl	80079b8 <clust2sect>
 8009f72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d104      	bne.n	8009f84 <f_lseek+0x154>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	755a      	strb	r2, [r3, #21]
 8009f80:	2302      	movs	r3, #2
 8009f82:	e175      	b.n	800a270 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	8992      	ldrh	r2, [r2, #12]
 8009f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	8952      	ldrh	r2, [r2, #10]
 8009f94:	3a01      	subs	r2, #1
 8009f96:	4013      	ands	r3, r2
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	8992      	ldrh	r2, [r2, #12]
 8009fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009faa:	fb02 f201 	mul.w	r2, r2, r1
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 815b 	beq.w	800a26c <f_lseek+0x43c>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	f000 8155 	beq.w	800a26c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7d1b      	ldrb	r3, [r3, #20]
 8009fc6:	b25b      	sxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da18      	bge.n	8009ffe <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	7858      	ldrb	r0, [r3, #1]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1a      	ldr	r2, [r3, #32]
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f7fd f96e 	bl	80072bc <disk_write>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <f_lseek+0x1c0>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	755a      	strb	r2, [r3, #21]
 8009fec:	2301      	movs	r3, #1
 8009fee:	e13f      	b.n	800a270 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
 8009ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	7858      	ldrb	r0, [r3, #1]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a008:	2301      	movs	r3, #1
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	f7fd f936 	bl	800727c <disk_read>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <f_lseek+0x1f0>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	755a      	strb	r2, [r3, #21]
 800a01c:	2301      	movs	r3, #1
 800a01e:	e127      	b.n	800a270 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	621a      	str	r2, [r3, #32]
 800a026:	e121      	b.n	800a26c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d908      	bls.n	800a044 <f_lseek+0x214>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a052:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 80b5 	beq.w	800a1c6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	895b      	ldrh	r3, [r3, #10]
 800a060:	461a      	mov	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	899b      	ldrh	r3, [r3, #12]
 800a066:	fb03 f302 	mul.w	r3, r3, r2
 800a06a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01b      	beq.n	800a0aa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	1e5a      	subs	r2, r3, #1
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	fbb2 f2f3 	udiv	r2, r2, r3
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	1e59      	subs	r1, r3, #1
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a086:	429a      	cmp	r2, r3
 800a088:	d30f      	bcc.n	800a0aa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	425b      	negs	r3, r3
 800a092:	401a      	ands	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0a8:	e022      	b.n	800a0f0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d119      	bne.n	800a0ea <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fd feef 	bl	8007e9e <create_chain>
 800a0c0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d104      	bne.n	800a0d2 <f_lseek+0x2a2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	755a      	strb	r2, [r3, #21]
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e0ce      	b.n	800a270 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d8:	d104      	bne.n	800a0e4 <f_lseek+0x2b4>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	755a      	strb	r2, [r3, #21]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0c5      	b.n	800a270 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d067      	beq.n	800a1c6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a0f6:	e03a      	b.n	800a16e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699a      	ldr	r2, [r3, #24]
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	441a      	add	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7d1b      	ldrb	r3, [r3, #20]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fd febe 	bl	8007e9e <create_chain>
 800a122:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	2b00      	cmp	r3, #0
 800a128:	d108      	bne.n	800a13c <f_lseek+0x30c>
							ofs = 0; break;
 800a12a:	2300      	movs	r3, #0
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	e022      	b.n	800a176 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd fc5d 	bl	80079f4 <get_fat>
 800a13a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d104      	bne.n	800a14e <f_lseek+0x31e>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	755a      	strb	r2, [r3, #21]
 800a14a:	2301      	movs	r3, #1
 800a14c:	e090      	b.n	800a270 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	2b01      	cmp	r3, #1
 800a152:	d904      	bls.n	800a15e <f_lseek+0x32e>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d304      	bcc.n	800a168 <f_lseek+0x338>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2202      	movs	r2, #2
 800a162:	755a      	strb	r2, [r3, #21]
 800a164:	2302      	movs	r3, #2
 800a166:	e083      	b.n	800a270 <f_lseek+0x440>
					fp->clust = clst;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a16c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	429a      	cmp	r2, r3
 800a174:	d8c0      	bhi.n	800a0f8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699a      	ldr	r2, [r3, #24]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	441a      	add	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	899b      	ldrh	r3, [r3, #12]
 800a186:	461a      	mov	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a18e:	fb02 f201 	mul.w	r2, r2, r1
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d016      	beq.n	800a1c6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fc0b 	bl	80079b8 <clust2sect>
 800a1a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <f_lseek+0x384>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	755a      	strb	r2, [r3, #21]
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e05d      	b.n	800a270 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	899b      	ldrh	r3, [r3, #12]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c2:	4413      	add	r3, r2
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d90a      	bls.n	800a1e8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699a      	ldr	r2, [r3, #24]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7d1b      	ldrb	r3, [r3, #20]
 800a1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	8992      	ldrh	r2, [r2, #12]
 800a1f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f4:	fb02 f201 	mul.w	r2, r2, r1
 800a1f8:	1a9b      	subs	r3, r3, r2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d036      	beq.n	800a26c <f_lseek+0x43c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a204:	429a      	cmp	r2, r3
 800a206:	d031      	beq.n	800a26c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7d1b      	ldrb	r3, [r3, #20]
 800a20c:	b25b      	sxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	da18      	bge.n	800a244 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	7858      	ldrb	r0, [r3, #1]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a1a      	ldr	r2, [r3, #32]
 800a220:	2301      	movs	r3, #1
 800a222:	f7fd f84b 	bl	80072bc <disk_write>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d004      	beq.n	800a236 <f_lseek+0x406>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	755a      	strb	r2, [r3, #21]
 800a232:	2301      	movs	r3, #1
 800a234:	e01c      	b.n	800a270 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7d1b      	ldrb	r3, [r3, #20]
 800a23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	7858      	ldrb	r0, [r3, #1]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a24e:	2301      	movs	r3, #1
 800a250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a252:	f7fd f813 	bl	800727c <disk_read>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d004      	beq.n	800a266 <f_lseek+0x436>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	755a      	strb	r2, [r3, #21]
 800a262:	2301      	movs	r3, #1
 800a264:	e004      	b.n	800a270 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a26a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a26c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a270:	4618      	mov	r0, r3
 800a272:	3740      	adds	r7, #64	; 0x40
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	2b0a      	cmp	r3, #10
 800a288:	d103      	bne.n	800a292 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a28a:	210d      	movs	r1, #13
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff fff3 	bl	800a278 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	db25      	blt.n	800a2ea <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	60fa      	str	r2, [r7, #12]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b3c      	cmp	r3, #60	; 0x3c
 800a2b0:	dd12      	ble.n	800a2d8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f103 010c 	add.w	r1, r3, #12
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	f7ff fb79 	bl	80099b8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d101      	bne.n	800a2d2 <putc_bfd+0x5a>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e001      	b.n	800a2d6 <putc_bfd+0x5e>
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	e000      	b.n	800a2ec <putc_bfd+0x74>
	if (i < 0) return;
 800a2ea:	bf00      	nop
}
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	db16      	blt.n	800a330 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f103 010c 	add.w	r1, r3, #12
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	461a      	mov	r2, r3
 800a312:	f107 030c 	add.w	r3, r7, #12
 800a316:	f7ff fb4f 	bl	80099b8 <f_write>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d107      	bne.n	800a330 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4293      	cmp	r3, r2
 800a328:	d102      	bne.n	800a330 <putc_flush+0x3e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	e001      	b.n	800a334 <putc_flush+0x42>
	return EOF;
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	609a      	str	r2, [r3, #8]
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	bc80      	pop	{r7}
 800a362:	4770      	bx	lr

0800a364 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a364:	b40e      	push	{r1, r2, r3}
 800a366:	b580      	push	{r7, lr}
 800a368:	b0a7      	sub	sp, #156	; 0x9c
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a36e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ffe1 	bl	800a33c <putc_init>

	va_start(arp, fmt);
 800a37a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a37e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a380:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a390:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 81f4 	beq.w	800a782 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a39a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a39e:	2b25      	cmp	r3, #37	; 0x25
 800a3a0:	d008      	beq.n	800a3b4 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a3a2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a3a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff63 	bl	800a278 <putc_bfd>
			continue;
 800a3b2:	e1e5      	b.n	800a780 <f_printf+0x41c>
		}
		w = f = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a3c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a3d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a3d4:	2b30      	cmp	r3, #48	; 0x30
 800a3d6:	d10b      	bne.n	800a3f0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a3de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a3ee:	e024      	b.n	800a43a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a3f0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a3f4:	2b2d      	cmp	r3, #45	; 0x2d
 800a3f6:	d120      	bne.n	800a43a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a3fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a40e:	e014      	b.n	800a43a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a410:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	461a      	mov	r2, r3
 800a41e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a422:	4413      	add	r3, r2
 800a424:	3b30      	subs	r3, #48	; 0x30
 800a426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a42a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a43a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a43e:	2b2f      	cmp	r3, #47	; 0x2f
 800a440:	d903      	bls.n	800a44a <f_printf+0xe6>
 800a442:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a446:	2b39      	cmp	r3, #57	; 0x39
 800a448:	d9e2      	bls.n	800a410 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a44a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a44e:	2b6c      	cmp	r3, #108	; 0x6c
 800a450:	d003      	beq.n	800a45a <f_printf+0xf6>
 800a452:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a456:	2b4c      	cmp	r3, #76	; 0x4c
 800a458:	d10d      	bne.n	800a476 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a45a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a45e:	f043 0304 	orr.w	r3, r3, #4
 800a462:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a476:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 8183 	beq.w	800a786 <f_printf+0x422>
		d = c;
 800a480:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a484:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a488:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a48c:	2b60      	cmp	r3, #96	; 0x60
 800a48e:	d908      	bls.n	800a4a2 <f_printf+0x13e>
 800a490:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a494:	2b7a      	cmp	r3, #122	; 0x7a
 800a496:	d804      	bhi.n	800a4a2 <f_printf+0x13e>
 800a498:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a49c:	3b20      	subs	r3, #32
 800a49e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a4a2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a4a6:	3b42      	subs	r3, #66	; 0x42
 800a4a8:	2b16      	cmp	r3, #22
 800a4aa:	f200 8098 	bhi.w	800a5de <f_printf+0x27a>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <f_printf+0x150>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a5bf 	.word	0x0800a5bf
 800a4b8:	0800a5a7 	.word	0x0800a5a7
 800a4bc:	0800a5cf 	.word	0x0800a5cf
 800a4c0:	0800a5df 	.word	0x0800a5df
 800a4c4:	0800a5df 	.word	0x0800a5df
 800a4c8:	0800a5df 	.word	0x0800a5df
 800a4cc:	0800a5df 	.word	0x0800a5df
 800a4d0:	0800a5df 	.word	0x0800a5df
 800a4d4:	0800a5df 	.word	0x0800a5df
 800a4d8:	0800a5df 	.word	0x0800a5df
 800a4dc:	0800a5df 	.word	0x0800a5df
 800a4e0:	0800a5df 	.word	0x0800a5df
 800a4e4:	0800a5df 	.word	0x0800a5df
 800a4e8:	0800a5c7 	.word	0x0800a5c7
 800a4ec:	0800a5df 	.word	0x0800a5df
 800a4f0:	0800a5df 	.word	0x0800a5df
 800a4f4:	0800a5df 	.word	0x0800a5df
 800a4f8:	0800a511 	.word	0x0800a511
 800a4fc:	0800a5df 	.word	0x0800a5df
 800a500:	0800a5cf 	.word	0x0800a5cf
 800a504:	0800a5df 	.word	0x0800a5df
 800a508:	0800a5df 	.word	0x0800a5df
 800a50c:	0800a5d7 	.word	0x0800a5d7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a512:	1d1a      	adds	r2, r3, #4
 800a514:	67ba      	str	r2, [r7, #120]	; 0x78
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a51a:	2300      	movs	r3, #0
 800a51c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a520:	e004      	b.n	800a52c <f_printf+0x1c8>
 800a522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a526:	3301      	adds	r3, #1
 800a528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a52c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a52e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a532:	4413      	add	r3, r2
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f3      	bne.n	800a522 <f_printf+0x1be>
			if (!(f & 2)) {
 800a53a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d11a      	bne.n	800a57c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a546:	e005      	b.n	800a554 <f_printf+0x1f0>
 800a548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a54c:	2120      	movs	r1, #32
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fe92 	bl	800a278 <putc_bfd>
 800a554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a55e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a562:	429a      	cmp	r2, r3
 800a564:	d8f0      	bhi.n	800a548 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a566:	e009      	b.n	800a57c <f_printf+0x218>
 800a568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a56e:	781a      	ldrb	r2, [r3, #0]
 800a570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7ff fe7e 	bl	800a278 <putc_bfd>
 800a57c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1f1      	bne.n	800a568 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a584:	e005      	b.n	800a592 <f_printf+0x22e>
 800a586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a58a:	2120      	movs	r1, #32
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff fe73 	bl	800a278 <putc_bfd>
 800a592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a59c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d8f0      	bhi.n	800a586 <f_printf+0x222>
			continue;
 800a5a4:	e0ec      	b.n	800a780 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a5a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a8:	1d1a      	adds	r2, r3, #4
 800a5aa:	67ba      	str	r2, [r7, #120]	; 0x78
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fe5e 	bl	800a278 <putc_bfd>
 800a5bc:	e0e0      	b.n	800a780 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a5c4:	e014      	b.n	800a5f0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a5cc:	e010      	b.n	800a5f0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a5ce:	230a      	movs	r3, #10
 800a5d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a5d4:	e00c      	b.n	800a5f0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a5d6:	2310      	movs	r3, #16
 800a5d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a5dc:	e008      	b.n	800a5f0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a5de:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a5e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fe45 	bl	800a278 <putc_bfd>
 800a5ee:	e0c7      	b.n	800a780 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a5f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <f_printf+0x2a2>
 800a5fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5fe:	1d1a      	adds	r2, r3, #4
 800a600:	67ba      	str	r2, [r7, #120]	; 0x78
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	e00c      	b.n	800a620 <f_printf+0x2bc>
 800a606:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a60a:	2b44      	cmp	r3, #68	; 0x44
 800a60c:	d104      	bne.n	800a618 <f_printf+0x2b4>
 800a60e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a610:	1d1a      	adds	r2, r3, #4
 800a612:	67ba      	str	r2, [r7, #120]	; 0x78
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	e003      	b.n	800a620 <f_printf+0x2bc>
 800a618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a61a:	1d1a      	adds	r2, r3, #4
 800a61c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a624:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a628:	2b44      	cmp	r3, #68	; 0x44
 800a62a:	d10e      	bne.n	800a64a <f_printf+0x2e6>
 800a62c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a630:	2b00      	cmp	r3, #0
 800a632:	da0a      	bge.n	800a64a <f_printf+0x2e6>
			v = 0 - v;
 800a634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a638:	425b      	negs	r3, r3
 800a63a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a63e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a642:	f043 0308 	orr.w	r3, r3, #8
 800a646:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a650:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a658:	fbb3 f1f2 	udiv	r1, r3, r2
 800a65c:	fb02 f201 	mul.w	r2, r2, r1
 800a660:	1a9b      	subs	r3, r3, r2
 800a662:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a666:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a66a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a676:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	d90b      	bls.n	800a696 <f_printf+0x332>
 800a67e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a682:	2b78      	cmp	r3, #120	; 0x78
 800a684:	d101      	bne.n	800a68a <f_printf+0x326>
 800a686:	2227      	movs	r2, #39	; 0x27
 800a688:	e000      	b.n	800a68c <f_printf+0x328>
 800a68a:	2207      	movs	r2, #7
 800a68c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a690:	4413      	add	r3, r2
 800a692:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a6a0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a6a4:	3230      	adds	r2, #48	; 0x30
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a6ac:	440b      	add	r3, r1
 800a6ae:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a6b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <f_printf+0x35e>
 800a6ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6be:	2b1f      	cmp	r3, #31
 800a6c0:	d9c6      	bls.n	800a650 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a6c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <f_printf+0x380>
 800a6ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a6d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a6dc:	4413      	add	r3, r2
 800a6de:	222d      	movs	r2, #45	; 0x2d
 800a6e0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a6e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <f_printf+0x398>
 800a6f8:	2330      	movs	r3, #48	; 0x30
 800a6fa:	e000      	b.n	800a6fe <f_printf+0x39a>
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a702:	e007      	b.n	800a714 <f_printf+0x3b0>
 800a704:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff fdb2 	bl	800a278 <putc_bfd>
 800a714:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <f_printf+0x3ce>
 800a720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a72a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a72e:	429a      	cmp	r2, r3
 800a730:	d8e8      	bhi.n	800a704 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800a732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a736:	3b01      	subs	r3, #1
 800a738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a73c:	f107 020c 	add.w	r2, r7, #12
 800a740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a744:	4413      	add	r3, r2
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fd92 	bl	800a278 <putc_bfd>
		} while (i);
 800a754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1ea      	bne.n	800a732 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800a75c:	e007      	b.n	800a76e <f_printf+0x40a>
 800a75e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fd85 	bl	800a278 <putc_bfd>
 800a76e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a778:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d8ee      	bhi.n	800a75e <f_printf+0x3fa>
		c = *fmt++;
 800a780:	e5fe      	b.n	800a380 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a782:	bf00      	nop
 800a784:	e000      	b.n	800a788 <f_printf+0x424>
		if (!c) break;
 800a786:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fdb0 	bl	800a2f2 <putc_flush>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	379c      	adds	r7, #156	; 0x9c
 800a798:	46bd      	mov	sp, r7
 800a79a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a79e:	b003      	add	sp, #12
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop

0800a7a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a7ba:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7bc:	7a5b      	ldrb	r3, [r3, #9]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d131      	bne.n	800a828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7c6:	7a5b      	ldrb	r3, [r3, #9]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4b19      	ldr	r3, [pc, #100]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a7d2:	4b18      	ldr	r3, [pc, #96]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7d4:	7a5b      	ldrb	r3, [r3, #9]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	4a16      	ldr	r2, [pc, #88]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a7e2:	4b14      	ldr	r3, [pc, #80]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7e4:	7a5b      	ldrb	r3, [r3, #9]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4b12      	ldr	r3, [pc, #72]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7ec:	4413      	add	r3, r2
 800a7ee:	79fa      	ldrb	r2, [r7, #7]
 800a7f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7f4:	7a5b      	ldrb	r3, [r3, #9]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	b2d1      	uxtb	r1, r2
 800a7fc:	4a0d      	ldr	r2, [pc, #52]	; (800a834 <FATFS_LinkDriverEx+0x90>)
 800a7fe:	7251      	strb	r1, [r2, #9]
 800a800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a802:	7dbb      	ldrb	r3, [r7, #22]
 800a804:	3330      	adds	r3, #48	; 0x30
 800a806:	b2da      	uxtb	r2, r3
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	3301      	adds	r3, #1
 800a810:	223a      	movs	r2, #58	; 0x3a
 800a812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	3302      	adds	r3, #2
 800a818:	222f      	movs	r2, #47	; 0x2f
 800a81a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3303      	adds	r3, #3
 800a820:	2200      	movs	r2, #0
 800a822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr
 800a834:	20000338 	.word	0x20000338

0800a838 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a842:	2200      	movs	r2, #0
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff ffac 	bl	800a7a4 <FATFS_LinkDriverEx>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a864:	88fb      	ldrh	r3, [r7, #6]
 800a866:	2b7f      	cmp	r3, #127	; 0x7f
 800a868:	d802      	bhi.n	800a870 <ff_convert+0x18>
		c = chr;
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	81fb      	strh	r3, [r7, #14]
 800a86e:	e025      	b.n	800a8bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	2bff      	cmp	r3, #255	; 0xff
 800a87a:	d805      	bhi.n	800a888 <ff_convert+0x30>
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	3b80      	subs	r3, #128	; 0x80
 800a880:	4a11      	ldr	r2, [pc, #68]	; (800a8c8 <ff_convert+0x70>)
 800a882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a886:	e000      	b.n	800a88a <ff_convert+0x32>
 800a888:	2300      	movs	r3, #0
 800a88a:	81fb      	strh	r3, [r7, #14]
 800a88c:	e016      	b.n	800a8bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a88e:	2300      	movs	r3, #0
 800a890:	81fb      	strh	r3, [r7, #14]
 800a892:	e009      	b.n	800a8a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a894:	89fb      	ldrh	r3, [r7, #14]
 800a896:	4a0c      	ldr	r2, [pc, #48]	; (800a8c8 <ff_convert+0x70>)
 800a898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a89c:	88fa      	ldrh	r2, [r7, #6]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d006      	beq.n	800a8b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	81fb      	strh	r3, [r7, #14]
 800a8a8:	89fb      	ldrh	r3, [r7, #14]
 800a8aa:	2b7f      	cmp	r3, #127	; 0x7f
 800a8ac:	d9f2      	bls.n	800a894 <ff_convert+0x3c>
 800a8ae:	e000      	b.n	800a8b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a8b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
 800a8b4:	3380      	adds	r3, #128	; 0x80
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a8bc:	89fb      	ldrh	r3, [r7, #14]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr
 800a8c8:	0800abcc 	.word	0x0800abcc

0800a8cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a8d6:	88fb      	ldrh	r3, [r7, #6]
 800a8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8dc:	d201      	bcs.n	800a8e2 <ff_wtoupper+0x16>
 800a8de:	4b3d      	ldr	r3, [pc, #244]	; (800a9d4 <ff_wtoupper+0x108>)
 800a8e0:	e000      	b.n	800a8e4 <ff_wtoupper+0x18>
 800a8e2:	4b3d      	ldr	r3, [pc, #244]	; (800a9d8 <ff_wtoupper+0x10c>)
 800a8e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	1c9a      	adds	r2, r3, #2
 800a8ea:	617a      	str	r2, [r7, #20]
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a8f0:	8a7b      	ldrh	r3, [r7, #18]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d068      	beq.n	800a9c8 <ff_wtoupper+0xfc>
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	8a7b      	ldrh	r3, [r7, #18]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d364      	bcc.n	800a9c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	1c9a      	adds	r2, r3, #2
 800a902:	617a      	str	r2, [r7, #20]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	823b      	strh	r3, [r7, #16]
 800a908:	8a3b      	ldrh	r3, [r7, #16]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	81fb      	strh	r3, [r7, #14]
 800a90e:	8a3b      	ldrh	r3, [r7, #16]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a914:	88fa      	ldrh	r2, [r7, #6]
 800a916:	8a79      	ldrh	r1, [r7, #18]
 800a918:	8a3b      	ldrh	r3, [r7, #16]
 800a91a:	440b      	add	r3, r1
 800a91c:	429a      	cmp	r2, r3
 800a91e:	da49      	bge.n	800a9b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a920:	89fb      	ldrh	r3, [r7, #14]
 800a922:	2b08      	cmp	r3, #8
 800a924:	d84f      	bhi.n	800a9c6 <ff_wtoupper+0xfa>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <ff_wtoupper+0x60>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a951 	.word	0x0800a951
 800a930:	0800a963 	.word	0x0800a963
 800a934:	0800a979 	.word	0x0800a979
 800a938:	0800a981 	.word	0x0800a981
 800a93c:	0800a989 	.word	0x0800a989
 800a940:	0800a991 	.word	0x0800a991
 800a944:	0800a999 	.word	0x0800a999
 800a948:	0800a9a1 	.word	0x0800a9a1
 800a94c:	0800a9a9 	.word	0x0800a9a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a950:	88fa      	ldrh	r2, [r7, #6]
 800a952:	8a7b      	ldrh	r3, [r7, #18]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4413      	add	r3, r2
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	80fb      	strh	r3, [r7, #6]
 800a960:	e027      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a962:	88fa      	ldrh	r2, [r7, #6]
 800a964:	8a7b      	ldrh	r3, [r7, #18]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	b29b      	uxth	r3, r3
 800a970:	88fa      	ldrh	r2, [r7, #6]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	80fb      	strh	r3, [r7, #6]
 800a976:	e01c      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a978:	88fb      	ldrh	r3, [r7, #6]
 800a97a:	3b10      	subs	r3, #16
 800a97c:	80fb      	strh	r3, [r7, #6]
 800a97e:	e018      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	3b20      	subs	r3, #32
 800a984:	80fb      	strh	r3, [r7, #6]
 800a986:	e014      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a988:	88fb      	ldrh	r3, [r7, #6]
 800a98a:	3b30      	subs	r3, #48	; 0x30
 800a98c:	80fb      	strh	r3, [r7, #6]
 800a98e:	e010      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a990:	88fb      	ldrh	r3, [r7, #6]
 800a992:	3b1a      	subs	r3, #26
 800a994:	80fb      	strh	r3, [r7, #6]
 800a996:	e00c      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a998:	88fb      	ldrh	r3, [r7, #6]
 800a99a:	3308      	adds	r3, #8
 800a99c:	80fb      	strh	r3, [r7, #6]
 800a99e:	e008      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	3b50      	subs	r3, #80	; 0x50
 800a9a4:	80fb      	strh	r3, [r7, #6]
 800a9a6:	e004      	b.n	800a9b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a9ae:	80fb      	strh	r3, [r7, #6]
 800a9b0:	bf00      	nop
			}
			break;
 800a9b2:	e008      	b.n	800a9c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a9b4:	89fb      	ldrh	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d195      	bne.n	800a8e6 <ff_wtoupper+0x1a>
 800a9ba:	8a3b      	ldrh	r3, [r7, #16]
 800a9bc:	005b      	lsls	r3, r3, #1
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a9c4:	e78f      	b.n	800a8e6 <ff_wtoupper+0x1a>
			break;
 800a9c6:	bf00      	nop
	}

	return chr;
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr
 800a9d4:	0800accc 	.word	0x0800accc
 800a9d8:	0800aec0 	.word	0x0800aec0

0800a9dc <__errno>:
 800a9dc:	4b01      	ldr	r3, [pc, #4]	; (800a9e4 <__errno+0x8>)
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	2000008c 	.word	0x2000008c

0800a9e8 <exit>:
 800a9e8:	b508      	push	{r3, lr}
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <exit+0x20>)
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	b113      	cbz	r3, 800a9f6 <exit+0xe>
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	f3af 8000 	nop.w
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <exit+0x24>)
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a9fc:	b103      	cbz	r3, 800aa00 <exit+0x18>
 800a9fe:	4798      	blx	r3
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7f7 f933 	bl	8001c6c <_exit>
 800aa06:	bf00      	nop
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	0800af7c 	.word	0x0800af7c

0800aa10 <__libc_init_array>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	2600      	movs	r6, #0
 800aa14:	4d0c      	ldr	r5, [pc, #48]	; (800aa48 <__libc_init_array+0x38>)
 800aa16:	4c0d      	ldr	r4, [pc, #52]	; (800aa4c <__libc_init_array+0x3c>)
 800aa18:	1b64      	subs	r4, r4, r5
 800aa1a:	10a4      	asrs	r4, r4, #2
 800aa1c:	42a6      	cmp	r6, r4
 800aa1e:	d109      	bne.n	800aa34 <__libc_init_array+0x24>
 800aa20:	f000 f822 	bl	800aa68 <_init>
 800aa24:	2600      	movs	r6, #0
 800aa26:	4d0a      	ldr	r5, [pc, #40]	; (800aa50 <__libc_init_array+0x40>)
 800aa28:	4c0a      	ldr	r4, [pc, #40]	; (800aa54 <__libc_init_array+0x44>)
 800aa2a:	1b64      	subs	r4, r4, r5
 800aa2c:	10a4      	asrs	r4, r4, #2
 800aa2e:	42a6      	cmp	r6, r4
 800aa30:	d105      	bne.n	800aa3e <__libc_init_array+0x2e>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa38:	4798      	blx	r3
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	e7ee      	b.n	800aa1c <__libc_init_array+0xc>
 800aa3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa42:	4798      	blx	r3
 800aa44:	3601      	adds	r6, #1
 800aa46:	e7f2      	b.n	800aa2e <__libc_init_array+0x1e>
 800aa48:	0800af88 	.word	0x0800af88
 800aa4c:	0800af88 	.word	0x0800af88
 800aa50:	0800af88 	.word	0x0800af88
 800aa54:	0800af8c 	.word	0x0800af8c

0800aa58 <memset>:
 800aa58:	4603      	mov	r3, r0
 800aa5a:	4402      	add	r2, r0
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d100      	bne.n	800aa62 <memset+0xa>
 800aa60:	4770      	bx	lr
 800aa62:	f803 1b01 	strb.w	r1, [r3], #1
 800aa66:	e7f9      	b.n	800aa5c <memset+0x4>

0800aa68 <_init>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr

0800aa74 <_fini>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr
