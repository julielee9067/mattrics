
STM32L152RBT6A_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e28  08007e28  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e30  08007e30  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004320  200000d0  08007f08  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200043f0  08007f08  000243f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159cc  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d3  00000000  00000000  00035ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00038c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00039d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a3e  00000000  00000000  0003ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014660  00000000  00000000  000527b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c79  00000000  00000000  00066e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efa8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000efae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000d0 	.word	0x200000d0
 8000158:	00000000 	.word	0x00000000
 800015c:	08007d68 	.word	0x08007d68

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d4 	.word	0x200000d4
 8000178:	08007d68 	.word	0x08007d68

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <SELECT+0x18>)
 800047e:	f002 fc4c 	bl	8002d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000482:	2001      	movs	r0, #1
 8000484:	f001 fc9c 	bl	8001dc0 <HAL_Delay>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020400 	.word	0x40020400

08000490 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <DESELECT+0x18>)
 800049a:	f002 fc3e 	bl	8002d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 fc8e 	bl	8001dc0 <HAL_Delay>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40020400 	.word	0x40020400

080004ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b6:	bf00      	nop
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SPI_TxByte+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d1f8      	bne.n	80004b8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SPI_TxByte+0x30>)
 80004ce:	f005 fd2e 	bl	8005f2e <HAL_SPI_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000110 	.word	0x20000110

080004e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004ec:	bf00      	nop
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SPI_TxBuffer+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d1f8      	bne.n	80004ee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <SPI_TxBuffer+0x30>)
 8000504:	f005 fd13 	bl	8005f2e <HAL_SPI_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000110 	.word	0x20000110

08000514 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SPI_RxByte+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052e:	1dba      	adds	r2, r7, #6
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_RxByte+0x34>)
 800053a:	f005 fe34 	bl	80061a6 <HAL_SPI_TransmitReceive>

	return data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000110 	.word	0x20000110

0800054c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000554:	f7ff ffde 	bl	8000514 <SPI_RxByte>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SD_ReadyWait+0x30>)
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000576:	f7ff ffcd 	bl	8000514 <SPI_RxByte>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d003      	beq.n	800058c <SD_ReadyWait+0x24>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SD_ReadyWait+0x30>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <SD_ReadyWait+0xe>

	return res;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000108 	.word	0x20000108

0800059c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a8:	f7ff ff72 	bl	8000490 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	f7ff ff7a 	bl	80004ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf6      	ble.n	80005b2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c4:	f7ff ff56 	bl	8000474 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005dc:	2395      	movs	r3, #149	; 0x95
 80005de:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005e0:	463b      	mov	r3, r7
 80005e2:	2106      	movs	r1, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff7b 	bl	80004e0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ea:	e002      	b.n	80005f2 <SD_PowerOn+0x56>
	{
		cnt--;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005f2:	f7ff ff8f 	bl	8000514 <SPI_RxByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d002      	beq.n	8000602 <SD_PowerOn+0x66>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f4      	bne.n	80005ec <SD_PowerOn+0x50>
	}

	DESELECT();
 8000602:	f7ff ff45 	bl	8000490 <DESELECT>
	SPI_TxByte(0XFF);
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	f7ff ff50 	bl	80004ac <SPI_TxByte>

	PowerFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <SD_PowerOn+0x80>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000ed 	.word	0x200000ed

08000620 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SD_PowerOff+0x14>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200000ed 	.word	0x200000ed

08000638 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SD_CheckPower+0x10>)
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200000ed 	.word	0x200000ed

0800064c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SD_RxDataBlock+0x58>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800065c:	f7ff ff5a 	bl	8000514 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d103      	bne.n	8000672 <SD_RxDataBlock+0x26>
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SD_RxDataBlock+0x58>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f4      	bne.n	800065c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	d001      	beq.n	800067c <SD_RxDataBlock+0x30>
 8000678:	2300      	movs	r3, #0
 800067a:	e00f      	b.n	800069c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff62 	bl	800054c <SPI_RxBytePtr>
	} while(len--);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000692:	f7ff ff3f 	bl	8000514 <SPI_RxByte>
	SPI_RxByte();
 8000696:	f7ff ff3d 	bl	8000514 <SPI_RxByte>

	return TRUE;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000010a 	.word	0x2000010a

080006a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b8:	f7ff ff56 	bl	8000568 <SD_ReadyWait>
 80006bc:	4603      	mov	r3, r0
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d001      	beq.n	80006c6 <SD_TxDataBlock+0x1e>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02f      	b.n	8000726 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff feef 	bl	80004ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2bfd      	cmp	r3, #253	; 0xfd
 80006d2:	d020      	beq.n	8000716 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff01 	bl	80004e0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006de:	f7ff ff19 	bl	8000514 <SPI_RxByte>
		SPI_RxByte();
 80006e2:	f7ff ff17 	bl	8000514 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e6:	e00b      	b.n	8000700 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e8:	f7ff ff14 	bl	8000514 <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d006      	beq.n	8000708 <SD_TxDataBlock+0x60>
			i++;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d9f0      	bls.n	80006e8 <SD_TxDataBlock+0x40>
 8000706:	e000      	b.n	800070a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000708:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800070a:	bf00      	nop
 800070c:	f7ff ff02 	bl	8000514 <SPI_RxByte>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0fa      	beq.n	800070c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	2b05      	cmp	r3, #5
 800071e:	d101      	bne.n	8000724 <SD_TxDataBlock+0x7c>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	6039      	str	r1, [r7, #0]
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800073a:	f7ff ff15 	bl	8000568 <SD_ReadyWait>
 800073e:	4603      	mov	r3, r0
 8000740:	2bff      	cmp	r3, #255	; 0xff
 8000742:	d001      	beq.n	8000748 <SD_SendCmd+0x1a>
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	e042      	b.n	80007ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feae 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0e1b      	lsrs	r3, r3, #24
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea8 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fea2 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe9c 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe97 	bl	80004ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x5c>
 8000784:	2395      	movs	r3, #149	; 0x95
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e007      	b.n	800079a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b48      	cmp	r3, #72	; 0x48
 800078e:	d102      	bne.n	8000796 <SD_SendCmd+0x68>
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <SD_SendCmd+0x6c>
	else crc = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe85 	bl	80004ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b4c      	cmp	r3, #76	; 0x4c
 80007a6:	d101      	bne.n	80007ac <SD_SendCmd+0x7e>
 80007a8:	f7ff feb4 	bl	8000514 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007b0:	f7ff feb0 	bl	8000514 <SPI_RxByte>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da05      	bge.n	80007cc <SD_SendCmd+0x9e>
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <SD_SendCmd+0x82>

	return res;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SD_disk_initialize+0x14>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e0d1      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <SD_disk_initialize+0x2a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e0c6      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000802:	f7ff fecb 	bl	800059c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000806:	f7ff fe35 	bl	8000474 <SELECT>

	/* check disk type */
	type = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080e:	2100      	movs	r1, #0
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f7ff ff8c 	bl	800072e <SD_SendCmd>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 80a1 	bne.w	8000960 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <SD_disk_initialize+0x1c4>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800082a:	2048      	movs	r0, #72	; 0x48
 800082c:	f7ff ff7f 	bl	800072e <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d155      	bne.n	80008e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e00c      	b.n	8000856 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800083c:	7bfc      	ldrb	r4, [r7, #15]
 800083e:	f7ff fe69 	bl	8000514 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4423      	add	r3, r4
 800084c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9ef      	bls.n	800083c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d17e      	bne.n	8000960 <SD_disk_initialize+0x188>
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2baa      	cmp	r3, #170	; 0xaa
 8000866:	d17b      	bne.n	8000960 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000868:	2100      	movs	r1, #0
 800086a:	2077      	movs	r0, #119	; 0x77
 800086c:	f7ff ff5f 	bl	800072e <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d807      	bhi.n	8000886 <SD_disk_initialize+0xae>
 8000876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800087a:	2069      	movs	r0, #105	; 0x69
 800087c:	f7ff ff57 	bl	800072e <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ec      	bne.n	8000868 <SD_disk_initialize+0x90>
 800088e:	e000      	b.n	8000892 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <SD_disk_initialize+0x1c4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d062      	beq.n	8000960 <SD_disk_initialize+0x188>
 800089a:	2100      	movs	r1, #0
 800089c:	207a      	movs	r0, #122	; 0x7a
 800089e:	f7ff ff46 	bl	800072e <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d15b      	bne.n	8000960 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe30 	bl	8000514 <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4423      	add	r3, r4
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x104>
 80008d8:	230c      	movs	r3, #12
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0x106>
 80008dc:	2304      	movs	r3, #4
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e03e      	b.n	8000960 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008e2:	2100      	movs	r1, #0
 80008e4:	2077      	movs	r0, #119	; 0x77
 80008e6:	f7ff ff22 	bl	800072e <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d808      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008f0:	2100      	movs	r1, #0
 80008f2:	2069      	movs	r0, #105	; 0x69
 80008f4:	f7ff ff1b 	bl	800072e <SD_SendCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d801      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <SD_disk_initialize+0x12c>
 8000902:	2301      	movs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10e      	bne.n	800092a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800090c:	2100      	movs	r1, #0
 800090e:	2077      	movs	r0, #119	; 0x77
 8000910:	f7ff ff0d 	bl	800072e <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d80e      	bhi.n	8000938 <SD_disk_initialize+0x160>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff ff06 	bl	800072e <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <SD_disk_initialize+0x160>
 8000928:	e00c      	b.n	8000944 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800092a:	2100      	movs	r1, #0
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fefe 	bl	800072e <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e2      	bne.n	8000906 <SD_disk_initialize+0x12e>
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <SD_disk_initialize+0x1c4>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <SD_disk_initialize+0x184>
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	2050      	movs	r0, #80	; 0x50
 8000952:	f7ff feec 	bl	800072e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x188>
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SD_disk_initialize+0x1c8>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000966:	f7ff fd93 	bl	8000490 <DESELECT>
	SPI_RxByte();
 800096a:	f7ff fdd3 	bl	8000514 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e001      	b.n	800098a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000986:	f7ff fe4b 	bl	8000620 <SD_PowerOff>
	}

	return Stat;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SD_disk_initialize+0x1c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	2000010a 	.word	0x2000010a
 80009a0:	200000ec 	.word	0x200000ec

080009a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_status+0x14>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e002      	b.n	80009be <SD_disk_status+0x1a>
	return Stat;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SD_disk_status+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <SD_disk_read+0x1c>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SD_disk_read+0x20>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e051      	b.n	8000a90 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SD_disk_read+0xcc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SD_disk_read+0x32>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e048      	b.n	8000a90 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SD_disk_read+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <SD_disk_read+0x44>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a10:	f7ff fd30 	bl	8000474 <SELECT>

	if (count == 1)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d111      	bne.n	8000a3e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2051      	movs	r0, #81	; 0x51
 8000a1e:	f7ff fe86 	bl	800072e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <SD_disk_read+0xb0>
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fe0d 	bl	800064c <SD_RxDataBlock>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d021      	beq.n	8000a7c <SD_disk_read+0xb0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e01e      	b.n	8000a7c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2052      	movs	r0, #82	; 0x52
 8000a42:	f7ff fe74 	bl	800072e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d117      	bne.n	8000a7c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f7ff fdfb 	bl	800064c <SD_RxDataBlock>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <SD_disk_read+0xa6>
				buff += 512;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <SD_disk_read+0x80>
 8000a70:	e000      	b.n	8000a74 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a72:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	204c      	movs	r0, #76	; 0x4c
 8000a78:	f7ff fe59 	bl	800072e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd08 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fd48 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	200000ec 	.word	0x200000ec

08000aa0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_write+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_write+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e06b      	b.n	8000b98 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SD_disk_write+0x100>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_write+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e062      	b.n	8000b98 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SD_disk_write+0x100>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_write+0x44>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e059      	b.n	8000b98 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SD_disk_write+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <SD_disk_write+0x56>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af6:	f7ff fcbd 	bl	8000474 <SELECT>

	if (count == 1)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d110      	bne.n	8000b22 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2058      	movs	r0, #88	; 0x58
 8000b04:	f7ff fe13 	bl	800072e <SD_SendCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d13a      	bne.n	8000b84 <SD_disk_write+0xe4>
 8000b0e:	21fe      	movs	r1, #254	; 0xfe
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fdc9 	bl	80006a8 <SD_TxDataBlock>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <SD_disk_write+0xe4>
			count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e030      	b.n	8000b84 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <SD_disk_write+0x104>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2077      	movs	r0, #119	; 0x77
 8000b32:	f7ff fdfc 	bl	800072e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	2057      	movs	r0, #87	; 0x57
 8000b3a:	f7ff fdf8 	bl	800072e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2059      	movs	r0, #89	; 0x59
 8000b42:	f7ff fdf4 	bl	800072e <SD_SendCmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b4c:	21fc      	movs	r1, #252	; 0xfc
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f7ff fdaa 	bl	80006a8 <SD_TxDataBlock>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <SD_disk_write+0xd0>
				buff += 512;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ee      	bne.n	8000b4c <SD_disk_write+0xac>
 8000b6e:	e000      	b.n	8000b72 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b70:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b72:	21fd      	movs	r1, #253	; 0xfd
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd97 	bl	80006a8 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b84:	f7ff fc84 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fcc4 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200000ec 	.word	0x200000ec

08000ba8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_ioctl+0x1e>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e115      	b.n	8000df2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d124      	bne.n	8000c1c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d012      	beq.n	8000c00 <SD_disk_ioctl+0x58>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc1a      	bgt.n	8000c14 <SD_disk_ioctl+0x6c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SD_disk_ioctl+0x40>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d006      	beq.n	8000bf4 <SD_disk_ioctl+0x4c>
 8000be6:	e015      	b.n	8000c14 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be8:	f7ff fd1a 	bl	8000620 <SD_PowerOff>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0fc      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf4:	f7ff fcd2 	bl	800059c <SD_PowerOn>
			res = RES_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfe:	e0f6      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	1c5c      	adds	r4, r3, #1
 8000c04:	f7ff fd18 	bl	8000638 <SD_CheckPower>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c12:	e0ec      	b.n	8000dee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	e0e8      	b.n	8000dee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <SD_disk_ioctl+0x254>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x86>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e0e1      	b.n	8000df2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2e:	f7ff fc21 	bl	8000474 <SELECT>

		switch (ctrl)
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	f200 80cb 	bhi.w	8000dd0 <SD_disk_ioctl+0x228>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <SD_disk_ioctl+0x98>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000d3b 	.word	0x08000d3b
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	08000d2b 	.word	0x08000d2b
 8000c4c:	08000dd1 	.word	0x08000dd1
 8000c50:	08000dd1 	.word	0x08000dd1
 8000c54:	08000dd1 	.word	0x08000dd1
 8000c58:	08000dd1 	.word	0x08000dd1
 8000c5c:	08000dd1 	.word	0x08000dd1
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000dd1 	.word	0x08000dd1
 8000c68:	08000dd1 	.word	0x08000dd1
 8000c6c:	08000d4d 	.word	0x08000d4d
 8000c70:	08000d71 	.word	0x08000d71
 8000c74:	08000d95 	.word	0x08000d95
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2049      	movs	r0, #73	; 0x49
 8000c7c:	f7ff fd57 	bl	800072e <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 80a8 	bne.w	8000dd8 <SD_disk_ioctl+0x230>
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcdc 	bl	800064c <SD_RxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809e 	beq.w	8000dd8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	099b      	lsrs	r3, r3, #6
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cba:	8bfb      	ldrh	r3, [r7, #30]
 8000cbc:	029a      	lsls	r2, r3, #10
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02e      	b.n	8000d22 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0306 	and.w	r3, r3, #6
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	7cbb      	ldrb	r3, [r7, #18]
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1a:	3b09      	subs	r3, #9
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d28:	e056      	b.n	8000dd8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d38:	e055      	b.n	8000de6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d3a:	f7ff fc15 	bl	8000568 <SD_ReadyWait>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d14b      	bne.n	8000ddc <SD_disk_ioctl+0x234>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e047      	b.n	8000ddc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	; 0x49
 8000d50:	f7ff fced 	bl	800072e <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <SD_disk_ioctl+0x238>
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fc75 	bl	800064c <SD_RxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d03b      	beq.n	8000de0 <SD_disk_ioctl+0x238>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6e:	e037      	b.n	8000de0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d70:	2100      	movs	r1, #0
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fcdb 	bl	800072e <SD_SendCmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d132      	bne.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d7e:	2110      	movs	r1, #16
 8000d80:	6a38      	ldr	r0, [r7, #32]
 8000d82:	f7ff fc63 	bl	800064c <SD_RxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d92:	e027      	b.n	8000de4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	207a      	movs	r0, #122	; 0x7a
 8000d98:	f7ff fcc9 	bl	800072e <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da8:	e00b      	b.n	8000dc2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000daa:	6a3c      	ldr	r4, [r7, #32]
 8000dac:	1c63      	adds	r3, r4, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	f7ff fbb0 	bl	8000514 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd6:	e006      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de4:	bf00      	nop
		}

		DESELECT();
 8000de6:	f7ff fb53 	bl	8000490 <DESELECT>
		SPI_RxByte();
 8000dea:	f7ff fb93 	bl	8000514 <SPI_RxByte>
	}

	return res;
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0a8      	sub	sp, #160	; 0xa0
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 ff6c 	bl	8001ce2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f87b 	bl	8000f04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fa4d 	bl	80012ac <MX_GPIO_Init>
  MX_ADC_Init();
 8000e12:	f000 f8dd 	bl	8000fd0 <MX_ADC_Init>
  MX_I2C1_Init();
 8000e16:	f000 f933 	bl	8001080 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e1a:	f000 f9e7 	bl	80011ec <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000e1e:	f000 fa1b 	bl	8001258 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000e22:	f006 fa5f 	bl	80072e4 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e26:	f000 f959 	bl	80010dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  muxInit();
 8000e2a:	f000 faff 	bl	800142c <muxInit>

  int pressure_data[NUM_NODES] = {0};
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2290      	movs	r2, #144	; 0x90
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fb54 	bl	80074e4 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 8000e3c:	bf00      	nop
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <main+0xf8>)
 8000e42:	f001 ff53 	bl	8002cec <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <main+0x3e>

  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <main+0xf8>)
 8000e54:	f001 ff61 	bl	8002d1a <HAL_GPIO_WritePin>

  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET)
 8000e58:	e03e      	b.n	8000ed8 <main+0xd8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    samplePrototypeMat(0, 0, pressure_data);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 fc5c 	bl	8001720 <samplePrototypeMat>

    char test[6] = {0};
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	813b      	strh	r3, [r7, #8]
    char start_tx = '<';
 8000e70:	233c      	movs	r3, #60	; 0x3c
 8000e72:	70fb      	strb	r3, [r7, #3]

    for (int n = 0; n < NUM_NODES; ++n)
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e7a:	e029      	b.n	8000ed0 <main+0xd0>
    {
      if (n == 0)
 8000e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <main+0x98>
      {
	 HAL_UART_Transmit(&huart3, &start_tx, sizeof(char), HAL_MAX_DELAY);
 8000e84:	1cf9      	adds	r1, r7, #3
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <main+0xfc>)
 8000e8e:	f005 fd48 	bl	8006922 <HAL_UART_Transmit>
	 HAL_Delay(15);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 ff94 	bl	8001dc0 <HAL_Delay>
      }

      sprintf(test, "%d >", pressure_data[n]);
 8000e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4915      	ldr	r1, [pc, #84]	; (8000f00 <main+0x100>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fb21 	bl	80074f4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)test, sizeof(test), HAL_MAX_DELAY);
 8000eb2:	1d39      	adds	r1, r7, #4
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2206      	movs	r2, #6
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <main+0xfc>)
 8000ebc:	f005 fd31 	bl	8006922 <HAL_UART_Transmit>
      HAL_Delay(15);
 8000ec0:	200f      	movs	r0, #15
 8000ec2:	f000 ff7d 	bl	8001dc0 <HAL_Delay>
    for (int n = 0; n < NUM_NODES; ++n)
 8000ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed4:	2b23      	cmp	r3, #35	; 0x23
 8000ed6:	ddd1      	ble.n	8000e7c <main+0x7c>
  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET)
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <main+0xf8>)
 8000edc:	f001 ff06 	bl	8002cec <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d0b9      	beq.n	8000e5a <main+0x5a>
    }
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <main+0xf8>)
 8000eee:	f001 ff14 	bl	8002d1a <HAL_GPIO_WritePin>

  exit(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f006 fabe 	bl	8007474 <exit>
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	20000168 	.word	0x20000168
 8000f00:	08007d80 	.word	0x08007d80

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b096      	sub	sp, #88	; 0x58
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	2234      	movs	r2, #52	; 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fae6 	bl	80074e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemClock_Config+0xc8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f3a:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <SystemClock_Config+0xc8>)
 8000f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f40:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f42:	230b      	movs	r3, #11
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f52:	2301      	movs	r3, #1
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f60:	2300      	movs	r3, #0
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000f64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fcf2 	bl	8004958 <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f7a:	f000 fc29 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2303      	movs	r3, #3
 8000f84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 f80d 	bl	8004fb8 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fa4:	f000 fc14 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fa6b 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc0:	f000 fc06 	bl	80017d0 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3758      	adds	r7, #88	; 0x58
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_ADC_Init+0xa8>)
 8000fe2:	4a26      	ldr	r2, [pc, #152]	; (800107c <MX_ADC_Init+0xac>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_ADC_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_ADC_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_ADC_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_ADC_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ADC_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_ADC_Init+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_ADC_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_ADC_Init+0xa8>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_ADC_Init+0xa8>)
 8001020:	2201      	movs	r2, #1
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_ADC_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_ADC_Init+0xa8>)
 800102e:	2210      	movs	r2, #16
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_ADC_Init+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_ADC_Init+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC_Init+0xa8>)
 8001042:	f000 fedf 	bl	8001e04 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800104c:	f000 fbc0 	bl	80017d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001050:	2309      	movs	r3, #9
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001054:	2301      	movs	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001058:	2304      	movs	r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_ADC_Init+0xa8>)
 8001062:	f001 f93d 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800106c:	f000 fbb0 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200012e8 	.word	0x200012e8
 800107c:	40012400 	.word	0x40012400

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f001 fe45 	bl	8002d4c <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 fb82 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200011e4 	.word	0x200011e4
 80010d4:	40005400 	.word	0x40005400
 80010d8:	000186a0 	.word	0x000186a0

080010dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <MX_RTC_Init+0x108>)
 8001106:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <MX_RTC_Init+0x10c>)
 8001108:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <MX_RTC_Init+0x108>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <MX_RTC_Init+0x108>)
 8001112:	227f      	movs	r2, #127	; 0x7f
 8001114:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <MX_RTC_Init+0x108>)
 8001118:	22ff      	movs	r2, #255	; 0xff
 800111a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <MX_RTC_Init+0x108>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_RTC_Init+0x108>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_RTC_Init+0x108>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800112e:	482d      	ldr	r0, [pc, #180]	; (80011e4 <MX_RTC_Init+0x108>)
 8001130:	f004 fab8 	bl	80056a4 <HAL_RTC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800113a:	f000 fb49 	bl	80017d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 800113e:	2316      	movs	r3, #22
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <MX_RTC_Init+0x108>)
 8001162:	f004 fb29 	bl	80057b8 <HAL_RTC_SetTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800116c:	f000 fb30 	bl	80017d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001170:	2305      	movs	r3, #5
 8001172:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8001176:	2303      	movs	r3, #3
 8001178:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 800117c:	230b      	movs	r3, #11
 800117e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 8001182:	2316      	movs	r3, #22
 8001184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_RTC_Init+0x108>)
 8001192:	f004 fbc5 	bl	8005920 <HAL_RTC_SetDate>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800119c:	f000 fb18 	bl	80017d0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 80011a0:	2306      	movs	r3, #6
 80011a2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80011c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_RTC_Init+0x108>)
 80011ce:	f004 fc45 	bl	8005a5c <HAL_RTC_SetAlarm_IT>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80011d8:	f000 fafa 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3730      	adds	r7, #48	; 0x30
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200012a4 	.word	0x200012a4
 80011e8:	40002800 	.word	0x40002800

080011ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_SPI2_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_SPI2_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_SPI2_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_SPI2_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_SPI2_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_SPI2_Init+0x64>)
 8001220:	2210      	movs	r2, #16
 8001222:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_SPI2_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_SPI2_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_SPI2_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_SPI2_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_SPI2_Init+0x64>)
 800123e:	f004 fdfa 	bl	8005e36 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 fac2 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000110 	.word	0x20000110
 8001254:	40003800 	.word	0x40003800

08001258 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART3_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001290:	f005 fafa 	bl	8006888 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 fa99 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000168 	.word	0x20000168
 80012a8:	40004800 	.word	0x40004800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b55      	ldr	r3, [pc, #340]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a54      	ldr	r2, [pc, #336]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b52      	ldr	r3, [pc, #328]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a48      	ldr	r2, [pc, #288]	; (8001418 <MX_GPIO_Init+0x16c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b43      	ldr	r3, [pc, #268]	; (8001418 <MX_GPIO_Init+0x16c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a42      	ldr	r2, [pc, #264]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 800133a:	2200      	movs	r2, #0
 800133c:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <MX_GPIO_Init+0x170>)
 8001342:	f001 fcea 	bl	8002d1a <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001346:	2200      	movs	r2, #0
 8001348:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800134c:	4834      	ldr	r0, [pc, #208]	; (8001420 <MX_GPIO_Init+0x174>)
 800134e:	f001 fce4 	bl	8002d1a <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001352:	2200      	movs	r2, #0
 8001354:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001358:	4832      	ldr	r0, [pc, #200]	; (8001424 <MX_GPIO_Init+0x178>)
 800135a:	f001 fcde 	bl	8002d1a <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	4831      	ldr	r0, [pc, #196]	; (8001428 <MX_GPIO_Init+0x17c>)
 8001364:	f001 fcd9 	bl	8002d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001368:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 800136c:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4826      	ldr	r0, [pc, #152]	; (800141c <MX_GPIO_Init+0x170>)
 8001382:	f001 fb33 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001386:	f241 03f7 	movw	r3, #4343	; 0x10f7
 800138a:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <MX_GPIO_Init+0x174>)
 80013a0:	f001 fb24 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80013a4:	f641 4365 	movw	r3, #7269	; 0x1c65
 80013a8:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4819      	ldr	r0, [pc, #100]	; (8001424 <MX_GPIO_Init+0x178>)
 80013be:	f001 fb15 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <MX_GPIO_Init+0x170>)
 80013d6:	f001 fb09 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_GPIO_Init+0x174>)
 80013f0:	f001 fafc 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80013f4:	2304      	movs	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_GPIO_Init+0x17c>)
 800140c:	f001 faee 	bl	80029ec <HAL_GPIO_Init>

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020c00 	.word	0x40020c00

0800142c <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2101      	movs	r1, #1
 8001436:	4819      	ldr	r0, [pc, #100]	; (800149c <muxInit+0x70>)
 8001438:	f001 fc6f 	bl	8002d1a <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e00e      	b.n	8001460 <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <muxInit+0x74>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800144a:	4916      	ldr	r1, [pc, #88]	; (80014a4 <muxInit+0x78>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f000 f935 	bl	80016c4 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3301      	adds	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	dded      	ble.n	8001442 <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	e00e      	b.n	800148a <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <muxInit+0x7c>)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <muxInit+0x80>)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800147c:	4619      	mov	r1, r3
 800147e:	4610      	mov	r0, r2
 8001480:	f000 f920 	bl	80016c4 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b07      	cmp	r3, #7
 800148e:	dded      	ble.n	800146c <muxInit+0x40>
	}
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40020800 	.word	0x40020800
 80014a0:	20000004 	.word	0x20000004
 80014a4:	08007d9c 	.word	0x08007d9c
 80014a8:	20000014 	.word	0x20000014
 80014ac:	08007dac 	.word	0x08007dac

080014b0 <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	f200 80eb 	bhi.w	8001698 <selectChannel+0x1e8>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <selectChannel+0x18>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	080014e9 	.word	0x080014e9
 80014cc:	0800151f 	.word	0x0800151f
 80014d0:	08001555 	.word	0x08001555
 80014d4:	0800158b 	.word	0x0800158b
 80014d8:	080015c1 	.word	0x080015c1
 80014dc:	080015f7 	.word	0x080015f7
 80014e0:	0800162d 	.word	0x0800162d
 80014e4:	08001663 	.word	0x08001663
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	486b      	ldr	r0, [pc, #428]	; (80016a0 <selectChannel+0x1f0>)
 80014f4:	f001 fc11 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3304      	adds	r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4866      	ldr	r0, [pc, #408]	; (80016a0 <selectChannel+0x1f0>)
 8001506:	f001 fc08 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3308      	adds	r3, #8
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	4862      	ldr	r0, [pc, #392]	; (80016a0 <selectChannel+0x1f0>)
 8001518:	f001 fbff 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 800151c:	e0bc      	b.n	8001698 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	485d      	ldr	r0, [pc, #372]	; (80016a0 <selectChannel+0x1f0>)
 800152a:	f001 fbf6 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4859      	ldr	r0, [pc, #356]	; (80016a0 <selectChannel+0x1f0>)
 800153c:	f001 fbed 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3308      	adds	r3, #8
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	4854      	ldr	r0, [pc, #336]	; (80016a0 <selectChannel+0x1f0>)
 800154e:	f001 fbe4 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 8001552:	e0a1      	b.n	8001698 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4850      	ldr	r0, [pc, #320]	; (80016a0 <selectChannel+0x1f0>)
 8001560:	f001 fbdb 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	2201      	movs	r2, #1
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <selectChannel+0x1f0>)
 8001572:	f001 fbd2 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3308      	adds	r3, #8
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4847      	ldr	r0, [pc, #284]	; (80016a0 <selectChannel+0x1f0>)
 8001584:	f001 fbc9 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 8001588:	e086      	b.n	8001698 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	4842      	ldr	r0, [pc, #264]	; (80016a0 <selectChannel+0x1f0>)
 8001596:	f001 fbc0 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3304      	adds	r3, #4
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	483e      	ldr	r0, [pc, #248]	; (80016a0 <selectChannel+0x1f0>)
 80015a8:	f001 fbb7 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3308      	adds	r3, #8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4839      	ldr	r0, [pc, #228]	; (80016a0 <selectChannel+0x1f0>)
 80015ba:	f001 fbae 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 80015be:	e06b      	b.n	8001698 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <selectChannel+0x1f0>)
 80015cc:	f001 fba5 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3304      	adds	r3, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4830      	ldr	r0, [pc, #192]	; (80016a0 <selectChannel+0x1f0>)
 80015de:	f001 fb9c 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3308      	adds	r3, #8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	482c      	ldr	r0, [pc, #176]	; (80016a0 <selectChannel+0x1f0>)
 80015f0:	f001 fb93 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 80015f4:	e050      	b.n	8001698 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	4827      	ldr	r0, [pc, #156]	; (80016a0 <selectChannel+0x1f0>)
 8001602:	f001 fb8a 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <selectChannel+0x1f0>)
 8001614:	f001 fb81 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3308      	adds	r3, #8
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	481e      	ldr	r0, [pc, #120]	; (80016a0 <selectChannel+0x1f0>)
 8001626:	f001 fb78 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 800162a:	e035      	b.n	8001698 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	481a      	ldr	r0, [pc, #104]	; (80016a0 <selectChannel+0x1f0>)
 8001638:	f001 fb6f 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <selectChannel+0x1f0>)
 800164a:	f001 fb66 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3308      	adds	r3, #8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <selectChannel+0x1f0>)
 800165c:	f001 fb5d 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 8001660:	e01a      	b.n	8001698 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	2201      	movs	r2, #1
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <selectChannel+0x1f0>)
 800166e:	f001 fb54 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	2201      	movs	r2, #1
 800167c:	4619      	mov	r1, r3
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <selectChannel+0x1f0>)
 8001680:	f001 fb4b 	bl	8002d1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3308      	adds	r3, #8
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	2201      	movs	r2, #1
 800168e:	4619      	mov	r1, r3
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <selectChannel+0x1f0>)
 8001692:	f001 fb42 	bl	8002d1a <HAL_GPIO_WritePin>
			break;
 8001696:	bf00      	nop
	}
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020000 	.word	0x40020000

080016a4 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f001 fb2f 	bl	8002d1a <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2201      	movs	r2, #1
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f001 fb1f 	bl	8002d1a <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 80016ea:	2005      	movs	r0, #5
 80016ec:	f000 fb68 	bl	8001dc0 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <readPressure+0x38>)
 80016f2:	f000 fccd 	bl	8002090 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016f6:	f04f 31ff 	mov.w	r1, #4294967295
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <readPressure+0x38>)
 80016fc:	f000 fd54 	bl	80021a8 <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <readPressure+0x38>)
 8001702:	f000 fde1 	bl	80022c8 <HAL_ADC_GetValue>
 8001706:	4603      	mov	r3, r0
 8001708:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <readPressure+0x38>)
 800170c:	f000 fd20 	bl	8002150 <HAL_ADC_Stop>
    return data;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200012e8 	.word	0x200012e8

08001720 <samplePrototypeMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void samplePrototypeMat(int pwr_mux, int sense_mux, int* data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  int array_cnt = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001730:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <samplePrototypeMat+0x98>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001738:	4920      	ldr	r1, [pc, #128]	; (80017bc <samplePrototypeMat+0x9c>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7ff ffae 	bl	80016a4 <enableMux>
  enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <samplePrototypeMat+0xa0>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001750:	491c      	ldr	r1, [pc, #112]	; (80017c4 <samplePrototypeMat+0xa4>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f7ff ffa2 	bl	80016a4 <enableMux>

  for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++)
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	e01f      	b.n	80017a6 <samplePrototypeMat+0x86>
  {
    selectChannel(pwr_sel, pwrMuxSelect);
 8001766:	4918      	ldr	r1, [pc, #96]	; (80017c8 <samplePrototypeMat+0xa8>)
 8001768:	69b8      	ldr	r0, [r7, #24]
 800176a:	f7ff fea1 	bl	80014b0 <selectChannel>
    for (int sense_sel = 0; sense_sel < 6; sense_sel++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e012      	b.n	800179a <samplePrototypeMat+0x7a>
    {
      selectChannel(sense_sel, senseMuxSelect);
 8001774:	4915      	ldr	r1, [pc, #84]	; (80017cc <samplePrototypeMat+0xac>)
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff fe9a 	bl	80014b0 <selectChannel>

      /* Read voltage */
      int raw_ADC_pressure = readPressure();
 800177c:	f7ff ffb2 	bl	80016e4 <readPressure>
 8001780:	6138      	str	r0, [r7, #16]

      data[array_cnt] = raw_ADC_pressure;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]
      // data[array_cnt] = array_cnt;
      array_cnt++;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3301      	adds	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
    for (int sense_sel = 0; sense_sel < 6; sense_sel++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b05      	cmp	r3, #5
 800179e:	dde9      	ble.n	8001774 <samplePrototypeMat+0x54>
  for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3301      	adds	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	dddc      	ble.n	8001766 <samplePrototypeMat+0x46>
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000004 	.word	0x20000004
 80017bc:	08007d9c 	.word	0x08007d9c
 80017c0:	20000014 	.word	0x20000014
 80017c4:	08007dac 	.word	0x08007dac
 80017c8:	20000040 	.word	0x20000040
 80017cc:	20000034 	.word	0x20000034

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <Error_Handler+0x2c>)
 80017e0:	f001 fa9b 	bl	8002d1a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80017e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e8:	f000 faea 	bl	8001dc0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f2:	4802      	ldr	r0, [pc, #8]	; (80017fc <Error_Handler+0x2c>)
 80017f4:	f001 fa91 	bl	8002d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 80017f8:	e7ee      	b.n	80017d8 <Error_Handler+0x8>
 80017fa:	bf00      	nop
 80017fc:	40020800 	.word	0x40020800

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_MspInit+0x68>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_MspInit+0x68>)
 800180c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001810:	6253      	str	r3, [r2, #36]	; 0x24
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_MspInit+0x68>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_MspInit+0x68>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_MspInit+0x68>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x68>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x68>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_MspInit+0x68>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6253      	str	r3, [r2, #36]	; 0x24
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x68>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2005      	movs	r0, #5
 8001854:	f001 f809 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001858:	2005      	movs	r0, #5
 800185a:	f001 f822 	bl	80028a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_ADC_MspInit+0x74>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d123      	bne.n	80018d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 8001894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_ADC_MspInit+0x78>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_ADC_MspInit+0x7c>)
 80018d2:	f001 f88b 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012400 	.word	0x40012400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_I2C_MspInit+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d138      	bne.n	8001980 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_I2C_MspInit+0xa0>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_I2C_MspInit+0xa0>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_I2C_MspInit+0xa0>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001938:	2304      	movs	r3, #4
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4813      	ldr	r0, [pc, #76]	; (8001990 <HAL_I2C_MspInit+0xa4>)
 8001944:	f001 f852 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_I2C_MspInit+0xa0>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_I2C_MspInit+0xa0>)
 800194e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001952:	6253      	str	r3, [r2, #36]	; 0x24
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_I2C_MspInit+0xa0>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	201f      	movs	r0, #31
 8001966:	f000 ff80 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800196a:	201f      	movs	r0, #31
 800196c:	f000 ff99 	bl	80028a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2020      	movs	r0, #32
 8001976:	f000 ff78 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800197a:	2020      	movs	r0, #32
 800197c:	f000 ff91 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400

08001994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_RTC_MspInit+0x30>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10a      	bne.n	80019bc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_RTC_MspInit+0x34>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2029      	movs	r0, #41	; 0x29
 80019b2:	f000 ff5a 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019b6:	2029      	movs	r0, #41	; 0x29
 80019b8:	f000 ff73 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40002800 	.word	0x40002800
 80019c8:	424706d8 	.word	0x424706d8

080019cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_SPI_MspInit+0x8c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d130      	bne.n	8001a50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6253      	str	r3, [r2, #36]	; 0x24
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a30:	2305      	movs	r3, #5
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4809      	ldr	r0, [pc, #36]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 8001a3c:	f000 ffd6 	bl	80029ec <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2024      	movs	r0, #36	; 0x24
 8001a46:	f000 ff10 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a4a:	2024      	movs	r0, #36	; 0x24
 8001a4c:	f000 ff29 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40003800 	.word	0x40003800
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_UART_MspInit+0x8c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d130      	bne.n	8001ae8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6253      	str	r3, [r2, #36]	; 0x24
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_UART_MspInit+0x90>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <HAL_UART_MspInit+0x94>)
 8001ad4:	f000 ff8a 	bl	80029ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2027      	movs	r0, #39	; 0x27
 8001ade:	f000 fec4 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ae2:	2027      	movs	r0, #39	; 0x27
 8001ae4:	f000 fedd 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004800 	.word	0x40004800
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <SysTick_Handler+0x34>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <SysTick_Handler+0x18>
		Timer1--;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <SysTick_Handler+0x34>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <SysTick_Handler+0x34>)
 8001b56:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <SysTick_Handler+0x38>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <SysTick_Handler+0x2c>
		Timer2--;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Handler+0x38>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <SysTick_Handler+0x38>)
 8001b6a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f90c 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000010a 	.word	0x2000010a
 8001b78:	20000108 	.word	0x20000108

08001b7c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <I2C1_EV_IRQHandler+0x10>)
 8001b8e:	f001 fa21 	bl	8002fd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200011e4 	.word	0x200011e4

08001b9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <I2C1_ER_IRQHandler+0x10>)
 8001ba2:	f001 fb88 	bl	80032b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200011e4 	.word	0x200011e4

08001bb0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <SPI2_IRQHandler+0x10>)
 8001bb6:	f004 fc99 	bl	80064ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000110 	.word	0x20000110

08001bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <USART3_IRQHandler+0x10>)
 8001bca:	f004 ff3d 	bl	8006a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000168 	.word	0x20000168

08001bd8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <RTC_Alarm_IRQHandler+0x10>)
 8001bde:	f004 f863 	bl	8005ca8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200012a4 	.word	0x200012a4

08001bec <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bf6:	f005 fc37 	bl	8007468 <__errno>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2216      	movs	r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_exit>:

void _exit (int status)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe7 	bl	8001bec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c1e:	e7fe      	b.n	8001c1e <_exit+0x12>

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f005 fc0a 	bl	8007468 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20008000 	.word	0x20008000
 8001c80:	00000800 	.word	0x00000800
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	200043f0 	.word	0x200043f0

08001c8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	; (8001cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	; (8001cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cbe:	f7ff ffe5 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f005 fbeb 	bl	800749c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc6:	f7ff f89b 	bl	8000e00 <main>
  bx lr
 8001cca:	4770      	bx	lr
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001cd4:	08007e38 	.word	0x08007e38
  ldr r2, =_sbss
 8001cd8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001cdc:	200043f0 	.word	0x200043f0

08001ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC1_IRQHandler>

08001ce2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fdb1 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f80e 	bl	8001d14 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	e001      	b.n	8001d08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d04:	f7ff fd7c 	bl	8001800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_InitTick+0x68>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d022      	beq.n	8001d6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_InitTick+0x6c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_InitTick+0x68>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fdbe 	bl	80028be <HAL_SYSTICK_Config>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	d809      	bhi.n	8001d62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	f04f 30ff 	mov.w	r0, #4294967295
 8001d56:	f000 fd88 	bl	800286a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_InitTick+0x70>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e004      	b.n	8001d72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000054 	.word	0x20000054
 8001d80:	2000004c 	.word	0x2000004c
 8001d84:	20000050 	.word	0x20000050

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x1c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x20>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <HAL_IncTick+0x1c>)
 8001d98:	6013      	str	r3, [r2, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2000236c 	.word	0x2000236c
 8001da8:	20000054 	.word	0x20000054

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_GetTick+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	2000236c 	.word	0x2000236c

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d004      	beq.n	8001de4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_Delay+0x40>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de4:	bf00      	nop
 8001de6:	f7ff ffe1 	bl	8001dac <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d8f7      	bhi.n	8001de6 <HAL_Delay+0x26>
  {
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000054 	.word	0x20000054

08001e04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e127      	b.n	8002074 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_ADC_Init+0x278>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a8d      	ldr	r2, [pc, #564]	; (800207c <HAL_ADC_Init+0x278>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_ADC_Init+0x278>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fd07 	bl	800186c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80ff 	bne.w	800206a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e74:	f023 0302 	bic.w	r3, r3, #2
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001e80:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_ADC_Init+0x27c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	497c      	ldr	r1, [pc, #496]	; (8002080 <HAL_ADC_Init+0x27c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e9a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001ebe:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ec4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2302      	movs	r3, #2
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001ee6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eea:	4313      	orrs	r3, r2
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d007      	beq.n	8001f06 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001efe:	4313      	orrs	r3, r2
 8001f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f02:	4313      	orrs	r3, r2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d04f      	beq.n	8001fb4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f26:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6912      	ldr	r2, [r2, #16]
 8001f2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_Init+0x136>
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_ADC_Init+0x13c>
 8001f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_Init+0x13e>
 8001f40:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f42:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f46:	4313      	orrs	r3, r2
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d125      	bne.n	8001fa0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	617a      	str	r2, [r7, #20]
  return result;
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f82:	4313      	orrs	r3, r2
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
 8001f86:	e00b      	b.n	8001fa0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_ADC_Init+0x280>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_ADC_Init+0x284>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd0:	d003      	beq.n	8001fda <HAL_ADC_Init+0x1d6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d119      	bne.n	800200e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001fee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	60fa      	str	r2, [r7, #12]
  return result;
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	fa03 f202 	lsl.w	r2, r3, r2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
 800200c:	e007      	b.n	800201e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_ADC_Init+0x288>)
 8002026:	4013      	ands	r3, r2
 8002028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202a:	429a      	cmp	r2, r3
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	f023 0303 	bic.w	r3, r3, #3
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	64da      	str	r2, [r3, #76]	; 0x4c
 8002044:	e014      	b.n	8002070 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f023 0312 	bic.w	r3, r3, #18
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002068:	e002      	b.n	8002070 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002074:	4618      	mov	r0, r3
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	40012700 	.word	0x40012700
 8002084:	fcfc16ff 	.word	0xfcfc16ff
 8002088:	c0fff18d 	.word	0xc0fff18d
 800208c:	bf80fffe 	.word	0xbf80fffe

08002090 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Start+0x1a>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e04e      	b.n	8002148 <HAL_ADC_Start+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa64 	bl	8002580 <ADC_Enable>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d106      	bne.n	8002110 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	f023 0206 	bic.w	r2, r3, #6
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	651a      	str	r2, [r3, #80]	; 0x50
 800210e:	e002      	b.n	8002116 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002126:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002144:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Stop+0x1a>
 8002166:	2302      	movs	r3, #2
 8002168:	e01a      	b.n	80021a0 <HAL_ADC_Stop+0x50>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa60 	bl	8002638 <ADC_ConversionStop_Disable>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d113      	bne.n	80021ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d10b      	bne.n	80021ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e068      	b.n	80022c0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ee:	f7ff fddd 	bl	8001dac <HAL_GetTick>
 80021f2:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021f4:	e021      	b.n	800223a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d01d      	beq.n	800223a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_ADC_PollForConversion+0x6c>
 8002204:	f7ff fdd2 	bl	8001dac <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d212      	bcs.n	800223a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f043 0204 	orr.w	r2, r3, #4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e042      	b.n	80022c0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0d6      	beq.n	80021f6 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0212 	mvn.w	r2, #18
 8002258:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d124      	bne.n	80022be <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11f      	bne.n	80022be <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002296:	2b00      	cmp	r3, #0
 8002298:	d111      	bne.n	80022be <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x20>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e134      	b.n	800256a <HAL_ADC_ConfigChannel+0x28a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d81c      	bhi.n	800234a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b05      	subs	r3, #5
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b05      	subs	r3, #5
 800233c:	fa00 f203 	lsl.w	r2, r0, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
 8002348:	e07e      	b.n	8002448 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d81c      	bhi.n	800238c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b23      	subs	r3, #35	; 0x23
 8002364:	221f      	movs	r2, #31
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	4019      	ands	r1, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b23      	subs	r3, #35	; 0x23
 800237e:	fa00 f203 	lsl.w	r2, r0, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	63da      	str	r2, [r3, #60]	; 0x3c
 800238a:	e05d      	b.n	8002448 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d81c      	bhi.n	80023ce <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b41      	subs	r3, #65	; 0x41
 80023a6:	221f      	movs	r2, #31
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b41      	subs	r3, #65	; 0x41
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
 80023cc:	e03c      	b.n	8002448 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b18      	cmp	r3, #24
 80023d4:	d81c      	bhi.n	8002410 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	3b5f      	subs	r3, #95	; 0x5f
 80023e8:	221f      	movs	r2, #31
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	4019      	ands	r1, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b5f      	subs	r3, #95	; 0x5f
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
 800240e:	e01b      	b.n	8002448 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b7d      	subs	r3, #125	; 0x7d
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	4019      	ands	r1, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b7d      	subs	r3, #125	; 0x7d
 800243c:	fa00 f203 	lsl.w	r2, r0, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b09      	cmp	r3, #9
 800244e:	d81a      	bhi.n	8002486 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6959      	ldr	r1, [r3, #20]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	2207      	movs	r2, #7
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	4019      	ands	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6898      	ldr	r0, [r3, #8]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	fa00 f203 	lsl.w	r2, r0, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	e042      	b.n	800250c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b13      	cmp	r3, #19
 800248c:	d81c      	bhi.n	80024c8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6919      	ldr	r1, [r3, #16]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	3b1e      	subs	r3, #30
 80024a0:	2207      	movs	r2, #7
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4019      	ands	r1, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6898      	ldr	r0, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	3b1e      	subs	r3, #30
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	e021      	b.n	800250c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b1a      	cmp	r3, #26
 80024ce:	d81c      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	3b3c      	subs	r3, #60	; 0x3c
 80024e2:	2207      	movs	r2, #7
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4019      	ands	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6898      	ldr	r0, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	3b3c      	subs	r3, #60	; 0x3c
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	e000      	b.n	800250c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800250a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b10      	cmp	r3, #16
 8002512:	d003      	beq.n	800251c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002518:	2b11      	cmp	r3, #17
 800251a:	d121      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_ADC_ConfigChannel+0x294>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11b      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_ADC_ConfigChannel+0x294>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_ADC_ConfigChannel+0x294>)
 800252e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002532:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b10      	cmp	r3, #16
 800253a:	d111      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_ADC_ConfigChannel+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_ADC_ConfigChannel+0x29c>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9a      	lsrs	r2, r3, #18
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002552:	e002      	b.n	800255a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3b01      	subs	r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f9      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012700 	.word	0x40012700
 8002578:	2000004c 	.word	0x2000004c
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d043      	beq.n	8002626 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <ADC_Enable+0xb0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a20      	ldr	r2, [pc, #128]	; (8002634 <ADC_Enable+0xb4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0c9a      	lsrs	r2, r3, #18
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025c2:	e002      	b.n	80025ca <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f9      	bne.n	80025c4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80025d0:	f7ff fbec 	bl	8001dac <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025d6:	e01f      	b.n	8002618 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80025d8:	f7ff fbe8 	bl	8001dac <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d918      	bls.n	8002618 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d011      	beq.n	8002618 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	f043 0210 	orr.w	r2, r3, #16
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d1d8      	bne.n	80025d8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000004c 	.word	0x2000004c
 8002634:	431bde83 	.word	0x431bde83

08002638 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d12e      	bne.n	80026b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002662:	f7ff fba3 	bl	8001dac <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002668:	e01b      	b.n	80026a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800266a:	f7ff fb9f 	bl	8001dac <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d914      	bls.n	80026a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d10d      	bne.n	80026a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e007      	b.n	80026b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d0dc      	beq.n	800266a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4906      	ldr	r1, [pc, #24]	; (8002754 <__NVIC_EnableIRQ+0x34>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7ff ff90 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff2d 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff42 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff35 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa2 	bl	8002810 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d008      	beq.n	8002900 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e022      	b.n	8002946 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020e 	bic.w	r2, r2, #14
 800290e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 021c 	and.w	r2, r3, #28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d005      	beq.n	8002974 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e029      	b.n	80029c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 020e 	bic.w	r2, r2, #14
 8002982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 021c 	and.w	r2, r3, #28
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
    }
  }
  return status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029e0:	b2db      	uxtb	r3, r3
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a02:	e154      	b.n	8002cae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8146 	beq.w	8002ca8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d005      	beq.n	8002a34 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d130      	bne.n	8002a96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0201 	and.w	r2, r3, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d017      	beq.n	8002ad2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d123      	bne.n	8002b26 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	6939      	ldr	r1, [r7, #16]
 8002b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a0 	beq.w	8002ca8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b68:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_GPIO_Init+0x2e0>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_GPIO_Init+0x2e0>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_GPIO_Init+0x2e0>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b80:	4a53      	ldr	r2, [pc, #332]	; (8002cd0 <HAL_GPIO_Init+0x2e4>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d019      	beq.n	8002be0 <HAL_GPIO_Init+0x1f4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x2ec>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_GPIO_Init+0x1f0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a49      	ldr	r2, [pc, #292]	; (8002cdc <HAL_GPIO_Init+0x2f0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00d      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2f4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d007      	beq.n	8002bd4 <HAL_GPIO_Init+0x1e8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_GPIO_Init+0x2f8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_GPIO_Init+0x1e4>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e008      	b.n	8002be2 <HAL_GPIO_Init+0x1f6>
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	e006      	b.n	8002be2 <HAL_GPIO_Init+0x1f6>
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e004      	b.n	8002be2 <HAL_GPIO_Init+0x1f6>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e002      	b.n	8002be2 <HAL_GPIO_Init+0x1f6>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_GPIO_Init+0x1f6>
 8002be0:	2300      	movs	r3, #0
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	f002 0203 	and.w	r2, r2, #3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4093      	lsls	r3, r2
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bf2:	4937      	ldr	r1, [pc, #220]	; (8002cd0 <HAL_GPIO_Init+0x2e4>)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c78:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_GPIO_Init+0x2fc>)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3301      	adds	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f aea3 	bne.w	8002a04 <HAL_GPIO_Init+0x18>
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010400 	.word	0x40010400

08002cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e001      	b.n	8002d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d2a:	787b      	ldrb	r3, [r7, #1]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d30:	887a      	ldrh	r2, [r7, #2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d36:	e003      	b.n	8002d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	041a      	lsls	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e12b      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fdba 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db0:	f002 fae6 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a81      	ldr	r2, [pc, #516]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d807      	bhi.n	8002dd0 <HAL_I2C_Init+0x84>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a80      	ldr	r2, [pc, #512]	; (8002fc4 <HAL_I2C_Init+0x278>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bf94      	ite	ls
 8002dc8:	2301      	movls	r3, #1
 8002dca:	2300      	movhi	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e006      	b.n	8002dde <HAL_I2C_Init+0x92>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a7d      	ldr	r2, [pc, #500]	; (8002fc8 <HAL_I2C_Init+0x27c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0e7      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <HAL_I2C_Init+0x280>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9b      	lsrs	r3, r3, #18
 8002df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d802      	bhi.n	8002e20 <HAL_I2C_Init+0xd4>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e009      	b.n	8002e34 <HAL_I2C_Init+0xe8>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_I2C_Init+0x284>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	3301      	adds	r3, #1
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	495c      	ldr	r1, [pc, #368]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e50:	428b      	cmp	r3, r1
 8002e52:	d819      	bhi.n	8002e88 <HAL_I2C_Init+0x13c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e59      	subs	r1, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e62:	1c59      	adds	r1, r3, #1
 8002e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e68:	400b      	ands	r3, r1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_I2C_Init+0x138>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1e59      	subs	r1, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	e051      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e04f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_I2C_Init+0x168>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e012      	b.n	8002eda <HAL_I2C_Init+0x18e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x196>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e022      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <HAL_I2C_Init+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e58      	subs	r0, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	440b      	add	r3, r1
 8002ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6809      	ldr	r1, [r1, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6911      	ldr	r1, [r2, #16]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	000186a0 	.word	0x000186a0
 8002fc4:	001e847f 	.word	0x001e847f
 8002fc8:	003d08ff 	.word	0x003d08ff
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b10      	cmp	r3, #16
 8003002:	d003      	beq.n	800300c <HAL_I2C_EV_IRQHandler+0x38>
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	f040 80c1 	bne.w	800318e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_I2C_EV_IRQHandler+0x6e>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800302c:	d003      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x62>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003034:	d101      	bne.n	800303a <HAL_I2C_EV_IRQHandler+0x66>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_I2C_EV_IRQHandler+0x68>
 800303a:	2300      	movs	r3, #0
 800303c:	2b01      	cmp	r3, #1
 800303e:	f000 8132 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x92>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	0a5b      	lsrs	r3, r3, #9
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 fc63 	bl	8004924 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fd6f 	bl	8003b42 <I2C_Master_SB>
 8003064:	e092      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0xb2>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0a5b      	lsrs	r3, r3, #9
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fde4 	bl	8003c4c <I2C_Master_ADD10>
 8003084:	e082      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fdfd 	bl	8003c9e <I2C_Master_ADDR>
 80030a4:	e072      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d03b      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c0:	f000 80f3 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	09db      	lsrs	r3, r3, #7
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00f      	beq.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f9e9 	bl	80034c0 <I2C_MasterTransmit_TXE>
 80030ee:	e04d      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80d6 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80cf 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	2b21      	cmp	r3, #33	; 0x21
 8003110:	d103      	bne.n	800311a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa70 	bl	80035f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	e0c7      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	f040 80c4 	bne.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fade 	bl	80036e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003128:	e0bf      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	f000 80b7 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00f      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb53 	bl	800380c <I2C_MasterReceive_RXNE>
 8003166:	e011      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 809a 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	0a5b      	lsrs	r3, r3, #9
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8093 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fbf2 	bl	800396e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318a:	e08e      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800318c:	e08d      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	e007      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	0a5b      	lsrs	r3, r3, #9
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 ffab 	bl	8004136 <I2C_Slave_ADDR>
 80031e0:	e066      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x22e>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0a5b      	lsrs	r3, r3, #9
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ffe6 	bl	80041cc <I2C_Slave_STOPF>
 8003200:	e056      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b21      	cmp	r3, #33	; 0x21
 8003206:	d002      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x23a>
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	2b29      	cmp	r3, #41	; 0x29
 800320c:	d125      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	09db      	lsrs	r3, r3, #7
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00f      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	0a9b      	lsrs	r3, r3, #10
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fec3 	bl	8003fbe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003238:	e039      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d033      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0a5b      	lsrs	r3, r3, #9
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02d      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fef0 	bl	8004038 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003258:	e029      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0a9b      	lsrs	r3, r3, #10
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fefa 	bl	8004078 <I2C_SlaveReceive_RXNE>
 8003284:	e014      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00e      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 ff28 	bl	80040f4 <I2C_SlaveReceive_BTF>
 80032a4:	e004      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08a      	sub	sp, #40	; 0x28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <HAL_I2C_ER_IRQHandler+0x4e>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003302:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_I2C_ER_IRQHandler+0x78>
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800332c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	0a9b      	lsrs	r3, r3, #10
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03f      	beq.n	80033ba <HAL_I2C_ER_IRQHandler+0x104>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d039      	beq.n	80033ba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003346:	7efb      	ldrb	r3, [r7, #27]
 8003348:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003360:	7ebb      	ldrb	r3, [r7, #26]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d112      	bne.n	800338c <HAL_I2C_ER_IRQHandler+0xd6>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <HAL_I2C_ER_IRQHandler+0xd6>
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b21      	cmp	r3, #33	; 0x21
 8003370:	d008      	beq.n	8003384 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b29      	cmp	r3, #41	; 0x29
 8003376:	d005      	beq.n	8003384 <HAL_I2C_ER_IRQHandler+0xce>
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b28      	cmp	r3, #40	; 0x28
 800337c:	d106      	bne.n	800338c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	d103      	bne.n	800338c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f851 	bl	800442c <I2C_Slave_AF>
 800338a:	e016      	b.n	80033ba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003394:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800339e:	7efb      	ldrb	r3, [r7, #27]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d002      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0xf4>
 80033a4:	7efb      	ldrb	r3, [r7, #27]
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	0adb      	lsrs	r3, r3, #11
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <HAL_I2C_ER_IRQHandler+0x12e>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033e2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f888 	bl	800450c <I2C_ITError>
  }
}
 80033fc:	bf00      	nop
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	4613      	mov	r3, r2
 800345a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d150      	bne.n	8003588 <I2C_MasterTransmit_TXE+0xc8>
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	2b21      	cmp	r3, #33	; 0x21
 80034ea:	d14d      	bne.n	8003588 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d01d      	beq.n	800352e <I2C_MasterTransmit_TXE+0x6e>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d01a      	beq.n	800352e <I2C_MasterTransmit_TXE+0x6e>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034fe:	d016      	beq.n	800352e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800350e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2211      	movs	r2, #17
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff6c 	bl	8003404 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800352c:	e060      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800353c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d107      	bne.n	8003578 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff81 	bl	8003478 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003576:	e03b      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff3f 	bl	8003404 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003586:	e033      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b21      	cmp	r3, #33	; 0x21
 800358c:	d005      	beq.n	800359a <I2C_MasterTransmit_TXE+0xda>
 800358e:	7bbb      	ldrb	r3, [r7, #14]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d12d      	bne.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b22      	cmp	r3, #34	; 0x22
 8003598:	d12a      	bne.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035b4:	e01c      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d103      	bne.n	80035ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f88e 	bl	80036e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80035c8:	e012      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035ee:	e7ff      	b.n	80035f0 <I2C_MasterTransmit_TXE+0x130>
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b21      	cmp	r3, #33	; 0x21
 8003610:	d164      	bne.n	80036dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003640:	e04c      	b.n	80036dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d01d      	beq.n	8003684 <I2C_MasterTransmit_BTF+0x8c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b20      	cmp	r3, #32
 800364c:	d01a      	beq.n	8003684 <I2C_MasterTransmit_BTF+0x8c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003654:	d016      	beq.n	8003684 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003664:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2211      	movs	r2, #17
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fec1 	bl	8003404 <HAL_I2C_MasterTxCpltCallback>
}
 8003682:	e02b      	b.n	80036dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003692:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d107      	bne.n	80036ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fed6 	bl	8003478 <HAL_I2C_MemTxCpltCallback>
}
 80036cc:	e006      	b.n	80036dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe94 	bl	8003404 <HAL_I2C_MasterTxCpltCallback>
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10b      	bne.n	800371c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003708:	b2da      	uxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800371a:	e073      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	b29b      	uxth	r3, r3
 8003722:	121b      	asrs	r3, r3, #8
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003736:	e065      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10b      	bne.n	8003758 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003744:	b2da      	uxtb	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003756:	e055      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375c:	2b02      	cmp	r3, #2
 800375e:	d151      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b22      	cmp	r3, #34	; 0x22
 8003764:	d10d      	bne.n	8003782 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003780:	e040      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b21      	cmp	r3, #33	; 0x21
 8003790:	d112      	bne.n	80037b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037b6:	e025      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d120      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b21      	cmp	r3, #33	; 0x21
 80037c6:	d11d      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fe3a 	bl	8003478 <HAL_I2C_MemTxCpltCallback>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b22      	cmp	r3, #34	; 0x22
 800381e:	f040 80a2 	bne.w	8003966 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d921      	bls.n	8003874 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b03      	cmp	r3, #3
 800385e:	f040 8082 	bne.w	8003966 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003872:	e078      	b.n	8003966 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2b02      	cmp	r3, #2
 800387a:	d074      	beq.n	8003966 <I2C_MasterReceive_RXNE+0x15a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d002      	beq.n	8003888 <I2C_MasterReceive_RXNE+0x7c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d16e      	bne.n	8003966 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f001 f819 	bl	80048c0 <I2C_WaitOnSTOPRequestThroughIT>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d142      	bne.n	800391a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d10a      	bne.n	8003904 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fdc4 	bl	800348a <HAL_I2C_MemRxCpltCallback>
}
 8003902:	e030      	b.n	8003966 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2212      	movs	r2, #18
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fd7f 	bl	8003416 <HAL_I2C_MasterRxCpltCallback>
}
 8003918:	e025      	b.n	8003966 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003928:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fd9b 	bl	800349c <HAL_I2C_ErrorCallback>
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b04      	cmp	r3, #4
 8003984:	d11b      	bne.n	80039be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039bc:	e0bd      	b.n	8003b3a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d129      	bne.n	8003a1c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00a      	beq.n	80039f4 <I2C_MasterReceive_BTF+0x86>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d007      	beq.n	80039f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a1a:	e08e      	b.n	8003b3a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d176      	bne.n	8003b14 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <I2C_MasterReceive_BTF+0xc4>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d108      	bne.n	8003a44 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e019      	b.n	8003a78 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d002      	beq.n	8003a50 <I2C_MasterReceive_BTF+0xe2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d108      	bne.n	8003a62 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e00a      	b.n	8003a78 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d007      	beq.n	8003a78 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ad2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d10a      	bne.n	8003afe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fcc7 	bl	800348a <HAL_I2C_MemRxCpltCallback>
}
 8003afc:	e01d      	b.n	8003b3a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2212      	movs	r2, #18
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fc82 	bl	8003416 <HAL_I2C_MasterRxCpltCallback>
}
 8003b12:	e012      	b.n	8003b3a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d117      	bne.n	8003b86 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b6e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b70:	e067      	b.n	8003c42 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]
}
 8003b84:	e05d      	b.n	8003c42 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8e:	d133      	bne.n	8003bf8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b21      	cmp	r3, #33	; 0x21
 8003b9a:	d109      	bne.n	8003bb0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bac:	611a      	str	r2, [r3, #16]
 8003bae:	e008      	b.n	8003bc2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <I2C_Master_SB+0x92>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d032      	beq.n	8003c42 <I2C_Master_SB+0x100>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02d      	beq.n	8003c42 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf4:	605a      	str	r2, [r3, #4]
}
 8003bf6:	e024      	b.n	8003c42 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10e      	bne.n	8003c1e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	11db      	asrs	r3, r3, #7
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0306 	and.w	r3, r3, #6
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f063 030f 	orn	r3, r3, #15
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
}
 8003c1c:	e011      	b.n	8003c42 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d10d      	bne.n	8003c42 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	11db      	asrs	r3, r3, #7
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 0306 	and.w	r3, r3, #6
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f063 030e 	orn	r3, r3, #14
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <I2C_Master_ADD10+0x26>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d108      	bne.n	8003c84 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <I2C_Master_ADD10+0x48>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	605a      	str	r2, [r3, #4]
  }
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b091      	sub	sp, #68	; 0x44
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b22      	cmp	r3, #34	; 0x22
 8003cc6:	f040 8169 	bne.w	8003f9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <I2C_Master_ADDR+0x54>
 8003cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d10b      	bne.n	8003cf2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	e160      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <I2C_Master_ADDR+0x98>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d02:	d118      	bne.n	8003d36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50
 8003d34:	e13e      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e115      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 808a 	bne.w	8003e88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d7a:	d137      	bne.n	8003dec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d113      	bne.n	8003dc4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	e0e7      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e0d3      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d02e      	beq.n	8003e50 <I2C_Master_ADDR+0x1b2>
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d02b      	beq.n	8003e50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	2b12      	cmp	r3, #18
 8003dfc:	d102      	bne.n	8003e04 <I2C_Master_ADDR+0x166>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d125      	bne.n	8003e50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00e      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d00b      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d008      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	e0a1      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e085      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d14d      	bne.n	8003f2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d016      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d013      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d010      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee4:	d117      	bne.n	8003f16 <I2C_Master_ADDR+0x278>
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eec:	d00b      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d008      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d005      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d002      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d107      	bne.n	8003f16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	e032      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d117      	bne.n	8003f7e <I2C_Master_ADDR+0x2e0>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f54:	d00b      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d008      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d005      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d002      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d107      	bne.n	8003f7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f9a:	e00b      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	e7ff      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
 8003fb4:	bf00      	nop
 8003fb6:	3744      	adds	r7, #68	; 0x44
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02b      	beq.n	8004030 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d114      	bne.n	8004030 <I2C_SlaveTransmit_TXE+0x72>
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b29      	cmp	r3, #41	; 0x29
 800400a:	d111      	bne.n	8004030 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2221      	movs	r2, #33	; 0x21
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2228      	movs	r2, #40	; 0x28
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff f9fc 	bl	8003428 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02c      	beq.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d114      	bne.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b2a      	cmp	r3, #42	; 0x2a
 80040c6:	d111      	bne.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2222      	movs	r2, #34	; 0x22
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2228      	movs	r2, #40	; 0x28
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff f9a7 	bl	800343a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004150:	2b28      	cmp	r3, #40	; 0x28
 8004152:	d127      	bne.n	80041a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	09db      	lsrs	r3, r3, #7
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	81bb      	strh	r3, [r7, #12]
 8004186:	e002      	b.n	800418e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004196:	89ba      	ldrh	r2, [r7, #12]
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff f955 	bl	800344c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041a2:	e00e      	b.n	80041c2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004228:	d172      	bne.n	8004310 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b22      	cmp	r3, #34	; 0x22
 800422e:	d002      	beq.n	8004236 <I2C_Slave_STOPF+0x6a>
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d135      	bne.n	80042a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004268:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fbaf 	bl	80029d2 <HAL_DMA_GetState>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d049      	beq.n	800430e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <I2C_Slave_STOPF+0x258>)
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fb62 	bl	8002950 <HAL_DMA_Abort_IT>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03d      	beq.n	800430e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800429c:	4610      	mov	r0, r2
 800429e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042a0:	e035      	b.n	800430e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fb79 	bl	80029d2 <HAL_DMA_GetState>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d014      	beq.n	8004310 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4a4e      	ldr	r2, [pc, #312]	; (8004424 <I2C_Slave_STOPF+0x258>)
 80042ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fb2c 	bl	8002950 <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
 800430c:	e000      	b.n	8004310 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03e      	beq.n	8004398 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d112      	bne.n	800434e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d112      	bne.n	8004382 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8b3 	bl	800450c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043a6:	e039      	b.n	800441c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b2a      	cmp	r3, #42	; 0x2a
 80043ac:	d109      	bne.n	80043c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2228      	movs	r2, #40	; 0x28
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff f83c 	bl	800343a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b28      	cmp	r3, #40	; 0x28
 80043cc:	d111      	bne.n	80043f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <I2C_Slave_STOPF+0x25c>)
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff f83b 	bl	8003466 <HAL_I2C_ListenCpltCallback>
}
 80043f0:	e014      	b.n	800441c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	2b22      	cmp	r3, #34	; 0x22
 80043f8:	d002      	beq.n	8004400 <I2C_Slave_STOPF+0x234>
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b22      	cmp	r3, #34	; 0x22
 80043fe:	d10d      	bne.n	800441c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff f80f 	bl	800343a <HAL_I2C_SlaveRxCpltCallback>
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	08004771 	.word	0x08004771
 8004428:	ffff0000 	.word	0xffff0000

0800442c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d002      	beq.n	800444e <I2C_Slave_AF+0x22>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b20      	cmp	r3, #32
 800444c:	d129      	bne.n	80044a2 <I2C_Slave_AF+0x76>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b28      	cmp	r3, #40	; 0x28
 8004452:	d126      	bne.n	80044a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <I2C_Slave_AF+0xdc>)
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004468:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004472:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe ffe3 	bl	8003466 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044a0:	e02e      	b.n	8004500 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b21      	cmp	r3, #33	; 0x21
 80044a6:	d126      	bne.n	80044f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <I2C_Slave_AF+0xdc>)
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2221      	movs	r2, #33	; 0x21
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe ff9a 	bl	8003428 <HAL_I2C_SlaveTxCpltCallback>
}
 80044f4:	e004      	b.n	8004500 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044fe:	615a      	str	r2, [r3, #20]
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	ffff0000 	.word	0xffff0000

0800450c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	2b10      	cmp	r3, #16
 8004528:	d002      	beq.n	8004530 <I2C_ITError+0x24>
 800452a:	7bbb      	ldrb	r3, [r7, #14]
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d10a      	bne.n	8004546 <I2C_ITError+0x3a>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b22      	cmp	r3, #34	; 0x22
 8004534:	d107      	bne.n	8004546 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004544:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800454c:	2b28      	cmp	r3, #40	; 0x28
 800454e:	d107      	bne.n	8004560 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2228      	movs	r2, #40	; 0x28
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800455e:	e015      	b.n	800458c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456e:	d00a      	beq.n	8004586 <I2C_ITError+0x7a>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b60      	cmp	r3, #96	; 0x60
 8004574:	d007      	beq.n	8004586 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459a:	d162      	bne.n	8004662 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d020      	beq.n	80045fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <I2C_ITError+0x25c>)
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe f9c2 	bl	8002950 <HAL_DMA_Abort_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8089 	beq.w	80046e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f6:	4610      	mov	r0, r2
 80045f8:	4798      	blx	r3
 80045fa:	e074      	b.n	80046e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	4a59      	ldr	r2, [pc, #356]	; (8004768 <I2C_ITError+0x25c>)
 8004602:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f9a1 	bl	8002950 <HAL_DMA_Abort_IT>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d068      	beq.n	80046e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d10b      	bne.n	800463a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	e041      	b.n	80046e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b60      	cmp	r3, #96	; 0x60
 800466c:	d125      	bne.n	80046ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10b      	bne.n	80046a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fefb 	bl	80034ae <HAL_I2C_AbortCpltCallback>
 80046b8:	e015      	b.n	80046e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d10b      	bne.n	80046e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fe fedb 	bl	800349c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10e      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d113      	bne.n	8004760 <I2C_ITError+0x254>
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b28      	cmp	r3, #40	; 0x28
 800473c:	d110      	bne.n	8004760 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <I2C_ITError+0x260>)
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe fe83 	bl	8003466 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	08004771 	.word	0x08004771
 800476c:	ffff0000 	.word	0xffff0000

08004770 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800478a:	4b4b      	ldr	r3, [pc, #300]	; (80048b8 <I2C_DMAAbort+0x148>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	08db      	lsrs	r3, r3, #3
 8004790:	4a4a      	ldr	r2, [pc, #296]	; (80048bc <I2C_DMAAbort+0x14c>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0a1a      	lsrs	r2, r3, #8
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00da      	lsls	r2, r3, #3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047b6:	e00a      	b.n	80047ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047cc:	d0ea      	beq.n	80047a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	2200      	movs	r2, #0
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	2200      	movs	r2, #0
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	2200      	movs	r2, #0
 8004812:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b60      	cmp	r3, #96	; 0x60
 800483e:	d10e      	bne.n	800485e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f7fe fe29 	bl	80034ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800485c:	e027      	b.n	80048ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004864:	2b28      	cmp	r3, #40	; 0x28
 8004866:	d117      	bne.n	8004898 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004886:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2228      	movs	r2, #40	; 0x28
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004896:	e007      	b.n	80048a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f7fe fdf7 	bl	800349c <HAL_I2C_ErrorCallback>
}
 80048ae:	bf00      	nop
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2000004c 	.word	0x2000004c
 80048bc:	14f8b589 	.word	0x14f8b589

080048c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	08db      	lsrs	r3, r3, #3
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	0a1a      	lsrs	r2, r3, #8
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e008      	b.n	8004910 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490c:	d0e9      	beq.n	80048e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	2000004c 	.word	0x2000004c
 8004920:	14f8b589 	.word	0x14f8b589

08004924 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004934:	d103      	bne.n	800493e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800493c:	e007      	b.n	800494e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004946:	d102      	bne.n	800494e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2208      	movs	r2, #8
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e31d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496a:	4b94      	ldr	r3, [pc, #592]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004974:	4b91      	ldr	r3, [pc, #580]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d07b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d006      	beq.n	800499e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d10f      	bne.n	80049b6 <HAL_RCC_OscConfig+0x5e>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d10b      	bne.n	80049b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499e:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06a      	beq.n	8004a80 <HAL_RCC_OscConfig+0x128>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d166      	bne.n	8004a80 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e2f7      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d106      	bne.n	80049cc <HAL_RCC_OscConfig+0x74>
 80049be:	4b7f      	ldr	r3, [pc, #508]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7e      	ldr	r2, [pc, #504]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e02d      	b.n	8004a28 <HAL_RCC_OscConfig+0xd0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0x96>
 80049d4:	4b79      	ldr	r3, [pc, #484]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a78      	ldr	r2, [pc, #480]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a75      	ldr	r2, [pc, #468]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e01c      	b.n	8004a28 <HAL_RCC_OscConfig+0xd0>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0xb8>
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a70      	ldr	r2, [pc, #448]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 80049fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6d      	ldr	r2, [pc, #436]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0xd0>
 8004a10:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a69      	ldr	r2, [pc, #420]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a66      	ldr	r2, [pc, #408]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd f9bc 	bl	8001dac <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a38:	f7fd f9b8 	bl	8001dac <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e2ad      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a4a:	4b5c      	ldr	r3, [pc, #368]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0xe0>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd f9a8 	bl	8001dac <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fd f9a4 	bl	8001dac <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e299      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a72:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x108>
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d05a      	beq.n	8004b44 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d119      	bne.n	8004ace <HAL_RCC_OscConfig+0x176>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d116      	bne.n	8004ace <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x160>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e276      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab8:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004acc:	e03a      	b.n	8004b44 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <HAL_RCC_OscConfig+0x268>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd f966 	bl	8001dac <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fd f962 	bl	8001dac <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e257      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	492a      	ldr	r1, [pc, #168]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
 8004b16:	e015      	b.n	8004b44 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_OscConfig+0x268>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fd f945 	bl	8001dac <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b26:	f7fd f941 	bl	8001dac <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e236      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b38:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80b8 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d170      	bne.n	8004c3a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b58:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_OscConfig+0x218>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e21a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d921      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc23 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e208      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4906      	ldr	r1, [pc, #24]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	4901      	ldr	r1, [pc, #4]	; (8004bbc <HAL_RCC_OscConfig+0x264>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	e020      	b.n	8004bfe <HAL_RCC_OscConfig+0x2a6>
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc4:	4ba4      	ldr	r3, [pc, #656]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	49a1      	ldr	r1, [pc, #644]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd6:	4ba0      	ldr	r3, [pc, #640]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	499c      	ldr	r1, [pc, #624]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fbee 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e1d3      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	0b5b      	lsrs	r3, r3, #13
 8004c04:	3301      	adds	r3, #1
 8004c06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c0e:	4a92      	ldr	r2, [pc, #584]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	0912      	lsrs	r2, r2, #4
 8004c14:	f002 020f 	and.w	r2, r2, #15
 8004c18:	4990      	ldr	r1, [pc, #576]	; (8004e5c <HAL_RCC_OscConfig+0x504>)
 8004c1a:	5c8a      	ldrb	r2, [r1, r2]
 8004c1c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c1e:	4a90      	ldr	r2, [pc, #576]	; (8004e60 <HAL_RCC_OscConfig+0x508>)
 8004c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c22:	4b90      	ldr	r3, [pc, #576]	; (8004e64 <HAL_RCC_OscConfig+0x50c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd f874 	bl	8001d14 <HAL_InitTick>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d045      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	e1b5      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d029      	beq.n	8004c96 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c42:	4b89      	ldr	r3, [pc, #548]	; (8004e68 <HAL_RCC_OscConfig+0x510>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd f8b0 	bl	8001dac <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c50:	f7fd f8ac 	bl	8001dac <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1a1      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c62:	4b7d      	ldr	r3, [pc, #500]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c6e:	4b7a      	ldr	r3, [pc, #488]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4977      	ldr	r1, [pc, #476]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c80:	4b75      	ldr	r3, [pc, #468]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	4972      	ldr	r1, [pc, #456]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c96:	4b74      	ldr	r3, [pc, #464]	; (8004e68 <HAL_RCC_OscConfig+0x510>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fd f886 	bl	8001dac <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca4:	f7fd f882 	bl	8001dac <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e177      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cb6:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d030      	beq.n	8004d30 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCC_OscConfig+0x514>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cdc:	f7fd f866 	bl	8001dac <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fd f862 	bl	8001dac <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e157      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cf6:	4b58      	ldr	r3, [pc, #352]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x38c>
 8004d02:	e015      	b.n	8004d30 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_OscConfig+0x514>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd f84f 	bl	8001dac <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd f84b 	bl	8001dac <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e140      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d24:	4b4c      	ldr	r3, [pc, #304]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f0      	bne.n	8004d12 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80b5 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d42:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6253      	str	r3, [r2, #36]	; 0x24
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d66:	2301      	movs	r3, #1
 8004d68:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	4b41      	ldr	r3, [pc, #260]	; (8004e70 <HAL_RCC_OscConfig+0x518>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d118      	bne.n	8004da8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d76:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCC_OscConfig+0x518>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3d      	ldr	r2, [pc, #244]	; (8004e70 <HAL_RCC_OscConfig+0x518>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d82:	f7fd f813 	bl	8001dac <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fd f80f 	bl	8001dac <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e104      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_OscConfig+0x518>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x466>
 8004db0:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	4a28      	ldr	r2, [pc, #160]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6353      	str	r3, [r2, #52]	; 0x34
 8004dbc:	e02d      	b.n	8004e1a <HAL_RCC_OscConfig+0x4c2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x488>
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	4a23      	ldr	r2, [pc, #140]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	6353      	str	r3, [r2, #52]	; 0x34
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ddc:	6353      	str	r3, [r2, #52]	; 0x34
 8004dde:	e01c      	b.n	8004e1a <HAL_RCC_OscConfig+0x4c2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x4aa>
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df2:	6353      	str	r3, [r2, #52]	; 0x34
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6353      	str	r3, [r2, #52]	; 0x34
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x4c2>
 8004e02:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e0c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e18:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d015      	beq.n	8004e4e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fc ffc3 	bl	8001dac <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fc ffbf 	bl	8001dac <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0b2      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_OscConfig+0x500>)
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCC_OscConfig+0x4d2>
 8004e4c:	e023      	b.n	8004e96 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fc ffad 	bl	8001dac <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e54:	e019      	b.n	8004e8a <HAL_RCC_OscConfig+0x532>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	08007dd8 	.word	0x08007dd8
 8004e60:	2000004c 	.word	0x2000004c
 8004e64:	20000050 	.word	0x20000050
 8004e68:	42470020 	.word	0x42470020
 8004e6c:	42470680 	.word	0x42470680
 8004e70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e74:	f7fc ff9a 	bl	8001dac <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e08d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ee      	bne.n	8004e74 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e96:	7ffb      	ldrb	r3, [r7, #31]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d105      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9c:	4b44      	ldr	r3, [pc, #272]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4a43      	ldr	r2, [pc, #268]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d079      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d056      	beq.n	8004f64 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d13b      	bne.n	8004f36 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <HAL_RCC_OscConfig+0x65c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fc ff72 	bl	8001dac <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fc ff6e 	bl	8001dac <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e063      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ede:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eea:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4319      	orrs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	430b      	orrs	r3, r1
 8004f02:	492b      	ldr	r1, [pc, #172]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <HAL_RCC_OscConfig+0x65c>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fc ff4d 	bl	8001dac <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fc ff49 	bl	8001dac <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e03e      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x5be>
 8004f34:	e036      	b.n	8004fa4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <HAL_RCC_OscConfig+0x65c>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fc ff36 	bl	8001dac <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fc ff32 	bl	8001dac <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e027      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f56:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5ec>
 8004f62:	e01f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e01a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <HAL_RCC_OscConfig+0x658>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10d      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	42470060 	.word	0x42470060

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e11a      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b8f      	ldr	r3, [pc, #572]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d919      	bls.n	800500e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCC_ClockConfig+0x34>
 8004fe0:	4b8a      	ldr	r3, [pc, #552]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a89      	ldr	r2, [pc, #548]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b87      	ldr	r3, [pc, #540]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 0201 	bic.w	r2, r3, #1
 8004ff4:	4985      	ldr	r1, [pc, #532]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffc:	4b83      	ldr	r3, [pc, #524]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d001      	beq.n	800500e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0f9      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501a:	4b7d      	ldr	r3, [pc, #500]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	497a      	ldr	r1, [pc, #488]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808e 	beq.w	8005156 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005042:	4b73      	ldr	r3, [pc, #460]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d121      	bne.n	8005092 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e0d7      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d115      	bne.n	8005092 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0cb      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0bf      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005082:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0b7      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b5f      	ldr	r3, [pc, #380]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	495c      	ldr	r1, [pc, #368]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a4:	f7fc fe82 	bl	8001dac <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d112      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7fc fe7a 	bl	8001dac <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e09b      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ca:	4b51      	ldr	r3, [pc, #324]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d1ee      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xfc>
 80050d6:	e03e      	b.n	8005156 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d112      	bne.n	8005106 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e2:	f7fc fe63 	bl	8001dac <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e084      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f8:	4b45      	ldr	r3, [pc, #276]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d1ee      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x12a>
 8005104:	e027      	b.n	8005156 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d11d      	bne.n	800514a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fc fe4c 	bl	8001dac <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e06d      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b04      	cmp	r3, #4
 8005130:	d1ee      	bne.n	8005110 <HAL_RCC_ClockConfig+0x158>
 8005132:	e010      	b.n	8005156 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005134:	f7fc fe3a 	bl	8001dac <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e05b      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ee      	bne.n	8005134 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005156:	4b2d      	ldr	r3, [pc, #180]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d219      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_RCC_ClockConfig+0x1be>
 800516a:	4b28      	ldr	r3, [pc, #160]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a27      	ldr	r2, [pc, #156]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	4923      	ldr	r1, [pc, #140]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCC_ClockConfig+0x254>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e034      	b.n	8005202 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4917      	ldr	r1, [pc, #92]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490f      	ldr	r1, [pc, #60]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f823 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <HAL_RCC_ClockConfig+0x258>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490b      	ldr	r1, [pc, #44]	; (8005214 <HAL_RCC_ClockConfig+0x25c>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <HAL_RCC_ClockConfig+0x260>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <HAL_RCC_ClockConfig+0x264>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fc fd8c 	bl	8001d14 <HAL_InitTick>
 80051fc:	4603      	mov	r3, r0
 80051fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8005200:	7afb      	ldrb	r3, [r7, #11]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023c00 	.word	0x40023c00
 8005210:	40023800 	.word	0x40023800
 8005214:	08007dd8 	.word	0x08007dd8
 8005218:	2000004c 	.word	0x2000004c
 800521c:	20000050 	.word	0x20000050

08005220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005226:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d00c      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x30>
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d87c      	bhi.n	8005334 <HAL_RCC_GetSysClockFreq+0x114>
 800523a:	2b04      	cmp	r3, #4
 800523c:	d002      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x24>
 800523e:	2b08      	cmp	r3, #8
 8005240:	d003      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x2a>
 8005242:	e077      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005244:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCC_GetSysClockFreq+0x140>)
 8005246:	613b      	str	r3, [r7, #16]
      break;
 8005248:	e082      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <HAL_RCC_GetSysClockFreq+0x144>)
 800524c:	613b      	str	r3, [r7, #16]
      break;
 800524e:	e07f      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	0c9b      	lsrs	r3, r3, #18
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	4a43      	ldr	r2, [pc, #268]	; (8005368 <HAL_RCC_GetSysClockFreq+0x148>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0d9b      	lsrs	r3, r3, #22
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800526a:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_RCC_GetSysClockFreq+0x13c>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01a      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	4939      	ldr	r1, [pc, #228]	; (8005364 <HAL_RCC_GetSysClockFreq+0x144>)
 8005280:	fb01 f003 	mul.w	r0, r1, r3
 8005284:	2100      	movs	r1, #0
 8005286:	fb01 f102 	mul.w	r1, r1, r2
 800528a:	1844      	adds	r4, r0, r1
 800528c:	4935      	ldr	r1, [pc, #212]	; (8005364 <HAL_RCC_GetSysClockFreq+0x144>)
 800528e:	fba2 0101 	umull	r0, r1, r2, r1
 8005292:	1863      	adds	r3, r4, r1
 8005294:	4619      	mov	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	461a      	mov	r2, r3
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	f7fa ff6d 	bl	800017c <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4613      	mov	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e040      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	461c      	mov	r4, r3
 80052b0:	f04f 0500 	mov.w	r5, #0
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	014b      	lsls	r3, r1, #5
 80052c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052c6:	0142      	lsls	r2, r0, #5
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	1b00      	subs	r0, r0, r4
 80052ce:	eb61 0105 	sbc.w	r1, r1, r5
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	018b      	lsls	r3, r1, #6
 80052dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052e0:	0182      	lsls	r2, r0, #6
 80052e2:	1a12      	subs	r2, r2, r0
 80052e4:	eb63 0301 	sbc.w	r3, r3, r1
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	00d9      	lsls	r1, r3, #3
 80052f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f6:	00d0      	lsls	r0, r2, #3
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	1912      	adds	r2, r2, r4
 80052fe:	eb45 0303 	adc.w	r3, r5, r3
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	0299      	lsls	r1, r3, #10
 800530c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005310:	0290      	lsls	r0, r2, #10
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4610      	mov	r0, r2
 8005318:	4619      	mov	r1, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	461a      	mov	r2, r3
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	f7fa ff2b 	bl	800017c <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4613      	mov	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	613b      	str	r3, [r7, #16]
      break;
 8005332:	e00d      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	0b5b      	lsrs	r3, r3, #13
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	613b      	str	r3, [r7, #16]
      break;
 800534e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005350:	693b      	ldr	r3, [r7, #16]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800
 8005360:	00f42400 	.word	0x00f42400
 8005364:	01312d00 	.word	0x01312d00
 8005368:	08007dcc 	.word	0x08007dcc

0800536c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <HAL_RCC_GetHCLKFreq+0x10>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	2000004c 	.word	0x2000004c

08005380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005384:	f7ff fff2 	bl	800536c <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	0a1b      	lsrs	r3, r3, #8
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4903      	ldr	r1, [pc, #12]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40023800 	.word	0x40023800
 80053a4:	08007de8 	.word	0x08007de8

080053a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ac:	f7ff ffde 	bl	800536c <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0adb      	lsrs	r3, r3, #11
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4903      	ldr	r1, [pc, #12]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	08007de8 	.word	0x08007de8

080053d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d12c      	bne.n	8005442 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053e8:	4b26      	ldr	r3, [pc, #152]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053f4:	4b24      	ldr	r3, [pc, #144]	; (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e016      	b.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005400:	4b20      	ldr	r3, [pc, #128]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	6253      	str	r3, [r2, #36]	; 0x24
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005420:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	4a17      	ldr	r2, [pc, #92]	; (8005484 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005434:	d105      	bne.n	8005442 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800543c:	d101      	bne.n	8005442 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800543e:	2301      	movs	r3, #1
 8005440:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0f      	ldr	r2, [pc, #60]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544e:	f043 0304 	orr.w	r3, r3, #4
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 0201 	bic.w	r2, r3, #1
 800545c:	490b      	ldr	r1, [pc, #44]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d001      	beq.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	40007000 	.word	0x40007000
 800548c:	40023c00 	.word	0x40023c00

08005490 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80ed 	beq.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b6:	4b78      	ldr	r3, [pc, #480]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	4b75      	ldr	r3, [pc, #468]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	4a74      	ldr	r2, [pc, #464]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6253      	str	r3, [r2, #36]	; 0x24
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b6f      	ldr	r3, [pc, #444]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d118      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ea:	4b6c      	ldr	r3, [pc, #432]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6b      	ldr	r2, [pc, #428]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f6:	f7fc fc59 	bl	8001dac <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fe:	f7fc fc55 	bl	8001dac <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b64      	cmp	r3, #100	; 0x64
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e0be      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	4b62      	ldr	r3, [pc, #392]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800551c:	4b5e      	ldr	r3, [pc, #376]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005524:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d106      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d00f      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800554a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800554e:	d108      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005550:	4b51      	ldr	r3, [pc, #324]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555c:	d101      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e095      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005562:	4b4d      	ldr	r3, [pc, #308]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d041      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	429a      	cmp	r2, r3
 800557e:	d005      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10c      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	429a      	cmp	r2, r3
 8005598:	d02d      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d027      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80055a6:	4b3c      	ldr	r3, [pc, #240]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055ae:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b6:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80055bc:	4a36      	ldr	r2, [pc, #216]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d014      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fc fbee 	bl	8001dac <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d2:	e00a      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d4:	f7fc fbea 	bl	8001dac <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e051      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ea:	4b2b      	ldr	r3, [pc, #172]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ee      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800560a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800560e:	d10a      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005620:	491d      	ldr	r1, [pc, #116]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005632:	4919      	ldr	r1, [pc, #100]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005634:	4313      	orrs	r3, r2
 8005636:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800564c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005650:	d10a      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005662:	490d      	ldr	r1, [pc, #52]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800566a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005674:	4908      	ldr	r1, [pc, #32]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005676:	4313      	orrs	r3, r2
 8005678:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	4a04      	ldr	r2, [pc, #16]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568a:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	40007000 	.word	0x40007000
 80056a0:	424706dc 	.word	0x424706dc

080056a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e07c      	b.n	80057b0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	7f5b      	ldrb	r3, [r3, #29]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f964 	bl	8001994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	22ca      	movs	r2, #202	; 0xca
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2253      	movs	r2, #83	; 0x53
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb55 	bl	8005d92 <RTC_EnterInitMode>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	22ff      	movs	r2, #255	; 0xff
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2204      	movs	r2, #4
 80056fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e057      	b.n	80057b0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68d2      	ldr	r2, [r2, #12]
 800573a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6919      	ldr	r1, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	041a      	lsls	r2, r3, #16
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575e:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 faf0 	bl	8005d46 <HAL_RTC_WaitForSynchro>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	22ff      	movs	r2, #255	; 0xff
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2204      	movs	r2, #4
 8005778:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e018      	b.n	80057b0 <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	7f1b      	ldrb	r3, [r3, #28]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_RTC_SetTime+0x18>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e0a3      	b.n	8005918 <HAL_RTC_SetTime+0x160>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2202      	movs	r2, #2
 80057da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d126      	bne.n	8005830 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 faf3 	bl	8005de6 <RTC_ByteToBcd2>
 8005800:	4603      	mov	r3, r0
 8005802:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 faec 	bl	8005de6 <RTC_ByteToBcd2>
 800580e:	4603      	mov	r3, r0
 8005810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005812:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	789b      	ldrb	r3, [r3, #2]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fae4 	bl	8005de6 <RTC_ByteToBcd2>
 800581e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005820:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	78db      	ldrb	r3, [r3, #3]
 8005828:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e018      	b.n	8005862 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005850:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005856:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	78db      	ldrb	r3, [r3, #3]
 800585c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ca      	movs	r2, #202	; 0xca
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2253      	movs	r2, #83	; 0x53
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fa8d 	bl	8005d92 <RTC_EnterInitMode>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2204      	movs	r2, #4
 800588a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e040      	b.n	8005918 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6899      	ldr	r1, [r3, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058dc:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa31 	bl	8005d46 <HAL_RTC_WaitForSynchro>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	22ff      	movs	r2, #255	; 0xff
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2204      	movs	r2, #4
 80058f6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e00a      	b.n	8005918 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}

08005920 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005920:	b590      	push	{r4, r7, lr}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	7f1b      	ldrb	r3, [r3, #28]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_RTC_SetDate+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e08d      	b.n	8005a54 <HAL_RTC_SetDate+0x134>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2202      	movs	r2, #2
 8005942:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_RTC_SetDate+0x48>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	b2db      	uxtb	r3, r3
 8005960:	330a      	adds	r3, #10
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11c      	bne.n	80059a8 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	78db      	ldrb	r3, [r3, #3]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa37 	bl	8005de6 <RTC_ByteToBcd2>
 8005978:	4603      	mov	r3, r0
 800597a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fa30 	bl	8005de6 <RTC_ByteToBcd2>
 8005986:	4603      	mov	r3, r0
 8005988:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800598a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	789b      	ldrb	r3, [r3, #2]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa28 	bl	8005de6 <RTC_ByteToBcd2>
 8005996:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005998:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	e00e      	b.n	80059c6 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80059ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	22ca      	movs	r2, #202	; 0xca
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2253      	movs	r2, #83	; 0x53
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f9db 	bl	8005d92 <RTC_EnterInitMode>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	22ff      	movs	r2, #255	; 0xff
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2204      	movs	r2, #4
 80059ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e02c      	b.n	8005a54 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a18:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f993 	bl	8005d46 <HAL_RTC_WaitForSynchro>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2204      	movs	r2, #4
 8005a32:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e00a      	b.n	8005a54 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005a52:	2300      	movs	r3, #0
  }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}

08005a5c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	7f1b      	ldrb	r3, [r3, #28]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_RTC_SetAlarm_IT+0x20>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e10f      	b.n	8005c9c <HAL_RTC_SetAlarm_IT+0x240>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d136      	bne.n	8005afc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f99d 	bl	8005de6 <RTC_ByteToBcd2>
 8005aac:	4603      	mov	r3, r0
 8005aae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f996 	bl	8005de6 <RTC_ByteToBcd2>
 8005aba:	4603      	mov	r3, r0
 8005abc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005abe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	789b      	ldrb	r3, [r3, #2]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f98e 	bl	8005de6 <RTC_ByteToBcd2>
 8005aca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005acc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	78db      	ldrb	r3, [r3, #3]
 8005ad4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ad6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	7d1b      	ldrb	r3, [r3, #20]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f981 	bl	8005de6 <RTC_ByteToBcd2>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ae8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005af0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e022      	b.n	8005b42 <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b1c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	7d1b      	ldrb	r3, [r3, #20]
 8005b30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	22ca      	movs	r2, #202	; 0xca
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2253      	movs	r2, #83	; 0x53
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	d144      	bne.n	8005be6 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b6a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b7e:	f7fc f915 	bl	8001dac <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b84:	e013      	b.n	8005bae <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b86:	f7fc f911 	bl	8001dac <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b94:	d90b      	bls.n	8005bae <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e076      	b.n	8005c9c <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0e4      	beq.n	8005b86 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	e043      	b.n	8005c6e <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bf4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c08:	f7fc f8d0 	bl	8001dac <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c0e:	e013      	b.n	8005c38 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c10:	f7fc f8cc 	bl	8001dac <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c1e:	d90b      	bls.n	8005c38 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e031      	b.n	8005c9c <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0e4      	beq.n	8005c10 <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c78:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <HAL_RTC_SetAlarm_IT+0x248>)
 8005c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c84:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	22ff      	movs	r2, #255	; 0xff
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd90      	pop	{r4, r7, pc}
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d012      	beq.n	8005ce4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f831 	bl	8005d34 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005ce2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d012      	beq.n	8005d18 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f88f 	bl	8005e24 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d16:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d1e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	775a      	strb	r2, [r3, #29]
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40010400 	.word	0x40010400

08005d34 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d5c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d5e:	f7fc f825 	bl	8001dac <HAL_GetTick>
 8005d62:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d64:	e009      	b.n	8005d7a <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d66:	f7fc f821 	bl	8001dac <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d74:	d901      	bls.n	8005d7a <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e007      	b.n	8005d8a <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ee      	beq.n	8005d66 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d119      	bne.n	8005ddc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005db2:	f7fb fffb 	bl	8001dac <HAL_GetTick>
 8005db6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005db8:	e009      	b.n	8005dce <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005dba:	f7fb fff7 	bl	8001dac <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc8:	d901      	bls.n	8005dce <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e007      	b.n	8005dde <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ee      	beq.n	8005dba <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	4603      	mov	r3, r0
 8005dee:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005df8:	e005      	b.n	8005e06 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	3b0a      	subs	r3, #10
 8005e04:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d8f6      	bhi.n	8005dfa <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b2db      	uxtb	r3, r3
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e06e      	b.n	8005f26 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e58:	d009      	beq.n	8005e6e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	61da      	str	r2, [r3, #28]
 8005e60:	e005      	b.n	8005e6e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fb fd9f 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	ea42 0103 	orr.w	r1, r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	0c1a      	lsrs	r2, r3, #16
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f002 0204 	and.w	r2, r2, #4
 8005f14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_SPI_Transmit+0x22>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e126      	b.n	800619e <HAL_SPI_Transmit+0x270>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f58:	f7fb ff28 	bl	8001dac <HAL_GetTick>
 8005f5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f72:	e10b      	b.n	800618c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_SPI_Transmit+0x52>
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f84:	e102      	b.n	800618c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	88fa      	ldrh	r2, [r7, #6]
 8005f9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	d10f      	bne.n	8005fee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d007      	beq.n	800600c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800600a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006014:	d14b      	bne.n	80060ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_SPI_Transmit+0xf6>
 800601e:	8afb      	ldrh	r3, [r7, #22]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d13e      	bne.n	80060a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006048:	e02b      	b.n	80060a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d112      	bne.n	800607e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	1c9a      	adds	r2, r3, #2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	86da      	strh	r2, [r3, #54]	; 0x36
 800607c:	e011      	b.n	80060a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800607e:	f7fb fe95 	bl	8001dac <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d803      	bhi.n	8006096 <HAL_SPI_Transmit+0x168>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d102      	bne.n	800609c <HAL_SPI_Transmit+0x16e>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060a0:	e074      	b.n	800618c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1ce      	bne.n	800604a <HAL_SPI_Transmit+0x11c>
 80060ac:	e04c      	b.n	8006148 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_SPI_Transmit+0x18e>
 80060b6:	8afb      	ldrh	r3, [r7, #22]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d140      	bne.n	800613e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060e2:	e02c      	b.n	800613e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d113      	bne.n	800611a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	86da      	strh	r2, [r3, #54]	; 0x36
 8006118:	e011      	b.n	800613e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611a:	f7fb fe47 	bl	8001dac <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_Transmit+0x204>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_Transmit+0x20a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800613c:	e026      	b.n	800618c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1cd      	bne.n	80060e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb59 	bl	8006804 <SPI_EndRxTxTransaction>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e000      	b.n	800618c <HAL_SPI_Transmit+0x25e>
  }

error:
 800618a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800619c:	7ffb      	ldrb	r3, [r7, #31]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08c      	sub	sp, #48	; 0x30
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x26>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e18a      	b.n	80064e2 <HAL_SPI_TransmitReceive+0x33c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d4:	f7fb fdea 	bl	8001dac <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d00f      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fc:	d107      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
 8006206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620a:	2b04      	cmp	r3, #4
 800620c:	d003      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006214:	e15b      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800622e:	e14e      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b04      	cmp	r3, #4
 800623a:	d003      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2205      	movs	r2, #5
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	887a      	ldrh	r2, [r7, #2]
 8006266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	887a      	ldrh	r2, [r7, #2]
 800626c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d007      	beq.n	8006298 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a0:	d178      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x10a>
 80062aa:	8b7b      	ldrh	r3, [r7, #26]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d166      	bne.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d4:	e053      	b.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d11b      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d113      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d119      	bne.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d014      	beq.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	b292      	uxth	r2, r2
 8006340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800635a:	2301      	movs	r3, #1
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800635e:	f7fb fd25 	bl	8001dac <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	429a      	cmp	r2, r3
 800636c:	d807      	bhi.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d003      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800637c:	e0a7      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1a6      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1a1      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006392:	e07c      	b.n	800648e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x1fc>
 800639c:	8b7b      	ldrh	r3, [r7, #26]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d16b      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c8:	e057      	b.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11c      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d114      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d119      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006454:	f7fb fcaa 	bl	8001dac <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006460:	429a      	cmp	r2, r3
 8006462:	d803      	bhi.n	800646c <HAL_SPI_TransmitReceive+0x2c6>
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d102      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x2cc>
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006478:	e029      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1a2      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d19d      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f9b6 	bl	8006804 <SPI_EndRxTxTransaction>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064aa:	e010      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e000      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	; 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10f      	bne.n	8006530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	099b      	lsrs	r3, r3, #6
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
    return;
 800652e:	e0be      	b.n	80066ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_SPI_IRQHandler+0x66>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
    return;
 8006550:	e0ad      	b.n	80066ae <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_SPI_IRQHandler+0x80>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	099b      	lsrs	r3, r3, #6
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80a1 	beq.w	80066ae <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 809a 	beq.w	80066ae <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	099b      	lsrs	r3, r3, #6
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d023      	beq.n	80065ce <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b03      	cmp	r3, #3
 8006590:	d011      	beq.n	80065b6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	e00b      	b.n	80065ce <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	693b      	ldr	r3, [r7, #16]
        return;
 80065cc:	e06f      	b.n	80066ae <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	2b00      	cmp	r3, #0
 800660a:	d04f      	beq.n	80066ac <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800661a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_SPI_IRQHandler+0x14c>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d034      	beq.n	80066a2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0203 	bic.w	r2, r2, #3
 8006646:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d011      	beq.n	8006674 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006654:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <HAL_SPI_IRQHandler+0x1c8>)
 8006656:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc f977 	bl	8002950 <HAL_DMA_Abort_IT>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006678:	2b00      	cmp	r3, #0
 800667a:	d016      	beq.n	80066aa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <HAL_SPI_IRQHandler+0x1c8>)
 8006682:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	4618      	mov	r0, r3
 800668a:	f7fc f961 	bl	8002950 <HAL_DMA_Abort_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066a0:	e003      	b.n	80066aa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f808 	bl	80066b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066a8:	e000      	b.n	80066ac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80066aa:	bf00      	nop
    return;
 80066ac:	bf00      	nop
  }
}
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	080066cb 	.word	0x080066cb

080066b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ffe7 	bl	80066b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006704:	f7fb fb52 	bl	8001dac <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4413      	add	r3, r2
 8006712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006714:	f7fb fb4a 	bl	8001dac <HAL_GetTick>
 8006718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800671a:	4b39      	ldr	r3, [pc, #228]	; (8006800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	015b      	lsls	r3, r3, #5
 8006720:	0d1b      	lsrs	r3, r3, #20
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672a:	e054      	b.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d050      	beq.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006734:	f7fb fb3a 	bl	8001dac <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	429a      	cmp	r2, r3
 8006742:	d902      	bls.n	800674a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d13d      	bne.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006762:	d111      	bne.n	8006788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676c:	d004      	beq.n	8006778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006776:	d107      	bne.n	8006788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006790:	d10f      	bne.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e017      	b.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d19b      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	2000004c 	.word	0x2000004c

08006804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <SPI_EndRxTxTransaction+0x7c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <SPI_EndRxTxTransaction+0x80>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	0d5b      	lsrs	r3, r3, #21
 800681c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006820:	fb02 f303 	mul.w	r3, r2, r3
 8006824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682e:	d112      	bne.n	8006856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ff5a 	bl	80066f4 <SPI_WaitFlagStateUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e00f      	b.n	8006876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3b01      	subs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	d0f2      	beq.n	8006856 <SPI_EndRxTxTransaction+0x52>
 8006870:	e000      	b.n	8006874 <SPI_EndRxTxTransaction+0x70>
        break;
 8006872:	bf00      	nop
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000004c 	.word	0x2000004c
 8006884:	165e9f81 	.word	0x165e9f81

08006888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e03f      	b.n	800691a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fb f8d8 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2224      	movs	r2, #36	; 0x24
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc25 	bl	800711c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695a      	ldr	r2, [r3, #20]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b08a      	sub	sp, #40	; 0x28
 8006926:	af02      	add	r7, sp, #8
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b20      	cmp	r3, #32
 8006940:	d17c      	bne.n	8006a3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_Transmit+0x2c>
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e075      	b.n	8006a3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UART_Transmit+0x3e>
 800695c:	2302      	movs	r3, #2
 800695e:	e06e      	b.n	8006a3e <HAL_UART_Transmit+0x11c>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2221      	movs	r2, #33	; 0x21
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006976:	f7fb fa19 	bl	8001dac <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d108      	bne.n	80069a4 <HAL_UART_Transmit+0x82>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	e003      	b.n	80069ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069b4:	e02a      	b.n	8006a0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa11 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e036      	b.n	8006a3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	3302      	adds	r3, #2
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e007      	b.n	80069fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1cf      	bne.n	80069b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2140      	movs	r1, #64	; 0x40
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f9e1 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e006      	b.n	8006a3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e000      	b.n	8006a3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
  }
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa99 	bl	8006fca <UART_Receive_IT>
      return;
 8006a98:	e17b      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80b1 	beq.w	8006c04 <HAL_UART_IRQHandler+0x1bc>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x70>
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f043 0202 	orr.w	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00f      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_UART_IRQHandler+0xee>
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0208 	orr.w	r2, r3, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 811e 	beq.w	8006d88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_UART_IRQHandler+0x11e>
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa32 	bl	8006fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <HAL_UART_IRQHandler+0x146>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d031      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f974 	bl	8006e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d123      	bne.n	8006bea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	4a76      	ldr	r2, [pc, #472]	; (8006d98 <HAL_UART_IRQHandler+0x350>)
 8006bc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fb fec2 	bl	8002950 <HAL_DMA_Abort_IT>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e00e      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8ec 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e00a      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8e8 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	e006      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8e4 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bfe:	e0c3      	b.n	8006d88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	bf00      	nop
    return;
 8006c02:	e0c1      	b.n	8006d88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	f040 80a1 	bne.w	8006d50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 809b 	beq.w	8006d50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8095 	beq.w	8006d50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d14e      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8098 	beq.w	8006d8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c60:	8a3a      	ldrh	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	f080 8092 	bcs.w	8006d8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8a3a      	ldrh	r2, [r7, #16]
 8006c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d02b      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0210 	bic.w	r2, r2, #16
 8006cc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fb fe03 	bl	80028d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f876 	bl	8006dd2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ce6:	e051      	b.n	8006d8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d047      	beq.n	8006d90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006d00:	8a7b      	ldrh	r3, [r7, #18]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d044      	beq.n	8006d90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0210 	bic.w	r2, r2, #16
 8006d42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d44:	8a7b      	ldrh	r3, [r7, #18]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f842 	bl	8006dd2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d4e:	e01f      	b.n	8006d90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_UART_IRQHandler+0x324>
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8c9 	bl	8006efc <UART_Transmit_IT>
    return;
 8006d6a:	e012      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <HAL_UART_IRQHandler+0x34a>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f90a 	bl	8006f9a <UART_EndTransmit_IT>
    return;
 8006d86:	e004      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e002      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	3728      	adds	r7, #40	; 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08006ed5 	.word	0x08006ed5

08006d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e02c      	b.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d028      	beq.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e08:	f7fa ffd0 	bl	8001dac <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d21d      	bcs.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e00f      	b.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d0c3      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695a      	ldr	r2, [r3, #20]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0210 	bic.w	r2, r2, #16
 8006eba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff ff66 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b21      	cmp	r3, #33	; 0x21
 8006f0e:	d13e      	bne.n	8006f8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d114      	bne.n	8006f44 <UART_Transmit_IT+0x48>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d110      	bne.n	8006f44 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]
 8006f42:	e008      	b.n	8006f56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6211      	str	r1, [r2, #32]
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4619      	mov	r1, r3
 8006f64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e000      	b.n	8006f90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
  }
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff feee 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b22      	cmp	r3, #34	; 0x22
 8006fdc:	f040 8099 	bne.w	8007112 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe8:	d117      	bne.n	800701a <UART_Receive_IT+0x50>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d113      	bne.n	800701a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007008:	b29a      	uxth	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28
 8007018:	e026      	b.n	8007068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	d007      	beq.n	800703e <UART_Receive_IT+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <UART_Receive_IT+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e008      	b.n	800705e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007058:	b2da      	uxtb	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007078:	2b00      	cmp	r3, #0
 800707a:	d148      	bne.n	800710e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0220 	bic.w	r2, r2, #32
 800708a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800709a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d123      	bne.n	8007104 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0210 	bic.w	r2, r2, #16
 80070d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d10a      	bne.n	80070f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff fe68 	bl	8006dd2 <HAL_UARTEx_RxEventCallback>
 8007102:	e002      	b.n	800710a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fe52 	bl	8006dae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	e002      	b.n	8007114 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	4313      	orrs	r3, r2
 8007150:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800715c:	f023 030c 	bic.w	r3, r3, #12
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a55      	ldr	r2, [pc, #340]	; (80072dc <UART_SetConfig+0x1c0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d103      	bne.n	8007192 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800718a:	f7fe f90d 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	e002      	b.n	8007198 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007192:	f7fe f8f5 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8007196:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	d14c      	bne.n	800723c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009a      	lsls	r2, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	4a49      	ldr	r2, [pc, #292]	; (80072e0 <UART_SetConfig+0x1c4>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	0119      	lsls	r1, r3, #4
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009a      	lsls	r2, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80071d8:	4b41      	ldr	r3, [pc, #260]	; (80072e0 <UART_SetConfig+0x1c4>)
 80071da:	fba3 0302 	umull	r0, r3, r3, r2
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	2064      	movs	r0, #100	; 0x64
 80071e2:	fb00 f303 	mul.w	r3, r0, r3
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	3332      	adds	r3, #50	; 0x32
 80071ec:	4a3c      	ldr	r2, [pc, #240]	; (80072e0 <UART_SetConfig+0x1c4>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071fa:	4419      	add	r1, r3
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009a      	lsls	r2, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007212:	4b33      	ldr	r3, [pc, #204]	; (80072e0 <UART_SetConfig+0x1c4>)
 8007214:	fba3 0302 	umull	r0, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2064      	movs	r0, #100	; 0x64
 800721c:	fb00 f303 	mul.w	r3, r0, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	3332      	adds	r3, #50	; 0x32
 8007226:	4a2e      	ldr	r2, [pc, #184]	; (80072e0 <UART_SetConfig+0x1c4>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f003 0207 	and.w	r2, r3, #7
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	440a      	add	r2, r1
 8007238:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800723a:	e04a      	b.n	80072d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009a      	lsls	r2, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <UART_SetConfig+0x1c4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	0119      	lsls	r1, r3, #4
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009a      	lsls	r2, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <UART_SetConfig+0x1c4>)
 8007274:	fba3 0302 	umull	r0, r3, r3, r2
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	2064      	movs	r0, #100	; 0x64
 800727c:	fb00 f303 	mul.w	r3, r0, r3
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	3332      	adds	r3, #50	; 0x32
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <UART_SetConfig+0x1c4>)
 8007288:	fba2 2303 	umull	r2, r3, r2, r3
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007292:	4419      	add	r1, r3
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009a      	lsls	r2, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <UART_SetConfig+0x1c4>)
 80072ac:	fba3 0302 	umull	r0, r3, r3, r2
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	2064      	movs	r0, #100	; 0x64
 80072b4:	fb00 f303 	mul.w	r3, r0, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	3332      	adds	r3, #50	; 0x32
 80072be:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <UART_SetConfig+0x1c4>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	440a      	add	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40013800 	.word	0x40013800
 80072e0:	51eb851f 	.word	0x51eb851f

080072e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80072e8:	4904      	ldr	r1, [pc, #16]	; (80072fc <MX_FATFS_Init+0x18>)
 80072ea:	4805      	ldr	r0, [pc, #20]	; (8007300 <MX_FATFS_Init+0x1c>)
 80072ec:	f000 f8ac 	bl	8007448 <FATFS_LinkDriver>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	4b03      	ldr	r3, [pc, #12]	; (8007304 <MX_FATFS_Init+0x20>)
 80072f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20002370 	.word	0x20002370
 8007300:	20000058 	.word	0x20000058
 8007304:	20002374 	.word	0x20002374

08007308 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	4618      	mov	r0, r3
 8007316:	f7f9 fa5f 	bl	80007d8 <SD_disk_initialize>
 800731a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	4618      	mov	r0, r3
 8007332:	f7f9 fb37 	bl	80009a4 <SD_disk_status>
 8007336:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007350:	7bf8      	ldrb	r0, [r7, #15]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	f7f9 fb38 	bl	80009cc <SD_disk_read>
 800735c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007376:	7bf8      	ldrb	r0, [r7, #15]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	f7f9 fb8f 	bl	8000aa0 <SD_disk_write>
 8007382:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	603a      	str	r2, [r7, #0]
 8007396:	71fb      	strb	r3, [r7, #7]
 8007398:	460b      	mov	r3, r1
 800739a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800739c:	79b9      	ldrb	r1, [r7, #6]
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 fc00 	bl	8000ba8 <SD_disk_ioctl>
 80073a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073ca:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073cc:	7a5b      	ldrb	r3, [r3, #9]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d131      	bne.n	8007438 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073d6:	7a5b      	ldrb	r3, [r3, #9]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073de:	2100      	movs	r1, #0
 80073e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80073e2:	4b18      	ldr	r3, [pc, #96]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073e4:	7a5b      	ldrb	r3, [r3, #9]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	4a16      	ldr	r2, [pc, #88]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073f4:	7a5b      	ldrb	r3, [r3, #9]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 80073fc:	4413      	add	r3, r2
 80073fe:	79fa      	ldrb	r2, [r7, #7]
 8007400:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 8007404:	7a5b      	ldrb	r3, [r3, #9]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	b2d1      	uxtb	r1, r2
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <FATFS_LinkDriverEx+0x90>)
 800740e:	7251      	strb	r1, [r2, #9]
 8007410:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007412:	7dbb      	ldrb	r3, [r7, #22]
 8007414:	3330      	adds	r3, #48	; 0x30
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	3301      	adds	r3, #1
 8007420:	223a      	movs	r2, #58	; 0x3a
 8007422:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	3302      	adds	r3, #2
 8007428:	222f      	movs	r2, #47	; 0x2f
 800742a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3303      	adds	r3, #3
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr
 8007444:	200000f4 	.word	0x200000f4

08007448 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007452:	2200      	movs	r2, #0
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff ffac 	bl	80073b4 <FATFS_LinkDriverEx>
 800745c:	4603      	mov	r3, r0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <__errno>:
 8007468:	4b01      	ldr	r3, [pc, #4]	; (8007470 <__errno+0x8>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	2000006c 	.word	0x2000006c

08007474 <exit>:
 8007474:	b508      	push	{r3, lr}
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <exit+0x20>)
 8007478:	4604      	mov	r4, r0
 800747a:	b113      	cbz	r3, 8007482 <exit+0xe>
 800747c:	2100      	movs	r1, #0
 800747e:	f3af 8000 	nop.w
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <exit+0x24>)
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007488:	b103      	cbz	r3, 800748c <exit+0x18>
 800748a:	4798      	blx	r3
 800748c:	4620      	mov	r0, r4
 800748e:	f7fa fbbd 	bl	8001c0c <_exit>
 8007492:	bf00      	nop
 8007494:	00000000 	.word	0x00000000
 8007498:	08007df0 	.word	0x08007df0

0800749c <__libc_init_array>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	2600      	movs	r6, #0
 80074a0:	4d0c      	ldr	r5, [pc, #48]	; (80074d4 <__libc_init_array+0x38>)
 80074a2:	4c0d      	ldr	r4, [pc, #52]	; (80074d8 <__libc_init_array+0x3c>)
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	42a6      	cmp	r6, r4
 80074aa:	d109      	bne.n	80074c0 <__libc_init_array+0x24>
 80074ac:	f000 fc5c 	bl	8007d68 <_init>
 80074b0:	2600      	movs	r6, #0
 80074b2:	4d0a      	ldr	r5, [pc, #40]	; (80074dc <__libc_init_array+0x40>)
 80074b4:	4c0a      	ldr	r4, [pc, #40]	; (80074e0 <__libc_init_array+0x44>)
 80074b6:	1b64      	subs	r4, r4, r5
 80074b8:	10a4      	asrs	r4, r4, #2
 80074ba:	42a6      	cmp	r6, r4
 80074bc:	d105      	bne.n	80074ca <__libc_init_array+0x2e>
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c4:	4798      	blx	r3
 80074c6:	3601      	adds	r6, #1
 80074c8:	e7ee      	b.n	80074a8 <__libc_init_array+0xc>
 80074ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ce:	4798      	blx	r3
 80074d0:	3601      	adds	r6, #1
 80074d2:	e7f2      	b.n	80074ba <__libc_init_array+0x1e>
 80074d4:	08007e30 	.word	0x08007e30
 80074d8:	08007e30 	.word	0x08007e30
 80074dc:	08007e30 	.word	0x08007e30
 80074e0:	08007e34 	.word	0x08007e34

080074e4 <memset>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	4402      	add	r2, r0
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d100      	bne.n	80074ee <memset+0xa>
 80074ec:	4770      	bx	lr
 80074ee:	f803 1b01 	strb.w	r1, [r3], #1
 80074f2:	e7f9      	b.n	80074e8 <memset+0x4>

080074f4 <siprintf>:
 80074f4:	b40e      	push	{r1, r2, r3}
 80074f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074fa:	b500      	push	{lr}
 80074fc:	b09c      	sub	sp, #112	; 0x70
 80074fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007500:	9002      	str	r0, [sp, #8]
 8007502:	9006      	str	r0, [sp, #24]
 8007504:	9107      	str	r1, [sp, #28]
 8007506:	9104      	str	r1, [sp, #16]
 8007508:	4808      	ldr	r0, [pc, #32]	; (800752c <siprintf+0x38>)
 800750a:	4909      	ldr	r1, [pc, #36]	; (8007530 <siprintf+0x3c>)
 800750c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	a902      	add	r1, sp, #8
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	f000 f868 	bl	80075ec <_svfiprintf_r>
 800751c:	2200      	movs	r2, #0
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	b01c      	add	sp, #112	; 0x70
 8007524:	f85d eb04 	ldr.w	lr, [sp], #4
 8007528:	b003      	add	sp, #12
 800752a:	4770      	bx	lr
 800752c:	2000006c 	.word	0x2000006c
 8007530:	ffff0208 	.word	0xffff0208

08007534 <__ssputs_r>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	688e      	ldr	r6, [r1, #8]
 800753a:	4682      	mov	sl, r0
 800753c:	429e      	cmp	r6, r3
 800753e:	460c      	mov	r4, r1
 8007540:	4690      	mov	r8, r2
 8007542:	461f      	mov	r7, r3
 8007544:	d838      	bhi.n	80075b8 <__ssputs_r+0x84>
 8007546:	898a      	ldrh	r2, [r1, #12]
 8007548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800754c:	d032      	beq.n	80075b4 <__ssputs_r+0x80>
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	6909      	ldr	r1, [r1, #16]
 8007552:	3301      	adds	r3, #1
 8007554:	eba5 0901 	sub.w	r9, r5, r1
 8007558:	6965      	ldr	r5, [r4, #20]
 800755a:	444b      	add	r3, r9
 800755c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007564:	106d      	asrs	r5, r5, #1
 8007566:	429d      	cmp	r5, r3
 8007568:	bf38      	it	cc
 800756a:	461d      	movcc	r5, r3
 800756c:	0553      	lsls	r3, r2, #21
 800756e:	d531      	bpl.n	80075d4 <__ssputs_r+0xa0>
 8007570:	4629      	mov	r1, r5
 8007572:	f000 fb53 	bl	8007c1c <_malloc_r>
 8007576:	4606      	mov	r6, r0
 8007578:	b950      	cbnz	r0, 8007590 <__ssputs_r+0x5c>
 800757a:	230c      	movs	r3, #12
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	f8ca 3000 	str.w	r3, [sl]
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	464a      	mov	r2, r9
 8007592:	6921      	ldr	r1, [r4, #16]
 8007594:	f000 face 	bl	8007b34 <memcpy>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800759e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	6126      	str	r6, [r4, #16]
 80075a6:	444e      	add	r6, r9
 80075a8:	6026      	str	r6, [r4, #0]
 80075aa:	463e      	mov	r6, r7
 80075ac:	6165      	str	r5, [r4, #20]
 80075ae:	eba5 0509 	sub.w	r5, r5, r9
 80075b2:	60a5      	str	r5, [r4, #8]
 80075b4:	42be      	cmp	r6, r7
 80075b6:	d900      	bls.n	80075ba <__ssputs_r+0x86>
 80075b8:	463e      	mov	r6, r7
 80075ba:	4632      	mov	r2, r6
 80075bc:	4641      	mov	r1, r8
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	f000 fac6 	bl	8007b50 <memmove>
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	1b9b      	subs	r3, r3, r6
 80075ca:	4432      	add	r2, r6
 80075cc:	2000      	movs	r0, #0
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	6022      	str	r2, [r4, #0]
 80075d2:	e7db      	b.n	800758c <__ssputs_r+0x58>
 80075d4:	462a      	mov	r2, r5
 80075d6:	f000 fb7b 	bl	8007cd0 <_realloc_r>
 80075da:	4606      	mov	r6, r0
 80075dc:	2800      	cmp	r0, #0
 80075de:	d1e1      	bne.n	80075a4 <__ssputs_r+0x70>
 80075e0:	4650      	mov	r0, sl
 80075e2:	6921      	ldr	r1, [r4, #16]
 80075e4:	f000 face 	bl	8007b84 <_free_r>
 80075e8:	e7c7      	b.n	800757a <__ssputs_r+0x46>
	...

080075ec <_svfiprintf_r>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	4698      	mov	r8, r3
 80075f2:	898b      	ldrh	r3, [r1, #12]
 80075f4:	4607      	mov	r7, r0
 80075f6:	061b      	lsls	r3, r3, #24
 80075f8:	460d      	mov	r5, r1
 80075fa:	4614      	mov	r4, r2
 80075fc:	b09d      	sub	sp, #116	; 0x74
 80075fe:	d50e      	bpl.n	800761e <_svfiprintf_r+0x32>
 8007600:	690b      	ldr	r3, [r1, #16]
 8007602:	b963      	cbnz	r3, 800761e <_svfiprintf_r+0x32>
 8007604:	2140      	movs	r1, #64	; 0x40
 8007606:	f000 fb09 	bl	8007c1c <_malloc_r>
 800760a:	6028      	str	r0, [r5, #0]
 800760c:	6128      	str	r0, [r5, #16]
 800760e:	b920      	cbnz	r0, 800761a <_svfiprintf_r+0x2e>
 8007610:	230c      	movs	r3, #12
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	e0d1      	b.n	80077be <_svfiprintf_r+0x1d2>
 800761a:	2340      	movs	r3, #64	; 0x40
 800761c:	616b      	str	r3, [r5, #20]
 800761e:	2300      	movs	r3, #0
 8007620:	9309      	str	r3, [sp, #36]	; 0x24
 8007622:	2320      	movs	r3, #32
 8007624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007628:	2330      	movs	r3, #48	; 0x30
 800762a:	f04f 0901 	mov.w	r9, #1
 800762e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007632:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80077d8 <_svfiprintf_r+0x1ec>
 8007636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800763a:	4623      	mov	r3, r4
 800763c:	469a      	mov	sl, r3
 800763e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007642:	b10a      	cbz	r2, 8007648 <_svfiprintf_r+0x5c>
 8007644:	2a25      	cmp	r2, #37	; 0x25
 8007646:	d1f9      	bne.n	800763c <_svfiprintf_r+0x50>
 8007648:	ebba 0b04 	subs.w	fp, sl, r4
 800764c:	d00b      	beq.n	8007666 <_svfiprintf_r+0x7a>
 800764e:	465b      	mov	r3, fp
 8007650:	4622      	mov	r2, r4
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ff6d 	bl	8007534 <__ssputs_r>
 800765a:	3001      	adds	r0, #1
 800765c:	f000 80aa 	beq.w	80077b4 <_svfiprintf_r+0x1c8>
 8007660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007662:	445a      	add	r2, fp
 8007664:	9209      	str	r2, [sp, #36]	; 0x24
 8007666:	f89a 3000 	ldrb.w	r3, [sl]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a2 	beq.w	80077b4 <_svfiprintf_r+0x1c8>
 8007670:	2300      	movs	r3, #0
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800767a:	f10a 0a01 	add.w	sl, sl, #1
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007686:	931a      	str	r3, [sp, #104]	; 0x68
 8007688:	4654      	mov	r4, sl
 800768a:	2205      	movs	r2, #5
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	4851      	ldr	r0, [pc, #324]	; (80077d8 <_svfiprintf_r+0x1ec>)
 8007692:	f000 fa41 	bl	8007b18 <memchr>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	b9d8      	cbnz	r0, 80076d2 <_svfiprintf_r+0xe6>
 800769a:	06d0      	lsls	r0, r2, #27
 800769c:	bf44      	itt	mi
 800769e:	2320      	movmi	r3, #32
 80076a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a4:	0711      	lsls	r1, r2, #28
 80076a6:	bf44      	itt	mi
 80076a8:	232b      	movmi	r3, #43	; 0x2b
 80076aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ae:	f89a 3000 	ldrb.w	r3, [sl]
 80076b2:	2b2a      	cmp	r3, #42	; 0x2a
 80076b4:	d015      	beq.n	80076e2 <_svfiprintf_r+0xf6>
 80076b6:	4654      	mov	r4, sl
 80076b8:	2000      	movs	r0, #0
 80076ba:	f04f 0c0a 	mov.w	ip, #10
 80076be:	9a07      	ldr	r2, [sp, #28]
 80076c0:	4621      	mov	r1, r4
 80076c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076c6:	3b30      	subs	r3, #48	; 0x30
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d94e      	bls.n	800776a <_svfiprintf_r+0x17e>
 80076cc:	b1b0      	cbz	r0, 80076fc <_svfiprintf_r+0x110>
 80076ce:	9207      	str	r2, [sp, #28]
 80076d0:	e014      	b.n	80076fc <_svfiprintf_r+0x110>
 80076d2:	eba0 0308 	sub.w	r3, r0, r8
 80076d6:	fa09 f303 	lsl.w	r3, r9, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	46a2      	mov	sl, r4
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	e7d2      	b.n	8007688 <_svfiprintf_r+0x9c>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9103      	str	r1, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbb      	ittet	lt
 80076ee:	425b      	neglt	r3, r3
 80076f0:	f042 0202 	orrlt.w	r2, r2, #2
 80076f4:	9307      	strge	r3, [sp, #28]
 80076f6:	9307      	strlt	r3, [sp, #28]
 80076f8:	bfb8      	it	lt
 80076fa:	9204      	strlt	r2, [sp, #16]
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007700:	d10c      	bne.n	800771c <_svfiprintf_r+0x130>
 8007702:	7863      	ldrb	r3, [r4, #1]
 8007704:	2b2a      	cmp	r3, #42	; 0x2a
 8007706:	d135      	bne.n	8007774 <_svfiprintf_r+0x188>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	3402      	adds	r4, #2
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	9203      	str	r2, [sp, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfb8      	it	lt
 8007716:	f04f 33ff 	movlt.w	r3, #4294967295
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077e8 <_svfiprintf_r+0x1fc>
 8007720:	2203      	movs	r2, #3
 8007722:	4650      	mov	r0, sl
 8007724:	7821      	ldrb	r1, [r4, #0]
 8007726:	f000 f9f7 	bl	8007b18 <memchr>
 800772a:	b140      	cbz	r0, 800773e <_svfiprintf_r+0x152>
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	eba0 000a 	sub.w	r0, r0, sl
 8007732:	fa03 f000 	lsl.w	r0, r3, r0
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	3401      	adds	r4, #1
 800773a:	4303      	orrs	r3, r0
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	2206      	movs	r2, #6
 8007744:	4825      	ldr	r0, [pc, #148]	; (80077dc <_svfiprintf_r+0x1f0>)
 8007746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800774a:	f000 f9e5 	bl	8007b18 <memchr>
 800774e:	2800      	cmp	r0, #0
 8007750:	d038      	beq.n	80077c4 <_svfiprintf_r+0x1d8>
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <_svfiprintf_r+0x1f4>)
 8007754:	bb1b      	cbnz	r3, 800779e <_svfiprintf_r+0x1b2>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	3307      	adds	r3, #7
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	3308      	adds	r3, #8
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	4433      	add	r3, r6
 8007766:	9309      	str	r3, [sp, #36]	; 0x24
 8007768:	e767      	b.n	800763a <_svfiprintf_r+0x4e>
 800776a:	460c      	mov	r4, r1
 800776c:	2001      	movs	r0, #1
 800776e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007772:	e7a5      	b.n	80076c0 <_svfiprintf_r+0xd4>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 0c0a 	mov.w	ip, #10
 800777a:	4619      	mov	r1, r3
 800777c:	3401      	adds	r4, #1
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4620      	mov	r0, r4
 8007782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007786:	3a30      	subs	r2, #48	; 0x30
 8007788:	2a09      	cmp	r2, #9
 800778a:	d903      	bls.n	8007794 <_svfiprintf_r+0x1a8>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0c5      	beq.n	800771c <_svfiprintf_r+0x130>
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	e7c3      	b.n	800771c <_svfiprintf_r+0x130>
 8007794:	4604      	mov	r4, r0
 8007796:	2301      	movs	r3, #1
 8007798:	fb0c 2101 	mla	r1, ip, r1, r2
 800779c:	e7f0      	b.n	8007780 <_svfiprintf_r+0x194>
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <_svfiprintf_r+0x1f8>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	f3af 8000 	nop.w
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	4606      	mov	r6, r0
 80077b2:	d1d6      	bne.n	8007762 <_svfiprintf_r+0x176>
 80077b4:	89ab      	ldrh	r3, [r5, #12]
 80077b6:	065b      	lsls	r3, r3, #25
 80077b8:	f53f af2c 	bmi.w	8007614 <_svfiprintf_r+0x28>
 80077bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077be:	b01d      	add	sp, #116	; 0x74
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4638      	mov	r0, r7
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <_svfiprintf_r+0x1f8>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	f000 f87c 	bl	80078cc <_printf_i>
 80077d4:	e7eb      	b.n	80077ae <_svfiprintf_r+0x1c2>
 80077d6:	bf00      	nop
 80077d8:	08007df4 	.word	0x08007df4
 80077dc:	08007dfe 	.word	0x08007dfe
 80077e0:	00000000 	.word	0x00000000
 80077e4:	08007535 	.word	0x08007535
 80077e8:	08007dfa 	.word	0x08007dfa

080077ec <_printf_common>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	4616      	mov	r6, r2
 80077f2:	4699      	mov	r9, r3
 80077f4:	688a      	ldr	r2, [r1, #8]
 80077f6:	690b      	ldr	r3, [r1, #16]
 80077f8:	4607      	mov	r7, r0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bfb8      	it	lt
 80077fe:	4613      	movlt	r3, r2
 8007800:	6033      	str	r3, [r6, #0]
 8007802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007806:	460c      	mov	r4, r1
 8007808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800780c:	b10a      	cbz	r2, 8007812 <_printf_common+0x26>
 800780e:	3301      	adds	r3, #1
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	0699      	lsls	r1, r3, #26
 8007816:	bf42      	ittt	mi
 8007818:	6833      	ldrmi	r3, [r6, #0]
 800781a:	3302      	addmi	r3, #2
 800781c:	6033      	strmi	r3, [r6, #0]
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	f015 0506 	ands.w	r5, r5, #6
 8007824:	d106      	bne.n	8007834 <_printf_common+0x48>
 8007826:	f104 0a19 	add.w	sl, r4, #25
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	6832      	ldr	r2, [r6, #0]
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	42ab      	cmp	r3, r5
 8007832:	dc28      	bgt.n	8007886 <_printf_common+0x9a>
 8007834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007838:	1e13      	subs	r3, r2, #0
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	bf18      	it	ne
 800783e:	2301      	movne	r3, #1
 8007840:	0692      	lsls	r2, r2, #26
 8007842:	d42d      	bmi.n	80078a0 <_printf_common+0xb4>
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800784c:	47c0      	blx	r8
 800784e:	3001      	adds	r0, #1
 8007850:	d020      	beq.n	8007894 <_printf_common+0xa8>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	68e5      	ldr	r5, [r4, #12]
 8007856:	f003 0306 	and.w	r3, r3, #6
 800785a:	2b04      	cmp	r3, #4
 800785c:	bf18      	it	ne
 800785e:	2500      	movne	r5, #0
 8007860:	6832      	ldr	r2, [r6, #0]
 8007862:	f04f 0600 	mov.w	r6, #0
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	bf08      	it	eq
 800786a:	1aad      	subeq	r5, r5, r2
 800786c:	6922      	ldr	r2, [r4, #16]
 800786e:	bf08      	it	eq
 8007870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007874:	4293      	cmp	r3, r2
 8007876:	bfc4      	itt	gt
 8007878:	1a9b      	subgt	r3, r3, r2
 800787a:	18ed      	addgt	r5, r5, r3
 800787c:	341a      	adds	r4, #26
 800787e:	42b5      	cmp	r5, r6
 8007880:	d11a      	bne.n	80078b8 <_printf_common+0xcc>
 8007882:	2000      	movs	r0, #0
 8007884:	e008      	b.n	8007898 <_printf_common+0xac>
 8007886:	2301      	movs	r3, #1
 8007888:	4652      	mov	r2, sl
 800788a:	4649      	mov	r1, r9
 800788c:	4638      	mov	r0, r7
 800788e:	47c0      	blx	r8
 8007890:	3001      	adds	r0, #1
 8007892:	d103      	bne.n	800789c <_printf_common+0xb0>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789c:	3501      	adds	r5, #1
 800789e:	e7c4      	b.n	800782a <_printf_common+0x3e>
 80078a0:	2030      	movs	r0, #48	; 0x30
 80078a2:	18e1      	adds	r1, r4, r3
 80078a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ae:	4422      	add	r2, r4
 80078b0:	3302      	adds	r3, #2
 80078b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078b6:	e7c5      	b.n	8007844 <_printf_common+0x58>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4622      	mov	r2, r4
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d0e6      	beq.n	8007894 <_printf_common+0xa8>
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7d9      	b.n	800787e <_printf_common+0x92>
	...

080078cc <_printf_i>:
 80078cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	460c      	mov	r4, r1
 80078d2:	7e27      	ldrb	r7, [r4, #24]
 80078d4:	4691      	mov	r9, r2
 80078d6:	2f78      	cmp	r7, #120	; 0x78
 80078d8:	4680      	mov	r8, r0
 80078da:	469a      	mov	sl, r3
 80078dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e2:	d807      	bhi.n	80078f4 <_printf_i+0x28>
 80078e4:	2f62      	cmp	r7, #98	; 0x62
 80078e6:	d80a      	bhi.n	80078fe <_printf_i+0x32>
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	f000 80d9 	beq.w	8007aa0 <_printf_i+0x1d4>
 80078ee:	2f58      	cmp	r7, #88	; 0x58
 80078f0:	f000 80a4 	beq.w	8007a3c <_printf_i+0x170>
 80078f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078fc:	e03a      	b.n	8007974 <_printf_i+0xa8>
 80078fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007902:	2b15      	cmp	r3, #21
 8007904:	d8f6      	bhi.n	80078f4 <_printf_i+0x28>
 8007906:	a001      	add	r0, pc, #4	; (adr r0, 800790c <_printf_i+0x40>)
 8007908:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800790c:	08007965 	.word	0x08007965
 8007910:	08007979 	.word	0x08007979
 8007914:	080078f5 	.word	0x080078f5
 8007918:	080078f5 	.word	0x080078f5
 800791c:	080078f5 	.word	0x080078f5
 8007920:	080078f5 	.word	0x080078f5
 8007924:	08007979 	.word	0x08007979
 8007928:	080078f5 	.word	0x080078f5
 800792c:	080078f5 	.word	0x080078f5
 8007930:	080078f5 	.word	0x080078f5
 8007934:	080078f5 	.word	0x080078f5
 8007938:	08007a87 	.word	0x08007a87
 800793c:	080079a9 	.word	0x080079a9
 8007940:	08007a69 	.word	0x08007a69
 8007944:	080078f5 	.word	0x080078f5
 8007948:	080078f5 	.word	0x080078f5
 800794c:	08007aa9 	.word	0x08007aa9
 8007950:	080078f5 	.word	0x080078f5
 8007954:	080079a9 	.word	0x080079a9
 8007958:	080078f5 	.word	0x080078f5
 800795c:	080078f5 	.word	0x080078f5
 8007960:	08007a71 	.word	0x08007a71
 8007964:	680b      	ldr	r3, [r1, #0]
 8007966:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800796a:	1d1a      	adds	r2, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	600a      	str	r2, [r1, #0]
 8007970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007974:	2301      	movs	r3, #1
 8007976:	e0a4      	b.n	8007ac2 <_printf_i+0x1f6>
 8007978:	6825      	ldr	r5, [r4, #0]
 800797a:	6808      	ldr	r0, [r1, #0]
 800797c:	062e      	lsls	r6, r5, #24
 800797e:	f100 0304 	add.w	r3, r0, #4
 8007982:	d50a      	bpl.n	800799a <_printf_i+0xce>
 8007984:	6805      	ldr	r5, [r0, #0]
 8007986:	600b      	str	r3, [r1, #0]
 8007988:	2d00      	cmp	r5, #0
 800798a:	da03      	bge.n	8007994 <_printf_i+0xc8>
 800798c:	232d      	movs	r3, #45	; 0x2d
 800798e:	426d      	negs	r5, r5
 8007990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007994:	230a      	movs	r3, #10
 8007996:	485e      	ldr	r0, [pc, #376]	; (8007b10 <_printf_i+0x244>)
 8007998:	e019      	b.n	80079ce <_printf_i+0x102>
 800799a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800799e:	6805      	ldr	r5, [r0, #0]
 80079a0:	600b      	str	r3, [r1, #0]
 80079a2:	bf18      	it	ne
 80079a4:	b22d      	sxthne	r5, r5
 80079a6:	e7ef      	b.n	8007988 <_printf_i+0xbc>
 80079a8:	680b      	ldr	r3, [r1, #0]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	1d18      	adds	r0, r3, #4
 80079ae:	6008      	str	r0, [r1, #0]
 80079b0:	0628      	lsls	r0, r5, #24
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0xec>
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	e002      	b.n	80079be <_printf_i+0xf2>
 80079b8:	0669      	lsls	r1, r5, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0xe8>
 80079bc:	881d      	ldrh	r5, [r3, #0]
 80079be:	2f6f      	cmp	r7, #111	; 0x6f
 80079c0:	bf0c      	ite	eq
 80079c2:	2308      	moveq	r3, #8
 80079c4:	230a      	movne	r3, #10
 80079c6:	4852      	ldr	r0, [pc, #328]	; (8007b10 <_printf_i+0x244>)
 80079c8:	2100      	movs	r1, #0
 80079ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ce:	6866      	ldr	r6, [r4, #4]
 80079d0:	2e00      	cmp	r6, #0
 80079d2:	bfa8      	it	ge
 80079d4:	6821      	ldrge	r1, [r4, #0]
 80079d6:	60a6      	str	r6, [r4, #8]
 80079d8:	bfa4      	itt	ge
 80079da:	f021 0104 	bicge.w	r1, r1, #4
 80079de:	6021      	strge	r1, [r4, #0]
 80079e0:	b90d      	cbnz	r5, 80079e6 <_printf_i+0x11a>
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	d04d      	beq.n	8007a82 <_printf_i+0x1b6>
 80079e6:	4616      	mov	r6, r2
 80079e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ec:	fb03 5711 	mls	r7, r3, r1, r5
 80079f0:	5dc7      	ldrb	r7, [r0, r7]
 80079f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079f6:	462f      	mov	r7, r5
 80079f8:	42bb      	cmp	r3, r7
 80079fa:	460d      	mov	r5, r1
 80079fc:	d9f4      	bls.n	80079e8 <_printf_i+0x11c>
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d10b      	bne.n	8007a1a <_printf_i+0x14e>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	07df      	lsls	r7, r3, #31
 8007a06:	d508      	bpl.n	8007a1a <_printf_i+0x14e>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	6861      	ldr	r1, [r4, #4]
 8007a0c:	4299      	cmp	r1, r3
 8007a0e:	bfde      	ittt	le
 8007a10:	2330      	movle	r3, #48	; 0x30
 8007a12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a1a:	1b92      	subs	r2, r2, r6
 8007a1c:	6122      	str	r2, [r4, #16]
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4621      	mov	r1, r4
 8007a22:	4640      	mov	r0, r8
 8007a24:	f8cd a000 	str.w	sl, [sp]
 8007a28:	aa03      	add	r2, sp, #12
 8007a2a:	f7ff fedf 	bl	80077ec <_printf_common>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d14c      	bne.n	8007acc <_printf_i+0x200>
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	b004      	add	sp, #16
 8007a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3c:	4834      	ldr	r0, [pc, #208]	; (8007b10 <_printf_i+0x244>)
 8007a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a42:	680e      	ldr	r6, [r1, #0]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a4a:	061f      	lsls	r7, r3, #24
 8007a4c:	600e      	str	r6, [r1, #0]
 8007a4e:	d514      	bpl.n	8007a7a <_printf_i+0x1ae>
 8007a50:	07d9      	lsls	r1, r3, #31
 8007a52:	bf44      	itt	mi
 8007a54:	f043 0320 	orrmi.w	r3, r3, #32
 8007a58:	6023      	strmi	r3, [r4, #0]
 8007a5a:	b91d      	cbnz	r5, 8007a64 <_printf_i+0x198>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	f023 0320 	bic.w	r3, r3, #32
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	2310      	movs	r3, #16
 8007a66:	e7af      	b.n	80079c8 <_printf_i+0xfc>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	f043 0320 	orr.w	r3, r3, #32
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	2378      	movs	r3, #120	; 0x78
 8007a72:	4828      	ldr	r0, [pc, #160]	; (8007b14 <_printf_i+0x248>)
 8007a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a78:	e7e3      	b.n	8007a42 <_printf_i+0x176>
 8007a7a:	065e      	lsls	r6, r3, #25
 8007a7c:	bf48      	it	mi
 8007a7e:	b2ad      	uxthmi	r5, r5
 8007a80:	e7e6      	b.n	8007a50 <_printf_i+0x184>
 8007a82:	4616      	mov	r6, r2
 8007a84:	e7bb      	b.n	80079fe <_printf_i+0x132>
 8007a86:	680b      	ldr	r3, [r1, #0]
 8007a88:	6826      	ldr	r6, [r4, #0]
 8007a8a:	1d1d      	adds	r5, r3, #4
 8007a8c:	6960      	ldr	r0, [r4, #20]
 8007a8e:	600d      	str	r5, [r1, #0]
 8007a90:	0635      	lsls	r5, r6, #24
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	d501      	bpl.n	8007a9a <_printf_i+0x1ce>
 8007a96:	6018      	str	r0, [r3, #0]
 8007a98:	e002      	b.n	8007aa0 <_printf_i+0x1d4>
 8007a9a:	0671      	lsls	r1, r6, #25
 8007a9c:	d5fb      	bpl.n	8007a96 <_printf_i+0x1ca>
 8007a9e:	8018      	strh	r0, [r3, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4616      	mov	r6, r2
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	e7ba      	b.n	8007a1e <_printf_i+0x152>
 8007aa8:	680b      	ldr	r3, [r1, #0]
 8007aaa:	1d1a      	adds	r2, r3, #4
 8007aac:	600a      	str	r2, [r1, #0]
 8007aae:	681e      	ldr	r6, [r3, #0]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	f000 f82f 	bl	8007b18 <memchr>
 8007aba:	b108      	cbz	r0, 8007ac0 <_printf_i+0x1f4>
 8007abc:	1b80      	subs	r0, r0, r6
 8007abe:	6060      	str	r0, [r4, #4]
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aca:	e7a8      	b.n	8007a1e <_printf_i+0x152>
 8007acc:	4632      	mov	r2, r6
 8007ace:	4649      	mov	r1, r9
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	47d0      	blx	sl
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d0ab      	beq.n	8007a32 <_printf_i+0x166>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	079b      	lsls	r3, r3, #30
 8007ade:	d413      	bmi.n	8007b08 <_printf_i+0x23c>
 8007ae0:	68e0      	ldr	r0, [r4, #12]
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	bfb8      	it	lt
 8007ae8:	4618      	movlt	r0, r3
 8007aea:	e7a4      	b.n	8007a36 <_printf_i+0x16a>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4632      	mov	r2, r6
 8007af0:	4649      	mov	r1, r9
 8007af2:	4640      	mov	r0, r8
 8007af4:	47d0      	blx	sl
 8007af6:	3001      	adds	r0, #1
 8007af8:	d09b      	beq.n	8007a32 <_printf_i+0x166>
 8007afa:	3501      	adds	r5, #1
 8007afc:	68e3      	ldr	r3, [r4, #12]
 8007afe:	9903      	ldr	r1, [sp, #12]
 8007b00:	1a5b      	subs	r3, r3, r1
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	dcf2      	bgt.n	8007aec <_printf_i+0x220>
 8007b06:	e7eb      	b.n	8007ae0 <_printf_i+0x214>
 8007b08:	2500      	movs	r5, #0
 8007b0a:	f104 0619 	add.w	r6, r4, #25
 8007b0e:	e7f5      	b.n	8007afc <_printf_i+0x230>
 8007b10:	08007e05 	.word	0x08007e05
 8007b14:	08007e16 	.word	0x08007e16

08007b18 <memchr>:
 8007b18:	4603      	mov	r3, r0
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	b2c9      	uxtb	r1, r1
 8007b1e:	4402      	add	r2, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	d101      	bne.n	8007b2a <memchr+0x12>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e003      	b.n	8007b32 <memchr+0x1a>
 8007b2a:	7804      	ldrb	r4, [r0, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	428c      	cmp	r4, r1
 8007b30:	d1f6      	bne.n	8007b20 <memchr+0x8>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <memcpy>:
 8007b34:	440a      	add	r2, r1
 8007b36:	4291      	cmp	r1, r2
 8007b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b3c:	d100      	bne.n	8007b40 <memcpy+0xc>
 8007b3e:	4770      	bx	lr
 8007b40:	b510      	push	{r4, lr}
 8007b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b46:	4291      	cmp	r1, r2
 8007b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4c:	d1f9      	bne.n	8007b42 <memcpy+0xe>
 8007b4e:	bd10      	pop	{r4, pc}

08007b50 <memmove>:
 8007b50:	4288      	cmp	r0, r1
 8007b52:	b510      	push	{r4, lr}
 8007b54:	eb01 0402 	add.w	r4, r1, r2
 8007b58:	d902      	bls.n	8007b60 <memmove+0x10>
 8007b5a:	4284      	cmp	r4, r0
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	d807      	bhi.n	8007b70 <memmove+0x20>
 8007b60:	1e43      	subs	r3, r0, #1
 8007b62:	42a1      	cmp	r1, r4
 8007b64:	d008      	beq.n	8007b78 <memmove+0x28>
 8007b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b6e:	e7f8      	b.n	8007b62 <memmove+0x12>
 8007b70:	4601      	mov	r1, r0
 8007b72:	4402      	add	r2, r0
 8007b74:	428a      	cmp	r2, r1
 8007b76:	d100      	bne.n	8007b7a <memmove+0x2a>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b82:	e7f7      	b.n	8007b74 <memmove+0x24>

08007b84 <_free_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4605      	mov	r5, r0
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d043      	beq.n	8007c14 <_free_r+0x90>
 8007b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b90:	1f0c      	subs	r4, r1, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfb8      	it	lt
 8007b96:	18e4      	addlt	r4, r4, r3
 8007b98:	f000 f8d0 	bl	8007d3c <__malloc_lock>
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <_free_r+0x94>)
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	b933      	cbnz	r3, 8007bb2 <_free_r+0x2e>
 8007ba4:	6063      	str	r3, [r4, #4]
 8007ba6:	6014      	str	r4, [r2, #0]
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f000 b8cb 	b.w	8007d48 <__malloc_unlock>
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	d90a      	bls.n	8007bcc <_free_r+0x48>
 8007bb6:	6821      	ldr	r1, [r4, #0]
 8007bb8:	1862      	adds	r2, r4, r1
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bf01      	itttt	eq
 8007bbe:	681a      	ldreq	r2, [r3, #0]
 8007bc0:	685b      	ldreq	r3, [r3, #4]
 8007bc2:	1852      	addeq	r2, r2, r1
 8007bc4:	6022      	streq	r2, [r4, #0]
 8007bc6:	6063      	str	r3, [r4, #4]
 8007bc8:	6004      	str	r4, [r0, #0]
 8007bca:	e7ed      	b.n	8007ba8 <_free_r+0x24>
 8007bcc:	461a      	mov	r2, r3
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	b10b      	cbz	r3, 8007bd6 <_free_r+0x52>
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	d9fa      	bls.n	8007bcc <_free_r+0x48>
 8007bd6:	6811      	ldr	r1, [r2, #0]
 8007bd8:	1850      	adds	r0, r2, r1
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	d10b      	bne.n	8007bf6 <_free_r+0x72>
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	4401      	add	r1, r0
 8007be2:	1850      	adds	r0, r2, r1
 8007be4:	4283      	cmp	r3, r0
 8007be6:	6011      	str	r1, [r2, #0]
 8007be8:	d1de      	bne.n	8007ba8 <_free_r+0x24>
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4401      	add	r1, r0
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	6053      	str	r3, [r2, #4]
 8007bf4:	e7d8      	b.n	8007ba8 <_free_r+0x24>
 8007bf6:	d902      	bls.n	8007bfe <_free_r+0x7a>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	e7d4      	b.n	8007ba8 <_free_r+0x24>
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	1821      	adds	r1, r4, r0
 8007c02:	428b      	cmp	r3, r1
 8007c04:	bf01      	itttt	eq
 8007c06:	6819      	ldreq	r1, [r3, #0]
 8007c08:	685b      	ldreq	r3, [r3, #4]
 8007c0a:	1809      	addeq	r1, r1, r0
 8007c0c:	6021      	streq	r1, [r4, #0]
 8007c0e:	6063      	str	r3, [r4, #4]
 8007c10:	6054      	str	r4, [r2, #4]
 8007c12:	e7c9      	b.n	8007ba8 <_free_r+0x24>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	20000100 	.word	0x20000100

08007c1c <_malloc_r>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	1ccd      	adds	r5, r1, #3
 8007c20:	f025 0503 	bic.w	r5, r5, #3
 8007c24:	3508      	adds	r5, #8
 8007c26:	2d0c      	cmp	r5, #12
 8007c28:	bf38      	it	cc
 8007c2a:	250c      	movcc	r5, #12
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	4606      	mov	r6, r0
 8007c30:	db01      	blt.n	8007c36 <_malloc_r+0x1a>
 8007c32:	42a9      	cmp	r1, r5
 8007c34:	d903      	bls.n	8007c3e <_malloc_r+0x22>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6033      	str	r3, [r6, #0]
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3e:	f000 f87d 	bl	8007d3c <__malloc_lock>
 8007c42:	4921      	ldr	r1, [pc, #132]	; (8007cc8 <_malloc_r+0xac>)
 8007c44:	680a      	ldr	r2, [r1, #0]
 8007c46:	4614      	mov	r4, r2
 8007c48:	b99c      	cbnz	r4, 8007c72 <_malloc_r+0x56>
 8007c4a:	4f20      	ldr	r7, [pc, #128]	; (8007ccc <_malloc_r+0xb0>)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	b923      	cbnz	r3, 8007c5a <_malloc_r+0x3e>
 8007c50:	4621      	mov	r1, r4
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 f862 	bl	8007d1c <_sbrk_r>
 8007c58:	6038      	str	r0, [r7, #0]
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 f85d 	bl	8007d1c <_sbrk_r>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d123      	bne.n	8007cae <_malloc_r+0x92>
 8007c66:	230c      	movs	r3, #12
 8007c68:	4630      	mov	r0, r6
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f000 f86c 	bl	8007d48 <__malloc_unlock>
 8007c70:	e7e3      	b.n	8007c3a <_malloc_r+0x1e>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	1b5b      	subs	r3, r3, r5
 8007c76:	d417      	bmi.n	8007ca8 <_malloc_r+0x8c>
 8007c78:	2b0b      	cmp	r3, #11
 8007c7a:	d903      	bls.n	8007c84 <_malloc_r+0x68>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	441c      	add	r4, r3
 8007c80:	6025      	str	r5, [r4, #0]
 8007c82:	e004      	b.n	8007c8e <_malloc_r+0x72>
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	42a2      	cmp	r2, r4
 8007c88:	bf0c      	ite	eq
 8007c8a:	600b      	streq	r3, [r1, #0]
 8007c8c:	6053      	strne	r3, [r2, #4]
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f000 f85a 	bl	8007d48 <__malloc_unlock>
 8007c94:	f104 000b 	add.w	r0, r4, #11
 8007c98:	1d23      	adds	r3, r4, #4
 8007c9a:	f020 0007 	bic.w	r0, r0, #7
 8007c9e:	1ac2      	subs	r2, r0, r3
 8007ca0:	d0cc      	beq.n	8007c3c <_malloc_r+0x20>
 8007ca2:	1a1b      	subs	r3, r3, r0
 8007ca4:	50a3      	str	r3, [r4, r2]
 8007ca6:	e7c9      	b.n	8007c3c <_malloc_r+0x20>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	6864      	ldr	r4, [r4, #4]
 8007cac:	e7cc      	b.n	8007c48 <_malloc_r+0x2c>
 8007cae:	1cc4      	adds	r4, r0, #3
 8007cb0:	f024 0403 	bic.w	r4, r4, #3
 8007cb4:	42a0      	cmp	r0, r4
 8007cb6:	d0e3      	beq.n	8007c80 <_malloc_r+0x64>
 8007cb8:	1a21      	subs	r1, r4, r0
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 f82e 	bl	8007d1c <_sbrk_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d1dd      	bne.n	8007c80 <_malloc_r+0x64>
 8007cc4:	e7cf      	b.n	8007c66 <_malloc_r+0x4a>
 8007cc6:	bf00      	nop
 8007cc8:	20000100 	.word	0x20000100
 8007ccc:	20000104 	.word	0x20000104

08007cd0 <_realloc_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	460e      	mov	r6, r1
 8007cd8:	b921      	cbnz	r1, 8007ce4 <_realloc_r+0x14>
 8007cda:	4611      	mov	r1, r2
 8007cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ce0:	f7ff bf9c 	b.w	8007c1c <_malloc_r>
 8007ce4:	b922      	cbnz	r2, 8007cf0 <_realloc_r+0x20>
 8007ce6:	f7ff ff4d 	bl	8007b84 <_free_r>
 8007cea:	4625      	mov	r5, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf0:	f000 f830 	bl	8007d54 <_malloc_usable_size_r>
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d20f      	bcs.n	8007d18 <_realloc_r+0x48>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7ff ff8e 	bl	8007c1c <_malloc_r>
 8007d00:	4605      	mov	r5, r0
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d0f2      	beq.n	8007cec <_realloc_r+0x1c>
 8007d06:	4631      	mov	r1, r6
 8007d08:	4622      	mov	r2, r4
 8007d0a:	f7ff ff13 	bl	8007b34 <memcpy>
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7ff ff37 	bl	8007b84 <_free_r>
 8007d16:	e7e9      	b.n	8007cec <_realloc_r+0x1c>
 8007d18:	4635      	mov	r5, r6
 8007d1a:	e7e7      	b.n	8007cec <_realloc_r+0x1c>

08007d1c <_sbrk_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4d05      	ldr	r5, [pc, #20]	; (8007d38 <_sbrk_r+0x1c>)
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7f9 ff7a 	bl	8001c20 <_sbrk>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_sbrk_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_sbrk_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	200043e0 	.word	0x200043e0

08007d3c <__malloc_lock>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__malloc_lock+0x8>)
 8007d3e:	f000 b811 	b.w	8007d64 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	200043e8 	.word	0x200043e8

08007d48 <__malloc_unlock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_unlock+0x8>)
 8007d4a:	f000 b80c 	b.w	8007d66 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200043e8 	.word	0x200043e8

08007d54 <_malloc_usable_size_r>:
 8007d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d58:	1f18      	subs	r0, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfbc      	itt	lt
 8007d5e:	580b      	ldrlt	r3, [r1, r0]
 8007d60:	18c0      	addlt	r0, r0, r3
 8007d62:	4770      	bx	lr

08007d64 <__retarget_lock_acquire_recursive>:
 8007d64:	4770      	bx	lr

08007d66 <__retarget_lock_release_recursive>:
 8007d66:	4770      	bx	lr

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
